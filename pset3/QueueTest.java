package pset3;
import org.junit.Test;
import static org.junit.Assert.*;
public class QueueTest {
    @Test
    public void test0() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.enqueue(-613647601);
		variable.enqueue(1945002173);
		variable.enqueue(321237028);
		assertFalse(variable.isFull());
		variable.toString();
		variable.isFull();
		variable.enqueue(-922352011);
    }
    @Test
    public void test1() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test2() {
		Queue x = new Queue();
		x.enqueue(2044337994);
		x.toString();
		x.isFull();
		assertEquals(2044337994, x.dequeue());
		x.dequeue();
		x.enqueue(-1446258130);
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.enqueue(-1679781497);
		x.isFull();
    }
    @Test
    public void test3() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.enqueue(462029077);
		y.dequeue();
		y.enqueue(-1084917023);
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.enqueue(217442262);
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test4() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test5() {
		Queue x = new Queue();
		x.enqueue(-1977806964);
		x.enqueue(1814958244);
		assertFalse(x.isEmpty());
		x.enqueue(-1062460981);
		x.toString();
		x.enqueue(417975890);
		x.isEmpty();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test6() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.toString();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.enqueue(-2012235925);
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isFull();
		Var.enqueue(181568199);
    }
    @Test
    public void test7() {
		Queue variable = new Queue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-252705896);
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(1670243413);
		assertFalse(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test8() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(1606544260);
		Var.enqueue(170989606);
		Var.enqueue(-545858013);
		Var.isEmpty();
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test9() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		y.toString();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test10() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-124252693);
		x.isEmpty();
		x.dequeue();
		x.toString();
		x.enqueue(-1891924164);
		x.isFull();
    }
    @Test
    public void test11() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(1831166633);
		z.enqueue(2095442900);
		z.enqueue(1681955126);
    }
    @Test
    public void test12() {
		Queue Var = new Queue();
		Var.enqueue(749088555);
		assertEquals("[749088555]", Var.toString());
		Var.enqueue(939571202);
		assertEquals("[749088555, 939571202]", Var.toString());
		assertEquals(749088555, Var.dequeue());
		Var.enqueue(-1251029200);
		Var.isFull();
		Var.enqueue(1359831661);
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test13() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test14() {
		Queue Var = new Queue();
		Var.enqueue(525118796);
		assertFalse(Var.isFull());
		assertFalse(Var.isEmpty());
		assertEquals("[525118796]", Var.toString());
		assertEquals("[525118796]", Var.toString());
		Var.toString();
		Var.enqueue(1236034770);
		Var.enqueue(1471131082);
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test15() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(1570838);
		assertFalse(x.isFull());
		x.dequeue();
		x.dequeue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test16() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isEmpty();
		Var.enqueue(-860458833);
		Var.isFull();
		Var.enqueue(-456066554);
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test17() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test18() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.enqueue(657833352);
		assertFalse(x.isEmpty());
		assertEquals(657833352, x.dequeue());
		assertEquals("[]", x.toString());
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test19() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(-556817706);
		y.isFull();
		y.isEmpty();
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(-1711289493);
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test20() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		variable.enqueue(-1952272859);
    }
    @Test
    public void test21() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test22() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(1311092709);
		variable.enqueue(-849232465);
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isEmpty();
		variable.enqueue(1504321163);
		variable.enqueue(-1828078270);
		variable.toString();
    }
    @Test
    public void test23() {
		Queue x = new Queue();
		x.enqueue(-1820963259);
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
		x.isFull();
		x.enqueue(-1828925640);
		x.toString();
		x.enqueue(1380526147);
		x.dequeue();
		x.toString();
		x.enqueue(-1952944286);
    }
    @Test
    public void test24() {
		Queue z = new Queue();
		z.enqueue(-873458133);
		z.toString();
		z.toString();
		assertTrue(z.isEmpty());
		z.isFull();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.enqueue(-334112627);
		z.enqueue(-2032736511);
		z.enqueue(-1088577968);
    }
    @Test
    public void test25() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test26() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test27() {
		Queue z = new Queue();
		z.enqueue(2056445371);
		assertEquals("[2056445371]", z.toString());
		z.isEmpty();
		z.enqueue(1482285229);
		z.toString();
		assertFalse(z.isEmpty());
		assertEquals(2056445371, z.dequeue());
		assertFalse(z.isEmpty());
		z.enqueue(-1762374472);
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(-1456152279);
    }
    @Test
    public void test28() {
		Queue Var = new Queue();
		Var.enqueue(154735665);
		Var.isEmpty();
		Var.enqueue(-1966603237);
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(469133691);
    }
    @Test
    public void test29() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-1517084977);
		y.toString();
		y.toString();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test30() {
		Queue variable = new Queue();
		variable.enqueue(1689678683);
		assertFalse(variable.isFull());
		variable.isFull();
		assertEquals("[1689678683]", variable.toString());
		assertEquals(1689678683, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test31() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test32() {
		Queue y = new Queue();
		y.enqueue(1681947683);
		y.isFull();
		y.isFull();
		assertEquals("[1681947683]", y.toString());
		assertEquals("[1681947683]", y.toString());
		y.toString();
    }
    @Test
    public void test33() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test34() {
		Queue variable = new Queue();
		variable.enqueue(480148439);
		variable.isFull();
    }
    @Test
    public void test35() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1933038674);
		variable.enqueue(1028888043);
    }
    @Test
    public void test36() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(262951525);
		Var.toString();
    }
    @Test
    public void test37() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(1174346264);
		variable.isEmpty();
		assertEquals("[1174346264]", variable.toString());
		assertFalse(variable.isEmpty());
		variable.isFull();
		variable.enqueue(1645592720);
		variable.enqueue(203585009);
		variable.enqueue(987441154);
		variable.isFull();
    }
    @Test
    public void test38() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-1194449786);
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertFalse(z.isFull());
		z.dequeue();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test39() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(550990143);
		Var.enqueue(664359218);
    }
    @Test
    public void test40() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(2055817441);
		variable.isFull();
		variable.toString();
		variable.isFull();
		assertEquals(2055817441, variable.dequeue());
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test41() {
		Queue y = new Queue();
		y.enqueue(728813297);
		y.dequeue();
		y.isFull();
		y.enqueue(400984636);
		assertEquals(400984636, y.dequeue());
		y.isFull();
		y.toString();
    }
    @Test
    public void test42() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.isFull();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(1125711360);
		assertEquals("[1125711360]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test43() {
		Queue y = new Queue();
		y.enqueue(695427094);
		y.toString();
		y.isEmpty();
		y.toString();
		y.enqueue(-1984550984);
		y.dequeue();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test44() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test45() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test46() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test47() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test48() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test49() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.toString();
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.enqueue(827054791);
		assertFalse(z.isFull());
		z.toString();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test50() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test51() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-2088121120);
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test52() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-244635555);
		x.toString();
		x.dequeue();
		x.enqueue(-797799765);
    }
    @Test
    public void test53() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.toString();
    }
    @Test
    public void test54() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.toString();
		x.enqueue(-306941439);
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test55() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.isFull();
		y.toString();
		y.isFull();
		y.enqueue(1682902527);
		y.toString();
		assertFalse(y.isFull());
		assertEquals("[1682902527]", y.toString());
		assertFalse(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test56() {
		Queue Var = new Queue();
		Var.enqueue(529846035);
		Var.toString();
		Var.toString();
		assertEquals(529846035, Var.dequeue());
		Var.toString();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test57() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.enqueue(-1124337645);
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.enqueue(601590636);
		x.isFull();
    }
    @Test
    public void test58() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-1583933114);
		variable.enqueue(1466944702);
		variable.enqueue(1086791472);
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test59() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(784206478);
		x.dequeue();
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(-861340648);
		x.toString();
		x.toString();
		x.isEmpty();
		x.enqueue(-308893707);
		x.enqueue(-1324977084);
		assertEquals(-1, x.dequeue());
		x.enqueue(1099764411);
    }
    @Test
    public void test60() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1456786494);
		x.toString();
		x.dequeue();
		x.toString();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test61() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test62() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test63() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test64() {
		Queue x = new Queue();
		x.enqueue(1426293846);
		x.enqueue(-1464944575);
		x.isEmpty();
		x.toString();
		x.toString();
    }
    @Test
    public void test65() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test66() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.enqueue(820460666);
		z.dequeue();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test67() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-140092218);
		Var.dequeue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.toString();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test68() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test69() {
		Queue z = new Queue();
		z.enqueue(2012211168);
    }
    @Test
    public void test70() {
		Queue x = new Queue();
		x.toString();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.enqueue(386998985);
    }
    @Test
    public void test71() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test72() {
		Queue y = new Queue();
		y.enqueue(-1755253304);
		y.enqueue(-326132608);
		y.enqueue(647706081);
		y.enqueue(880406180);
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test73() {
		Queue z = new Queue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.enqueue(-286213991);
		z.toString();
		z.enqueue(249369275);
		z.isFull();
    }
    @Test
    public void test74() {
		Queue y = new Queue();
		y.toString();
		assertFalse(y.isFull());
		y.isFull();
		y.dequeue();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test75() {
		Queue x = new Queue();
		x.enqueue(335342727);
		assertFalse(x.isEmpty());
		x.enqueue(1314717250);
		x.isEmpty();
		x.toString();
		x.isEmpty();
		x.enqueue(-1037362928);
		assertEquals("[335342727, 1314717250]", x.toString());
		assertEquals(335342727, x.dequeue());
		x.dequeue();
		x.toString();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test76() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test77() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(742452406);
		Var.enqueue(996746498);
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		assertEquals("[996746498]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test78() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(867546981);
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(1726276830);
    }
    @Test
    public void test79() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isFull();
		z.enqueue(-72902595);
		z.isEmpty();
		z.dequeue();
		z.toString();
		z.isFull();
		z.enqueue(-937365600);
    }
    @Test
    public void test80() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test81() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(557788850);
		x.enqueue(470639289);
		x.isEmpty();
		x.enqueue(685021989);
		x.dequeue();
		assertEquals(470639289, x.dequeue());
		assertEquals(685021989, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test82() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test83() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.isEmpty();
		Var.enqueue(-485728949);
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.enqueue(-474905371);
		Var.enqueue(1984542398);
    }
    @Test
    public void test84() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test85() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.enqueue(822650297);
		assertFalse(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test86() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test87() {
		Queue variable = new Queue();
		variable.enqueue(-1346290600);
		assertFalse(variable.isFull());
		variable.enqueue(-474559956);
		variable.enqueue(-182082323);
		variable.dequeue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test88() {
		Queue Var = new Queue();
		Var.enqueue(-271479605);
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test89() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.toString();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.enqueue(-938563714);
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isFull();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.enqueue(-604122946);
		x.enqueue(2015758703);
    }
    @Test
    public void test90() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test91() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(1601071721);
		assertEquals(1601071721, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test92() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.enqueue(-905932528);
		y.enqueue(-584896262);
		y.enqueue(223119412);
		assertFalse(y.isEmpty());
		assertEquals(223119412, y.dequeue());
		y.toString();
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test93() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test94() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test95() {
		Queue Var = new Queue();
		Var.enqueue(-974911817);
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-1033685356);
		Var.enqueue(1994117310);
    }
    @Test
    public void test96() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.enqueue(-1521859610);
		variable.isEmpty();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test97() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-510498175);
    }
    @Test
    public void test98() {
		Queue variable = new Queue();
		variable.enqueue(-1297061556);
		variable.dequeue();
    }
    @Test
    public void test99() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test100() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.toString();
		y.dequeue();
		y.enqueue(-420006542);
		y.enqueue(-232405510);
		y.enqueue(-1500355538);
    }
    @Test
    public void test101() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test102() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isFull();
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
		variable.enqueue(90880902);
		assertEquals("[90880902]", variable.toString());
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-349552095);
    }
    @Test
    public void test103() {
		Queue y = new Queue();
		y.enqueue(-844633886);
		y.dequeue();
		y.dequeue();
		y.enqueue(-1376963541);
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.dequeue();
		y.isEmpty();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test104() {
		Queue x = new Queue();
		x.isFull();
		assertFalse(x.isFull());
		x.toString();
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(166198399);
		assertFalse(x.isEmpty());
		assertEquals(166198399, x.dequeue());
		x.isEmpty();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(-534624985);
		assertFalse(x.isFull());
		x.toString();
		assertEquals(-1, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test105() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(93084087);
		y.isFull();
		y.isEmpty();
		y.isFull();
		y.enqueue(1890622246);
		y.isFull();
    }
    @Test
    public void test106() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test107() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.enqueue(-2141976850);
		Var.dequeue();
    }
    @Test
    public void test108() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-1676891229);
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.toString();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.enqueue(782121442);
		variable.isFull();
    }
    @Test
    public void test109() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.enqueue(1913451167);
		assertEquals(1913451167, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test110() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test111() {
		Queue x = new Queue();
		x.enqueue(1852832097);
		x.isFull();
		assertEquals("[1852832097]", x.toString());
		x.dequeue();
		assertFalse(x.isFull());
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test112() {
		Queue y = new Queue();
		y.enqueue(782568599);
		y.enqueue(1230114603);
		assertFalse(y.isEmpty());
		y.isEmpty();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test113() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(-2041997631);
		Var.isFull();
		Var.enqueue(-1070939461);
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test114() {
		Queue z = new Queue();
		z.toString();
		assertFalse(z.isFull());
		z.isFull();
		z.isFull();
		z.enqueue(-1228631932);
		z.toString();
		z.enqueue(132425112);
		z.isFull();
		z.dequeue();
		z.toString();
		z.enqueue(312778541);
    }
    @Test
    public void test115() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(940602414);
		z.toString();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test116() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(-2011884146);
		Var.isFull();
		Var.enqueue(1029001943);
    }
    @Test
    public void test117() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test118() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test119() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1408567553);
		Var.isEmpty();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.enqueue(1764565183);
		Var.isFull();
		Var.dequeue();
		Var.enqueue(1262623119);
    }
    @Test
    public void test120() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isEmpty();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test121() {
		Queue variable = new Queue();
		variable.enqueue(-1940245983);
		variable.dequeue();
		variable.enqueue(1274569632);
		assertEquals("[1274569632]", variable.toString());
		variable.enqueue(-1068715916);
		variable.enqueue(-303944704);
		variable.toString();
		assertEquals(1274569632, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test122() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test123() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isFull();
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test124() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.toString();
		y.toString();
		y.enqueue(-1687378225);
		assertFalse(y.isFull());
		y.enqueue(-1827886128);
    }
    @Test
    public void test125() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test126() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isFull();
		x.isFull();
		assertEquals("[]", x.toString());
		x.enqueue(-1798532749);
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(-1812781840);
    }
    @Test
    public void test127() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test128() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		variable.enqueue(-717874606);
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test129() {
		Queue variable = new Queue();
		variable.enqueue(362084987);
		variable.enqueue(-1608535983);
		variable.toString();
		variable.toString();
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(702485403);
    }
    @Test
    public void test130() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(-707866080);
		assertFalse(Var.isFull());
		Var.enqueue(890098332);
		Var.enqueue(1529478829);
    }
    @Test
    public void test131() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.enqueue(790036602);
		variable.enqueue(870398106);
		variable.enqueue(-1080954459);
    }
    @Test
    public void test132() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(786885702);
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-1467700652);
		Var.toString();
    }
    @Test
    public void test133() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.enqueue(-1182600491);
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test134() {
		Queue y = new Queue();
		y.enqueue(-1709444152);
    }
    @Test
    public void test135() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1221942189);
    }
    @Test
    public void test136() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(886584178);
		z.isFull();
    }
    @Test
    public void test137() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-633138);
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(-1830851648);
		variable.enqueue(268776709);
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test138() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-1843616666);
		variable.dequeue();
    }
    @Test
    public void test139() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isEmpty();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.enqueue(-252535243);
		x.dequeue();
		assertEquals("[]", x.toString());
		x.toString();
    }
    @Test
    public void test140() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(1448858095);
		x.toString();
		x.dequeue();
		x.enqueue(-484917806);
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test141() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(138821477);
		Var.enqueue(-601725692);
		assertEquals("[138821477]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		assertEquals("[138821477]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-880262804);
    }
    @Test
    public void test142() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test143() {
		Queue y = new Queue();
		y.enqueue(-1360832031);
		y.dequeue();
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
		y.toString();
		y.enqueue(2038141857);
		y.toString();
		y.dequeue();
		y.enqueue(1354412652);
    }
    @Test
    public void test144() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(1455750507);
		y.toString();
		y.isEmpty();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.enqueue(-1759253891);
		y.dequeue();
    }
    @Test
    public void test145() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(-1793217411);
		y.dequeue();
		y.toString();
		y.isFull();
    }
    @Test
    public void test146() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.dequeue();
		y.enqueue(495245904);
    }
    @Test
    public void test147() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.enqueue(-1499648412);
		x.enqueue(1986231994);
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test148() {
		Queue x = new Queue();
		x.enqueue(982051222);
		assertFalse(x.isFull());
		x.isEmpty();
		x.enqueue(206591142);
    }
    @Test
    public void test149() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(943492633);
		Var.enqueue(1707439694);
		Var.isFull();
    }
    @Test
    public void test150() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-2011739097);
		variable.isEmpty();
		variable.enqueue(-1958240398);
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(1807926657);
		assertFalse(variable.isFull());
		assertFalse(variable.isEmpty());
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(-1614643945);
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test151() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test152() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test153() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test154() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.enqueue(-802990054);
		assertFalse(y.isFull());
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test155() {
		Queue y = new Queue();
		y.enqueue(1386918938);
		y.dequeue();
    }
    @Test
    public void test156() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.enqueue(-1611583055);
    }
    @Test
    public void test157() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.enqueue(1131229088);
    }
    @Test
    public void test158() {
		Queue z = new Queue();
		z.enqueue(-490969840);
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(1076748705);
    }
    @Test
    public void test159() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.enqueue(1119064874);
		Var.enqueue(-1688668473);
		Var.enqueue(363127746);
		Var.isFull();
    }
    @Test
    public void test160() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.toString();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.enqueue(1007419822);
    }
    @Test
    public void test161() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(-746800036);
		x.toString();
		x.isFull();
		x.isEmpty();
		x.toString();
		x.isFull();
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test162() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.enqueue(1455667111);
		variable.toString();
		variable.enqueue(58743462);
    }
    @Test
    public void test163() {
		Queue variable = new Queue();
		variable.enqueue(581069237);
		variable.isFull();
		variable.isFull();
		variable.toString();
		assertFalse(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test164() {
		Queue z = new Queue();
		z.enqueue(919888215);
		assertFalse(z.isEmpty());
		z.toString();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test165() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
		y.enqueue(307052246);
		assertFalse(y.isEmpty());
		assertEquals("[307052246]", y.toString());
		y.enqueue(-1175383536);
		y.dequeue();
		y.enqueue(649338574);
		y.isFull();
    }
    @Test
    public void test166() {
		Queue x = new Queue();
		x.enqueue(594500063);
		assertFalse(x.isFull());
		x.enqueue(53074593);
		x.isFull();
		x.enqueue(-1800151211);
		x.enqueue(-1226002466);
		x.enqueue(1280759256);
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test167() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test168() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isFull();
		assertFalse(x.isFull());
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.toString();
    }
    @Test
    public void test169() {
		Queue x = new Queue();
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(-2106491797);
		assertEquals(-1, x.dequeue());
		x.enqueue(-1170436802);
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(-1834000829);
    }
    @Test
    public void test170() {
		Queue x = new Queue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.toString();
		x.toString();
		x.toString();
		x.isFull();
		x.toString();
		x.isEmpty();
		x.isFull();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test171() {
		Queue variable = new Queue();
		variable.enqueue(947885094);
		variable.enqueue(-83277412);
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		variable.toString();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test172() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test173() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(-790188751);
		variable.enqueue(982702310);
		variable.enqueue(-37129100);
		variable.enqueue(1437476884);
		variable.isFull();
		assertEquals("[982702310, 1437476884]", variable.toString());
		assertEquals(982702310, variable.dequeue());
		assertEquals(1437476884, variable.dequeue());
		variable.enqueue(-640757863);
		variable.enqueue(1635373515);
		assertFalse(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test174() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test175() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.isEmpty();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(-1681228499);
		assertEquals(-1, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test176() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(284172665);
		Var.toString();
		assertEquals("[284172665]", Var.toString());
		Var.toString();
		Var.dequeue();
		Var.enqueue(251503246);
    }
    @Test
    public void test177() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test178() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.isFull();
		Var.dequeue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test179() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
    }
    @Test
    public void test180() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isFull();
		variable.enqueue(1240393954);
		variable.isFull();
		variable.toString();
		assertFalse(variable.isEmpty());
		variable.isFull();
		variable.enqueue(-1573013524);
    }
    @Test
    public void test181() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.enqueue(249701683);
    }
    @Test
    public void test182() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test183() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-1027161555);
		assertEquals("[]", y.toString());
		y.enqueue(-1001526787);
		y.isFull();
    }
    @Test
    public void test184() {
		Queue y = new Queue();
		y.enqueue(1171753978);
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(-1670088736);
		y.isFull();
		y.isFull();
		y.dequeue();
		y.enqueue(-1347834676);
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test185() {
		Queue Var = new Queue();
		Var.enqueue(-406645333);
    }
    @Test
    public void test186() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.dequeue();
		variable.enqueue(-799495847);
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-407626983);
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-1091161021);
		variable.enqueue(-1435516276);
    }
    @Test
    public void test187() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(350924344);
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test188() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test189() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test190() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test191() {
		Queue Var = new Queue();
		Var.enqueue(-747678784);
		Var.toString();
		Var.enqueue(484847482);
		Var.enqueue(1137953152);
		Var.enqueue(1449146718);
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(-1714034719);
    }
    @Test
    public void test192() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-918861937);
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(810339855);
		variable.toString();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test193() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test194() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(1332541716);
		y.enqueue(-1838551920);
		y.isFull();
		y.dequeue();
		y.isFull();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test195() {
		Queue x = new Queue();
		x.enqueue(638093995);
		x.dequeue();
    }
    @Test
    public void test196() {
		Queue z = new Queue();
		z.enqueue(219142838);
		assertFalse(z.isFull());
		z.toString();
		assertFalse(z.isEmpty());
		assertEquals(219142838, z.dequeue());
		z.enqueue(1155607080);
		z.dequeue();
		z.isFull();
		z.toString();
		z.isEmpty();
		z.enqueue(-2014715502);
		z.isFull();
		z.toString();
    }
    @Test
    public void test197() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-1703059858);
		assertEquals(-1, x.dequeue());
		x.toString();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isEmpty();
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(1391322810);
		x.dequeue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.dequeue();
    }
    @Test
    public void test198() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1018917493);
		Var.enqueue(-1114044939);
		assertFalse(Var.isFull());
		Var.toString();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test199() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(-459560325);
		variable.toString();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(1108496744);
		variable.toString();
		variable.toString();
		variable.dequeue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test200() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.toString();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test201() {
		Queue Var = new Queue();
		Var.enqueue(125487098);
		Var.toString();
		assertEquals(125487098, Var.dequeue());
		Var.isFull();
		Var.enqueue(-1069097559);
    }
    @Test
    public void test202() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.toString();
		x.toString();
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test203() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test204() {
		Queue y = new Queue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.toString();
    }
    @Test
    public void test205() {
		Queue Var = new Queue();
		Var.enqueue(-1479719254);
    }
    @Test
    public void test206() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.toString();
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.enqueue(1459714125);
    }
    @Test
    public void test207() {
		Queue z = new Queue();
		z.enqueue(146711115);
		z.isEmpty();
    }
    @Test
    public void test208() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isEmpty();
		z.isFull();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test209() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(1331708440);
		Var.enqueue(1378621109);
		Var.dequeue();
		Var.toString();
		Var.enqueue(2005862173);
    }
    @Test
    public void test210() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(517752037);
		assertFalse(y.isFull());
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test211() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(-1598960120);
		y.isEmpty();
		y.isFull();
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(1712792903);
		y.toString();
		y.dequeue();
		y.enqueue(-973584615);
    }
    @Test
    public void test212() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1328017084);
		Var.enqueue(869567628);
		Var.toString();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test213() {
		Queue y = new Queue();
		y.enqueue(-673869489);
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.enqueue(628585658);
		assertEquals("[628585658]", y.toString());
		y.isFull();
		y.enqueue(-2060679254);
		y.dequeue();
		y.toString();
		y.dequeue();
		y.enqueue(440705893);
		y.dequeue();
    }
    @Test
    public void test214() {
		Queue x = new Queue();
		x.enqueue(911393682);
		assertEquals("[911393682]", x.toString());
		x.enqueue(1498558352);
		x.dequeue();
		x.isEmpty();
		x.enqueue(-1687937441);
		x.enqueue(555704696);
		assertEquals(1498558352, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test215() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.enqueue(-1611885926);
		y.isFull();
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.toString();
		assertTrue(y.isEmpty());
		y.enqueue(470545658);
    }
    @Test
    public void test216() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(1907797372);
		x.isFull();
		x.isFull();
		x.enqueue(242417546);
		assertEquals("[1907797372, 242417546]", x.toString());
		x.dequeue();
		x.toString();
		x.isFull();
		x.isFull();
		x.toString();
    }
    @Test
    public void test217() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		assertTrue(y.isEmpty());
		y.dequeue();
    }
    @Test
    public void test218() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1254514414);
		variable.isFull();
		variable.toString();
		variable.enqueue(-873873299);
		variable.dequeue();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test219() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test220() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test221() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test222() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(66044901);
		Var.toString();
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.isFull();
		Var.enqueue(1148029767);
    }
    @Test
    public void test223() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(804976535);
		x.enqueue(-1819351212);
		x.dequeue();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test224() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		assertTrue(y.isEmpty());
		y.toString();
		y.isFull();
		y.isFull();
		y.dequeue();
		y.enqueue(-1703602200);
    }
    @Test
    public void test225() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(-449591980);
		y.enqueue(-99704450);
		y.enqueue(-377822236);
		y.dequeue();
    }
    @Test
    public void test226() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test227() {
		Queue variable = new Queue();
		variable.enqueue(-1750716247);
    }
    @Test
    public void test228() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-569830883);
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test229() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test230() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-1999561305);
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(1596826476);
		Var.dequeue();
    }
    @Test
    public void test231() {
		Queue y = new Queue();
		y.enqueue(-2052564603);
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test232() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(1898661619);
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test233() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test234() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.toString();
    }
    @Test
    public void test235() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isEmpty();
		z.dequeue();
		z.enqueue(-512186068);
		z.toString();
		z.enqueue(-1148827088);
		z.enqueue(304350565);
		z.isFull();
		z.isFull();
		assertFalse(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test236() {
		Queue x = new Queue();
		x.enqueue(1738270921);
		x.isEmpty();
		assertEquals("[1738270921]", x.toString());
		x.isEmpty();
		x.dequeue();
		x.enqueue(-936427273);
		x.isEmpty();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.enqueue(-1248123454);
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test237() {
		Queue x = new Queue();
		x.enqueue(-765245806);
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-1460627806);
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
    }
    @Test
    public void test238() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test239() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test240() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.enqueue(1734413336);
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test241() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.enqueue(729590521);
		Var.isEmpty();
		Var.enqueue(503952502);
    }
    @Test
    public void test242() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test243() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.enqueue(-1363490769);
		z.dequeue();
    }
    @Test
    public void test244() {
		Queue y = new Queue();
		y.enqueue(897756522);
		assertEquals(897756522, y.dequeue());
		y.isFull();
		y.isFull();
		y.enqueue(-1187965803);
		y.dequeue();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test245() {
		Queue variable = new Queue();
		variable.enqueue(608964580);
		assertEquals("[608964580]", variable.toString());
		variable.enqueue(-2119874161);
		assertEquals("[608964580]", variable.toString());
		variable.dequeue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(1838834237);
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test246() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isFull();
		y.isFull();
		y.dequeue();
		y.isFull();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.toString();
		y.enqueue(-334404730);
		y.dequeue();
    }
    @Test
    public void test247() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.enqueue(-1816505645);
		x.isEmpty();
		x.enqueue(-772149928);
    }
    @Test
    public void test248() {
		Queue x = new Queue();
		x.enqueue(1386628698);
		x.isFull();
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-245846088);
		assertFalse(x.isEmpty());
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test249() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test250() {
		Queue y = new Queue();
		y.enqueue(-97836530);
		y.toString();
		y.dequeue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.enqueue(638386802);
    }
    @Test
    public void test251() {
		Queue x = new Queue();
		x.enqueue(-1085534667);
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test252() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test253() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(251472477);
		Var.toString();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test254() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(2097107181);
		x.dequeue();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.enqueue(-2092430812);
		x.enqueue(1530333699);
		assertEquals("[1530333699]", x.toString());
		x.isFull();
		x.isFull();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test255() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(1580906390);
		y.dequeue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.enqueue(-1202368572);
		y.enqueue(656599860);
    }
    @Test
    public void test256() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1199273252);
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.enqueue(-272489610);
		x.toString();
		x.enqueue(-1350978726);
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test257() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.enqueue(56240090);
		z.isEmpty();
    }
    @Test
    public void test258() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test259() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(-137170299);
		Var.enqueue(1489267355);
		Var.isFull();
		Var.enqueue(1473637983);
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test260() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-1305996356);
		z.enqueue(1115532683);
		z.toString();
		assertEquals("[1115532683]", z.toString());
		assertFalse(z.isEmpty());
		z.toString();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test261() {
		Queue z = new Queue();
		z.enqueue(-2115697930);
		z.dequeue();
		z.enqueue(-707998044);
    }
    @Test
    public void test262() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.enqueue(644433737);
		x.toString();
		x.enqueue(-746639180);
		assertEquals("[644433737]", x.toString());
		assertFalse(x.isEmpty());
		assertEquals(644433737, x.dequeue());
		x.isFull();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.enqueue(2044509161);
		x.isFull();
		assertEquals("[2044509161]", x.toString());
		x.enqueue(-730920054);
    }
    @Test
    public void test263() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-837203829);
    }
    @Test
    public void test264() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(1667806254);
    }
    @Test
    public void test265() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test266() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isFull();
		x.isFull();
		x.enqueue(1806191664);
		assertEquals(1806191664, x.dequeue());
		x.isFull();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.isFull();
		x.isEmpty();
		x.enqueue(865386474);
    }
    @Test
    public void test267() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(815672106);
		x.isEmpty();
		assertFalse(x.isEmpty());
		x.enqueue(1162822021);
		x.enqueue(1194369892);
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test268() {
		Queue Var = new Queue();
		Var.enqueue(1995044600);
		Var.enqueue(254906164);
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test269() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test270() {
		Queue z = new Queue();
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(-194934413);
		z.toString();
		z.enqueue(1789097539);
		assertFalse(z.isEmpty());
		assertEquals("[1789097539]", z.toString());
		z.isEmpty();
		z.toString();
		z.isFull();
    }
    @Test
    public void test271() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.dequeue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.isFull();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.toString();
		z.dequeue();
		z.enqueue(-644460134);
		z.toString();
    }
    @Test
    public void test272() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isFull();
		y.toString();
    }
    @Test
    public void test273() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.dequeue();
		x.dequeue();
		x.toString();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.toString();
		x.toString();
		x.enqueue(-1901864539);
    }
    @Test
    public void test274() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(922328423);
    }
    @Test
    public void test275() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.enqueue(102254523);
		y.isEmpty();
		y.enqueue(-92454526);
		y.enqueue(-2043109250);
		y.isFull();
		y.enqueue(1138956488);
		y.enqueue(-358270279);
		y.enqueue(-971079194);
		y.enqueue(-2099652090);
		y.isEmpty();
    }
    @Test
    public void test276() {
		Queue x = new Queue();
		x.enqueue(678862259);
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test277() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1627173573);
		assertFalse(variable.isFull());
		assertEquals("[1627173573]", variable.toString());
		variable.isEmpty();
		variable.enqueue(-649357529);
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-19302414);
    }
    @Test
    public void test278() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test279() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.toString();
		Var.enqueue(330917225);
		Var.enqueue(-1293452484);
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test280() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test281() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.enqueue(-1088085624);
    }
    @Test
    public void test282() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.enqueue(-1224074173);
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(-413593460);
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test283() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.enqueue(-699455364);
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isFull();
		y.toString();
		y.toString();
    }
    @Test
    public void test284() {
		Queue x = new Queue();
		x.enqueue(62575585);
		x.enqueue(557996448);
		x.isEmpty();
		x.enqueue(-989794785);
		x.isEmpty();
		assertFalse(x.isFull());
		x.dequeue();
		x.toString();
    }
    @Test
    public void test285() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-631491340);
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test286() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(1832189729);
    }
    @Test
    public void test287() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.enqueue(-885027041);
		y.toString();
    }
    @Test
    public void test288() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.dequeue();
    }
    @Test
    public void test289() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.toString();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
		x.isFull();
    }
    @Test
    public void test290() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.enqueue(1653177976);
		assertEquals(1653177976, x.dequeue());
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test291() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.enqueue(626385385);
		variable.enqueue(664694981);
		variable.isFull();
		assertFalse(variable.isEmpty());
		variable.isFull();
		variable.isFull();
		variable.enqueue(-1830079216);
		variable.isEmpty();
		assertEquals("[626385385, 664694981]", variable.toString());
		assertFalse(variable.isEmpty());
		assertEquals("[626385385, 664694981]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test292() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.enqueue(-824450020);
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-209570431);
    }
    @Test
    public void test293() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.toString();
    }
    @Test
    public void test294() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
		z.toString();
		assertFalse(z.isFull());
		z.dequeue();
		z.enqueue(954436101);
		z.toString();
		z.enqueue(-196759099);
    }
    @Test
    public void test295() {
		Queue y = new Queue();
		y.toString();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-1567864683);
		y.toString();
		y.enqueue(311009971);
    }
    @Test
    public void test296() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(701072927);
		z.toString();
		z.enqueue(1747075639);
		z.isEmpty();
    }
    @Test
    public void test297() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-1897250775);
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.enqueue(806566982);
		variable.enqueue(-873091708);
    }
    @Test
    public void test298() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test299() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test300() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isFull();
		assertEquals("[]", x.toString());
		x.isEmpty();
    }
    @Test
    public void test301() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.dequeue();
		assertFalse(z.isFull());
		z.dequeue();
		z.toString();
		z.toString();
		z.isFull();
		z.enqueue(1416380348);
		assertFalse(z.isFull());
		assertEquals(1416380348, z.dequeue());
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.enqueue(687896477);
    }
    @Test
    public void test302() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test303() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(1176995114);
		variable.enqueue(581123420);
		variable.dequeue();
		assertFalse(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test304() {
		Queue y = new Queue();
		y.enqueue(-1073310626);
		y.enqueue(-430384876);
    }
    @Test
    public void test305() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-1873578496);
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.toString();
		y.isEmpty();
		y.enqueue(-1910302858);
    }
    @Test
    public void test306() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(1706669424);
		Var.isFull();
    }
    @Test
    public void test307() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test308() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.toString();
    }
    @Test
    public void test309() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(126688799);
		assertEquals(126688799, Var.dequeue());
		Var.enqueue(142247614);
		Var.toString();
		Var.enqueue(128795096);
		Var.dequeue();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test310() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(2141082566);
		assertFalse(variable.isFull());
		assertEquals("[2141082566]", variable.toString());
		variable.enqueue(1268379186);
    }
    @Test
    public void test311() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test312() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.enqueue(683514458);
		x.enqueue(-1536635069);
		x.dequeue();
		x.enqueue(72829098);
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.enqueue(-238831388);
    }
    @Test
    public void test313() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(2104652366);
		variable.toString();
		variable.isEmpty();
		variable.enqueue(278216204);
		variable.enqueue(-2069280855);
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(-1738303246);
    }
    @Test
    public void test314() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test315() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.enqueue(-317214167);
		z.enqueue(1358046979);
		z.toString();
		assertEquals("[1358046979]", z.toString());
		z.toString();
		z.enqueue(-1518603136);
		assertFalse(z.isFull());
		z.enqueue(-203957884);
		z.isFull();
    }
    @Test
    public void test316() {
		Queue variable = new Queue();
		variable.enqueue(-15172995);
    }
    @Test
    public void test317() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(544015333);
		x.dequeue();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.enqueue(-1910167452);
		x.toString();
		x.dequeue();
		assertFalse(x.isFull());
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test318() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(1620363967);
		assertFalse(variable.isFull());
		variable.enqueue(737653914);
    }
    @Test
    public void test319() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(342597628);
		z.enqueue(1626653329);
		z.enqueue(1357564646);
		z.dequeue();
		z.toString();
		assertFalse(z.isEmpty());
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test320() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.toString();
		assertEquals("[]", y.toString());
		y.toString();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test321() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(1886801892);
		Var.enqueue(1127902933);
		Var.isFull();
		Var.enqueue(386190131);
		assertEquals(1886801892, Var.dequeue());
		Var.isFull();
		Var.toString();
		Var.enqueue(611735776);
    }
    @Test
    public void test322() {
		Queue Var = new Queue();
		Var.enqueue(514813287);
    }
    @Test
    public void test323() {
		Queue y = new Queue();
		y.enqueue(-1203352794);
		y.dequeue();
		y.toString();
		y.isEmpty();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test324() {
		Queue y = new Queue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.enqueue(-1005848588);
		y.toString();
		y.dequeue();
    }
    @Test
    public void test325() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(351846461);
		z.isEmpty();
		z.isFull();
		assertFalse(z.isFull());
		z.enqueue(1002263229);
		assertEquals("[351846461, 1002263229]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test326() {
		Queue x = new Queue();
		x.enqueue(1516543917);
		x.enqueue(1665844189);
		x.toString();
		x.enqueue(1418134170);
		x.isFull();
		assertFalse(x.isFull());
		assertEquals("[1516543917, 1665844189, 1418134170]", x.toString());
		x.isEmpty();
		x.enqueue(-738430921);
		x.enqueue(-208411457);
    }
    @Test
    public void test327() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test328() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isEmpty();
		x.enqueue(1613186857);
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test329() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.enqueue(-1725892866);
		y.isFull();
    }
    @Test
    public void test330() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(1513086710);
    }
    @Test
    public void test331() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test332() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(1482225482);
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test333() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(-1791839197);
		z.enqueue(975978041);
		assertEquals("[975978041]", z.toString());
		assertFalse(z.isFull());
		z.isEmpty();
		z.dequeue();
		z.isFull();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test334() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test335() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.isFull();
		Var.enqueue(-826593244);
		Var.dequeue();
    }
    @Test
    public void test336() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(-1324554096);
		z.toString();
		z.dequeue();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.enqueue(-51234977);
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test337() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.dequeue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.enqueue(321863068);
		variable.toString();
    }
    @Test
    public void test338() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(-402080154);
		Var.dequeue();
    }
    @Test
    public void test339() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(-425014819);
    }
    @Test
    public void test340() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-198523817);
		x.isEmpty();
		assertFalse(x.isFull());
		x.isEmpty();
		x.enqueue(399748878);
    }
    @Test
    public void test341() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(1912810385);
		y.isFull();
		y.toString();
		y.isEmpty();
		assertEquals("[1912810385]", y.toString());
		y.toString();
    }
    @Test
    public void test342() {
		Queue Var = new Queue();
		Var.enqueue(12661544);
		Var.enqueue(-634801121);
    }
    @Test
    public void test343() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.toString();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test344() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.isFull();
		x.dequeue();
		x.enqueue(-621819934);
		assertEquals(-1, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test345() {
		Queue z = new Queue();
		z.enqueue(949866648);
		z.isEmpty();
    }
    @Test
    public void test346() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		y.enqueue(-149512702);
		y.enqueue(1268089774);
    }
    @Test
    public void test347() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test348() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-723787376);
		Var.enqueue(-1625822234);
		assertTrue(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test349() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.enqueue(-2019841332);
		x.toString();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test350() {
		Queue Var = new Queue();
		Var.enqueue(294546402);
		Var.dequeue();
    }
    @Test
    public void test351() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test352() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(145805906);
		assertFalse(Var.isEmpty());
		Var.enqueue(1187947039);
		Var.enqueue(-1682330226);
		Var.dequeue();
		assertFalse(Var.isFull());
		assertFalse(Var.isEmpty());
		Var.enqueue(-1352009361);
    }
    @Test
    public void test353() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(330266815);
		Var.isFull();
		assertEquals(330266815, Var.dequeue());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test354() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.toString();
    }
    @Test
    public void test355() {
		Queue variable = new Queue();
		variable.enqueue(-1341699407);
		variable.enqueue(942483867);
		assertFalse(variable.isEmpty());
		variable.toString();
		variable.dequeue();
		variable.toString();
		variable.enqueue(1767307965);
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test356() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(1502839481);
		Var.enqueue(1773231608);
		Var.toString();
		Var.enqueue(-579851215);
		Var.enqueue(1372326351);
		Var.isEmpty();
    }
    @Test
    public void test357() {
		Queue z = new Queue();
		z.enqueue(1839830832);
		z.enqueue(-1481963346);
		z.enqueue(-1870473686);
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test358() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test359() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test360() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test361() {
		Queue Var = new Queue();
		Var.enqueue(1743197471);
		Var.enqueue(1733063601);
		assertEquals(1743197471, Var.dequeue());
		Var.isFull();
		Var.enqueue(995077758);
		Var.enqueue(-1391933013);
		Var.enqueue(-81258844);
    }
    @Test
    public void test362() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(954164620);
		x.enqueue(-2088371758);
		x.isFull();
		x.isFull();
		x.enqueue(1745037779);
		assertEquals(954164620, x.dequeue());
		assertEquals("[1745037779]", x.toString());
		x.isFull();
		x.enqueue(369981554);
		x.isFull();
		assertEquals("[1745037779, 369981554]", x.toString());
		x.enqueue(2019821555);
    }
    @Test
    public void test363() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isFull();
		y.enqueue(-1973100268);
		assertEquals("[]", y.toString());
		y.enqueue(-107767138);
		y.dequeue();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.enqueue(-1955797933);
		y.enqueue(-1175204649);
		y.enqueue(-1360647220);
    }
    @Test
    public void test364() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test365() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(241605405);
    }
    @Test
    public void test366() {
		Queue y = new Queue();
		y.enqueue(1711532072);
		assertEquals(1711532072, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.isFull();
		y.toString();
		y.isEmpty();
		y.isFull();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test367() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(1789644784);
		x.toString();
		assertFalse(x.isEmpty());
		x.isEmpty();
		x.isFull();
		assertEquals("[1789644784]", x.toString());
		x.isFull();
		x.toString();
    }
    @Test
    public void test368() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(1649208077);
		variable.dequeue();
    }
    @Test
    public void test369() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.enqueue(868651526);
    }
    @Test
    public void test370() {
		Queue variable = new Queue();
		variable.enqueue(-391418838);
		variable.enqueue(108522089);
    }
    @Test
    public void test371() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(-729744328);
		variable.enqueue(613551367);
		variable.isEmpty();
    }
    @Test
    public void test372() {
		Queue Var = new Queue();
		Var.enqueue(2097068018);
		Var.enqueue(-860725511);
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test373() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-551029300);
		x.isFull();
		x.isFull();
		x.toString();
		x.enqueue(542589798);
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test374() {
		Queue y = new Queue();
		y.enqueue(1515543578);
    }
    @Test
    public void test375() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test376() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-2079717289);
		Var.isFull();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test377() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(253642316);
    }
    @Test
    public void test378() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		z.toString();
		z.isFull();
		z.toString();
		z.toString();
		z.enqueue(-180043914);
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.enqueue(-1263968951);
		z.isEmpty();
    }
    @Test
    public void test379() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(229010515);
		y.isEmpty();
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test380() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.toString();
		x.enqueue(-219469854);
    }
    @Test
    public void test381() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test382() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.enqueue(1664000623);
		y.enqueue(-1576870211);
		y.enqueue(-1488631444);
    }
    @Test
    public void test383() {
		Queue z = new Queue();
		z.enqueue(-1435329182);
		assertEquals(-1, z.dequeue());
		z.enqueue(-1737314829);
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test384() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test385() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(-187363861);
		x.isFull();
    }
    @Test
    public void test386() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.toString();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test387() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1263234118);
		variable.isEmpty();
		variable.enqueue(100808161);
		variable.enqueue(-709775114);
		assertFalse(variable.isFull());
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test388() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.enqueue(-890702050);
		y.toString();
		y.isFull();
		y.enqueue(2040136760);
    }
    @Test
    public void test389() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.enqueue(437509001);
		y.enqueue(1993856194);
		assertEquals("[437509001, 1993856194]", y.toString());
		y.dequeue();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test390() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(87599106);
		variable.enqueue(981660691);
		variable.isFull();
    }
    @Test
    public void test391() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test392() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(612111958);
		z.dequeue();
		z.enqueue(-1159321562);
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isFull();
    }
    @Test
    public void test393() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(-64164299);
    }
    @Test
    public void test394() {
		Queue y = new Queue();
		y.enqueue(-387408974);
		assertTrue(y.isEmpty());
		y.toString();
		y.isFull();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.enqueue(-542913837);
    }
    @Test
    public void test395() {
		Queue z = new Queue();
		z.enqueue(230073897);
		z.dequeue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(1377901842);
		z.isFull();
    }
    @Test
    public void test396() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.enqueue(-1034129147);
		assertEquals("[]", x.toString());
		x.toString();
		assertEquals(-1, x.dequeue());
		x.enqueue(614142822);
		x.toString();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test397() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test398() {
		Queue Var = new Queue();
		Var.enqueue(-154387892);
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(1738537953);
		Var.isFull();
		assertEquals(1738537953, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.enqueue(-971874669);
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test399() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-1619754523);
		variable.enqueue(-133571464);
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test400() {
		Queue x = new Queue();
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
		x.enqueue(897049371);
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test401() {
		Queue variable = new Queue();
		variable.enqueue(-229714398);
		variable.enqueue(1649284298);
		variable.toString();
		variable.isFull();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test402() {
		Queue y = new Queue();
		y.enqueue(-88001361);
		y.isEmpty();
    }
    @Test
    public void test403() {
		Queue x = new Queue();
		x.enqueue(366130031);
		assertEquals("[366130031]", x.toString());
		x.isFull();
		x.toString();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test404() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test405() {
		Queue x = new Queue();
		x.enqueue(-917724975);
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		x.enqueue(-1358497064);
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.isFull();
		x.isEmpty();
		x.enqueue(-796844968);
    }
    @Test
    public void test406() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.toString();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test407() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test408() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(-1030514124);
		assertEquals(-1, y.dequeue());
		y.enqueue(713774817);
    }
    @Test
    public void test409() {
		Queue y = new Queue();
		y.enqueue(1833370697);
		y.enqueue(1010671697);
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
		y.isFull();
		y.isFull();
		assertFalse(y.isFull());
		assertEquals("[1833370697, 1010671697]", y.toString());
		assertFalse(y.isFull());
		y.enqueue(1407370548);
		assertEquals(1833370697, y.dequeue());
		y.enqueue(1920212906);
		y.isFull();
		y.toString();
    }
    @Test
    public void test410() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isFull();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(-72359361);
		x.toString();
		x.enqueue(-844649266);
    }
    @Test
    public void test411() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-549771273);
		variable.enqueue(-826902798);
		variable.toString();
    }
    @Test
    public void test412() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.toString();
		x.isFull();
		x.enqueue(-1562490301);
		x.enqueue(-1843376072);
		assertFalse(x.isFull());
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test413() {
		Queue Var = new Queue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.enqueue(1602603895);
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(1828172156);
		Var.dequeue();
		Var.enqueue(-1249146433);
    }
    @Test
    public void test414() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(-332112926);
		z.toString();
    }
    @Test
    public void test415() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test416() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test417() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(1787613853);
    }
    @Test
    public void test418() {
		Queue Var = new Queue();
		Var.enqueue(164482410);
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test419() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(-88456092);
		Var.isEmpty();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test420() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test421() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.isFull();
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test422() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.enqueue(-453990273);
		Var.isEmpty();
		Var.enqueue(991088505);
    }
    @Test
    public void test423() {
		Queue Var = new Queue();
		Var.enqueue(-1782441190);
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(-820025611);
    }
    @Test
    public void test424() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test425() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test426() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.isFull();
		x.enqueue(70789405);
		assertFalse(x.isFull());
		assertEquals(70789405, x.dequeue());
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.dequeue();
    }
    @Test
    public void test427() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(128661279);
		variable.toString();
		variable.enqueue(-1924141647);
		variable.isFull();
		variable.toString();
		variable.enqueue(-2015410400);
		variable.isEmpty();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test428() {
		Queue x = new Queue();
		x.enqueue(1286797571);
		x.toString();
		x.isEmpty();
		x.isFull();
		assertFalse(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test429() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test430() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(819020922);
		x.toString();
    }
    @Test
    public void test431() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test432() {
		Queue z = new Queue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(1036974194);
		z.enqueue(874614355);
		z.dequeue();
    }
    @Test
    public void test433() {
		Queue z = new Queue();
		z.enqueue(173090445);
		z.toString();
		z.enqueue(1866022935);
    }
    @Test
    public void test434() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-91224311);
		Var.toString();
    }
    @Test
    public void test435() {
		Queue x = new Queue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(-1870693980);
		x.isEmpty();
		x.enqueue(2052120982);
    }
    @Test
    public void test436() {
		Queue z = new Queue();
		z.enqueue(2129159654);
		z.isEmpty();
    }
    @Test
    public void test437() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.enqueue(734931181);
		Var.isEmpty();
    }
    @Test
    public void test438() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test439() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(2117051505);
		y.dequeue();
		y.toString();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.enqueue(-1877604738);
		assertEquals(-1, y.dequeue());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(-1916449314);
		y.enqueue(1378878201);
		y.enqueue(2011164770);
    }
    @Test
    public void test440() {
		Queue Var = new Queue();
		Var.enqueue(1661891114);
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test441() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-989786884);
		assertEquals("[]", x.toString());
		x.toString();
		x.dequeue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.enqueue(-303316659);
		assertFalse(x.isFull());
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(610657205);
    }
    @Test
    public void test442() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test443() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isEmpty();
		y.enqueue(1177660368);
		y.dequeue();
		y.enqueue(-1712088408);
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test444() {
		Queue y = new Queue();
		y.enqueue(-1798930690);
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.isFull();
		y.isFull();
		assertEquals("[]", y.toString());
		y.toString();
		y.enqueue(-1520262050);
		assertTrue(y.isEmpty());
		y.enqueue(-1477469588);
		assertEquals("[]", y.toString());
		y.isFull();
    }
    @Test
    public void test445() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.enqueue(-620543036);
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(2035330635);
		assertEquals("[2035330635]", variable.toString());
		variable.toString();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test446() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-989309739);
		Var.isEmpty();
		Var.enqueue(838129557);
		Var.isEmpty();
    }
    @Test
    public void test447() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1538846540);
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test448() {
		Queue z = new Queue();
		z.toString();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isEmpty();
		z.isFull();
		z.dequeue();
		z.enqueue(-1578352325);
    }
    @Test
    public void test449() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test450() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		y.toString();
		y.enqueue(1581930359);
		y.toString();
		y.toString();
    }
    @Test
    public void test451() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.toString();
		x.enqueue(596665572);
    }
    @Test
    public void test452() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(-946460831);
		assertFalse(z.isFull());
		z.enqueue(-904309036);
		z.isFull();
		z.enqueue(-1096701491);
		z.isFull();
    }
    @Test
    public void test453() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.enqueue(1617903090);
		assertEquals(1617903090, x.dequeue());
		x.isFull();
		x.enqueue(1058145802);
		x.dequeue();
		x.toString();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test454() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.isFull();
		z.enqueue(-1105947065);
		assertTrue(z.isEmpty());
		z.dequeue();
		z.enqueue(395224587);
		assertEquals("[395224587]", z.toString());
		z.enqueue(-945104120);
    }
    @Test
    public void test455() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-149175942);
		x.dequeue();
		x.isEmpty();
		x.enqueue(717770427);
		x.isFull();
		assertFalse(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test456() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(1508367255);
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test457() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.toString();
		assertTrue(y.isEmpty());
		y.enqueue(-125001308);
    }
    @Test
    public void test458() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(101674454);
		variable.enqueue(1789786051);
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test459() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(990023818);
    }
    @Test
    public void test460() {
		Queue x = new Queue();
		x.enqueue(1013069070);
		x.isFull();
		x.isFull();
		assertFalse(x.isEmpty());
		x.isFull();
		assertEquals("[1013069070]", x.toString());
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(1783551085);
    }
    @Test
    public void test461() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.enqueue(-979932910);
		assertEquals("[]", z.toString());
		z.enqueue(434667699);
		z.toString();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test462() {
		Queue y = new Queue();
		y.enqueue(1014754446);
		y.enqueue(1374973665);
		y.isFull();
		y.enqueue(207530460);
		y.isEmpty();
		assertEquals(1014754446, y.dequeue());
		y.isFull();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test463() {
		Queue variable = new Queue();
		variable.enqueue(1835380030);
		variable.toString();
		variable.enqueue(-1336802536);
		variable.enqueue(1339663296);
		variable.isFull();
		variable.isFull();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test464() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(120958836);
		Var.isFull();
    }
    @Test
    public void test465() {
		Queue y = new Queue();
		y.toString();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(167218913);
		y.isEmpty();
		y.enqueue(-526528671);
		y.enqueue(-1662431630);
		y.enqueue(-1845697151);
		y.isFull();
    }
    @Test
    public void test466() {
		Queue z = new Queue();
		z.isFull();
		assertFalse(z.isFull());
		z.isFull();
		assertEquals("[]", z.toString());
		z.toString();
		z.toString();
		z.enqueue(2080361653);
		z.toString();
		z.isFull();
    }
    @Test
    public void test467() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.enqueue(-1682051139);
		z.toString();
		z.isFull();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test468() {
		Queue variable = new Queue();
		variable.enqueue(636909401);
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test469() {
		Queue Var = new Queue();
		Var.enqueue(-1792036375);
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test470() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test471() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.toString();
		y.isEmpty();
		y.enqueue(-151552919);
		y.isEmpty();
    }
    @Test
    public void test472() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test473() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1936851717);
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(606699414);
		Var.toString();
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test474() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isEmpty();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test475() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.enqueue(797621698);
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test476() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(2108652110);
		assertEquals(2108652110, x.dequeue());
		x.isFull();
		x.enqueue(1937427995);
		x.dequeue();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.toString();
    }
    @Test
    public void test477() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test478() {
		Queue x = new Queue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.enqueue(-188295773);
		x.dequeue();
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test479() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.enqueue(-79963469);
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.enqueue(1943735280);
		assertFalse(y.isEmpty());
		assertFalse(y.isEmpty());
		y.enqueue(1927184522);
    }
    @Test
    public void test480() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test481() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.toString();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.isEmpty();
		assertFalse(z.isFull());
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test482() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.toString();
		z.enqueue(1647456556);
		z.enqueue(-1424213799);
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test483() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-1929400410);
		Var.enqueue(-1110001799);
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(-2078926573);
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test484() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test485() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.enqueue(1793640995);
		Var.enqueue(-845657074);
		Var.isEmpty();
		assertEquals("[1793640995]", Var.toString());
		Var.enqueue(1029524649);
		Var.enqueue(-1989029859);
		assertEquals(1793640995, Var.dequeue());
		Var.enqueue(1188291298);
		Var.isEmpty();
    }
    @Test
    public void test486() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1910743435);
    }
    @Test
    public void test487() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.toString();
    }
    @Test
    public void test488() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(2130122510);
		variable.enqueue(-2078462418);
		assertEquals("[2130122510]", variable.toString());
		variable.enqueue(-1273107252);
		assertEquals(2130122510, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test489() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(230789874);
		y.isFull();
		y.toString();
		y.isFull();
    }
    @Test
    public void test490() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.enqueue(-1842348402);
    }
    @Test
    public void test491() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test492() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(-1829938229);
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.toString();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test493() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		assertFalse(z.isFull());
		z.isFull();
		z.toString();
		z.toString();
    }
    @Test
    public void test494() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test495() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-278233967);
		x.isFull();
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test496() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.toString();
		y.enqueue(-713340489);
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(1679054529);
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(-883448785);
    }
    @Test
    public void test497() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.enqueue(348894160);
		assertEquals(348894160, Var.dequeue());
		Var.isEmpty();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1823175307);
    }
    @Test
    public void test498() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.isEmpty();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isEmpty();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.enqueue(-221072819);
		y.dequeue();
    }
    @Test
    public void test499() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-320998101);
		x.isFull();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.toString();
    }
    @Test
    public void test500() {
		Queue y = new Queue();
		y.enqueue(957415799);
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test501() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.enqueue(-1293194812);
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1840946532);
		variable.toString();
		variable.enqueue(139247761);
		variable.dequeue();
    }
    @Test
    public void test502() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(2118513270);
		assertEquals(2118513270, Var.dequeue());
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-1307301680);
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test503() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test504() {
		Queue Var = new Queue();
		Var.enqueue(-1014851367);
		Var.toString();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1947392572);
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1447558556);
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test505() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(1383163493);
		variable.enqueue(-1875099435);
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(-243924301);
		variable.isEmpty();
    }
    @Test
    public void test506() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isFull();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isEmpty();
		z.enqueue(1105316304);
		z.dequeue();
		z.isEmpty();
		z.enqueue(1430500772);
    }
    @Test
    public void test507() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.enqueue(-2079299042);
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test508() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test509() {
		Queue x = new Queue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test510() {
		Queue z = new Queue();
		z.toString();
		z.toString();
    }
    @Test
    public void test511() {
		Queue Var = new Queue();
		Var.enqueue(622255005);
		Var.enqueue(2058953429);
		Var.dequeue();
		Var.toString();
		assertFalse(Var.isEmpty());
		assertEquals("[2058953429]", Var.toString());
		Var.enqueue(-885335804);
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.enqueue(945195050);
		Var.enqueue(-1628574362);
    }
    @Test
    public void test512() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(1622642179);
		y.isFull();
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test513() {
		Queue x = new Queue();
		x.enqueue(1601179338);
		assertEquals(1601179338, x.dequeue());
		x.isFull();
		x.enqueue(-1400617199);
		x.toString();
		x.isFull();
		x.dequeue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isFull();
    }
    @Test
    public void test514() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1071638331);
		Var.isEmpty();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.enqueue(1243399936);
		Var.enqueue(1205867694);
		assertEquals(1243399936, Var.dequeue());
		assertFalse(Var.isFull());
		assertEquals(1205867694, Var.dequeue());
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test515() {
		Queue y = new Queue();
		y.enqueue(-667827444);
		y.toString();
		y.isFull();
		y.isFull();
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		y.toString();
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test516() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.isFull();
		y.enqueue(1927212462);
		y.dequeue();
		y.enqueue(475944665);
    }
    @Test
    public void test517() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test518() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-1286230949);
		z.enqueue(1223927376);
		assertEquals("[1223927376]", z.toString());
		z.isFull();
    }
    @Test
    public void test519() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test520() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(2145004090);
		Var.isFull();
    }
    @Test
    public void test521() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(1654731666);
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test522() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.isFull();
		z.toString();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(1407370767);
		z.isFull();
    }
    @Test
    public void test523() {
		Queue x = new Queue();
		x.enqueue(898895514);
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test524() {
		Queue Var = new Queue();
		Var.enqueue(1115043484);
		Var.enqueue(-501542295);
		Var.isEmpty();
		Var.enqueue(719622439);
    }
    @Test
    public void test525() {
		Queue y = new Queue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(415950823);
		y.isFull();
		y.enqueue(-1574211323);
		y.isFull();
    }
    @Test
    public void test526() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(122789338);
		y.enqueue(-51832072);
		y.dequeue();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.toString();
		y.enqueue(1099258857);
		assertEquals(1099258857, y.dequeue());
		assertEquals("[]", y.toString());
		y.dequeue();
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(1180203187);
    }
    @Test
    public void test527() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test528() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-1719609514);
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test529() {
		Queue x = new Queue();
		x.enqueue(10129925);
		x.isEmpty();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(1547239858);
		x.isEmpty();
		assertEquals(1547239858, x.dequeue());
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.enqueue(1819921328);
		x.isEmpty();
    }
    @Test
    public void test530() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.enqueue(861862413);
		y.toString();
		y.enqueue(-705521659);
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test531() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.dequeue();
		variable.enqueue(1956427403);
    }
    @Test
    public void test532() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.dequeue();
		z.isFull();
		z.toString();
		z.dequeue();
		z.enqueue(1829848393);
		z.isEmpty();
    }
    @Test
    public void test533() {
		Queue y = new Queue();
		y.enqueue(-834971976);
		y.isFull();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test534() {
		Queue Var = new Queue();
		Var.enqueue(1574526109);
		assertFalse(Var.isEmpty());
		assertEquals(1574526109, Var.dequeue());
		Var.toString();
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test535() {
		Queue Var = new Queue();
		Var.enqueue(-1069696472);
		Var.dequeue();
		Var.enqueue(920900906);
		Var.isEmpty();
		Var.enqueue(228052042);
		Var.isEmpty();
    }
    @Test
    public void test536() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.enqueue(-1464470594);
		z.enqueue(-1886928748);
    }
    @Test
    public void test537() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test538() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test539() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.enqueue(-714491098);
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test540() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.enqueue(-477043677);
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test541() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.toString();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test542() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test543() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.dequeue();
		y.enqueue(-1273887809);
		assertEquals(-1, y.dequeue());
		y.toString();
		y.dequeue();
    }
    @Test
    public void test544() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1780115577);
		assertFalse(Var.isFull());
		Var.toString();
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test545() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test546() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.toString();
		z.enqueue(-1614556744);
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.toString();
		z.toString();
		z.enqueue(-1664146654);
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test547() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.enqueue(1527440656);
		variable.enqueue(-2023725463);
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.toString();
		assertEquals(1527440656, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test548() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test549() {
		Queue x = new Queue();
		x.toString();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.enqueue(-1594483900);
    }
    @Test
    public void test550() {
		Queue x = new Queue();
		x.enqueue(1811016556);
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test551() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-2015789399);
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(746901119);
		Var.toString();
    }
    @Test
    public void test552() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-504384749);
		variable.toString();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test553() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.enqueue(-837364764);
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(-479910264);
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test554() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test555() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test556() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.enqueue(-2037848957);
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test557() {
		Queue z = new Queue();
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(-478833858);
		z.dequeue();
		z.enqueue(-269205646);
		assertTrue(z.isEmpty());
		z.isFull();
		z.dequeue();
		z.toString();
		z.toString();
    }
    @Test
    public void test558() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.enqueue(191694520);
		Var.enqueue(-652832629);
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-1857087551);
		assertFalse(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test559() {
		Queue z = new Queue();
		z.toString();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(-303735081);
		z.isFull();
		z.enqueue(-125832662);
		z.isFull();
    }
    @Test
    public void test560() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.isFull();
    }
    @Test
    public void test561() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.enqueue(860690684);
		z.enqueue(712146814);
    }
    @Test
    public void test562() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test563() {
		Queue variable = new Queue();
		variable.enqueue(918237998);
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(1103036644);
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test564() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(-386761110);
		z.isFull();
    }
    @Test
    public void test565() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isFull();
		assertTrue(y.isEmpty());
		y.enqueue(212224372);
		y.isEmpty();
		y.enqueue(640253159);
    }
    @Test
    public void test566() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(-1808866373);
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.enqueue(-366575703);
		y.enqueue(1110949695);
		y.isEmpty();
		assertEquals(1110949695, y.dequeue());
		y.dequeue();
    }
    @Test
    public void test567() {
		Queue variable = new Queue();
		variable.enqueue(1186997244);
		variable.isFull();
		variable.enqueue(-34056574);
		variable.enqueue(755292202);
		variable.isEmpty();
    }
    @Test
    public void test568() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		assertFalse(y.isFull());
		y.dequeue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.toString();
		y.toString();
		y.toString();
		y.toString();
    }
    @Test
    public void test569() {
		Queue z = new Queue();
		z.enqueue(89116461);
		z.toString();
		z.toString();
		assertEquals(89116461, z.dequeue());
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.toString();
		z.isFull();
    }
    @Test
    public void test570() {
		Queue Var = new Queue();
		Var.enqueue(-2034908827);
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.toString();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test571() {
		Queue Var = new Queue();
		Var.enqueue(320850395);
		Var.dequeue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1754344880);
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1874759360);
    }
    @Test
    public void test572() {
		Queue z = new Queue();
		z.enqueue(1422133065);
		z.isFull();
		z.enqueue(-1705068116);
		z.enqueue(-155678842);
    }
    @Test
    public void test573() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test574() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.enqueue(-725898337);
		variable.dequeue();
    }
    @Test
    public void test575() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.enqueue(1813105087);
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test576() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1517959316);
		assertTrue(z.isEmpty());
		z.isFull();
		z.toString();
		assertFalse(z.isFull());
		z.dequeue();
		z.isFull();
		z.dequeue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test577() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
    }
    @Test
    public void test578() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-600168570);
		z.toString();
		z.toString();
		z.dequeue();
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(1688086075);
		z.isFull();
    }
    @Test
    public void test579() {
		Queue x = new Queue();
		x.enqueue(-854908803);
    }
    @Test
    public void test580() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
		x.enqueue(793577885);
		x.toString();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test581() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test582() {
		Queue y = new Queue();
		y.enqueue(110507788);
		y.toString();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test583() {
		Queue Var = new Queue();
		Var.enqueue(-1115603735);
		Var.isFull();
    }
    @Test
    public void test584() {
		Queue x = new Queue();
		x.enqueue(-1404790322);
		assertTrue(x.isEmpty());
		x.isFull();
		x.isEmpty();
		x.toString();
		x.isEmpty();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.isFull();
		x.isEmpty();
		assertFalse(x.isFull());
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(-1343966517);
    }
    @Test
    public void test585() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test586() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test587() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.enqueue(267074123);
		assertEquals(267074123, y.dequeue());
		y.enqueue(-1872780935);
		y.isEmpty();
    }
    @Test
    public void test588() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(362603758);
		assertEquals(362603758, z.dequeue());
		z.isFull();
		z.isEmpty();
		z.enqueue(-1927635808);
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test589() {
		Queue Var = new Queue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test590() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test591() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test592() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.enqueue(1254450371);
		y.toString();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test593() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test594() {
		Queue variable = new Queue();
		variable.enqueue(-469645089);
		variable.dequeue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.toString();
		variable.dequeue();
		variable.enqueue(-200303840);
    }
    @Test
    public void test595() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.enqueue(-1659338925);
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test596() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test597() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.enqueue(425207979);
		Var.isEmpty();
		Var.enqueue(1080308793);
		Var.dequeue();
		assertEquals(1080308793, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.enqueue(1693288296);
    }
    @Test
    public void test598() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(1356028932);
		Var.dequeue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.enqueue(805808088);
		Var.isFull();
    }
    @Test
    public void test599() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(1236940833);
		x.enqueue(267558519);
    }
    @Test
    public void test600() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(420839544);
		x.enqueue(-1608091524);
		assertEquals(420839544, x.dequeue());
		x.toString();
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(2101293698);
		x.isEmpty();
    }
    @Test
    public void test601() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(531233016);
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test602() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isFull();
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.enqueue(130229159);
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test603() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(111232403);
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test604() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test605() {
		Queue z = new Queue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.enqueue(1698738007);
		z.enqueue(1769159423);
		z.isEmpty();
		assertEquals(1698738007, z.dequeue());
		z.enqueue(-399415331);
		z.enqueue(-363239873);
		z.toString();
    }
    @Test
    public void test606() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test607() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(-1825384640);
		z.toString();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.isFull();
		z.toString();
		z.dequeue();
		z.enqueue(-343587558);
		z.isFull();
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(-450828913);
    }
    @Test
    public void test608() {
		Queue y = new Queue();
		y.enqueue(999340511);
		y.enqueue(-1155722250);
		y.enqueue(-383699375);
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test609() {
		Queue z = new Queue();
		z.enqueue(-1460898681);
		z.dequeue();
    }
    @Test
    public void test610() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-220987543);
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.toString();
    }
    @Test
    public void test611() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-976656317);
		z.toString();
    }
    @Test
    public void test612() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test613() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test614() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-906766258);
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(-1387803250);
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.enqueue(1898683762);
		variable.isFull();
		assertEquals("[1898683762]", variable.toString());
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		variable.enqueue(-984818873);
    }
    @Test
    public void test615() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.toString();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test616() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(-440891513);
    }
    @Test
    public void test617() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(-1035249991);
		x.enqueue(1283932467);
		x.isFull();
		assertEquals(1283932467, x.dequeue());
		x.isFull();
		x.isFull();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test618() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(304793849);
    }
    @Test
    public void test619() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test620() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(-831150240);
		y.isEmpty();
    }
    @Test
    public void test621() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.toString();
		y.isEmpty();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.enqueue(43390064);
    }
    @Test
    public void test622() {
		Queue variable = new Queue();
		variable.enqueue(15159346);
		variable.toString();
		assertEquals(15159346, variable.dequeue());
		variable.enqueue(-993800131);
		assertFalse(variable.isFull());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1773065047);
		assertEquals("[1773065047]", variable.toString());
		variable.enqueue(-1556704602);
    }
    @Test
    public void test623() {
		Queue x = new Queue();
		x.enqueue(469631732);
		x.isEmpty();
    }
    @Test
    public void test624() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isFull();
		z.enqueue(1339363195);
		z.enqueue(910723980);
		assertEquals("[1339363195, 910723980]", z.toString());
		z.dequeue();
		z.toString();
		z.isFull();
    }
    @Test
    public void test625() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.enqueue(-1343854182);
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.enqueue(1627371736);
    }
    @Test
    public void test626() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test627() {
		Queue y = new Queue();
		y.toString();
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test628() {
		Queue x = new Queue();
		x.enqueue(58682992);
		x.enqueue(179440061);
		x.enqueue(1956656574);
		x.toString();
		assertEquals("[58682992, 179440061, 1956656574]", x.toString());
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test629() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test630() {
		Queue variable = new Queue();
		variable.enqueue(1234487761);
		variable.enqueue(-1453231788);
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1239331228);
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(1503867229);
		variable.enqueue(1776899058);
    }
    @Test
    public void test631() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-178305374);
		Var.isFull();
    }
    @Test
    public void test632() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test633() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(-151963622);
		x.toString();
    }
    @Test
    public void test634() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.enqueue(-1937691952);
		assertEquals(-1, y.dequeue());
		y.toString();
		y.dequeue();
    }
    @Test
    public void test635() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test636() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test637() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test638() {
		Queue z = new Queue();
		z.enqueue(-2046585191);
		z.dequeue();
    }
    @Test
    public void test639() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1964798808);
		z.enqueue(-1453162462);
		assertEquals(-1, z.dequeue());
		z.enqueue(-21320146);
		z.dequeue();
		z.enqueue(-1449226152);
		assertEquals("[]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test640() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-831687853);
    }
    @Test
    public void test641() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(904957578);
		Var.isFull();
		Var.enqueue(1429704053);
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(86343073);
		assertEquals(1429704053, Var.dequeue());
		Var.isEmpty();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test642() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-2064181291);
		y.toString();
    }
    @Test
    public void test643() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		z.toString();
		z.isFull();
    }
    @Test
    public void test644() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test645() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test646() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.enqueue(2080039408);
		z.enqueue(294734247);
		z.toString();
    }
    @Test
    public void test647() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.enqueue(-1102415793);
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test648() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test649() {
		Queue variable = new Queue();
		variable.enqueue(1403133485);
		variable.isEmpty();
		variable.enqueue(-1770653719);
		variable.toString();
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(1858062601);
		variable.enqueue(339275722);
		assertFalse(variable.isFull());
		variable.enqueue(1351690725);
    }
    @Test
    public void test650() {
		Queue z = new Queue();
		z.enqueue(1166341150);
		assertEquals(1166341150, z.dequeue());
		assertEquals("[]", z.toString());
		z.enqueue(-1088891558);
		z.enqueue(-818198078);
		z.toString();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.enqueue(-1791888866);
		z.dequeue();
		z.toString();
    }
    @Test
    public void test651() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.toString();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test652() {
		Queue x = new Queue();
		x.isFull();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test653() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.enqueue(-1403464631);
		Var.enqueue(300009924);
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.isFull();
		Var.enqueue(-187807168);
    }
    @Test
    public void test654() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.enqueue(1165869438);
		x.isFull();
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test655() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test656() {
		Queue y = new Queue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1612893579);
    }
    @Test
    public void test657() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isFull();
    }
    @Test
    public void test658() {
		Queue z = new Queue();
		z.enqueue(-642332294);
		assertEquals("[]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test659() {
		Queue y = new Queue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.dequeue();
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(-821392492);
		y.dequeue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(22543702);
    }
    @Test
    public void test660() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
    }
    @Test
    public void test661() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test662() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(1284259842);
		variable.isEmpty();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.enqueue(67937956);
		variable.isEmpty();
		variable.enqueue(-141908585);
		variable.isFull();
    }
    @Test
    public void test663() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(1742844145);
		variable.isFull();
    }
    @Test
    public void test664() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.enqueue(515943570);
		assertFalse(z.isEmpty());
		z.isFull();
		z.enqueue(-1720091560);
    }
    @Test
    public void test665() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(387716260);
		variable.enqueue(615631755);
		variable.isFull();
		variable.enqueue(404867320);
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		variable.enqueue(-1772105829);
		variable.isEmpty();
    }
    @Test
    public void test666() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(-299010035);
		z.enqueue(-421626302);
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		z.toString();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test667() {
		Queue Var = new Queue();
		Var.enqueue(-1946011592);
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(909054025);
		assertEquals("[909054025]", Var.toString());
		assertEquals(909054025, Var.dequeue());
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test668() {
		Queue x = new Queue();
		x.enqueue(1333336891);
		x.isEmpty();
		assertFalse(x.isEmpty());
		x.enqueue(326092394);
		x.isFull();
		assertEquals(1333336891, x.dequeue());
		x.enqueue(-1636319681);
    }
    @Test
    public void test669() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(2004661371);
		y.toString();
		y.dequeue();
		y.dequeue();
		y.toString();
		y.toString();
		assertTrue(y.isEmpty());
		y.enqueue(-1714046473);
		assertEquals(-1, y.dequeue());
		y.dequeue();
    }
    @Test
    public void test670() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(1123758262);
		assertEquals("[1123758262]", x.toString());
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-865575422);
		x.isEmpty();
		x.dequeue();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test671() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(492777127);
		assertEquals("[492777127]", variable.toString());
		variable.isEmpty();
		assertEquals(492777127, variable.dequeue());
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(-2098077233);
    }
    @Test
    public void test672() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.enqueue(2098305146);
		Var.enqueue(477863680);
		Var.isFull();
		Var.dequeue();
		assertEquals("[477863680]", Var.toString());
		Var.toString();
    }
    @Test
    public void test673() {
		Queue Var = new Queue();
		Var.enqueue(-220070122);
		Var.isFull();
		Var.enqueue(-1784819074);
		Var.isFull();
		Var.isFull();
		Var.enqueue(1679519125);
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test674() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test675() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test676() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-1700488970);
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertFalse(y.isFull());
		y.dequeue();
		y.dequeue();
		y.toString();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test677() {
		Queue variable = new Queue();
		variable.enqueue(-1665054265);
    }
    @Test
    public void test678() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.isFull();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.enqueue(-1070308456);
		y.enqueue(-146189525);
    }
    @Test
    public void test679() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.enqueue(1414032907);
		Var.toString();
		Var.enqueue(520894657);
		Var.isEmpty();
    }
    @Test
    public void test680() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.enqueue(487530644);
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test681() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.enqueue(-64816902);
		y.isFull();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test682() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.isFull();
		z.isFull();
		z.enqueue(1115888466);
		z.isFull();
		z.isEmpty();
		z.enqueue(93556966);
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test683() {
		Queue x = new Queue();
		x.enqueue(-1214697541);
		x.isEmpty();
		x.isEmpty();
		assertFalse(x.isFull());
		x.dequeue();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.isFull();
		x.isEmpty();
		x.dequeue();
		x.enqueue(-1577324068);
    }
    @Test
    public void test684() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.isEmpty();
		z.isFull();
		z.enqueue(-1666460911);
		z.dequeue();
		assertTrue(z.isEmpty());
		z.enqueue(-6933393);
		z.dequeue();
    }
    @Test
    public void test685() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1201614562);
		assertEquals(1201614562, Var.dequeue());
		Var.enqueue(769611995);
		Var.dequeue();
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(-142364820);
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test686() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.isEmpty();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test687() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isFull();
		x.enqueue(1405018370);
		x.isFull();
		x.dequeue();
		x.toString();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test688() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test689() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test690() {
		Queue x = new Queue();
		x.enqueue(-1706644511);
		x.toString();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test691() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.enqueue(1152167981);
		y.enqueue(60788159);
		assertEquals(1152167981, y.dequeue());
		y.dequeue();
    }
    @Test
    public void test692() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test693() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.toString();
		Var.enqueue(705729316);
		Var.isEmpty();
    }
    @Test
    public void test694() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.isFull();
		assertEquals("[]", y.toString());
		y.isFull();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test695() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-800100827);
		Var.dequeue();
    }
    @Test
    public void test696() {
		Queue y = new Queue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.enqueue(692888194);
		assertEquals("[692888194]", y.toString());
		y.toString();
		y.enqueue(-1763366648);
		y.isEmpty();
    }
    @Test
    public void test697() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(691965662);
		x.enqueue(1010927895);
		x.enqueue(-2030594335);
		x.isEmpty();
		x.enqueue(-65176477);
		assertEquals(691965662, x.dequeue());
		assertFalse(x.isFull());
		x.enqueue(-2138403093);
		x.toString();
		x.isEmpty();
		x.isEmpty();
		assertEquals(1010927895, x.dequeue());
		x.enqueue(1986503610);
    }
    @Test
    public void test698() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test699() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(-322321381);
		x.toString();
		x.isEmpty();
		x.enqueue(1279599146);
		x.enqueue(-1499958917);
		x.isFull();
		x.toString();
    }
    @Test
    public void test700() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(-2040072130);
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-1082659549);
    }
    @Test
    public void test701() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
		Var.enqueue(-1134586719);
    }
    @Test
    public void test702() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		z.enqueue(1700292969);
		z.enqueue(-16048259);
		assertFalse(z.isFull());
		z.enqueue(-2132646735);
		assertFalse(z.isEmpty());
		assertEquals(1700292969, z.dequeue());
		assertTrue(z.isEmpty());
		z.enqueue(711709362);
		z.enqueue(-332549564);
		assertEquals(711709362, z.dequeue());
		z.toString();
		z.isFull();
    }
    @Test
    public void test703() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isFull();
    }
    @Test
    public void test704() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-840891779);
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(58342194);
    }
    @Test
    public void test705() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(2036705121);
		x.dequeue();
		x.dequeue();
		x.isFull();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test706() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test707() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test708() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test709() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.toString();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isFull();
		assertFalse(y.isFull());
		y.enqueue(-1234980295);
		y.toString();
		y.enqueue(-1135595691);
		assertEquals(-1, y.dequeue());
		y.enqueue(-1911537984);
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test710() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test711() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-1521769225);
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(-1223965900);
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-1111629199);
		assertFalse(Var.isFull());
		Var.isFull();
		Var.toString();
		Var.enqueue(-1741185658);
    }
    @Test
    public void test712() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test713() {
		Queue y = new Queue();
		y.toString();
		assertEquals("[]", y.toString());
		y.isFull();
		y.enqueue(1614123059);
    }
    @Test
    public void test714() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.toString();
		Var.isEmpty();
		Var.enqueue(1463906727);
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test715() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test716() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test717() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.enqueue(-1497078661);
		variable.dequeue();
    }
    @Test
    public void test718() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test719() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.isFull();
		z.dequeue();
		z.enqueue(-269844549);
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test720() {
		Queue x = new Queue();
		x.enqueue(407666940);
    }
    @Test
    public void test721() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-585583867);
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(878759379);
		variable.isEmpty();
		variable.enqueue(-2108593071);
    }
    @Test
    public void test722() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.enqueue(1235124174);
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test723() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(1070713792);
    }
    @Test
    public void test724() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.toString();
		x.isFull();
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test725() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.enqueue(-616547196);
		Var.isFull();
    }
    @Test
    public void test726() {
		Queue y = new Queue();
		y.enqueue(1068316030);
		y.isEmpty();
		y.isEmpty();
		assertEquals(1068316030, y.dequeue());
		y.enqueue(-1277441620);
		y.toString();
		y.enqueue(1940927457);
    }
    @Test
    public void test727() {
		Queue y = new Queue();
		y.enqueue(-915726495);
    }
    @Test
    public void test728() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.enqueue(951957794);
		Var.toString();
    }
    @Test
    public void test729() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-754301483);
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(760474131);
		assertFalse(variable.isEmpty());
		assertEquals("[760474131]", variable.toString());
		variable.enqueue(-1230165569);
		assertEquals("[760474131]", variable.toString());
		assertFalse(variable.isEmpty());
		assertEquals("[760474131]", variable.toString());
		variable.isEmpty();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(-1552569066);
    }
    @Test
    public void test730() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(1767112665);
		assertFalse(z.isFull());
		assertEquals(1767112665, z.dequeue());
		z.enqueue(1729745288);
		assertEquals("[1729745288]", z.toString());
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test731() {
		Queue variable = new Queue();
		variable.enqueue(-1193499454);
		variable.isEmpty();
    }
    @Test
    public void test732() {
		Queue y = new Queue();
		y.enqueue(-1479092350);
    }
    @Test
    public void test733() {
		Queue x = new Queue();
		x.enqueue(-749877985);
		x.dequeue();
    }
    @Test
    public void test734() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-1917500748);
		Var.isEmpty();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test735() {
		Queue variable = new Queue();
		variable.enqueue(-606131355);
		variable.dequeue();
		variable.dequeue();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.toString();
    }
    @Test
    public void test736() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.enqueue(-1033182614);
		x.isFull();
		x.enqueue(-220913332);
		assertEquals(-1, x.dequeue());
		x.enqueue(819155118);
		x.dequeue();
    }
    @Test
    public void test737() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.enqueue(-1022440630);
		y.dequeue();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isEmpty();
		y.enqueue(2071274999);
		y.enqueue(-635559222);
		assertEquals(2071274999, y.dequeue());
		y.isFull();
    }
    @Test
    public void test738() {
		Queue y = new Queue();
		y.enqueue(1691412018);
		assertEquals("[1691412018]", y.toString());
		assertFalse(y.isEmpty());
		y.isEmpty();
		y.isEmpty();
		assertEquals(1691412018, y.dequeue());
		y.dequeue();
		y.toString();
    }
    @Test
    public void test739() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.enqueue(-823804414);
    }
    @Test
    public void test740() {
		Queue variable = new Queue();
		variable.enqueue(1816995376);
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test741() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.enqueue(-1089049796);
		assertTrue(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test742() {
		Queue z = new Queue();
		z.enqueue(344843796);
    }
    @Test
    public void test743() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.enqueue(-1709446095);
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.enqueue(-257016933);
		Var.enqueue(-133403183);
		Var.enqueue(-1876806825);
    }
    @Test
    public void test744() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.enqueue(-1882581500);
		Var.enqueue(-300530101);
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.enqueue(616771265);
		Var.isEmpty();
		Var.enqueue(961314653);
    }
    @Test
    public void test745() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isFull();
		z.toString();
		z.dequeue();
		z.enqueue(1741707046);
		z.isEmpty();
    }
    @Test
    public void test746() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test747() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.toString();
		assertEquals(-1, x.dequeue());
		x.enqueue(796604056);
		assertEquals("[796604056]", x.toString());
		x.enqueue(1106704796);
		x.toString();
		x.toString();
		assertEquals("[796604056, 1106704796]", x.toString());
		x.isEmpty();
		x.enqueue(1823250841);
		x.isFull();
    }
    @Test
    public void test748() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isFull();
    }
    @Test
    public void test749() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.enqueue(-2006038110);
		y.isFull();
		y.enqueue(-18044777);
		y.dequeue();
		y.isEmpty();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.enqueue(-611844496);
		y.enqueue(-348392000);
		y.dequeue();
    }
    @Test
    public void test750() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(1940991390);
		Var.enqueue(1058418360);
		Var.toString();
		Var.enqueue(89050090);
    }
    @Test
    public void test751() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-906711838);
    }
    @Test
    public void test752() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		z.toString();
		z.isFull();
		assertTrue(z.isEmpty());
		z.toString();
		z.toString();
		z.enqueue(-1942306362);
		z.isEmpty();
    }
    @Test
    public void test753() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test754() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.isFull();
		z.toString();
		z.enqueue(1026303837);
		z.isFull();
		z.dequeue();
		z.enqueue(1749799967);
		z.isFull();
		z.isFull();
    }
    @Test
    public void test755() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isFull();
		x.isFull();
		assertEquals("[]", x.toString());
		x.toString();
    }
    @Test
    public void test756() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test757() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(-601736501);
		x.isEmpty();
    }
    @Test
    public void test758() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(1329232575);
		z.toString();
    }
    @Test
    public void test759() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.toString();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test760() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.enqueue(169392246);
		y.isEmpty();
		y.enqueue(-580115546);
		assertEquals(169392246, y.dequeue());
		y.isFull();
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test761() {
		Queue Var = new Queue();
		Var.enqueue(-1703086315);
		Var.isFull();
		Var.enqueue(-636557535);
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-724721971);
    }
    @Test
    public void test762() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test763() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(-1624567668);
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
		y.dequeue();
		y.enqueue(608363981);
		y.toString();
    }
    @Test
    public void test764() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test765() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.enqueue(-1683782983);
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.isFull();
		y.toString();
    }
    @Test
    public void test766() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test767() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-53694225);
		variable.toString();
		variable.toString();
		variable.toString();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1553905420);
		variable.isFull();
    }
    @Test
    public void test768() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.toString();
		x.isFull();
		x.isEmpty();
		x.toString();
		x.dequeue();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.isFull();
		x.dequeue();
		x.enqueue(383252626);
		x.isEmpty();
    }
    @Test
    public void test769() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.enqueue(1474153713);
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(-498439920);
		y.toString();
		y.enqueue(-1526625429);
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.isFull();
		y.isEmpty();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.enqueue(685361048);
    }
    @Test
    public void test770() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test771() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-486099289);
		z.enqueue(1080411360);
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test772() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.toString();
		y.dequeue();
		y.toString();
		y.isFull();
		y.isEmpty();
		y.enqueue(613341055);
		y.toString();
    }
    @Test
    public void test773() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-302576932);
		x.dequeue();
		x.enqueue(-1308997444);
		x.isFull();
		x.dequeue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isFull();
    }
    @Test
    public void test774() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1634176537);
		x.dequeue();
		x.toString();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.enqueue(-535763950);
    }
    @Test
    public void test775() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.enqueue(-935835307);
		z.enqueue(390510056);
		z.toString();
		z.enqueue(-1737902736);
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(109573373);
    }
    @Test
    public void test776() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1251007657);
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.toString();
		assertEquals(1251007657, x.dequeue());
		x.enqueue(581640488);
		x.isFull();
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(-1354154763);
    }
    @Test
    public void test777() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test778() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test779() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.isFull();
		Var.enqueue(1014744329);
		Var.toString();
		Var.dequeue();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test780() {
		Queue x = new Queue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(-1818470636);
    }
    @Test
    public void test781() {
		Queue z = new Queue();
		z.enqueue(506958029);
		assertFalse(z.isFull());
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test782() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(866956515);
		x.dequeue();
		x.dequeue();
		x.enqueue(-725434249);
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test783() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test784() {
		Queue y = new Queue();
		y.toString();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(-2134466887);
		y.isFull();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.toString();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.toString();
		y.toString();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.enqueue(-170550198);
    }
    @Test
    public void test785() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(-1203592060);
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.toString();
		x.enqueue(-596850251);
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(397383679);
    }
    @Test
    public void test786() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.toString();
    }
    @Test
    public void test787() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1341903470);
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test788() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test789() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(1486354742);
		Var.enqueue(626292366);
		Var.dequeue();
    }
    @Test
    public void test790() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.enqueue(1436014312);
		assertEquals(1436014312, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test791() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.enqueue(1187618656);
		z.isEmpty();
		z.enqueue(119766776);
    }
    @Test
    public void test792() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-887148282);
		Var.enqueue(-472631010);
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(1516568434);
    }
    @Test
    public void test793() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(218572253);
		assertEquals("[218572253]", Var.toString());
		assertEquals("[218572253]", Var.toString());
		assertFalse(Var.isFull());
		assertEquals("[218572253]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test794() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(-841152574);
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(1125506559);
    }
    @Test
    public void test795() {
		Queue x = new Queue();
		x.enqueue(-696254373);
		x.enqueue(-840105027);
    }
    @Test
    public void test796() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test797() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(1687594621);
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		z.enqueue(1982583432);
		z.dequeue();
		z.dequeue();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test798() {
		Queue x = new Queue();
		x.enqueue(-691263677);
		x.enqueue(461602325);
		x.isFull();
		assertFalse(x.isEmpty());
		x.dequeue();
		x.enqueue(-802931096);
		assertEquals("[]", x.toString());
		x.enqueue(1248549672);
		x.dequeue();
    }
    @Test
    public void test799() {
		Queue z = new Queue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.enqueue(-1818008042);
		z.toString();
		z.isEmpty();
		z.isFull();
		z.isFull();
		z.enqueue(-1542047038);
    }
    @Test
    public void test800() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test801() {
		Queue z = new Queue();
		z.isFull();
		assertEquals("[]", z.toString());
		z.enqueue(-1381707243);
		z.enqueue(648487967);
		z.isFull();
		z.toString();
		assertFalse(z.isEmpty());
		z.enqueue(916552208);
    }
    @Test
    public void test802() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isEmpty();
		y.toString();
		assertEquals("[]", y.toString());
		y.isFull();
    }
    @Test
    public void test803() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.enqueue(1924788847);
		z.isFull();
		z.isEmpty();
		assertFalse(z.isFull());
		assertEquals(1924788847, z.dequeue());
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test804() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.isFull();
		z.enqueue(1100168780);
		z.isEmpty();
		z.enqueue(-803960303);
		assertEquals("[1100168780]", z.toString());
		z.enqueue(-60433775);
		z.enqueue(-2072202239);
		assertFalse(z.isFull());
		assertFalse(z.isEmpty());
		z.enqueue(-1109900785);
		z.isFull();
    }
    @Test
    public void test805() {
		Queue variable = new Queue();
		variable.enqueue(200769556);
		variable.isFull();
		variable.toString();
		variable.toString();
		assertFalse(variable.isEmpty());
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test806() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(35808674);
		y.enqueue(-148139739);
		assertFalse(y.isFull());
		y.isEmpty();
		y.isEmpty();
		y.enqueue(1423931434);
		y.dequeue();
    }
    @Test
    public void test807() {
		Queue z = new Queue();
		z.enqueue(2044567559);
		assertFalse(z.isFull());
		assertFalse(z.isEmpty());
		assertFalse(z.isEmpty());
		assertEquals(2044567559, z.dequeue());
		z.enqueue(-872202060);
		z.dequeue();
		z.isFull();
		z.enqueue(1925941722);
		z.isFull();
		z.isFull();
    }
    @Test
    public void test808() {
		Queue variable = new Queue();
		variable.enqueue(876422727);
		assertEquals("[876422727]", variable.toString());
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.enqueue(-1063798190);
		assertFalse(variable.isFull());
		variable.enqueue(1285394551);
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test809() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-1601563734);
		x.enqueue(-482599526);
		x.isFull();
    }
    @Test
    public void test810() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(-908498602);
		x.isFull();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test811() {
		Queue Var = new Queue();
		Var.enqueue(-23236945);
		Var.dequeue();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
		Var.isFull();
		Var.isFull();
		Var.enqueue(-1676193808);
    }
    @Test
    public void test812() {
		Queue x = new Queue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test813() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.isFull();
		assertFalse(y.isFull());
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.toString();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test814() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.toString();
		x.enqueue(-988067180);
		x.enqueue(-1728838453);
    }
    @Test
    public void test815() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.enqueue(1633061870);
		Var.enqueue(2143004991);
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test816() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test817() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-2043236542);
		variable.isFull();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test818() {
		Queue y = new Queue();
		y.enqueue(-2135801764);
		y.enqueue(-908101463);
		y.isEmpty();
		y.dequeue();
		assertFalse(y.isFull());
		y.isFull();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test819() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-227721525);
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(-1202464032);
    }
    @Test
    public void test820() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(683092671);
		assertFalse(x.isEmpty());
		x.toString();
    }
    @Test
    public void test821() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.dequeue();
    }
    @Test
    public void test822() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1980533349);
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.isFull();
		Var.enqueue(1514216175);
		Var.enqueue(-1258870761);
    }
    @Test
    public void test823() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.enqueue(1042853914);
		x.isFull();
		x.enqueue(-1416630322);
		assertEquals(1042853914, x.dequeue());
		x.enqueue(-581359172);
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.dequeue();
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test824() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		x.enqueue(-1125438125);
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.toString();
    }
    @Test
    public void test825() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.enqueue(733258067);
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isEmpty();
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(785075782);
    }
    @Test
    public void test826() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(2135587158);
		assertEquals("[2135587158]", z.toString());
		assertEquals(2135587158, z.dequeue());
		z.toString();
    }
    @Test
    public void test827() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test828() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test829() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.enqueue(-1136395906);
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.isFull();
    }
    @Test
    public void test830() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test831() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1657406517);
		variable.isFull();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(-181065904);
		variable.isFull();
		variable.isFull();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test832() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isFull();
		z.enqueue(-1684245912);
		assertFalse(z.isFull());
		z.enqueue(1387380854);
		assertFalse(z.isFull());
		z.toString();
		z.toString();
    }
    @Test
    public void test833() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.isFull();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(1092714842);
		z.toString();
		assertFalse(z.isFull());
		assertEquals("[1092714842]", z.toString());
		z.enqueue(-1971661339);
		z.enqueue(-1674821728);
		z.toString();
    }
    @Test
    public void test834() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-1343200081);
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test835() {
		Queue y = new Queue();
		y.enqueue(290314898);
		y.toString();
		y.dequeue();
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.enqueue(1502341803);
		assertEquals(1502341803, y.dequeue());
		y.toString();
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(1470620601);
    }
    @Test
    public void test836() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(-656486040);
		x.toString();
    }
    @Test
    public void test837() {
		Queue x = new Queue();
		x.enqueue(1152793859);
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test838() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.enqueue(972324491);
		assertFalse(x.isEmpty());
		x.toString();
		x.enqueue(-2057635198);
    }
    @Test
    public void test839() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(658457212);
		z.isFull();
		assertFalse(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test840() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.enqueue(-2145214761);
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(141318851);
		assertFalse(y.isEmpty());
		assertEquals(141318851, y.dequeue());
		assertFalse(y.isFull());
		y.isFull();
		y.isFull();
    }
    @Test
    public void test841() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-379422195);
		x.isEmpty();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test842() {
		Queue z = new Queue();
		z.dequeue();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.enqueue(-1123643501);
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test843() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-582742986);
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(2108135142);
		variable.enqueue(-105770394);
    }
    @Test
    public void test844() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(662114739);
		y.toString();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-2059877980);
		y.enqueue(-261487844);
		y.toString();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test845() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(334533807);
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isFull();
		z.isFull();
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(-55111019);
    }
    @Test
    public void test846() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test847() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test848() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-1930008995);
		z.dequeue();
		z.enqueue(704087788);
    }
    @Test
    public void test849() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.dequeue();
		y.isFull();
		y.isFull();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertEquals("[]", y.toString());
		y.toString();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test850() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test851() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.dequeue();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.enqueue(-519717725);
		Var.enqueue(487488278);
		assertEquals(487488278, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.toString();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test852() {
		Queue x = new Queue();
		x.enqueue(662752980);
		assertFalse(x.isEmpty());
		assertEquals(662752980, x.dequeue());
		x.toString();
		x.isFull();
		x.isFull();
		x.isFull();
		x.enqueue(-36957586);
		x.isFull();
		assertEquals("[]", x.toString());
		x.toString();
		x.enqueue(-570340996);
		x.enqueue(197813586);
    }
    @Test
    public void test853() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.toString();
		Var.toString();
    }
    @Test
    public void test854() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1162099022);
		variable.isEmpty();
    }
    @Test
    public void test855() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(-238393424);
		x.dequeue();
		x.isEmpty();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test856() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.isFull();
		x.enqueue(-1641118037);
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(-857266717);
    }
    @Test
    public void test857() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.toString();
		z.dequeue();
		z.toString();
		z.dequeue();
		z.isFull();
		z.enqueue(308335449);
		z.dequeue();
		z.toString();
    }
    @Test
    public void test858() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test859() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.enqueue(-1112841054);
		x.enqueue(-1004961347);
		x.toString();
		x.dequeue();
		x.enqueue(-1708906553);
    }
    @Test
    public void test860() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.dequeue();
		variable.toString();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(1378709763);
    }
    @Test
    public void test861() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(143899458);
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(1140804450);
		variable.enqueue(1800210011);
    }
    @Test
    public void test862() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(-178185905);
		y.toString();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.toString();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test863() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.isEmpty();
		z.enqueue(195467868);
    }
    @Test
    public void test864() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test865() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test866() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.toString();
    }
    @Test
    public void test867() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		Var.enqueue(-800853168);
		Var.toString();
    }
    @Test
    public void test868() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.enqueue(-916552601);
		assertTrue(x.isEmpty());
		x.enqueue(-1835054899);
		assertFalse(x.isFull());
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test869() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		y.toString();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.enqueue(-1687455772);
		assertEquals(-1, y.dequeue());
		y.toString();
    }
    @Test
    public void test870() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test871() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(308677273);
		variable.isEmpty();
		variable.enqueue(-1026001795);
		assertEquals(308677273, variable.dequeue());
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.enqueue(-1371658499);
		variable.enqueue(-1479848638);
    }
    @Test
    public void test872() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test873() {
		Queue variable = new Queue();
		variable.enqueue(-1911742234);
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.enqueue(896257072);
		variable.isFull();
		variable.toString();
		assertEquals(896257072, variable.dequeue());
		variable.enqueue(1987528759);
    }
    @Test
    public void test874() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test875() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test876() {
		Queue y = new Queue();
		y.enqueue(-1688447945);
		y.enqueue(1315066452);
		y.isEmpty();
		assertEquals("[1315066452]", y.toString());
		y.toString();
		y.toString();
    }
    @Test
    public void test877() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(-340740647);
    }
    @Test
    public void test878() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(46249091);
		Var.dequeue();
		Var.enqueue(-2127926124);
    }
    @Test
    public void test879() {
		Queue Var = new Queue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.enqueue(1137868329);
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1589684291);
		Var.enqueue(605584681);
		Var.dequeue();
		Var.enqueue(-109527544);
    }
    @Test
    public void test880() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isFull();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.enqueue(1266657399);
		x.enqueue(-1064143517);
		x.isEmpty();
		assertEquals("[1266657399]", x.toString());
		x.isEmpty();
		assertEquals(1266657399, x.dequeue());
		x.enqueue(1484182205);
		assertFalse(x.isFull());
		x.isFull();
		x.toString();
    }
    @Test
    public void test881() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test882() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test883() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.enqueue(259958277);
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test884() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.dequeue();
		Var.enqueue(937892078);
		Var.isEmpty();
		assertEquals(937892078, Var.dequeue());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-180251799);
		Var.isFull();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test885() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.enqueue(109848105);
    }
    @Test
    public void test886() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-1671612866);
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test887() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-1022745476);
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.enqueue(-1325252794);
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isEmpty();
		x.enqueue(1291321269);
		x.isFull();
		x.isFull();
    }
    @Test
    public void test888() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(258143558);
    }
    @Test
    public void test889() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test890() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.enqueue(-1159240259);
    }
    @Test
    public void test891() {
		Queue variable = new Queue();
		variable.enqueue(735518411);
		variable.toString();
		assertFalse(variable.isFull());
		assertEquals("[735518411]", variable.toString());
		assertEquals("[735518411]", variable.toString());
		variable.isEmpty();
		variable.enqueue(584713728);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test892() {
		Queue y = new Queue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.toString();
    }
    @Test
    public void test893() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-2142500118);
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(456903590);
    }
    @Test
    public void test894() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test895() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test896() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-2036782138);
		variable.enqueue(1390435804);
		variable.isFull();
		assertEquals(1390435804, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test897() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.dequeue();
		y.enqueue(-154350112);
		assertTrue(y.isEmpty());
		y.isFull();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test898() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.enqueue(-1676809678);
    }
    @Test
    public void test899() {
		Queue variable = new Queue();
		variable.enqueue(876379378);
		variable.isEmpty();
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.enqueue(528005975);
		variable.enqueue(-727436248);
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test900() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test901() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.enqueue(1447074736);
		z.enqueue(466204235);
		z.enqueue(1339470316);
		assertEquals(1447074736, z.dequeue());
		z.dequeue();
		z.enqueue(-872544726);
		z.isEmpty();
		z.dequeue();
		z.isFull();
		z.enqueue(-1303055214);
    }
    @Test
    public void test902() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.enqueue(-2061990019);
    }
    @Test
    public void test903() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.enqueue(1343626900);
		assertFalse(Var.isEmpty());
		Var.isEmpty();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test904() {
		Queue y = new Queue();
		y.enqueue(2091358986);
		assertFalse(y.isFull());
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.enqueue(-969773600);
    }
    @Test
    public void test905() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.toString();
		z.isFull();
		z.toString();
    }
    @Test
    public void test906() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		assertEquals("[]", y.toString());
		y.isFull();
		y.toString();
		y.enqueue(1115753);
		y.isFull();
		assertEquals("[1115753]", y.toString());
		y.isEmpty();
		assertFalse(y.isEmpty());
		assertFalse(y.isFull());
		y.enqueue(-1910234122);
    }
    @Test
    public void test907() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test908() {
		Queue variable = new Queue();
		variable.enqueue(519649786);
		variable.isFull();
		variable.isFull();
		variable.enqueue(-1614995174);
		variable.isEmpty();
		variable.enqueue(278034604);
    }
    @Test
    public void test909() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.dequeue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test910() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test911() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-1578647367);
		y.isFull();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test912() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-715238698);
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(736880886);
    }
    @Test
    public void test913() {
		Queue Var = new Queue();
		Var.enqueue(479039120);
    }
    @Test
    public void test914() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.toString();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.enqueue(-1141345495);
		assertEquals("[]", z.toString());
		z.toString();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test915() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.enqueue(34276746);
		y.dequeue();
		assertTrue(y.isEmpty());
		y.toString();
		y.enqueue(-1390786513);
		assertEquals(-1, y.dequeue());
		y.enqueue(895998018);
		y.enqueue(-1624266775);
		y.toString();
		y.toString();
    }
    @Test
    public void test916() {
		Queue z = new Queue();
		z.enqueue(-1773434583);
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.enqueue(-1007791892);
		z.toString();
		z.isEmpty();
		z.enqueue(172994748);
		z.dequeue();
		z.enqueue(-1099752235);
		assertTrue(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test917() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(-1359404142);
		assertEquals(-1, z.dequeue());
		z.enqueue(-1524814003);
		z.dequeue();
		z.enqueue(-1907473258);
		z.isFull();
		assertFalse(z.isFull());
		z.enqueue(-1219910703);
		z.dequeue();
		z.toString();
    }
    @Test
    public void test918() {
		Queue y = new Queue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.enqueue(928082198);
		assertFalse(y.isFull());
		y.isFull();
		assertFalse(y.isFull());
		y.enqueue(-521269344);
		assertEquals(928082198, y.dequeue());
		assertEquals("[]", y.toString());
		y.enqueue(-580424834);
		y.toString();
		y.toString();
    }
    @Test
    public void test919() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(-1961076112);
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test920() {
		Queue z = new Queue();
		z.enqueue(337622479);
		z.enqueue(-211682976);
		z.isEmpty();
		z.enqueue(2080409992);
		z.isEmpty();
    }
    @Test
    public void test921() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(958974522);
		assertFalse(x.isFull());
		assertFalse(x.isEmpty());
		assertEquals(958974522, x.dequeue());
		x.isFull();
    }
    @Test
    public void test922() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.enqueue(-1311366112);
		Var.toString();
		Var.toString();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(55425858);
		Var.toString();
    }
    @Test
    public void test923() {
		Queue Var = new Queue();
		Var.enqueue(-1783292701);
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test924() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(801910529);
		assertEquals(801910529, x.dequeue());
		x.toString();
		x.dequeue();
		x.enqueue(-339106569);
    }
    @Test
    public void test925() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-213215253);
    }
    @Test
    public void test926() {
		Queue variable = new Queue();
		variable.enqueue(-81984688);
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test927() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(-1670158360);
    }
    @Test
    public void test928() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test929() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.toString();
		y.toString();
    }
    @Test
    public void test930() {
		Queue y = new Queue();
		y.enqueue(-1019928251);
    }
    @Test
    public void test931() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.enqueue(-385272084);
		y.enqueue(-75165665);
		y.dequeue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1277864234);
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test932() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.toString();
		variable.isFull();
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test933() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test934() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test935() {
		Queue variable = new Queue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test936() {
		Queue z = new Queue();
		z.enqueue(-182338166);
		z.isFull();
		assertFalse(z.isFull());
		z.toString();
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(-692358892);
    }
    @Test
    public void test937() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test938() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(-2118528631);
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test939() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(577781533);
		x.isEmpty();
		x.toString();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test940() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.toString();
		Var.enqueue(-2073798785);
    }
    @Test
    public void test941() {
		Queue variable = new Queue();
		variable.enqueue(397631736);
		variable.isFull();
		variable.enqueue(-946408235);
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.toString();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(-983280919);
    }
    @Test
    public void test942() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(275848973);
		variable.isFull();
		assertEquals(275848973, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(-1113893291);
    }
    @Test
    public void test943() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.enqueue(1169827448);
		assertFalse(x.isFull());
		x.dequeue();
		x.toString();
    }
    @Test
    public void test944() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.toString();
		variable.enqueue(-1237002002);
    }
    @Test
    public void test945() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test946() {
		Queue y = new Queue();
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(-159522110);
		y.isEmpty();
		y.enqueue(64844910);
		assertEquals(64844910, y.dequeue());
		y.enqueue(-506478604);
    }
    @Test
    public void test947() {
		Queue Var = new Queue();
		Var.enqueue(-1425650104);
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test948() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(-1044779872);
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test949() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-380701061);
    }
    @Test
    public void test950() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(1719116949);
		z.isEmpty();
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(1700228789);
		z.dequeue();
		z.enqueue(2100654821);
		z.isFull();
		z.isFull();
    }
    @Test
    public void test951() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.enqueue(1252410638);
		x.toString();
		assertEquals("[1252410638]", x.toString());
		x.enqueue(-1179295566);
		x.toString();
		x.dequeue();
    }
    @Test
    public void test952() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.enqueue(216999644);
		assertFalse(x.isFull());
		assertEquals("[216999644]", x.toString());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test953() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test954() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(1064534399);
		x.isEmpty();
		assertEquals("[1064534399]", x.toString());
		assertEquals(1064534399, x.dequeue());
		x.dequeue();
		x.isFull();
		x.toString();
    }
    @Test
    public void test955() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(-455142225);
		x.isFull();
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(-29052513);
		x.isEmpty();
		x.isFull();
		x.enqueue(-586600085);
    }
    @Test
    public void test956() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(-1680723502);
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.toString();
		x.enqueue(637951636);
		x.isFull();
		x.isFull();
		x.toString();
		assertFalse(x.isFull());
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test957() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test958() {
		Queue z = new Queue();
		z.enqueue(1098821716);
		z.toString();
		assertEquals("[1098821716]", z.toString());
		z.toString();
    }
    @Test
    public void test959() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(1668820206);
		variable.toString();
		variable.toString();
    }
    @Test
    public void test960() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.enqueue(1429136798);
		x.isFull();
		x.dequeue();
		x.isFull();
		x.toString();
    }
    @Test
    public void test961() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.toString();
		z.toString();
		z.isEmpty();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.dequeue();
    }
    @Test
    public void test962() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test963() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.toString();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(-18366927);
		variable.enqueue(1716238849);
		assertEquals("[1716238849]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test964() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(1777673891);
		Var.isFull();
		Var.toString();
		Var.toString();
		assertEquals("[1777673891]", Var.toString());
		Var.isEmpty();
		Var.enqueue(636519666);
		Var.isEmpty();
    }
    @Test
    public void test965() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test966() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.toString();
		assertEquals("[]", y.toString());
		y.toString();
		y.toString();
		y.toString();
		y.enqueue(67436190);
		y.dequeue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test967() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.dequeue();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.enqueue(228470146);
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.enqueue(-1760545928);
		x.dequeue();
		x.enqueue(501056299);
		x.enqueue(1306400228);
    }
    @Test
    public void test968() {
		Queue z = new Queue();
		z.enqueue(1065568458);
    }
    @Test
    public void test969() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.toString();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.isFull();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.toString();
		x.enqueue(-750401776);
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isFull();
    }
    @Test
    public void test970() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(-1722558718);
		assertEquals("[]", y.toString());
		y.isFull();
		y.enqueue(1554976713);
		y.toString();
		y.enqueue(242742402);
    }
    @Test
    public void test971() {
		Queue variable = new Queue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(1728627449);
		variable.toString();
    }
    @Test
    public void test972() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(-2076723471);
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isFull();
		z.isFull();
		assertEquals("[]", z.toString());
		z.toString();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test973() {
		Queue z = new Queue();
		z.enqueue(-841118418);
		z.isFull();
    }
    @Test
    public void test974() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1115320855);
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.enqueue(877269308);
		Var.toString();
		Var.toString();
    }
    @Test
    public void test975() {
		Queue z = new Queue();
		z.enqueue(323274009);
    }
    @Test
    public void test976() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(1532919064);
		assertFalse(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test977() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1586685002);
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.enqueue(-2087388614);
		assertTrue(y.isEmpty());
		y.enqueue(-1400030678);
		y.toString();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.enqueue(1218662361);
		assertEquals(1218662361, y.dequeue());
		y.enqueue(-1744798217);
		assertFalse(y.isFull());
		y.enqueue(-1650566124);
    }
    @Test
    public void test978() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-970682134);
    }
    @Test
    public void test979() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test980() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(-1260064051);
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test981() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(-249072210);
		z.toString();
		z.isFull();
		z.isEmpty();
		z.isFull();
		z.enqueue(1333766326);
		z.enqueue(971124656);
		z.isEmpty();
		z.enqueue(1543848962);
    }
    @Test
    public void test982() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(1034388655);
		assertEquals(1034388655, x.dequeue());
		x.toString();
    }
    @Test
    public void test983() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.toString();
		z.isEmpty();
		z.isEmpty();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.enqueue(1097531882);
		z.enqueue(-1520619137);
		assertFalse(z.isEmpty());
		z.toString();
		z.dequeue();
    }
    @Test
    public void test984() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test985() {
		Queue variable = new Queue();
		variable.enqueue(1356627063);
		variable.dequeue();
    }
    @Test
    public void test986() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(-1634594811);
		z.enqueue(539594518);
		z.toString();
		z.isEmpty();
		z.enqueue(669377974);
		assertFalse(z.isEmpty());
		z.toString();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test987() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(-820569994);
		assertEquals("[]", y.toString());
		y.enqueue(-1707763473);
    }
    @Test
    public void test988() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		assertFalse(z.isFull());
		z.dequeue();
		z.enqueue(1988115802);
		z.isFull();
		z.enqueue(-698266316);
    }
    @Test
    public void test989() {
		Queue variable = new Queue();
		variable.enqueue(141819072);
    }
    @Test
    public void test990() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test991() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-500638474);
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(-1792267973);
		variable.dequeue();
    }
    @Test
    public void test992() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-947173816);
    }
    @Test
    public void test993() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test994() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.enqueue(-1716223848);
		y.toString();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.enqueue(240841644);
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.toString();
		y.isFull();
    }
    @Test
    public void test995() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.enqueue(1956673907);
		assertEquals("[1956673907]", variable.toString());
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-630883750);
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1625978392);
		variable.toString();
    }
    @Test
    public void test996() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-1942065191);
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		x.enqueue(430652592);
		x.isFull();
    }
    @Test
    public void test997() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(326902401);
		assertFalse(Var.isFull());
		assertEquals("[326902401]", Var.toString());
		Var.toString();
    }
    @Test
    public void test998() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(2104716221);
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.isFull();
		assertEquals(2104716221, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test999() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.dequeue();
    }
    @Test
    public void test1000() {
		Queue variable = new Queue();
		variable.enqueue(1983595446);
		variable.toString();
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test1001() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(-122148766);
		z.dequeue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isFull();
		z.isEmpty();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.enqueue(482019117);
    }
    @Test
    public void test1002() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isFull();
		variable.enqueue(-994672577);
		variable.enqueue(-1755351360);
    }
    @Test
    public void test1003() {
		Queue Var = new Queue();
		Var.enqueue(688289785);
		Var.toString();
		Var.enqueue(-2019706133);
    }
    @Test
    public void test1004() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test1005() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.isFull();
		Var.enqueue(-298972916);
		assertEquals("[]", Var.toString());
		Var.enqueue(-231228145);
		Var.enqueue(1938596820);
    }
    @Test
    public void test1006() {
		Queue z = new Queue();
		z.toString();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.enqueue(1287387382);
		z.toString();
		z.isFull();
		z.toString();
		z.enqueue(-677457898);
		assertEquals(1287387382, z.dequeue());
		z.isEmpty();
		z.isEmpty();
		z.enqueue(2138126314);
		assertEquals(2138126314, z.dequeue());
		z.isFull();
    }
    @Test
    public void test1007() {
		Queue Var = new Queue();
		Var.enqueue(-696202030);
		Var.enqueue(1521047711);
		Var.dequeue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.enqueue(1762732300);
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test1008() {
		Queue x = new Queue();
		x.enqueue(-21348749);
		x.toString();
		x.isEmpty();
		x.isFull();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.enqueue(675913375);
		x.toString();
		x.enqueue(-1509127357);
    }
    @Test
    public void test1009() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test1010() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-1891531381);
		assertFalse(Var.isFull());
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test1011() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.toString();
		y.enqueue(-725306061);
		y.enqueue(1632052195);
		assertFalse(y.isEmpty());
		assertEquals(1632052195, y.dequeue());
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test1012() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test1013() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(934941702);
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test1014() {
		Queue y = new Queue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
		y.enqueue(839130827);
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.toString();
		y.toString();
    }
    @Test
    public void test1015() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(1260014451);
		z.isFull();
		z.isEmpty();
		z.isFull();
		z.dequeue();
		assertFalse(z.isFull());
		z.toString();
		z.enqueue(-697504319);
    }
    @Test
    public void test1016() {
		Queue y = new Queue();
		y.enqueue(-2076606666);
		y.dequeue();
		y.enqueue(-2090022460);
		y.isFull();
		assertEquals("[]", y.toString());
		y.dequeue();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test1017() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test1018() {
		Queue variable = new Queue();
		variable.enqueue(672340598);
    }
    @Test
    public void test1019() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(-727891106);
    }
    @Test
    public void test1020() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(356860187);
    }
    @Test
    public void test1021() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test1022() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-1214637354);
		Var.dequeue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(-1225343499);
		Var.enqueue(-933426711);
		Var.isFull();
    }
    @Test
    public void test1023() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test1024() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test1025() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test1026() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.enqueue(2088810212);
		y.isEmpty();
		assertFalse(y.isEmpty());
		y.isEmpty();
		y.enqueue(1094562897);
		assertEquals("[2088810212, 1094562897]", y.toString());
		assertEquals(2088810212, y.dequeue());
		assertEquals("[1094562897]", y.toString());
		y.enqueue(1087867373);
    }
    @Test
    public void test1027() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test1028() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isEmpty();
		Var.isFull();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.enqueue(-1395154017);
    }
    @Test
    public void test1029() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(-723951775);
		z.isEmpty();
		z.enqueue(-1831480676);
		assertFalse(z.isFull());
		z.isEmpty();
		z.toString();
		z.enqueue(-104094022);
    }
    @Test
    public void test1030() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isFull();
		x.toString();
		x.isFull();
		x.enqueue(-763615053);
		x.isFull();
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test1031() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.toString();
		z.enqueue(-769848431);
		z.enqueue(-212747617);
		z.isEmpty();
    }
    @Test
    public void test1032() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.enqueue(-988491629);
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1773757279);
		Var.isFull();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test1033() {
		Queue z = new Queue();
		z.toString();
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(-665181589);
    }
    @Test
    public void test1034() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.toString();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.enqueue(-1393264610);
		x.dequeue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.toString();
    }
    @Test
    public void test1035() {
		Queue y = new Queue();
		y.enqueue(1266067815);
		assertFalse(y.isEmpty());
		y.toString();
		y.toString();
		assertEquals(1266067815, y.dequeue());
		y.isFull();
		y.isEmpty();
		y.enqueue(-869108255);
		y.dequeue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test1036() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-969557248);
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test1037() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test1038() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.enqueue(1201630082);
		x.toString();
		assertFalse(x.isFull());
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test1039() {
		Queue x = new Queue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.enqueue(1388245756);
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test1040() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.dequeue();
		y.enqueue(-391992415);
		y.dequeue();
		y.dequeue();
		y.dequeue();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test1041() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test1042() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.enqueue(1809713234);
		variable.isEmpty();
		variable.enqueue(-842237286);
		variable.dequeue();
    }
    @Test
    public void test1043() {
		Queue y = new Queue();
		y.enqueue(-36204677);
		y.enqueue(-937479787);
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.enqueue(1869747427);
		y.enqueue(-1411672824);
		y.enqueue(793976806);
		y.enqueue(-1793976328);
    }
    @Test
    public void test1044() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test1045() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.isFull();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.isFull();
		x.toString();
		x.toString();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test1046() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.dequeue();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.enqueue(214616583);
		x.toString();
		x.isFull();
		x.enqueue(-1079106878);
		x.dequeue();
		x.enqueue(-392340307);
    }
    @Test
    public void test1047() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.enqueue(1395186900);
		y.isFull();
		y.toString();
		y.enqueue(232843098);
		assertFalse(y.isFull());
		assertFalse(y.isEmpty());
		y.isEmpty();
		y.enqueue(-642100508);
    }
    @Test
    public void test1048() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-1731260610);
    }
    @Test
    public void test1049() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.toString();
		x.dequeue();
    }
    @Test
    public void test1050() {
		Queue y = new Queue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.enqueue(195018850);
		y.isFull();
		y.toString();
		y.toString();
    }
    @Test
    public void test1051() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.dequeue();
		z.dequeue();
		z.toString();
		z.enqueue(-149375531);
		z.isEmpty();
    }
    @Test
    public void test1052() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.dequeue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.toString();
    }
    @Test
    public void test1053() {
		Queue z = new Queue();
		z.enqueue(-1262762261);
		z.isFull();
		assertFalse(z.isFull());
		z.dequeue();
		z.isFull();
		z.isFull();
		z.dequeue();
		z.enqueue(787992769);
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test1054() {
		Queue x = new Queue();
		x.enqueue(1946562327);
		x.toString();
    }
    @Test
    public void test1055() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.toString();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(85034831);
    }
    @Test
    public void test1056() {
		Queue variable = new Queue();
		variable.enqueue(-1296476752);
		assertEquals(-1, variable.dequeue());
		variable.toString();
    }
    @Test
    public void test1057() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-1020304013);
		x.isFull();
		x.enqueue(-1014628128);
		x.toString();
		x.isFull();
		x.isEmpty();
		x.toString();
		x.toString();
    }
    @Test
    public void test1058() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(675229632);
		variable.toString();
		variable.enqueue(-1470796007);
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test1059() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(-896949378);
		variable.isEmpty();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.toString();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test1060() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-1221235761);
    }
    @Test
    public void test1061() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test1062() {
		Queue z = new Queue();
		z.enqueue(1862733998);
		z.enqueue(-140580435);
		z.enqueue(-995604902);
		z.isFull();
		z.enqueue(1956254694);
		z.enqueue(681334626);
		z.isEmpty();
		z.enqueue(1065002832);
		z.enqueue(925859701);
		z.dequeue();
    }
    @Test
    public void test1063() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.dequeue();
		y.enqueue(-261659547);
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
		y.isFull();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test1064() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test1065() {
		Queue Var = new Queue();
		Var.enqueue(-525922584);
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(805639870);
		Var.isEmpty();
    }
    @Test
    public void test1066() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test1067() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(1209139829);
		z.toString();
    }
    @Test
    public void test1068() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-1578534417);
		variable.enqueue(982068801);
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test1069() {
		Queue variable = new Queue();
		variable.enqueue(-2109705876);
		variable.isEmpty();
		variable.enqueue(413985533);
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-41414042);
    }
    @Test
    public void test1070() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.toString();
		y.isFull();
		y.toString();
    }
    @Test
    public void test1071() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test1072() {
		Queue y = new Queue();
		y.enqueue(-828844206);
		y.isEmpty();
    }
    @Test
    public void test1073() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-960087038);
		z.isFull();
    }
    @Test
    public void test1074() {
		Queue Var = new Queue();
		Var.enqueue(-1263835259);
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(795449682);
		assertEquals(795449682, Var.dequeue());
		Var.isFull();
		Var.toString();
		Var.dequeue();
		Var.toString();
		Var.enqueue(1330696146);
		Var.toString();
    }
    @Test
    public void test1075() {
		Queue Var = new Queue();
		Var.enqueue(-2034569068);
		assertFalse(Var.isFull());
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test1076() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(1160306226);
		assertFalse(x.isFull());
		x.dequeue();
		x.isEmpty();
		x.enqueue(1714966172);
		x.toString();
		x.isEmpty();
		assertFalse(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test1077() {
		Queue z = new Queue();
		z.enqueue(-479156200);
		z.toString();
		z.isEmpty();
		z.enqueue(-1218607764);
		z.isEmpty();
    }
    @Test
    public void test1078() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.enqueue(-2046216033);
    }
    @Test
    public void test1079() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.enqueue(205741207);
		z.enqueue(2038198560);
		z.isFull();
		z.isFull();
    }
    @Test
    public void test1080() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test1081() {
		Queue variable = new Queue();
		variable.isFull();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test1082() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.enqueue(112907955);
		assertFalse(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.enqueue(2122916727);
		Var.enqueue(732544436);
		Var.enqueue(1590713642);
		Var.dequeue();
		assertEquals(2122916727, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test1083() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.toString();
		z.enqueue(451494315);
    }
    @Test
    public void test1084() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.dequeue();
		x.isFull();
		x.enqueue(1396789126);
		x.isFull();
    }
    @Test
    public void test1085() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(-490526590);
		z.enqueue(-789305002);
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.dequeue();
		z.dequeue();
		z.toString();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isFull();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test1086() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test1087() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test1088() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.isFull();
		x.toString();
    }
    @Test
    public void test1089() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(1076552419);
		assertFalse(Var.isFull());
		assertEquals(1076552419, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.enqueue(-1558239425);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(1037021761);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test1090() {
		Queue variable = new Queue();
		variable.enqueue(1538003237);
		assertFalse(variable.isFull());
		variable.enqueue(-1427296812);
		variable.enqueue(73537850);
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test1091() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.toString();
		assertFalse(z.isFull());
		z.toString();
		z.dequeue();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test1092() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test1093() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(185390920);
		variable.toString();
    }
    @Test
    public void test1094() {
		Queue z = new Queue();
		z.enqueue(-1119874571);
		z.toString();
		z.enqueue(1255315401);
		z.dequeue();
		z.dequeue();
		z.toString();
		z.isFull();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test1095() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test1096() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.toString();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.toString();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test1097() {
		Queue y = new Queue();
		y.enqueue(-1708237953);
    }
    @Test
    public void test1098() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(252788784);
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-957832346);
    }
    @Test
    public void test1099() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-26005922);
		variable.isFull();
		variable.enqueue(-1781558030);
		variable.dequeue();
    }
    @Test
    public void test1100() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test1101() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-601473037);
		z.toString();
		z.toString();
		assertTrue(z.isEmpty());
		z.isFull();
		assertTrue(z.isEmpty());
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isFull();
		z.enqueue(-1648398929);
		z.toString();
    }
    @Test
    public void test1102() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(1393297272);
		y.dequeue();
    }
    @Test
    public void test1103() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.enqueue(1001646833);
		z.enqueue(-683764722);
		assertFalse(z.isFull());
		z.isEmpty();
		assertEquals("[1001646833]", z.toString());
		z.toString();
    }
    @Test
    public void test1104() {
		Queue variable = new Queue();
		variable.enqueue(616383018);
		assertFalse(variable.isEmpty());
		assertFalse(variable.isEmpty());
		assertEquals(616383018, variable.dequeue());
		variable.enqueue(-689387476);
		variable.isEmpty();
		variable.enqueue(-1115436556);
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-2073180042);
		variable.dequeue();
    }
    @Test
    public void test1105() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.dequeue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.enqueue(1961036303);
		y.isFull();
		y.dequeue();
		y.isEmpty();
		y.enqueue(-2120168631);
		y.isEmpty();
    }
    @Test
    public void test1106() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test1107() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.enqueue(-1096950468);
		y.dequeue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test1108() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test1109() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test1110() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test1111() {
		Queue z = new Queue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.isFull();
		assertFalse(z.isFull());
		z.enqueue(652719362);
		z.isFull();
		assertEquals("[652719362]", z.toString());
		z.isEmpty();
		z.isFull();
		z.isFull();
		assertFalse(z.isEmpty());
		assertFalse(z.isFull());
		assertFalse(z.isEmpty());
		z.toString();
		z.dequeue();
    }
    @Test
    public void test1112() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test1113() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.isFull();
		y.toString();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test1114() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(888853696);
		Var.enqueue(344125027);
		Var.isFull();
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
		assertFalse(Var.isEmpty());
		Var.enqueue(-1893180879);
    }
    @Test
    public void test1115() {
		Queue Var = new Queue();
		Var.enqueue(-1348025699);
		Var.enqueue(-1077622958);
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test1116() {
		Queue x = new Queue();
		x.enqueue(1219982867);
		x.isFull();
		x.isEmpty();
		assertEquals(1219982867, x.dequeue());
		x.isFull();
		x.isFull();
    }
    @Test
    public void test1117() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(-1451145056);
		variable.toString();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test1118() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test1119() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(-905279763);
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(406172443);
		assertEquals(406172443, y.dequeue());
		y.enqueue(2129988131);
		y.toString();
		y.enqueue(-197755409);
		assertFalse(y.isFull());
		assertEquals("[2129988131]", y.toString());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test1120() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.toString();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.toString();
		z.dequeue();
		z.toString();
		z.enqueue(1577532972);
    }
    @Test
    public void test1121() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.dequeue();
		Var.enqueue(689320031);
		assertEquals(689320031, Var.dequeue());
		Var.dequeue();
		Var.enqueue(865460856);
    }
    @Test
    public void test1122() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isEmpty();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test1123() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.enqueue(-65071589);
		Var.isFull();
		Var.enqueue(-1076476568);
		Var.isFull();
    }
    @Test
    public void test1124() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test1125() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.enqueue(1467723258);
		x.dequeue();
		x.dequeue();
		x.isFull();
		x.enqueue(-224125210);
    }
    @Test
    public void test1126() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-2076986116);
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-1535052743);
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test1127() {
		Queue variable = new Queue();
		variable.enqueue(-1644099536);
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test1128() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test1129() {
		Queue z = new Queue();
		z.isFull();
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test1130() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(219216593);
		assertEquals("[219216593]", x.toString());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(-651191230);
    }
    @Test
    public void test1131() {
		Queue z = new Queue();
		z.enqueue(-467167381);
		z.toString();
    }
    @Test
    public void test1132() {
		Queue z = new Queue();
		z.enqueue(-478653854);
    }
    @Test
    public void test1133() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test1134() {
		Queue y = new Queue();
		y.enqueue(1602796569);
    }
    @Test
    public void test1135() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		x.enqueue(-202121505);
    }
    @Test
    public void test1136() {
		Queue y = new Queue();
		y.enqueue(1280501291);
    }
    @Test
    public void test1137() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(77746745);
		assertFalse(Var.isEmpty());
		Var.enqueue(-744340104);
		assertEquals("[77746745]", Var.toString());
		Var.enqueue(1494859150);
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(1854429190);
    }
    @Test
    public void test1138() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.isFull();
		x.enqueue(336732895);
		x.enqueue(-1877657985);
		assertEquals("[336732895]", x.toString());
		x.enqueue(1163725157);
		x.enqueue(-1681051210);
		x.isFull();
    }
    @Test
    public void test1139() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-1304414002);
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(49193483);
		variable.isFull();
		variable.enqueue(-57994839);
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test1140() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.isFull();
		z.enqueue(85994163);
		z.isEmpty();
		assertEquals("[85994163]", z.toString());
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test1141() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.toString();
		z.isEmpty();
		z.isFull();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(-1874155126);
		assertEquals("[]", z.toString());
		z.toString();
		z.dequeue();
    }
    @Test
    public void test1142() {
		Queue Var = new Queue();
		Var.enqueue(-1771554157);
		Var.enqueue(1968602170);
    }
    @Test
    public void test1143() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(1951391622);
		variable.enqueue(-1689362848);
    }
    @Test
    public void test1144() {
		Queue variable = new Queue();
		variable.enqueue(247230496);
		variable.isEmpty();
    }
    @Test
    public void test1145() {
		Queue variable = new Queue();
		variable.enqueue(-631307194);
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test1146() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-1534988717);
		Var.toString();
		Var.toString();
		Var.enqueue(1127234302);
		Var.isEmpty();
		Var.enqueue(-315390497);
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.enqueue(2119000375);
    }
    @Test
    public void test1147() {
		Queue z = new Queue();
		z.enqueue(526822697);
    }
    @Test
    public void test1148() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(-1515924649);
		Var.enqueue(598027298);
		Var.isFull();
    }
    @Test
    public void test1149() {
		Queue z = new Queue();
		z.enqueue(-1810259882);
		assertTrue(z.isEmpty());
		z.isFull();
		z.toString();
		z.toString();
		z.isFull();
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.enqueue(-601828502);
		z.toString();
    }
    @Test
    public void test1150() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test1151() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-1017665916);
    }
    @Test
    public void test1152() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(-369815204);
		variable.enqueue(1756119307);
		variable.isEmpty();
		variable.isEmpty();
		assertEquals("[1756119307]", variable.toString());
		variable.enqueue(1268739251);
		assertEquals("[1756119307, 1268739251]", variable.toString());
		variable.dequeue();
		variable.toString();
		assertEquals(1268739251, variable.dequeue());
		variable.isFull();
		variable.toString();
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test1153() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test1154() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(1071447741);
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(601371060);
		Var.enqueue(-347370055);
		Var.enqueue(-1129830037);
    }
    @Test
    public void test1155() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(1982324787);
    }
    @Test
    public void test1156() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.enqueue(1989299446);
		x.dequeue();
		x.enqueue(-483047519);
    }
    @Test
    public void test1157() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-544060388);
		z.isFull();
		z.enqueue(1682650214);
		z.enqueue(-1334028100);
		z.isEmpty();
		z.isEmpty();
		assertFalse(z.isEmpty());
		z.isFull();
		assertEquals(1682650214, z.dequeue());
		z.enqueue(-654745269);
		assertEquals("[]", z.toString());
		z.enqueue(-1054829563);
    }
    @Test
    public void test1158() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(652004029);
    }
    @Test
    public void test1159() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.enqueue(1456527026);
		assertFalse(y.isFull());
		y.isFull();
		assertFalse(y.isEmpty());
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test1160() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.enqueue(1425206448);
		y.isEmpty();
		assertFalse(y.isEmpty());
		y.isFull();
		y.isFull();
		y.enqueue(-368418940);
		assertEquals(1425206448, y.dequeue());
		y.toString();
		y.isFull();
		y.toString();
    }
    @Test
    public void test1161() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test1162() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(896457785);
		assertFalse(Var.isFull());
		Var.enqueue(-1840575465);
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
		assertEquals(896457785, Var.dequeue());
		Var.enqueue(-488528138);
		Var.isEmpty();
		Var.enqueue(1598801132);
    }
    @Test
    public void test1163() {
		Queue x = new Queue();
		x.enqueue(-2133668975);
		x.toString();
		x.isFull();
		x.dequeue();
		x.enqueue(-1228902521);
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(-199521221);
		x.isEmpty();
    }
    @Test
    public void test1164() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test1165() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.toString();
		y.toString();
		y.enqueue(-583486389);
		assertFalse(y.isFull());
		y.isFull();
		y.dequeue();
		y.enqueue(791783971);
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test1166() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isFull();
		assertEquals("[]", z.toString());
		z.toString();
		z.dequeue();
		z.toString();
		z.toString();
    }
    @Test
    public void test1167() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-43981735);
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test1168() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test1169() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		z.isFull();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test1170() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-1015331785);
		x.enqueue(-1226373317);
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isFull();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isFull();
		x.toString();
    }
    @Test
    public void test1171() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.enqueue(-1001163411);
    }
    @Test
    public void test1172() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		z.enqueue(-2062112330);
    }
    @Test
    public void test1173() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.enqueue(-1390607304);
		assertFalse(variable.isFull());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(1448382023);
		variable.enqueue(412416104);
		variable.isEmpty();
		variable.isFull();
		assertFalse(variable.isEmpty());
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test1174() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-111748928);
		variable.isFull();
		variable.enqueue(-1720622971);
    }
    @Test
    public void test1175() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test1176() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.toString();
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test1177() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(-1287584776);
		assertFalse(x.isFull());
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test1178() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.enqueue(1399482568);
		variable.enqueue(-1165613182);
    }
    @Test
    public void test1179() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-92133971);
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test1180() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.toString();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test1181() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(1732307872);
		x.toString();
		x.isFull();
		x.enqueue(828995938);
    }
    @Test
    public void test1182() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.toString();
		assertFalse(z.isFull());
		z.isFull();
		z.toString();
		z.enqueue(1895343779);
		z.isEmpty();
    }
    @Test
    public void test1183() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.enqueue(-1958999854);
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.enqueue(1001620447);
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test1184() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.isFull();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.enqueue(1467240919);
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test1185() {
		Queue x = new Queue();
		x.enqueue(-1868252739);
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(-1812118048);
		assertFalse(x.isFull());
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test1186() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.enqueue(-15324723);
    }
    @Test
    public void test1187() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-421370269);
		assertEquals("[]", x.toString());
		x.dequeue();
		x.toString();
		x.toString();
    }
    @Test
    public void test1188() {
		Queue variable = new Queue();
		variable.enqueue(1258383702);
		variable.toString();
    }
    @Test
    public void test1189() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.isFull();
		assertTrue(x.isEmpty());
		x.enqueue(270569452);
    }
    @Test
    public void test1190() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isFull();
		z.toString();
		z.enqueue(-1909919757);
		assertFalse(z.isFull());
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(1705026178);
    }
    @Test
    public void test1191() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-230679987);
		variable.isFull();
		variable.isFull();
		variable.toString();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test1192() {
		Queue variable = new Queue();
		variable.enqueue(952540932);
		assertEquals("[952540932]", variable.toString());
		variable.enqueue(-1512534002);
		variable.enqueue(580048812);
		variable.enqueue(-2078475664);
		variable.isEmpty();
    }
    @Test
    public void test1193() {
		Queue y = new Queue();
		y.toString();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isEmpty();
		y.toString();
		y.isFull();
    }
    @Test
    public void test1194() {
		Queue z = new Queue();
		z.isFull();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test1195() {
		Queue z = new Queue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.dequeue();
		z.isFull();
		z.toString();
		z.enqueue(-1816913119);
    }
    @Test
    public void test1196() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test1197() {
		Queue variable = new Queue();
		variable.enqueue(-198941590);
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test1198() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test1199() {
		Queue y = new Queue();
		y.enqueue(-884059872);
		y.enqueue(-2134681158);
		y.enqueue(-900500254);
    }
    @Test
    public void test1200() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test1201() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.isFull();
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(-1850649944);
    }
    @Test
    public void test1202() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(571181661);
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test1203() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.isFull();
		z.toString();
		z.enqueue(-262977923);
    }
    @Test
    public void test1204() {
		Queue x = new Queue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(771597613);
		x.enqueue(327966568);
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test1205() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test1206() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(1411216366);
		variable.enqueue(-275184735);
    }
    @Test
    public void test1207() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-1915061728);
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(1272020184);
    }
    @Test
    public void test1208() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test1209() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.enqueue(1102600481);
		assertEquals("[1102600481]", y.toString());
		assertFalse(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test1210() {
		Queue x = new Queue();
		x.dequeue();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(636773862);
    }
    @Test
    public void test1211() {
		Queue variable = new Queue();
		variable.enqueue(1515039254);
		variable.isEmpty();
		assertEquals(1515039254, variable.dequeue());
		variable.enqueue(-1236231640);
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(-1343387311);
		variable.enqueue(1261541701);
		variable.isFull();
    }
    @Test
    public void test1212() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(-1372564445);
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(-2020978945);
		variable.dequeue();
    }
    @Test
    public void test1213() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1736223852);
		Var.enqueue(769667303);
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(1846184560);
		Var.isFull();
		assertEquals("[1736223852, 769667303, 1846184560]", Var.toString());
		assertFalse(Var.isEmpty());
		assertEquals("[1736223852, 769667303, 1846184560]", Var.toString());
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test1214() {
		Queue variable = new Queue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(-308115112);
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(1676987913);
    }
    @Test
    public void test1215() {
		Queue z = new Queue();
		z.enqueue(-1760802376);
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(158423404);
		assertEquals(158423404, z.dequeue());
		assertTrue(z.isEmpty());
		z.isFull();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.toString();
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test1216() {
		Queue x = new Queue();
		x.enqueue(776929030);
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
		assertEquals("[776929030]", x.toString());
		assertFalse(x.isFull());
		x.isFull();
		assertFalse(x.isFull());
		assertFalse(x.isEmpty());
		x.isEmpty();
		assertEquals(776929030, x.dequeue());
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test1217() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.enqueue(1545740459);
		x.enqueue(1742316808);
		assertEquals("[1545740459, 1742316808]", x.toString());
		x.enqueue(1246404113);
		x.enqueue(-2121743423);
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.enqueue(977676899);
    }
    @Test
    public void test1218() {
		Queue z = new Queue();
		z.enqueue(2078364106);
		z.enqueue(1164551239);
		z.toString();
		z.isEmpty();
		z.enqueue(-11934159);
		z.toString();
		z.isFull();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test1219() {
		Queue Var = new Queue();
		Var.enqueue(1325069140);
		assertEquals("[1325069140]", Var.toString());
		assertEquals(1325069140, Var.dequeue());
		Var.isFull();
		Var.enqueue(-2021782745);
		Var.toString();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(462926661);
		assertFalse(Var.isFull());
		Var.toString();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test1220() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test1221() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.enqueue(637229660);
		variable.enqueue(1632586932);
		assertFalse(variable.isEmpty());
		assertEquals("[637229660, 1632586932]", variable.toString());
		assertFalse(variable.isFull());
		assertEquals(637229660, variable.dequeue());
		variable.toString();
		variable.enqueue(673558923);
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test1222() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-1691020663);
		Var.enqueue(2070207048);
		Var.enqueue(333910017);
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(-787332489);
    }
    @Test
    public void test1223() {
		Queue variable = new Queue();
		variable.enqueue(-2092131358);
		variable.isFull();
		variable.enqueue(-755749913);
		variable.toString();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test1224() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-150499798);
		Var.dequeue();
		Var.toString();
		Var.enqueue(-552682136);
		assertEquals("[]", Var.toString());
		Var.enqueue(1022163308);
    }
    @Test
    public void test1225() {
		Queue Var = new Queue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test1226() {
		Queue x = new Queue();
		x.enqueue(244099379);
    }
    @Test
    public void test1227() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test1228() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.toString();
		x.isEmpty();
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(1096363394);
		x.toString();
		x.dequeue();
    }
    @Test
    public void test1229() {
		Queue z = new Queue();
		z.enqueue(1640559756);
		z.dequeue();
		z.isEmpty();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.dequeue();
		z.enqueue(1115272086);
    }
    @Test
    public void test1230() {
		Queue x = new Queue();
		x.enqueue(-1455381828);
		assertEquals(-1, x.dequeue());
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test1231() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.enqueue(-754454490);
		x.toString();
    }
    @Test
    public void test1232() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test1233() {
		Queue Var = new Queue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(313840750);
		Var.enqueue(6914799);
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test1234() {
		Queue z = new Queue();
		z.enqueue(1637245782);
		z.isFull();
		z.dequeue();
		z.enqueue(-1585666505);
		z.enqueue(190195645);
		z.toString();
		z.toString();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test1235() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.enqueue(1045132521);
		assertFalse(y.isEmpty());
		assertEquals(1045132521, y.dequeue());
		y.enqueue(-214494559);
    }
    @Test
    public void test1236() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test1237() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.toString();
		z.dequeue();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.enqueue(338942138);
		assertEquals("[338942138]", z.toString());
		assertEquals("[338942138]", z.toString());
		assertEquals(338942138, z.dequeue());
		z.dequeue();
		z.enqueue(-1814279197);
		z.enqueue(1938195157);
    }
    @Test
    public void test1238() {
		Queue x = new Queue();
		x.enqueue(1786745766);
		x.isFull();
    }
    @Test
    public void test1239() {
		Queue variable = new Queue();
		variable.enqueue(399655786);
		assertEquals("[399655786]", variable.toString());
		variable.toString();
    }
    @Test
    public void test1240() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test1241() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.isFull();
		variable.enqueue(-397818725);
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test1242() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-1112150864);
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.enqueue(1898201174);
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test1243() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.enqueue(-714140682);
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test1244() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.enqueue(1235021415);
		x.enqueue(2089223930);
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test1245() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(-1748170935);
		z.toString();
		z.enqueue(-762383193);
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.dequeue();
		z.enqueue(-825071609);
		z.isFull();
		z.isEmpty();
		z.enqueue(168272477);
		assertEquals(168272477, z.dequeue());
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test1246() {
		Queue variable = new Queue();
		variable.enqueue(-993441671);
		variable.toString();
		variable.toString();
    }
    @Test
    public void test1247() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(-2125458600);
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test1248() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-1021188346);
		z.isFull();
		z.toString();
		z.enqueue(-1897506676);
    }
    @Test
    public void test1249() {
		Queue z = new Queue();
		z.enqueue(-165254777);
    }
    @Test
    public void test1250() {
		Queue z = new Queue();
		z.toString();
		assertTrue(z.isEmpty());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.toString();
		assertTrue(z.isEmpty());
		z.toString();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(-1929121411);
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.toString();
		z.enqueue(2141745003);
    }
    @Test
    public void test1251() {
		Queue Var = new Queue();
		Var.enqueue(-934638856);
		Var.enqueue(-1010882264);
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.enqueue(-512866115);
		assertEquals(-1, Var.dequeue());
		Var.enqueue(453206522);
    }
    @Test
    public void test1252() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.isFull();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.toString();
    }
    @Test
    public void test1253() {
		Queue variable = new Queue();
		variable.enqueue(-639307659);
    }
    @Test
    public void test1254() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test1255() {
		Queue Var = new Queue();
		Var.enqueue(980057810);
		assertFalse(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test1256() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.enqueue(954424166);
		variable.isEmpty();
		variable.enqueue(2076392494);
		assertFalse(variable.isFull());
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test1257() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test1258() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(-958966930);
    }
    @Test
    public void test1259() {
		Queue x = new Queue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.enqueue(1648220684);
		assertEquals(1648220684, x.dequeue());
		x.toString();
    }
    @Test
    public void test1260() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test1261() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.isFull();
		y.toString();
		y.toString();
		y.toString();
		y.toString();
    }
    @Test
    public void test1262() {
		Queue Var = new Queue();
		Var.enqueue(-285636898);
    }
    @Test
    public void test1263() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test1264() {
		Queue Var = new Queue();
		Var.enqueue(-354272378);
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(-1748581567);
		Var.enqueue(1965696484);
		Var.enqueue(441199962);
		Var.enqueue(1008429050);
		Var.toString();
    }
    @Test
    public void test1265() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(932247988);
    }
    @Test
    public void test1266() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isFull();
		variable.enqueue(-655364200);
    }
    @Test
    public void test1267() {
		Queue Var = new Queue();
		Var.enqueue(1991762782);
		Var.isFull();
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test1268() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(1524370007);
		y.enqueue(1446166702);
		y.dequeue();
		y.isEmpty();
		assertEquals(1446166702, y.dequeue());
		y.toString();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test1269() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.toString();
		z.isEmpty();
		z.isFull();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(1951949445);
		z.dequeue();
		z.toString();
    }
    @Test
    public void test1270() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-739071705);
    }
    @Test
    public void test1271() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isFull();
		assertFalse(Var.isFull());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1328767783);
    }
    @Test
    public void test1272() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test1273() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1957561196);
    }
    @Test
    public void test1274() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.isFull();
		y.enqueue(1701235690);
		y.dequeue();
		y.toString();
		y.enqueue(1086670272);
    }
    @Test
    public void test1275() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.isEmpty();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.enqueue(-990301255);
		y.toString();
		y.toString();
    }
    @Test
    public void test1276() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-349012542);
		assertEquals("[]", z.toString());
		z.isFull();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test1277() {
		Queue y = new Queue();
		y.enqueue(864822105);
		assertEquals("[864822105]", y.toString());
		y.dequeue();
		y.enqueue(-1638690817);
    }
    @Test
    public void test1278() {
		Queue y = new Queue();
		y.enqueue(-1192224684);
		y.isFull();
    }
    @Test
    public void test1279() {
		Queue y = new Queue();
		y.enqueue(-1158959938);
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		y.enqueue(911140137);
    }
    @Test
    public void test1280() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isEmpty();
		y.enqueue(-348309306);
		y.toString();
		y.isFull();
    }
    @Test
    public void test1281() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(2039919162);
    }
    @Test
    public void test1282() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.enqueue(-1835236247);
		x.toString();
		x.enqueue(560175602);
		x.dequeue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test1283() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.toString();
		variable.toString();
    }
    @Test
    public void test1284() {
		Queue y = new Queue();
		y.toString();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.toString();
		y.toString();
    }
    @Test
    public void test1285() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(97399866);
		assertFalse(z.isFull());
		assertEquals(97399866, z.dequeue());
		z.isFull();
		z.isEmpty();
		z.enqueue(-1916209282);
		assertTrue(z.isEmpty());
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(1448104409);
    }
    @Test
    public void test1286() {
		Queue y = new Queue();
		y.dequeue();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.enqueue(-249509748);
    }
    @Test
    public void test1287() {
		Queue z = new Queue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.toString();
    }
    @Test
    public void test1288() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.enqueue(794558437);
		assertFalse(z.isEmpty());
		z.enqueue(587763541);
		z.isEmpty();
		z.toString();
		z.toString();
    }
    @Test
    public void test1289() {
		Queue x = new Queue();
		x.enqueue(2126214204);
		x.dequeue();
		x.toString();
		x.isFull();
    }
    @Test
    public void test1290() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.isFull();
		x.enqueue(-1565008910);
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test1291() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test1292() {
		Queue y = new Queue();
		y.enqueue(-1418284277);
		assertTrue(y.isEmpty());
		y.dequeue();
		y.toString();
		y.isFull();
		y.dequeue();
		y.enqueue(1942228592);
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test1293() {
		Queue z = new Queue();
		z.enqueue(1501136664);
		z.dequeue();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isFull();
		z.dequeue();
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test1294() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test1295() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test1296() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.dequeue();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.enqueue(527148542);
		Var.isEmpty();
    }
    @Test
    public void test1297() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test1298() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(-1133585081);
		variable.enqueue(932299461);
		assertEquals("[932299461]", variable.toString());
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test1299() {
		Queue Var = new Queue();
		Var.enqueue(1306287215);
    }
    @Test
    public void test1300() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.enqueue(-416855190);
		variable.toString();
		variable.enqueue(85352825);
		variable.enqueue(-1679200339);
    }
    @Test
    public void test1301() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test1302() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(764860567);
		z.enqueue(1954111721);
		z.isEmpty();
		z.enqueue(-156842178);
		assertEquals(764860567, z.dequeue());
		assertFalse(z.isEmpty());
		z.enqueue(223706466);
		z.isEmpty();
		z.enqueue(-291639620);
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test1303() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test1304() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test1305() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-1237449491);
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.enqueue(-1242060777);
		variable.enqueue(1070368593);
		assertEquals("[1070368593]", variable.toString());
		assertEquals("[1070368593]", variable.toString());
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test1306() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test1307() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		variable.toString();
		variable.enqueue(-488674974);
    }
    @Test
    public void test1308() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test1309() {
		Queue Var = new Queue();
		Var.enqueue(-247048980);
		Var.enqueue(1534421552);
    }
    @Test
    public void test1310() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1285137969);
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test1311() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-226740009);
    }
    @Test
    public void test1312() {
		Queue Var = new Queue();
		Var.enqueue(1698696303);
		Var.toString();
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		Var.enqueue(-844862215);
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isFull();
		Var.enqueue(-1420895825);
    }
    @Test
    public void test1313() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test1314() {
		Queue z = new Queue();
		z.dequeue();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test1315() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(-1671254017);
		x.isEmpty();
		x.enqueue(-1701640595);
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.enqueue(-332268760);
		x.enqueue(1982215752);
		x.dequeue();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(1363705381);
		assertEquals(1363705381, x.dequeue());
		x.toString();
    }
    @Test
    public void test1316() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.isFull();
		assertTrue(y.isEmpty());
		y.isEmpty();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.isEmpty();
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.toString();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test1317() {
		Queue z = new Queue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.dequeue();
    }
    @Test
    public void test1318() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.isFull();
		y.dequeue();
		y.isFull();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isFull();
    }
    @Test
    public void test1319() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-2114589507);
		variable.enqueue(933301503);
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-1132068460);
		variable.isFull();
		variable.enqueue(-154496708);
    }
    @Test
    public void test1320() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(117273473);
    }
    @Test
    public void test1321() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		y.toString();
		y.toString();
		y.dequeue();
		y.dequeue();
		y.enqueue(2145467344);
		y.isFull();
    }
    @Test
    public void test1322() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test1323() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(1716742449);
		x.dequeue();
		x.dequeue();
		x.enqueue(-1422773342);
		x.dequeue();
		x.isFull();
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test1324() {
		Queue variable = new Queue();
		variable.enqueue(526103278);
    }
    @Test
    public void test1325() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.toString();
		variable.enqueue(1773110826);
		variable.enqueue(-1150431468);
		variable.dequeue();
    }
    @Test
    public void test1326() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.toString();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test1327() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		z.isEmpty();
		z.toString();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.enqueue(1048082078);
		assertFalse(z.isEmpty());
		z.toString();
		z.enqueue(-1378227800);
		z.dequeue();
    }
    @Test
    public void test1328() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test1329() {
		Queue y = new Queue();
		y.toString();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.toString();
		y.isFull();
		y.toString();
		y.dequeue();
		y.toString();
		y.enqueue(37307302);
    }
    @Test
    public void test1330() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.isFull();
		x.enqueue(53808624);
		assertEquals(53808624, x.dequeue());
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test1331() {
		Queue y = new Queue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isFull();
		y.isFull();
		y.enqueue(1472836968);
    }
    @Test
    public void test1332() {
		Queue x = new Queue();
		x.enqueue(414031870);
    }
    @Test
    public void test1333() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-220119054);
		assertTrue(x.isEmpty());
		x.dequeue();
		x.enqueue(-244294081);
		assertFalse(x.isFull());
		x.enqueue(523834191);
		assertEquals("[523834191]", x.toString());
		assertEquals(523834191, x.dequeue());
		x.toString();
		x.isFull();
		x.enqueue(478921212);
    }
    @Test
    public void test1334() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.enqueue(-1991532747);
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(473553110);
		z.toString();
    }
    @Test
    public void test1335() {
		Queue y = new Queue();
		y.enqueue(714761114);
    }
    @Test
    public void test1336() {
		Queue Var = new Queue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.enqueue(1789946883);
		Var.enqueue(-915033670);
		Var.toString();
		Var.enqueue(-1972121250);
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test1337() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(2081566447);
		Var.isEmpty();
		Var.enqueue(-464317578);
		Var.toString();
		Var.enqueue(894417207);
		Var.isFull();
    }
    @Test
    public void test1338() {
		Queue variable = new Queue();
		variable.enqueue(-1229682316);
		variable.enqueue(277563624);
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(738064933);
    }
    @Test
    public void test1339() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(1871662156);
		assertEquals(1871662156, Var.dequeue());
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isFull();
		Var.enqueue(1524671093);
    }
    @Test
    public void test1340() {
		Queue x = new Queue();
		x.enqueue(-834496648);
		x.isFull();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isFull();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.enqueue(330790687);
		x.enqueue(-1518811650);
    }
    @Test
    public void test1341() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(-197429904);
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.dequeue();
		x.toString();
		x.enqueue(1989068770);
    }
    @Test
    public void test1342() {
		Queue z = new Queue();
		z.enqueue(-1705236369);
		z.isFull();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isFull();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test1343() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(1723810852);
		assertFalse(x.isEmpty());
		assertFalse(x.isEmpty());
		x.isEmpty();
		x.toString();
		x.enqueue(238337563);
		x.isFull();
		x.toString();
    }
    @Test
    public void test1344() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-715614501);
		y.isFull();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test1345() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(1097342016);
		x.enqueue(2067032295);
		x.dequeue();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test1346() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(379986412);
    }
    @Test
    public void test1347() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-976048772);
		Var.isFull();
		Var.toString();
		Var.enqueue(-1998932634);
		Var.enqueue(-1891094222);
		Var.isEmpty();
    }
    @Test
    public void test1348() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(1609568012);
		x.enqueue(-381061077);
		assertFalse(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test1349() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.dequeue();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.isFull();
    }
    @Test
    public void test1350() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(1508652095);
		z.dequeue();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test1351() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(912330404);
		Var.dequeue();
    }
    @Test
    public void test1352() {
		Queue z = new Queue();
		z.enqueue(-1232827562);
		z.isFull();
    }
    @Test
    public void test1353() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.toString();
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test1354() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test1355() {
		Queue Var = new Queue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.enqueue(-865594522);
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test1356() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(-1726031937);
		x.dequeue();
		x.enqueue(249192276);
		x.dequeue();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test1357() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test1358() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.enqueue(-1568928421);
    }
    @Test
    public void test1359() {
		Queue x = new Queue();
		x.enqueue(1123239326);
		x.isFull();
		x.toString();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test1360() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(1521262124);
		Var.dequeue();
		Var.enqueue(-1962923892);
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test1361() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.toString();
		y.isEmpty();
		y.isFull();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test1362() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.enqueue(-249143457);
    }
    @Test
    public void test1363() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-722694797);
		z.isFull();
		z.isFull();
		assertTrue(z.isEmpty());
		z.enqueue(570624056);
    }
    @Test
    public void test1364() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test1365() {
		Queue variable = new Queue();
		variable.enqueue(549009054);
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(912917792);
		variable.enqueue(-1769118488);
		variable.dequeue();
		variable.enqueue(630927602);
		assertEquals("[630927602]", variable.toString());
		variable.isFull();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test1366() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.isEmpty();
		x.toString();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test1367() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.dequeue();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.enqueue(-1568148234);
    }
    @Test
    public void test1368() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(849371706);
    }
    @Test
    public void test1369() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(530641792);
		Var.toString();
		Var.toString();
		Var.enqueue(1415467768);
		Var.isEmpty();
    }
    @Test
    public void test1370() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.toString();
		x.isEmpty();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.enqueue(-1391305753);
    }
    @Test
    public void test1371() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test1372() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.dequeue();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.enqueue(-1735444716);
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(634094668);
		assertEquals(634094668, x.dequeue());
		x.isEmpty();
		x.isFull();
		x.toString();
    }
    @Test
    public void test1373() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(117049894);
    }
    @Test
    public void test1374() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(-1812158947);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(1043290022);
		Var.isEmpty();
		Var.enqueue(356144559);
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(1394323417);
    }
    @Test
    public void test1375() {
		Queue variable = new Queue();
		variable.enqueue(13753378);
		variable.enqueue(1179811595);
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(1669403413);
		variable.isFull();
		variable.enqueue(-1166504702);
		variable.isFull();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test1376() {
		Queue x = new Queue();
		x.enqueue(1982590054);
		x.toString();
		x.dequeue();
    }
    @Test
    public void test1377() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(-1372054061);
    }
    @Test
    public void test1378() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test1379() {
		Queue y = new Queue();
		y.enqueue(1766116860);
		y.enqueue(-1962940264);
    }
    @Test
    public void test1380() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(811115313);
		y.toString();
		assertEquals("[811115313]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test1381() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test1382() {
		Queue y = new Queue();
		y.enqueue(249489974);
		y.enqueue(-1353360566);
    }
    @Test
    public void test1383() {
		Queue variable = new Queue();
		variable.enqueue(1571896743);
		assertFalse(variable.isFull());
		variable.toString();
		variable.toString();
		variable.enqueue(-100265977);
		variable.toString();
		variable.enqueue(1436825769);
		variable.toString();
		variable.enqueue(-1032048778);
    }
    @Test
    public void test1384() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test1385() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.isFull();
		z.enqueue(-908541822);
		z.isFull();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1865155231);
		z.enqueue(719295741);
		z.isEmpty();
		z.enqueue(609322519);
    }
    @Test
    public void test1386() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.toString();
		Var.enqueue(-924641335);
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test1387() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(-2098573024);
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test1388() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.enqueue(1318823523);
		assertEquals(1318823523, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test1389() {
		Queue z = new Queue();
		z.enqueue(-480666941);
		z.isFull();
    }
    @Test
    public void test1390() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test1391() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(-480035466);
		y.enqueue(-452073203);
    }
    @Test
    public void test1392() {
		Queue y = new Queue();
		y.enqueue(475981750);
		y.dequeue();
		y.dequeue();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.dequeue();
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(-68541101);
		y.enqueue(515785416);
		assertFalse(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test1393() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		assertFalse(y.isFull());
		y.isFull();
		y.toString();
		y.dequeue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test1394() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
		z.isFull();
		z.isFull();
		z.enqueue(600288323);
		z.isFull();
    }
    @Test
    public void test1395() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isFull();
		y.isFull();
		y.enqueue(-2115238945);
    }
    @Test
    public void test1396() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.toString();
		y.toString();
		y.isFull();
		assertEquals("[]", y.toString());
		y.dequeue();
		assertTrue(y.isEmpty());
		y.toString();
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test1397() {
		Queue Var = new Queue();
		Var.enqueue(988344006);
		assertFalse(Var.isEmpty());
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test1398() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(474307286);
		variable.enqueue(1309157531);
		variable.isFull();
    }
    @Test
    public void test1399() {
		Queue y = new Queue();
		y.enqueue(-1376733018);
		y.dequeue();
		y.toString();
		y.toString();
    }
    @Test
    public void test1400() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test1401() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		assertFalse(z.isFull());
		z.isFull();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(427461971);
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-768425525);
		z.isFull();
		z.enqueue(1802542799);
    }
    @Test
    public void test1402() {
		Queue z = new Queue();
		z.enqueue(-1307123956);
		z.dequeue();
		z.enqueue(1338390104);
		z.toString();
		assertFalse(z.isFull());
		assertEquals("[1338390104]", z.toString());
		z.dequeue();
		z.enqueue(874786174);
		z.isEmpty();
		z.enqueue(149346725);
    }
    @Test
    public void test1403() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-1613035967);
		y.isFull();
		y.dequeue();
		y.toString();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isEmpty();
		y.enqueue(681405316);
    }
    @Test
    public void test1404() {
		Queue Var = new Queue();
		Var.enqueue(847562123);
		assertEquals("[847562123]", Var.toString());
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test1405() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test1406() {
		Queue Var = new Queue();
		Var.enqueue(-265714913);
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.enqueue(-568550951);
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.enqueue(524436364);
    }
    @Test
    public void test1407() {
		Queue Var = new Queue();
		Var.enqueue(-96944873);
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test1408() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.toString();
		y.dequeue();
		y.toString();
		y.dequeue();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test1409() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(1563394233);
		Var.toString();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.toString();
		Var.enqueue(-321268666);
    }
    @Test
    public void test1410() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		z.isFull();
		z.isFull();
		z.toString();
		z.enqueue(-350563078);
		z.dequeue();
		assertTrue(z.isEmpty());
		z.enqueue(-1559045139);
		z.isEmpty();
    }
    @Test
    public void test1411() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test1412() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.enqueue(-24400696);
		z.enqueue(-1908880494);
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test1413() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.enqueue(-123715338);
		x.enqueue(1360654151);
		assertFalse(x.isEmpty());
		assertFalse(x.isFull());
		assertEquals("[1360654151]", x.toString());
		x.enqueue(1004429305);
		assertFalse(x.isFull());
		x.dequeue();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test1414() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.toString();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test1415() {
		Queue y = new Queue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isFull();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.isFull();
		assertEquals("[]", y.toString());
		y.enqueue(1197379645);
		y.dequeue();
		y.toString();
		y.enqueue(1630417295);
		y.toString();
		y.isEmpty();
		assertEquals("[1630417295]", y.toString());
		y.enqueue(-1158354905);
    }
    @Test
    public void test1416() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.dequeue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.toString();
		z.toString();
    }
    @Test
    public void test1417() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test1418() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(513502214);
		z.isFull();
		assertEquals("[513502214]", z.toString());
		assertEquals("[513502214]", z.toString());
		assertEquals("[513502214]", z.toString());
		assertFalse(z.isFull());
		assertEquals(513502214, z.dequeue());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(499891023);
		z.isFull();
		assertFalse(z.isFull());
		z.dequeue();
		z.isFull();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test1419() {
		Queue variable = new Queue();
		variable.enqueue(-855615366);
		variable.enqueue(355749615);
		assertEquals(355749615, variable.dequeue());
		variable.toString();
		variable.toString();
		variable.enqueue(1474719610);
		variable.isEmpty();
		variable.enqueue(1926293703);
    }
    @Test
    public void test1420() {
		Queue variable = new Queue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-631486286);
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test1421() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(9256421);
		z.toString();
		z.isFull();
		z.enqueue(-1232646905);
		z.toString();
		z.isEmpty();
		z.enqueue(-445464163);
		z.enqueue(-1167566538);
		assertEquals("[9256421]", z.toString());
		z.dequeue();
    }
    @Test
    public void test1422() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-1341577570);
		x.dequeue();
    }
    @Test
    public void test1423() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(860929046);
		Var.isFull();
    }
    @Test
    public void test1424() {
		Queue Var = new Queue();
		Var.enqueue(883537550);
		assertEquals("[883537550]", Var.toString());
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test1425() {
		Queue x = new Queue();
		x.enqueue(1409702582);
		assertFalse(x.isEmpty());
		assertFalse(x.isEmpty());
		x.toString();
		assertFalse(x.isEmpty());
		x.enqueue(1251514527);
		x.enqueue(2027355043);
		x.enqueue(-1843173678);
		assertEquals(1409702582, x.dequeue());
		x.enqueue(-473400870);
		assertEquals(1251514527, x.dequeue());
		assertEquals(2027355043, x.dequeue());
		x.toString();
		x.toString();
		x.toString();
    }
    @Test
    public void test1426() {
		Queue x = new Queue();
		x.enqueue(931799492);
		assertEquals("[931799492]", x.toString());
		x.enqueue(-2044130580);
		x.isFull();
		x.enqueue(618096942);
		assertEquals("[931799492, 618096942]", x.toString());
		x.isEmpty();
    }
    @Test
    public void test1427() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-1423805219);
		Var.dequeue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test1428() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(135795864);
		z.enqueue(2106094654);
		z.enqueue(448687651);
		z.toString();
		z.dequeue();
		assertEquals(2106094654, z.dequeue());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.toString();
    }
    @Test
    public void test1429() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1771618061);
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(25380524);
		variable.dequeue();
    }
    @Test
    public void test1430() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.toString();
		Var.toString();
		assertFalse(Var.isFull());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.enqueue(-947903668);
		Var.enqueue(-1979786967);
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test1431() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(1584816505);
		y.enqueue(1965353448);
		assertFalse(y.isFull());
		y.isFull();
		assertEquals("[1584816505, 1965353448]", y.toString());
		assertFalse(y.isFull());
		assertEquals("[1584816505, 1965353448]", y.toString());
		y.isFull();
    }
    @Test
    public void test1432() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.enqueue(-1540648980);
		y.dequeue();
		y.enqueue(1770443663);
		y.isEmpty();
		y.dequeue();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test1433() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test1434() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test1435() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(-184176911);
		y.toString();
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test1436() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.enqueue(854732135);
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(1882629324);
		x.enqueue(-1158344362);
		assertFalse(x.isEmpty());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test1437() {
		Queue variable = new Queue();
		variable.enqueue(-761877511);
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(996843469);
		variable.isFull();
    }
    @Test
    public void test1438() {
		Queue z = new Queue();
		z.enqueue(1173855145);
		z.dequeue();
		z.toString();
		z.enqueue(1647216177);
		z.enqueue(1556145642);
		z.dequeue();
		assertEquals(1556145642, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test1439() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(2036951843);
		x.isFull();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test1440() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test1441() {
		Queue z = new Queue();
		z.enqueue(-1116502656);
		z.enqueue(276240667);
    }
    @Test
    public void test1442() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.enqueue(1574636490);
		y.dequeue();
		y.toString();
    }
    @Test
    public void test1443() {
		Queue Var = new Queue();
		Var.enqueue(1678514726);
		assertFalse(Var.isEmpty());
		Var.enqueue(-2052410757);
		assertFalse(Var.isFull());
		Var.enqueue(703049734);
		Var.enqueue(6307737);
		Var.isFull();
		Var.toString();
		assertEquals("[1678514726, 703049734, 6307737]", Var.toString());
		assertEquals(1678514726, Var.dequeue());
		Var.enqueue(-1037453619);
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertEquals(703049734, Var.dequeue());
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test1444() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test1445() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test1446() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(-55509437);
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test1447() {
		Queue z = new Queue();
		z.enqueue(143139475);
		z.isEmpty();
		z.enqueue(538271697);
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test1448() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(896891523);
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test1449() {
		Queue y = new Queue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isFull();
    }
    @Test
    public void test1450() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(-1489571616);
		Var.dequeue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(1643146302);
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test1451() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.enqueue(1394732045);
		y.dequeue();
		y.dequeue();
		y.enqueue(-234480823);
		y.dequeue();
		y.toString();
		y.toString();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test1452() {
		Queue y = new Queue();
		y.enqueue(-304961306);
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.toString();
		y.enqueue(724498434);
		y.isEmpty();
    }
    @Test
    public void test1453() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-103423194);
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(1853385344);
		x.toString();
    }
    @Test
    public void test1454() {
		Queue Var = new Queue();
		Var.enqueue(-995534462);
		Var.toString();
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(1362507169);
		Var.isEmpty();
		Var.enqueue(604655178);
    }
    @Test
    public void test1455() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test1456() {
		Queue x = new Queue();
		x.enqueue(782170916);
		assertEquals("[782170916]", x.toString());
		x.isEmpty();
		x.enqueue(1777636630);
		x.isEmpty();
		assertEquals("[782170916, 1777636630]", x.toString());
		x.enqueue(325346191);
		x.toString();
		x.dequeue();
    }
    @Test
    public void test1457() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(391502213);
		Var.toString();
		Var.toString();
		Var.toString();
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test1458() {
		Queue x = new Queue();
		x.enqueue(1133962624);
		x.toString();
		x.isFull();
		x.isFull();
		x.enqueue(1531612266);
		x.isEmpty();
		x.dequeue();
		assertEquals("[1531612266]", x.toString());
		x.enqueue(-85911603);
    }
    @Test
    public void test1459() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.isEmpty();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test1460() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.dequeue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isFull();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test1461() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.toString();
		variable.enqueue(2060979773);
		variable.enqueue(-110147314);
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test1462() {
		Queue y = new Queue();
		y.toString();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.dequeue();
		y.enqueue(-1129066177);
		y.dequeue();
    }
    @Test
    public void test1463() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isEmpty();
		y.enqueue(2091587363);
		assertEquals("[2091587363]", y.toString());
		y.toString();
		assertEquals("[2091587363]", y.toString());
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test1464() {
		Queue y = new Queue();
		y.enqueue(643494942);
		y.isFull();
		y.toString();
		y.toString();
		assertEquals("[643494942]", y.toString());
		y.isEmpty();
		y.toString();
		y.toString();
    }
    @Test
    public void test1465() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(2049347339);
    }
    @Test
    public void test1466() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isFull();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test1467() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(789175265);
		assertFalse(x.isEmpty());
		x.isFull();
		assertEquals("[789175265]", x.toString());
		assertEquals(789175265, x.dequeue());
		x.isFull();
		x.isFull();
		x.toString();
		x.isEmpty();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test1468() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test1469() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-753433738);
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-2105232037);
		Var.isFull();
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test1470() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(1244506304);
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertEquals(1244506304, Var.dequeue());
		Var.isEmpty();
		Var.enqueue(1302156497);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test1471() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.isFull();
		assertTrue(z.isEmpty());
		z.toString();
		z.toString();
		z.isFull();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.enqueue(2095552984);
		z.dequeue();
    }
    @Test
    public void test1472() {
		Queue y = new Queue();
		y.enqueue(1294028126);
		y.toString();
		y.toString();
		y.enqueue(-1422386593);
		y.isEmpty();
		assertEquals(1294028126, y.dequeue());
		y.toString();
		y.toString();
		y.enqueue(-1267582186);
		y.enqueue(521314666);
		assertEquals("[521314666]", y.toString());
		y.dequeue();
    }
    @Test
    public void test1473() {
		Queue z = new Queue();
		z.enqueue(1377605654);
		assertEquals("[1377605654]", z.toString());
		assertFalse(z.isEmpty());
		z.isEmpty();
		z.isFull();
		assertFalse(z.isFull());
		z.enqueue(1960354641);
    }
    @Test
    public void test1474() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		z.isFull();
		z.enqueue(54928621);
		z.toString();
    }
    @Test
    public void test1475() {
		Queue z = new Queue();
		z.isFull();
		assertFalse(z.isFull());
		z.dequeue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test1476() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
		y.enqueue(-2079333433);
		assertEquals("[]", y.toString());
		y.isFull();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.enqueue(-2029920392);
		assertTrue(y.isEmpty());
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(389194946);
		y.dequeue();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test1477() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(-208284859);
		assertEquals("[]", x.toString());
		x.isFull();
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.enqueue(-612469269);
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.enqueue(-378947148);
    }
    @Test
    public void test1478() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(2048279676);
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test1479() {
		Queue Var = new Queue();
		Var.enqueue(-1585494952);
		Var.dequeue();
    }
    @Test
    public void test1480() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test1481() {
		Queue Var = new Queue();
		Var.enqueue(-722780678);
		Var.toString();
		Var.toString();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test1482() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.toString();
		z.isFull();
    }
    @Test
    public void test1483() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(473777368);
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.enqueue(-1186256429);
		y.enqueue(-2017107961);
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test1484() {
		Queue z = new Queue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(1455182910);
		assertFalse(z.isEmpty());
		z.enqueue(-910317344);
		z.enqueue(-1819028916);
		z.dequeue();
		z.toString();
		z.isFull();
    }
    @Test
    public void test1485() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		Var.enqueue(2050833365);
		Var.toString();
		Var.enqueue(-1913020361);
		Var.isEmpty();
		Var.isEmpty();
		assertEquals(2050833365, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test1486() {
		Queue x = new Queue();
		x.enqueue(1478197753);
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test1487() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.enqueue(840150920);
		x.enqueue(-2084038526);
    }
    @Test
    public void test1488() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.toString();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(367515183);
		Var.enqueue(149190033);
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test1489() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-2091139943);
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(-691940795);
		assertFalse(x.isFull());
		x.enqueue(-628935884);
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test1490() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(82207099);
    }
    @Test
    public void test1491() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(1199889470);
		x.dequeue();
    }
    @Test
    public void test1492() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.enqueue(52992657);
		Var.dequeue();
    }
    @Test
    public void test1493() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(-2071825419);
		y.isEmpty();
    }
    @Test
    public void test1494() {
		Queue y = new Queue();
		y.enqueue(1204811547);
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
		y.isFull();
		y.toString();
		y.isEmpty();
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
		y.enqueue(1115821554);
    }
    @Test
    public void test1495() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.enqueue(-1056161113);
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test1496() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-495104848);
		assertTrue(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test1497() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.enqueue(-651357926);
		assertFalse(x.isFull());
		x.enqueue(-683549226);
		assertEquals(-1, x.dequeue());
		x.toString();
    }
    @Test
    public void test1498() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test1499() {
		Queue z = new Queue();
		z.enqueue(-199876690);
		z.enqueue(964697584);
		z.enqueue(1298693126);
		assertEquals(964697584, z.dequeue());
		z.enqueue(1110771120);
		z.enqueue(488412133);
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		assertEquals("[1298693126, 1110771120, 488412133]", z.toString());
		z.isFull();
		assertFalse(z.isEmpty());
		z.isFull();
		z.isEmpty();
		z.enqueue(-1322995329);
    }
    @Test
    public void test1500() {
		Queue y = new Queue();
		y.toString();
		assertFalse(y.isFull());
		y.isEmpty();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.enqueue(-1334180774);
		y.enqueue(-777746286);
		y.dequeue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.toString();
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test1501() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test1502() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.enqueue(407968509);
		assertEquals("[407968509]", y.toString());
		y.isFull();
		y.dequeue();
		y.enqueue(847005291);
		assertEquals(847005291, y.dequeue());
		y.isEmpty();
		y.enqueue(-730730527);
    }
    @Test
    public void test1503() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		Var.toString();
		Var.enqueue(-396908620);
		Var.enqueue(-1328914583);
		Var.dequeue();
    }
    @Test
    public void test1504() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test1505() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test1506() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(-789541120);
		z.enqueue(-2128615863);
    }
    @Test
    public void test1507() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.enqueue(286265326);
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(1483525581);
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test1508() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test1509() {
		Queue Var = new Queue();
		Var.enqueue(-127135100);
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(190998673);
		Var.isEmpty();
		Var.enqueue(-924110545);
    }
    @Test
    public void test1510() {
		Queue Var = new Queue();
		Var.enqueue(-1045978896);
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.enqueue(283859709);
		Var.toString();
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(494302046);
		Var.toString();
		Var.isFull();
		assertEquals("[494302046]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test1511() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test1512() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.enqueue(1890997496);
		y.isEmpty();
    }
    @Test
    public void test1513() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
		assertFalse(x.isFull());
		x.isFull();
		assertFalse(x.isFull());
		x.toString();
		x.toString();
    }
    @Test
    public void test1514() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(1827849357);
		Var.enqueue(-1415696175);
    }
    @Test
    public void test1515() {
		Queue y = new Queue();
		y.enqueue(1011185681);
		assertFalse(y.isFull());
		y.dequeue();
		y.isEmpty();
		y.enqueue(980220302);
		y.toString();
		y.toString();
		y.isFull();
		y.isEmpty();
		assertEquals(980220302, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.toString();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test1516() {
		Queue x = new Queue();
		x.enqueue(1937372991);
		x.dequeue();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.enqueue(1948972157);
    }
    @Test
    public void test1517() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test1518() {
		Queue z = new Queue();
		z.enqueue(-340741276);
		z.dequeue();
		z.enqueue(1743415605);
		z.toString();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test1519() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		assertTrue(z.isEmpty());
		z.enqueue(171500577);
		assertFalse(z.isFull());
		z.toString();
		z.enqueue(-40191522);
		z.isEmpty();
    }
    @Test
    public void test1520() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-966143091);
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(1817224538);
		x.isEmpty();
    }
    @Test
    public void test1521() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(622861461);
    }
    @Test
    public void test1522() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(1894915807);
		x.dequeue();
    }
    @Test
    public void test1523() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.enqueue(518586753);
		assertFalse(Var.isFull());
		Var.enqueue(-305704489);
		assertEquals("[518586753]", Var.toString());
		Var.toString();
		Var.toString();
    }
    @Test
    public void test1524() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.isFull();
		x.enqueue(-797803848);
    }
    @Test
    public void test1525() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
    }
    @Test
    public void test1526() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.enqueue(-457134678);
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.enqueue(-1727017186);
		x.toString();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.isFull();
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test1527() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.toString();
		z.isEmpty();
		z.dequeue();
		z.isFull();
		assertEquals("[]", z.toString());
		z.toString();
		assertEquals("[]", z.toString());
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test1528() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.enqueue(-1051903499);
    }
    @Test
    public void test1529() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(559084223);
		y.enqueue(-575343845);
		assertEquals(559084223, y.dequeue());
		y.enqueue(770248070);
		y.dequeue();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test1530() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.isFull();
		z.toString();
    }
    @Test
    public void test1531() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
		x.dequeue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.toString();
    }
    @Test
    public void test1532() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.enqueue(1488797700);
		x.enqueue(-2090391718);
		x.isFull();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.enqueue(1852794283);
		x.toString();
		assertEquals(1852794283, x.dequeue());
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test1533() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test1534() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(786246899);
    }
    @Test
    public void test1535() {
		Queue z = new Queue();
		z.enqueue(-1346937494);
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
		z.isFull();
		z.enqueue(1870714587);
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test1536() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.enqueue(1977230240);
		z.enqueue(154759984);
		assertEquals(1977230240, z.dequeue());
		assertFalse(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test1537() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-12896694);
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.enqueue(-1597309426);
		variable.dequeue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.toString();
    }
    @Test
    public void test1538() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(-754563821);
		x.isEmpty();
    }
    @Test
    public void test1539() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(1937326581);
		y.toString();
		y.isFull();
		assertFalse(y.isEmpty());
		y.isEmpty();
		assertEquals(1937326581, y.dequeue());
		y.isFull();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test1540() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isEmpty();
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(821147345);
		assertFalse(y.isFull());
		y.toString();
		y.enqueue(-1409810271);
    }
    @Test
    public void test1541() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isFull();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test1542() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(1223618690);
		y.enqueue(1561884962);
    }
    @Test
    public void test1543() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test1544() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test1545() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.enqueue(-1503519056);
		Var.enqueue(185105832);
    }
    @Test
    public void test1546() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test1547() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test1548() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.enqueue(-649381971);
		z.enqueue(55842445);
		z.dequeue();
    }
    @Test
    public void test1549() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test1550() {
		Queue Var = new Queue();
		Var.enqueue(-340002105);
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test1551() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(514827401);
		Var.isEmpty();
		Var.enqueue(-493600386);
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(861914340);
		assertEquals("[514827401, 861914340]", Var.toString());
		assertEquals("[514827401, 861914340]", Var.toString());
		Var.isFull();
		Var.isFull();
		Var.enqueue(2040745204);
    }
    @Test
    public void test1552() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(477978421);
		x.enqueue(-1209019059);
		x.isEmpty();
		assertEquals(477978421, x.dequeue());
		x.isFull();
		assertEquals("[]", x.toString());
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.toString();
    }
    @Test
    public void test1553() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(-2076005611);
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.toString();
		assertFalse(x.isFull());
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(-1457567077);
		x.isFull();
    }
    @Test
    public void test1554() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(-1729096888);
		x.dequeue();
		x.enqueue(-948040542);
		assertEquals(-1, x.dequeue());
		x.enqueue(644010781);
		assertEquals(644010781, x.dequeue());
		x.enqueue(-1815348022);
		x.dequeue();
    }
    @Test
    public void test1555() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-707876705);
		z.enqueue(-1243934256);
		z.isEmpty();
    }
    @Test
    public void test1556() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.dequeue();
		z.dequeue();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test1557() {
		Queue z = new Queue();
		z.enqueue(690502600);
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(951773956);
    }
    @Test
    public void test1558() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.enqueue(152873485);
    }
    @Test
    public void test1559() {
		Queue x = new Queue();
		x.enqueue(763008831);
		x.isEmpty();
		x.isEmpty();
		assertEquals(763008831, x.dequeue());
		x.isEmpty();
		x.enqueue(300945593);
		assertFalse(x.isEmpty());
		assertFalse(x.isEmpty());
		assertEquals("[300945593]", x.toString());
		x.toString();
		assertFalse(x.isFull());
		assertEquals("[300945593]", x.toString());
		x.enqueue(29983583);
		assertFalse(x.isFull());
		assertEquals(300945593, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test1560() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.toString();
		x.isFull();
		x.dequeue();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.enqueue(1382248344);
		x.isFull();
		assertFalse(x.isFull());
		assertFalse(x.isEmpty());
		x.toString();
		x.dequeue();
		x.enqueue(1282173253);
    }
    @Test
    public void test1561() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test1562() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		assertFalse(x.isFull());
		x.dequeue();
		assertFalse(x.isFull());
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.enqueue(1573867509);
		x.isFull();
		x.isFull();
    }
    @Test
    public void test1563() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test1564() {
		Queue variable = new Queue();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(-967045548);
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-908387964);
		variable.isFull();
		variable.enqueue(827828136);
    }
    @Test
    public void test1565() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test1566() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.enqueue(975968110);
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
		Var.enqueue(-547980752);
		Var.isFull();
		Var.enqueue(1605705299);
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test1567() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.toString();
    }
    @Test
    public void test1568() {
		Queue variable = new Queue();
		variable.enqueue(-257634129);
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test1569() {
		Queue y = new Queue();
		y.enqueue(-1383650473);
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.isFull();
		y.isFull();
		assertEquals("[]", y.toString());
		y.enqueue(-911931914);
		y.dequeue();
		y.enqueue(-684424827);
		y.isEmpty();
		y.enqueue(607305838);
		y.dequeue();
		y.enqueue(-690274032);
    }
    @Test
    public void test1570() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.enqueue(1340106584);
		y.toString();
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test1571() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
    }
    @Test
    public void test1572() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(-981822594);
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.enqueue(191196805);
		variable.dequeue();
    }
    @Test
    public void test1573() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-246847698);
		z.dequeue();
    }
    @Test
    public void test1574() {
		Queue z = new Queue();
		z.enqueue(873049530);
		z.enqueue(-1475650092);
		z.dequeue();
		z.toString();
		z.toString();
    }
    @Test
    public void test1575() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test1576() {
		Queue y = new Queue();
		y.dequeue();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.toString();
		y.dequeue();
		y.enqueue(-492128026);
		y.isFull();
		y.enqueue(-239392308);
		y.enqueue(1771818155);
    }
    @Test
    public void test1577() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.enqueue(1018525976);
    }
    @Test
    public void test1578() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.toString();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test1579() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(2048370905);
		variable.isFull();
		variable.enqueue(-1387498529);
		variable.dequeue();
		variable.enqueue(-1986688209);
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test1580() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(500630178);
		y.enqueue(497599778);
		assertEquals(500630178, y.dequeue());
		assertFalse(y.isEmpty());
		y.isEmpty();
		y.enqueue(261214637);
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test1581() {
		Queue z = new Queue();
		z.toString();
		assertEquals("[]", z.toString());
		z.toString();
		z.dequeue();
		z.isFull();
		z.enqueue(-1006920684);
		z.dequeue();
		z.isFull();
		z.toString();
		assertEquals("[]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test1582() {
		Queue z = new Queue();
		z.enqueue(-1584171732);
		z.dequeue();
    }
    @Test
    public void test1583() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test1584() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test1585() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test1586() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.isEmpty();
		x.enqueue(1394617002);
		x.toString();
		x.isEmpty();
		x.dequeue();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.enqueue(-1583133156);
		x.enqueue(-2116367129);
		x.isFull();
		x.enqueue(456004706);
    }
    @Test
    public void test1587() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test1588() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(2030988983);
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test1589() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-278419902);
		Var.enqueue(-1860460399);
    }
    @Test
    public void test1590() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(-390498421);
		assertFalse(variable.isFull());
		variable.isFull();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(629052189);
		variable.toString();
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertEquals(629052189, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(-362605892);
    }
    @Test
    public void test1591() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test1592() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test1593() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test1594() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(1563295057);
		variable.toString();
		assertFalse(variable.isEmpty());
		variable.toString();
		assertEquals(1563295057, variable.dequeue());
		variable.enqueue(-477606951);
		assertEquals(-1, variable.dequeue());
		variable.enqueue(534020587);
		variable.toString();
		variable.toString();
		variable.enqueue(2036530132);
    }
    @Test
    public void test1595() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(185724736);
		x.toString();
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test1596() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(1800711923);
		variable.isFull();
		assertFalse(variable.isFull());
		assertEquals(1800711923, variable.dequeue());
		variable.toString();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test1597() {
		Queue Var = new Queue();
		Var.enqueue(449453361);
		Var.dequeue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.enqueue(310409349);
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test1598() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(553145549);
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test1599() {
		Queue variable = new Queue();
		variable.enqueue(-1639691743);
		variable.enqueue(-862293447);
		assertTrue(variable.isEmpty());
		variable.enqueue(1383249877);
		variable.enqueue(-965134248);
		variable.isFull();
		assertFalse(variable.isEmpty());
		variable.enqueue(616487389);
    }
    @Test
    public void test1600() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.enqueue(233933048);
		z.enqueue(-579819448);
		z.toString();
		z.isEmpty();
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test1601() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.isEmpty();
		y.dequeue();
		y.enqueue(-79947022);
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-430763953);
		y.enqueue(-343044936);
    }
    @Test
    public void test1602() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test1603() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(2008650000);
		z.dequeue();
    }
    @Test
    public void test1604() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test1605() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-935946809);
    }
    @Test
    public void test1606() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.dequeue();
		variable.enqueue(-557926302);
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.enqueue(-796790991);
    }
    @Test
    public void test1607() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
		x.toString();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.enqueue(250285832);
		assertFalse(x.isFull());
		assertEquals("[250285832]", x.toString());
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test1608() {
		Queue y = new Queue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1892646242);
		y.isFull();
		y.toString();
		y.toString();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test1609() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.dequeue();
		x.toString();
		x.enqueue(-1748925197);
		x.isFull();
		x.enqueue(1525260985);
		assertFalse(x.isEmpty());
		x.toString();
		assertFalse(x.isEmpty());
		x.isEmpty();
		assertFalse(x.isFull());
		assertFalse(x.isEmpty());
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test1610() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test1611() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test1612() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(-1074013673);
		assertFalse(y.isFull());
		y.enqueue(2096569991);
		y.toString();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test1613() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(165216934);
    }
    @Test
    public void test1614() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.dequeue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.enqueue(501653577);
		assertEquals("[501653577]", z.toString());
		z.enqueue(-2032447667);
    }
    @Test
    public void test1615() {
		Queue variable = new Queue();
		variable.enqueue(-65199090);
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.toString();
		variable.toString();
    }
    @Test
    public void test1616() {
		Queue x = new Queue();
		x.enqueue(-1424988352);
		assertEquals("[]", x.toString());
		x.isFull();
		x.isFull();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.enqueue(104868613);
		assertEquals("[104868613]", x.toString());
		x.enqueue(1146556798);
    }
    @Test
    public void test1617() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1399992525);
		assertFalse(Var.isFull());
		assertEquals("[1399992525]", Var.toString());
		Var.toString();
    }
    @Test
    public void test1618() {
		Queue Var = new Queue();
		Var.enqueue(-1626706805);
    }
    @Test
    public void test1619() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.enqueue(-2062192090);
		assertEquals(-1, y.dequeue());
		y.enqueue(1163223543);
		y.enqueue(1348649338);
		y.enqueue(1920348641);
		assertFalse(y.isEmpty());
		y.isFull();
		assertEquals(1163223543, y.dequeue());
		y.enqueue(-1333422911);
		y.enqueue(-762626850);
    }
    @Test
    public void test1620() {
		Queue x = new Queue();
		x.enqueue(530839404);
		assertFalse(x.isEmpty());
		x.enqueue(-2040358151);
		assertEquals(530839404, x.dequeue());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test1621() {
		Queue Var = new Queue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.enqueue(-2110993003);
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-193713166);
		Var.toString();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test1622() {
		Queue y = new Queue();
		y.enqueue(63011754);
		assertFalse(y.isFull());
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test1623() {
		Queue x = new Queue();
		x.enqueue(-1820801210);
		assertEquals(-1, x.dequeue());
		x.enqueue(1688505121);
		x.dequeue();
		x.dequeue();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(1351780949);
		assertEquals("[1351780949]", x.toString());
		x.toString();
		x.toString();
		assertFalse(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test1624() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-864813495);
		z.isEmpty();
		z.toString();
		z.toString();
		z.toString();
		z.enqueue(605350017);
    }
    @Test
    public void test1625() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test1626() {
		Queue y = new Queue();
		y.toString();
		assertEquals("[]", y.toString());
		y.toString();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test1627() {
		Queue variable = new Queue();
		variable.enqueue(244925960);
		variable.enqueue(-1291093052);
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test1628() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test1629() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(-2047842524);
    }
    @Test
    public void test1630() {
		Queue y = new Queue();
		y.toString();
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test1631() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-1009828813);
		z.dequeue();
		z.toString();
		z.isFull();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test1632() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(1237766325);
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
		y.toString();
		y.dequeue();
		y.enqueue(-1409553517);
		assertTrue(y.isEmpty());
		y.toString();
		y.isFull();
    }
    @Test
    public void test1633() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.toString();
		assertFalse(Var.isFull());
		Var.dequeue();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(635500279);
		Var.enqueue(622720626);
    }
    @Test
    public void test1634() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.toString();
    }
    @Test
    public void test1635() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(928370699);
		Var.toString();
		Var.toString();
		assertFalse(Var.isFull());
		Var.toString();
		Var.toString();
		Var.enqueue(-1194062818);
		Var.isFull();
    }
    @Test
    public void test1636() {
		Queue variable = new Queue();
		variable.enqueue(478432543);
    }
    @Test
    public void test1637() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(-1041323326);
		variable.enqueue(412793124);
		assertEquals("[412793124]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test1638() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.enqueue(1668105313);
		variable.isFull();
		variable.enqueue(667776531);
		variable.enqueue(1994170308);
		variable.isEmpty();
    }
    @Test
    public void test1639() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(19728965);
		z.dequeue();
		z.isEmpty();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.toString();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.enqueue(453706789);
		z.dequeue();
		z.toString();
		z.enqueue(-2062091085);
    }
    @Test
    public void test1640() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-734267042);
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.enqueue(-1297842831);
		assertTrue(variable.isEmpty());
		variable.enqueue(-540882005);
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.toString();
    }
    @Test
    public void test1641() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isFull();
		z.isFull();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test1642() {
		Queue Var = new Queue();
		Var.enqueue(-251315876);
		Var.enqueue(-1427830741);
		Var.enqueue(1121608193);
		Var.enqueue(-1344853907);
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(-329878473);
		Var.enqueue(-1797769252);
		Var.isEmpty();
		Var.enqueue(-249024750);
		Var.isEmpty();
    }
    @Test
    public void test1643() {
		Queue Var = new Queue();
		Var.enqueue(302940925);
    }
    @Test
    public void test1644() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
		Var.toString();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.enqueue(-513264649);
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-549679333);
		Var.isEmpty();
    }
    @Test
    public void test1645() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test1646() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(1083645507);
		assertEquals(1083645507, z.dequeue());
		z.dequeue();
		z.enqueue(1367640192);
		z.enqueue(-1336217327);
		z.enqueue(-1137471487);
		z.isFull();
		z.enqueue(-1324882466);
		z.toString();
    }
    @Test
    public void test1647() {
		Queue variable = new Queue();
		variable.enqueue(-1243631565);
		variable.toString();
		variable.dequeue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(13336497);
		variable.toString();
		variable.enqueue(-1159952502);
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test1648() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.enqueue(-517767477);
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-68419425);
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test1649() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(3127721);
		assertFalse(y.isEmpty());
		y.toString();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-1411373848);
		y.enqueue(410915516);
    }
    @Test
    public void test1650() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.dequeue();
		z.dequeue();
		z.toString();
		assertTrue(z.isEmpty());
		z.toString();
		z.isEmpty();
		z.toString();
		z.enqueue(-1695712348);
    }
    @Test
    public void test1651() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(609639974);
		z.enqueue(-1826997440);
    }
    @Test
    public void test1652() {
		Queue x = new Queue();
		x.enqueue(1675835659);
		x.toString();
    }
    @Test
    public void test1653() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		Var.toString();
		Var.enqueue(1269798670);
    }
    @Test
    public void test1654() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.enqueue(-902386289);
		x.enqueue(-1989208935);
		x.enqueue(-786818969);
		x.enqueue(2098462163);
		x.isEmpty();
    }
    @Test
    public void test1655() {
		Queue x = new Queue();
		x.enqueue(1428671285);
		x.isFull();
		assertEquals("[1428671285]", x.toString());
		x.toString();
		assertFalse(x.isEmpty());
		x.isEmpty();
		assertFalse(x.isEmpty());
		assertFalse(x.isFull());
		x.isFull();
		x.toString();
		x.enqueue(1343346755);
		x.isFull();
		x.enqueue(-2085447268);
    }
    @Test
    public void test1656() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test1657() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-76912059);
		z.toString();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.toString();
		z.enqueue(-1484058417);
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test1658() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1598030837);
    }
    @Test
    public void test1659() {
		Queue y = new Queue();
		y.enqueue(336637791);
		y.enqueue(-1367549139);
		y.dequeue();
		y.isFull();
		y.toString();
		assertTrue(y.isEmpty());
		y.enqueue(-35384768);
		y.isFull();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test1660() {
		Queue Var = new Queue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test1661() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test1662() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(2054472553);
		variable.dequeue();
		variable.toString();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-517894116);
		assertFalse(variable.isFull());
		variable.toString();
		variable.toString();
		variable.toString();
		variable.enqueue(-415176710);
		variable.isEmpty();
    }
    @Test
    public void test1663() {
		Queue variable = new Queue();
		variable.enqueue(-1075076253);
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(1484254716);
    }
    @Test
    public void test1664() {
		Queue x = new Queue();
		x.enqueue(-407842100);
		x.toString();
    }
    @Test
    public void test1665() {
		Queue Var = new Queue();
		Var.enqueue(-1276361111);
		Var.enqueue(698421492);
		Var.enqueue(-1267979532);
		Var.toString();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.enqueue(-997673594);
		Var.enqueue(-923282975);
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test1666() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.enqueue(-897395820);
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.toString();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.dequeue();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.enqueue(195062196);
		z.isEmpty();
    }
    @Test
    public void test1667() {
		Queue x = new Queue();
		x.enqueue(778018742);
    }
    @Test
    public void test1668() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-1180859738);
    }
    @Test
    public void test1669() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(1799375732);
		variable.enqueue(1639991274);
		assertFalse(variable.isFull());
		assertEquals("[1799375732, 1639991274]", variable.toString());
		assertEquals("[1799375732, 1639991274]", variable.toString());
		assertEquals("[1799375732, 1639991274]", variable.toString());
		variable.toString();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test1670() {
		Queue x = new Queue();
		x.enqueue(-1420339461);
		x.enqueue(-543005225);
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(-293672811);
		assertEquals("[]", x.toString());
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test1671() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-1287544798);
		y.isEmpty();
		y.isFull();
		y.enqueue(-2044324801);
		y.isEmpty();
    }
    @Test
    public void test1672() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(-42644231);
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1297163738);
		z.toString();
		z.isFull();
    }
    @Test
    public void test1673() {
		Queue z = new Queue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test1674() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.toString();
		y.enqueue(-920354223);
		y.isFull();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test1675() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.toString();
		Var.enqueue(2139441222);
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
		assertEquals(2139441222, Var.dequeue());
		Var.isFull();
		Var.isFull();
		Var.enqueue(752615177);
    }
    @Test
    public void test1676() {
		Queue variable = new Queue();
		variable.enqueue(733094161);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(1747713122);
		variable.dequeue();
		variable.enqueue(444797797);
		variable.enqueue(-532226108);
		variable.isFull();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test1677() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.enqueue(-387855941);
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(1335810769);
    }
    @Test
    public void test1678() {
		Queue variable = new Queue();
		variable.enqueue(-2074016979);
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(-705016017);
    }
    @Test
    public void test1679() {
		Queue y = new Queue();
		y.enqueue(-173885848);
		y.isEmpty();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test1680() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-1027645095);
		y.toString();
		y.toString();
		y.dequeue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.toString();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test1681() {
		Queue y = new Queue();
		y.enqueue(-287945299);
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.toString();
		y.dequeue();
		y.toString();
		y.isFull();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test1682() {
		Queue variable = new Queue();
		variable.enqueue(84240223);
		variable.toString();
		variable.isFull();
		variable.enqueue(-1520099102);
    }
    @Test
    public void test1683() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test1684() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(111719569);
		assertEquals("[111719569]", variable.toString());
		variable.enqueue(-246215476);
		assertFalse(variable.isEmpty());
		variable.enqueue(-923346042);
		variable.enqueue(-1855864575);
		variable.dequeue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(-611276408);
		assertTrue(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test1685() {
		Queue Var = new Queue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test1686() {
		Queue z = new Queue();
		z.enqueue(-791740094);
		z.isFull();
		z.toString();
		z.toString();
		z.toString();
		z.isFull();
		z.toString();
		z.dequeue();
		z.enqueue(445445475);
    }
    @Test
    public void test1687() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test1688() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(-375211821);
		x.isEmpty();
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(1019686201);
		x.enqueue(1748541820);
		x.dequeue();
		assertFalse(x.isFull());
		x.isFull();
    }
    @Test
    public void test1689() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(-1514578914);
		z.dequeue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.enqueue(-10136616);
		z.toString();
		z.toString();
		z.enqueue(241408271);
		assertFalse(z.isFull());
		z.enqueue(-397935935);
		assertEquals("[241408271]", z.toString());
		z.toString();
		assertFalse(z.isEmpty());
		z.toString();
    }
    @Test
    public void test1690() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test1691() {
		Queue y = new Queue();
		y.toString();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.enqueue(1743998160);
		assertFalse(y.isEmpty());
		y.isEmpty();
		assertFalse(y.isFull());
		y.isEmpty();
		assertEquals(1743998160, y.dequeue());
		assertFalse(y.isFull());
		y.enqueue(1258272451);
    }
    @Test
    public void test1692() {
		Queue z = new Queue();
		z.enqueue(-234171217);
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.enqueue(581609967);
		assertEquals(581609967, z.dequeue());
		z.toString();
		z.isEmpty();
		z.isFull();
		z.enqueue(-2067252250);
		z.toString();
		z.enqueue(1347954329);
		z.isFull();
    }
    @Test
    public void test1693() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(1104941115);
		z.toString();
		z.enqueue(-975812987);
		z.isFull();
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test1694() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test1695() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(1091091003);
		variable.toString();
		variable.enqueue(229611646);
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.toString();
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test1696() {
		Queue Var = new Queue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.toString();
		Var.enqueue(-792393239);
		Var.isFull();
		Var.enqueue(-266798393);
    }
    @Test
    public void test1697() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(-1771752516);
		x.isFull();
		x.toString();
    }
    @Test
    public void test1698() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test1699() {
		Queue x = new Queue();
		x.enqueue(-1019178692);
		x.toString();
		assertEquals(-1, x.dequeue());
		x.enqueue(-749732046);
    }
    @Test
    public void test1700() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.enqueue(968077668);
		assertEquals("[968077668]", x.toString());
		x.enqueue(-1924817582);
		x.enqueue(-1438619989);
		x.toString();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test1701() {
		Queue z = new Queue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.enqueue(184733284);
		z.isFull();
		z.dequeue();
		z.enqueue(-1602760272);
		z.toString();
		z.isFull();
		z.toString();
    }
    @Test
    public void test1702() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(-2066385608);
		z.enqueue(1025049557);
		assertFalse(z.isEmpty());
		z.isEmpty();
		z.enqueue(-1910806628);
		z.enqueue(1321979835);
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test1703() {
		Queue z = new Queue();
		z.enqueue(-154985139);
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(1181728582);
    }
    @Test
    public void test1704() {
		Queue variable = new Queue();
		variable.enqueue(-1383239509);
		variable.isFull();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-1720829466);
    }
    @Test
    public void test1705() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test1706() {
		Queue variable = new Queue();
		variable.enqueue(1499653732);
		variable.enqueue(603480740);
		variable.isEmpty();
		variable.enqueue(1420762147);
		assertEquals(1499653732, variable.dequeue());
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		assertEquals("[603480740, 1420762147]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test1707() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test1708() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.enqueue(1986201098);
		z.isEmpty();
		z.toString();
		assertFalse(z.isFull());
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.enqueue(-1461587519);
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.enqueue(-2086701171);
    }
    @Test
    public void test1709() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(-1513931217);
		assertTrue(variable.isEmpty());
		variable.toString();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test1710() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-2037890092);
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-371949105);
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test1711() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.enqueue(2134766595);
		y.toString();
		y.toString();
		y.dequeue();
		y.toString();
		y.isEmpty();
		y.toString();
		y.isFull();
    }
    @Test
    public void test1712() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
    }
    @Test
    public void test1713() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.enqueue(1931055830);
    }
    @Test
    public void test1714() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.dequeue();
		Var.enqueue(536064824);
		Var.enqueue(1972898141);
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test1715() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isFull();
		Var.enqueue(1997081952);
		Var.isEmpty();
    }
    @Test
    public void test1716() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.dequeue();
		z.isFull();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test1717() {
		Queue variable = new Queue();
		variable.enqueue(1986056467);
		assertEquals(1986056467, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test1718() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test1719() {
		Queue x = new Queue();
		x.enqueue(413961727);
		assertFalse(x.isEmpty());
		x.enqueue(1744830036);
		x.enqueue(-1692575129);
		assertEquals(413961727, x.dequeue());
		assertEquals(1744830036, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.enqueue(-63441841);
		x.enqueue(556380876);
    }
    @Test
    public void test1720() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.toString();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test1721() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(926098563);
		y.enqueue(-486748023);
		y.toString();
		y.isFull();
		y.enqueue(1958040129);
		y.isFull();
		y.dequeue();
		y.enqueue(526100683);
    }
    @Test
    public void test1722() {
		Queue x = new Queue();
		x.enqueue(-1550363518);
		x.enqueue(-2094378505);
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.enqueue(1680538364);
		x.dequeue();
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test1723() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test1724() {
		Queue variable = new Queue();
		variable.enqueue(801660560);
		variable.enqueue(-2023129407);
		variable.toString();
		variable.isFull();
		variable.enqueue(1250735553);
		variable.enqueue(-494987560);
		variable.enqueue(1358555169);
		variable.enqueue(-2129125783);
		variable.enqueue(-1023315601);
    }
    @Test
    public void test1725() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test1726() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(-828390390);
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test1727() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.dequeue();
		y.enqueue(1823130560);
		assertFalse(y.isFull());
		y.dequeue();
		y.toString();
    }
    @Test
    public void test1728() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(158123756);
		assertEquals(158123756, x.dequeue());
		x.isEmpty();
		x.isFull();
		assertEquals("[]", x.toString());
		x.enqueue(127510230);
		x.toString();
    }
    @Test
    public void test1729() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.enqueue(-358836169);
		y.toString();
    }
    @Test
    public void test1730() {
		Queue x = new Queue();
		x.enqueue(1900232139);
		x.isFull();
		x.isFull();
		assertEquals(1900232139, x.dequeue());
		x.isFull();
		x.isEmpty();
		x.dequeue();
		x.enqueue(423517828);
		x.enqueue(-2136776836);
		assertEquals(423517828, x.dequeue());
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test1731() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.enqueue(1008959623);
		x.enqueue(-651415032);
    }
    @Test
    public void test1732() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test1733() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.enqueue(-1083055078);
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.enqueue(531694751);
		y.enqueue(-2026917321);
		y.isEmpty();
		assertEquals(531694751, y.dequeue());
		y.isEmpty();
		y.enqueue(-340739635);
		y.isEmpty();
    }
    @Test
    public void test1734() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(81762975);
		x.enqueue(1299021853);
		assertEquals("[81762975, 1299021853]", x.toString());
		assertEquals(81762975, x.dequeue());
		x.dequeue();
		x.isEmpty();
		x.enqueue(-530886745);
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.enqueue(1787012056);
		x.enqueue(813335203);
		x.toString();
    }
    @Test
    public void test1735() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(-1531257274);
		z.enqueue(-933558714);
		z.isEmpty();
		z.isEmpty();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test1736() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.toString();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test1737() {
		Queue Var = new Queue();
		Var.enqueue(959140320);
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test1738() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test1739() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test1740() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-1626955454);
		variable.isFull();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(1017082294);
		variable.dequeue();
    }
    @Test
    public void test1741() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(-449385885);
		x.dequeue();
		x.isEmpty();
		x.enqueue(-61869471);
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.enqueue(-1676189329);
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test1742() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.dequeue();
		z.enqueue(225511769);
		z.isFull();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test1743() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
		y.enqueue(-430039198);
		y.enqueue(-86156956);
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.isFull();
		y.isEmpty();
		y.enqueue(456525185);
		assertFalse(y.isFull());
		y.enqueue(1864749654);
		y.toString();
		y.dequeue();
		y.enqueue(-172477609);
    }
    @Test
    public void test1744() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		y.enqueue(586354975);
    }
    @Test
    public void test1745() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.toString();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1419587211);
		Var.enqueue(-912558601);
		assertFalse(Var.isEmpty());
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(-1629453323);
		Var.isEmpty();
    }
    @Test
    public void test1746() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.toString();
		Var.enqueue(-429644267);
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test1747() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.toString();
		y.dequeue();
		y.toString();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.enqueue(1489087864);
    }
    @Test
    public void test1748() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(-30218835);
		x.toString();
		x.enqueue(-1936538780);
		x.dequeue();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.isFull();
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(1785782941);
    }
    @Test
    public void test1749() {
		Queue y = new Queue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isFull();
		y.toString();
		y.dequeue();
		y.toString();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.toString();
    }
    @Test
    public void test1750() {
		Queue variable = new Queue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1196193286);
		variable.enqueue(-1545844931);
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1172476371);
    }
    @Test
    public void test1751() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test1752() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isFull();
		x.enqueue(1730394478);
		x.dequeue();
		x.isFull();
		x.enqueue(220423574);
		x.enqueue(1029753861);
		x.isFull();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test1753() {
		Queue variable = new Queue();
		variable.enqueue(-1313390307);
    }
    @Test
    public void test1754() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isEmpty();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.enqueue(2066194209);
		z.dequeue();
		z.enqueue(-337529272);
		z.isFull();
    }
    @Test
    public void test1755() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(848932156);
		x.isFull();
		x.enqueue(-310058122);
		assertEquals("[848932156]", x.toString());
		x.isEmpty();
		x.toString();
		x.enqueue(-1480169321);
		x.isFull();
    }
    @Test
    public void test1756() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(1895831473);
		assertEquals(1895831473, z.dequeue());
		z.isEmpty();
		z.isEmpty();
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(-807954459);
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.enqueue(575656108);
		z.dequeue();
		z.toString();
    }
    @Test
    public void test1757() {
		Queue y = new Queue();
		y.enqueue(593435562);
		assertEquals("[593435562]", y.toString());
		y.isFull();
		assertEquals("[593435562]", y.toString());
		assertEquals(593435562, y.dequeue());
		y.dequeue();
		y.isFull();
		y.isFull();
		y.enqueue(-112385603);
		y.toString();
		y.enqueue(-1118378124);
		y.dequeue();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.isFull();
    }
    @Test
    public void test1758() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-565957785);
		variable.isFull();
		variable.enqueue(-547692651);
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(-1169169020);
		variable.toString();
    }
    @Test
    public void test1759() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.isFull();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test1760() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-1121831835);
		y.isEmpty();
		y.dequeue();
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(117536571);
    }
    @Test
    public void test1761() {
		Queue z = new Queue();
		z.enqueue(378405088);
		z.enqueue(-1783832443);
		z.toString();
		z.isFull();
		z.enqueue(-1211625719);
		z.toString();
		assertFalse(z.isEmpty());
		assertFalse(z.isEmpty());
		z.enqueue(-967401262);
		z.isFull();
		assertEquals(378405088, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test1762() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test1763() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(1828496361);
		Var.isEmpty();
		assertEquals(1828496361, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.enqueue(792552191);
		Var.enqueue(309522958);
    }
    @Test
    public void test1764() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.dequeue();
		y.enqueue(1475119851);
		y.dequeue();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test1765() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(-8006965);
		variable.enqueue(1292856526);
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test1766() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.isEmpty();
		y.enqueue(-838078835);
		y.enqueue(-650067558);
		y.dequeue();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test1767() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(1766003850);
    }
    @Test
    public void test1768() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(2012690193);
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test1769() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test1770() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test1771() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(510197734);
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.toString();
		Var.isEmpty();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test1772() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-630426502);
		assertTrue(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test1773() {
		Queue Var = new Queue();
		Var.enqueue(-498536389);
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1241248052);
    }
    @Test
    public void test1774() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.enqueue(2082692799);
		Var.isEmpty();
		assertEquals(2082692799, Var.dequeue());
		Var.enqueue(-1991496779);
    }
    @Test
    public void test1775() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test1776() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.isFull();
		z.isFull();
		z.isEmpty();
		z.dequeue();
		z.enqueue(-1569675838);
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(985281884);
    }
    @Test
    public void test1777() {
		Queue x = new Queue();
		x.enqueue(-1339454480);
		assertFalse(x.isFull());
		x.dequeue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.enqueue(625121757);
    }
    @Test
    public void test1778() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(1292324051);
		x.isEmpty();
		x.enqueue(1828286638);
		x.enqueue(-497921192);
		x.isFull();
		x.isEmpty();
		x.dequeue();
		assertEquals(1828286638, x.dequeue());
		assertEquals("[]", x.toString());
		x.dequeue();
    }
    @Test
    public void test1779() {
		Queue y = new Queue();
		y.enqueue(-2105745212);
		y.enqueue(-57666871);
		assertEquals("[]", y.toString());
		y.toString();
		y.enqueue(597645202);
		y.enqueue(-1417358801);
		assertEquals("[597645202]", y.toString());
		y.enqueue(-501288667);
		y.isEmpty();
    }
    @Test
    public void test1780() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isFull();
		y.isFull();
		y.toString();
		y.enqueue(1387657884);
		assertFalse(y.isFull());
		assertFalse(y.isEmpty());
		y.isEmpty();
		y.enqueue(686669177);
    }
    @Test
    public void test1781() {
		Queue x = new Queue();
		x.enqueue(296855702);
		x.dequeue();
		x.enqueue(-585159727);
    }
    @Test
    public void test1782() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test1783() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1832140265);
    }
    @Test
    public void test1784() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.enqueue(-1248946832);
		x.enqueue(38752791);
		x.enqueue(1922608935);
		x.enqueue(-54551363);
		x.isEmpty();
    }
    @Test
    public void test1785() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(920996372);
		Var.toString();
		assertEquals(920996372, Var.dequeue());
		Var.enqueue(-1552770902);
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(1753149119);
		Var.toString();
    }
    @Test
    public void test1786() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.dequeue();
		z.enqueue(-297745202);
		z.dequeue();
		z.enqueue(1344000724);
		z.isEmpty();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test1787() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.isFull();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(388725711);
		x.isEmpty();
    }
    @Test
    public void test1788() {
		Queue z = new Queue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isFull();
		z.dequeue();
		z.isEmpty();
		z.isFull();
		z.dequeue();
		z.enqueue(-63626412);
		z.isFull();
		z.isFull();
    }
    @Test
    public void test1789() {
		Queue Var = new Queue();
		Var.enqueue(1374645800);
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test1790() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.toString();
		z.enqueue(-1595746226);
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test1791() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.dequeue();
		x.enqueue(480910742);
    }
    @Test
    public void test1792() {
		Queue variable = new Queue();
		variable.enqueue(498254);
		variable.dequeue();
    }
    @Test
    public void test1793() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.isFull();
		assertFalse(y.isFull());
		y.enqueue(1064897961);
		y.dequeue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isFull();
		y.isEmpty();
		y.enqueue(-114501068);
    }
    @Test
    public void test1794() {
		Queue y = new Queue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isFull();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test1795() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(1719926624);
    }
    @Test
    public void test1796() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.enqueue(2114877131);
		assertEquals("[2114877131]", variable.toString());
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(872204703);
    }
    @Test
    public void test1797() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(982375290);
		x.dequeue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.enqueue(-1704385807);
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test1798() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.toString();
		variable.dequeue();
		variable.enqueue(-1310623722);
    }
    @Test
    public void test1799() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test1800() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-427175833);
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test1801() {
		Queue x = new Queue();
		x.enqueue(-162340570);
		x.enqueue(1262187294);
		x.isFull();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(-2057812380);
		x.isFull();
    }
    @Test
    public void test1802() {
		Queue Var = new Queue();
		Var.enqueue(-91501662);
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.enqueue(-370757882);
		Var.isFull();
		assertFalse(Var.isFull());
		Var.toString();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test1803() {
		Queue z = new Queue();
		z.isFull();
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(164170600);
		z.toString();
		z.enqueue(-985944418);
		assertEquals(164170600, z.dequeue());
		z.isEmpty();
		z.enqueue(1473152347);
    }
    @Test
    public void test1804() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-340296289);
		z.isFull();
		assertFalse(z.isFull());
		z.isFull();
		z.toString();
		z.isFull();
		assertFalse(z.isFull());
		z.dequeue();
		z.toString();
		z.enqueue(-698558902);
		z.isFull();
    }
    @Test
    public void test1805() {
		Queue variable = new Queue();
		variable.enqueue(-185016752);
		variable.enqueue(240394333);
		assertFalse(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(791945336);
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test1806() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(121110618);
		Var.toString();
    }
    @Test
    public void test1807() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		assertFalse(y.isFull());
		y.enqueue(-1988049585);
		assertFalse(y.isFull());
		y.dequeue();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.isEmpty();
		y.isFull();
		assertTrue(y.isEmpty());
		y.enqueue(70292607);
    }
    @Test
    public void test1808() {
		Queue variable = new Queue();
		variable.enqueue(-1999290410);
		variable.dequeue();
		variable.enqueue(1684847844);
		variable.isFull();
		variable.enqueue(418873274);
		variable.toString();
    }
    @Test
    public void test1809() {
		Queue Var = new Queue();
		Var.enqueue(1358207923);
		assertFalse(Var.isFull());
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test1810() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test1811() {
		Queue Var = new Queue();
		Var.enqueue(-979577931);
    }
    @Test
    public void test1812() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isFull();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.toString();
    }
    @Test
    public void test1813() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(404692102);
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(-1762396737);
    }
    @Test
    public void test1814() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1860156782);
		Var.toString();
		Var.enqueue(-825204043);
		Var.dequeue();
    }
    @Test
    public void test1815() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test1816() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.enqueue(-85188751);
		Var.enqueue(-681502760);
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-87492753);
		Var.isFull();
    }
    @Test
    public void test1817() {
		Queue Var = new Queue();
		Var.enqueue(-2047918903);
		Var.enqueue(-2128378144);
		assertFalse(Var.isFull());
		Var.enqueue(-659278359);
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.enqueue(-1189521118);
    }
    @Test
    public void test1818() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test1819() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(1231608927);
		Var.toString();
		assertEquals(1231608927, Var.dequeue());
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(1316246411);
    }
    @Test
    public void test1820() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test1821() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(1760414580);
		x.enqueue(-1188550188);
    }
    @Test
    public void test1822() {
		Queue y = new Queue();
		y.enqueue(849949090);
		y.dequeue();
		y.toString();
		y.isEmpty();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test1823() {
		Queue x = new Queue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(1575640163);
		assertEquals(1575640163, x.dequeue());
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(1788924319);
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test1824() {
		Queue z = new Queue();
		z.enqueue(1346139830);
		assertEquals(1346139830, z.dequeue());
		z.enqueue(-1099564144);
		z.toString();
		z.dequeue();
		z.dequeue();
		z.isFull();
		z.enqueue(1053086729);
		z.isFull();
    }
    @Test
    public void test1825() {
		Queue z = new Queue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(1420395171);
		z.toString();
		z.isEmpty();
		z.isEmpty();
		assertEquals("[1420395171]", z.toString());
		z.enqueue(504363314);
		z.enqueue(1735764194);
		z.enqueue(1375618732);
		z.enqueue(168005587);
    }
    @Test
    public void test1826() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
    }
    @Test
    public void test1827() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.dequeue();
		y.dequeue();
		y.dequeue();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.enqueue(-384631215);
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.toString();
		y.dequeue();
		y.enqueue(668604410);
		y.enqueue(1917156559);
    }
    @Test
    public void test1828() {
		Queue variable = new Queue();
		variable.enqueue(-1532202682);
		variable.isFull();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test1829() {
		Queue variable = new Queue();
		variable.enqueue(-26666228);
		variable.enqueue(713627823);
		assertEquals(713627823, variable.dequeue());
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.toString();
		variable.toString();
		variable.enqueue(-1768462559);
		variable.toString();
    }
    @Test
    public void test1830() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.toString();
    }
    @Test
    public void test1831() {
		Queue x = new Queue();
		x.enqueue(-1310896153);
		x.toString();
		x.dequeue();
		x.enqueue(631411317);
		x.isEmpty();
		x.toString();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test1832() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.enqueue(850019824);
		z.toString();
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test1833() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test1834() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test1835() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test1836() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.toString();
		z.dequeue();
		z.enqueue(-1118981521);
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test1837() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.toString();
		y.isFull();
		y.enqueue(1124758397);
    }
    @Test
    public void test1838() {
		Queue variable = new Queue();
		variable.isFull();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.toString();
    }
    @Test
    public void test1839() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test1840() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1469158376);
		Var.isEmpty();
    }
    @Test
    public void test1841() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.toString();
		y.dequeue();
		y.enqueue(-335310649);
    }
    @Test
    public void test1842() {
		Queue y = new Queue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.enqueue(-1140261810);
		y.isFull();
		y.isEmpty();
		y.enqueue(-1732669368);
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test1843() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.enqueue(-202867145);
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test1844() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(1944218418);
		variable.dequeue();
		variable.enqueue(-1796558342);
    }
    @Test
    public void test1845() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.toString();
		z.isFull();
		z.enqueue(-729232507);
    }
    @Test
    public void test1846() {
		Queue z = new Queue();
		z.enqueue(-1896846009);
		z.isEmpty();
		z.dequeue();
		z.toString();
		assertEquals("[]", z.toString());
		z.toString();
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(1861982807);
    }
    @Test
    public void test1847() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test1848() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test1849() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test1850() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-1906589111);
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test1851() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(642070018);
		assertEquals("[642070018]", y.toString());
		y.enqueue(-1600239815);
    }
    @Test
    public void test1852() {
		Queue x = new Queue();
		x.enqueue(-906549856);
		x.dequeue();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test1853() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(1440089032);
		z.toString();
		z.dequeue();
		z.isFull();
		z.isEmpty();
		z.isFull();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test1854() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.enqueue(1427685220);
		assertFalse(variable.isFull());
		variable.enqueue(834671613);
		variable.toString();
    }
    @Test
    public void test1855() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test1856() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.isFull();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(-332995035);
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.enqueue(763038234);
		x.dequeue();
    }
    @Test
    public void test1857() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(948300022);
		z.isEmpty();
		z.enqueue(1514585982);
		assertFalse(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test1858() {
		Queue variable = new Queue();
		variable.enqueue(1713151963);
		variable.enqueue(-440271211);
		variable.enqueue(1268424949);
    }
    @Test
    public void test1859() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1066086480);
    }
    @Test
    public void test1860() {
		Queue variable = new Queue();
		variable.enqueue(-1116795504);
		variable.enqueue(-1315277538);
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(96483777);
		variable.enqueue(-253198753);
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-1653458457);
    }
    @Test
    public void test1861() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test1862() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(1207348477);
		x.toString();
    }
    @Test
    public void test1863() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test1864() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.enqueue(-1827790265);
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test1865() {
		Queue Var = new Queue();
		Var.enqueue(650383509);
		Var.isEmpty();
		Var.toString();
		assertEquals("[650383509]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-1278344890);
		assertEquals(650383509, Var.dequeue());
		Var.toString();
		Var.toString();
    }
    @Test
    public void test1866() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.enqueue(217648033);
		y.isFull();
    }
    @Test
    public void test1867() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(1669577261);
    }
    @Test
    public void test1868() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.isFull();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test1869() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.toString();
		x.isEmpty();
		x.toString();
		x.enqueue(1122583614);
		x.toString();
		assertEquals("[1122583614]", x.toString());
		x.dequeue();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test1870() {
		Queue y = new Queue();
		y.toString();
		assertEquals("[]", y.toString());
		y.isFull();
		y.enqueue(508082826);
		y.toString();
		assertEquals("[508082826]", y.toString());
		assertEquals("[508082826]", y.toString());
		y.isFull();
		y.enqueue(-1556756247);
		y.enqueue(344341464);
		y.isEmpty();
		y.toString();
		assertEquals(508082826, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test1871() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(-356968430);
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.isFull();
		x.isFull();
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
		x.enqueue(1835949642);
		x.isFull();
    }
    @Test
    public void test1872() {
		Queue variable = new Queue();
		variable.enqueue(-925778399);
		variable.enqueue(1792579745);
    }
    @Test
    public void test1873() {
		Queue x = new Queue();
		x.enqueue(1010762341);
		x.enqueue(-999663018);
		x.toString();
		x.isFull();
		assertFalse(x.isEmpty());
		x.enqueue(-1518950166);
		x.enqueue(578019890);
    }
    @Test
    public void test1874() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.enqueue(1117305488);
		assertFalse(z.isFull());
		z.enqueue(-1551203848);
		z.enqueue(-822525413);
		z.enqueue(937970042);
		z.enqueue(348516651);
		z.toString();
		z.toString();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test1875() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(327802448);
		variable.isEmpty();
    }
    @Test
    public void test1876() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.toString();
		y.enqueue(-1905354958);
		assertTrue(y.isEmpty());
		y.toString();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.enqueue(610441377);
		y.toString();
    }
    @Test
    public void test1877() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.enqueue(1676160205);
		y.isFull();
		y.dequeue();
		assertFalse(y.isFull());
		y.isFull();
		y.toString();
		y.isEmpty();
		y.isEmpty();
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test1878() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test1879() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.enqueue(320409055);
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test1880() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test1881() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(223848422);
		Var.enqueue(-605775943);
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(1602238762);
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test1882() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.toString();
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test1883() {
		Queue Var = new Queue();
		Var.enqueue(1441017621);
    }
    @Test
    public void test1884() {
		Queue x = new Queue();
		x.enqueue(-1997338463);
		x.dequeue();
		x.toString();
		x.enqueue(-952713821);
    }
    @Test
    public void test1885() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		z.isFull();
		assertFalse(z.isFull());
		z.toString();
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test1886() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-1418527659);
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test1887() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test1888() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(813556412);
		Var.enqueue(-1485824615);
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test1889() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.isFull();
		z.enqueue(-351663744);
    }
    @Test
    public void test1890() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.enqueue(-673688717);
		x.enqueue(-207967546);
		x.enqueue(-145430501);
		x.dequeue();
    }
    @Test
    public void test1891() {
		Queue x = new Queue();
		x.enqueue(984123132);
    }
    @Test
    public void test1892() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test1893() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(1803944849);
		variable.enqueue(-1161136064);
		assertEquals("[1803944849]", variable.toString());
		variable.isFull();
		variable.enqueue(-860036869);
    }
    @Test
    public void test1894() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.enqueue(-868959884);
    }
    @Test
    public void test1895() {
		Queue variable = new Queue();
		variable.enqueue(399047741);
		variable.toString();
		variable.dequeue();
		variable.toString();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(-1938340338);
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test1896() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(758260990);
		y.toString();
		assertFalse(y.isFull());
		y.isFull();
		y.isFull();
    }
    @Test
    public void test1897() {
		Queue Var = new Queue();
		Var.enqueue(1881674204);
		assertFalse(Var.isFull());
		assertEquals(1881674204, Var.dequeue());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-878179989);
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(2132492261);
    }
    @Test
    public void test1898() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test1899() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.enqueue(1961389902);
		assertFalse(x.isFull());
		assertFalse(x.isEmpty());
		x.enqueue(965601237);
		x.enqueue(434695523);
		x.toString();
		x.enqueue(-2000494882);
    }
    @Test
    public void test1900() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(907176272);
		assertEquals(907176272, z.dequeue());
		z.enqueue(205388763);
		z.isFull();
    }
    @Test
    public void test1901() {
		Queue z = new Queue();
		z.enqueue(-1252310713);
		z.isEmpty();
		z.toString();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.enqueue(-261938653);
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.enqueue(255732820);
		z.isFull();
		z.isFull();
    }
    @Test
    public void test1902() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isEmpty();
		y.enqueue(-1860438393);
		y.isFull();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test1903() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.enqueue(1042771642);
		variable.toString();
		assertEquals("[1042771642]", variable.toString());
		variable.dequeue();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(792944918);
    }
    @Test
    public void test1904() {
		Queue Var = new Queue();
		Var.enqueue(1387961050);
		Var.dequeue();
    }
    @Test
    public void test1905() {
		Queue variable = new Queue();
		variable.enqueue(1997188557);
		variable.enqueue(1319775600);
		variable.enqueue(-1266390648);
		variable.dequeue();
		assertEquals(1319775600, variable.dequeue());
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test1906() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test1907() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.dequeue();
		z.enqueue(-2071570231);
		z.isFull();
		z.toString();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.isFull();
    }
    @Test
    public void test1908() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test1909() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(1684692633);
    }
    @Test
    public void test1910() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test1911() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(997413791);
		assertEquals("[997413791]", variable.toString());
		assertEquals("[997413791]", variable.toString());
		variable.enqueue(-2071358152);
		variable.toString();
		variable.dequeue();
		variable.enqueue(1452233248);
    }
    @Test
    public void test1912() {
		Queue z = new Queue();
		z.enqueue(-1767584126);
		z.enqueue(266372387);
		assertEquals(266372387, z.dequeue());
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.toString();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(909056432);
		z.enqueue(1543410646);
		z.enqueue(2041891474);
		assertEquals(909056432, z.dequeue());
		z.dequeue();
		z.toString();
    }
    @Test
    public void test1913() {
		Queue Var = new Queue();
		Var.enqueue(1410725960);
		Var.isFull();
		assertEquals(1410725960, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(-2077436656);
    }
    @Test
    public void test1914() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test1915() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.enqueue(-1916470640);
		y.enqueue(948242514);
		y.toString();
		y.toString();
		y.enqueue(-623406283);
    }
    @Test
    public void test1916() {
		Queue z = new Queue();
		z.enqueue(-259917421);
    }
    @Test
    public void test1917() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(1371509698);
		variable.enqueue(92155199);
		variable.isFull();
		assertFalse(variable.isEmpty());
		variable.dequeue();
		assertFalse(variable.isFull());
		assertFalse(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test1918() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(-2059769374);
		Var.enqueue(-1816995107);
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test1919() {
		Queue variable = new Queue();
		variable.enqueue(596950128);
		variable.enqueue(-1495715055);
		variable.toString();
		variable.enqueue(-148327920);
    }
    @Test
    public void test1920() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-289440852);
		variable.enqueue(1369107382);
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test1921() {
		Queue z = new Queue();
		z.enqueue(-163822715);
		z.toString();
		z.enqueue(-1454406574);
		z.dequeue();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.toString();
		z.dequeue();
		z.toString();
		z.isFull();
    }
    @Test
    public void test1922() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.toString();
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.isFull();
		x.enqueue(-1431530536);
		x.toString();
		x.toString();
		x.isFull();
    }
    @Test
    public void test1923() {
		Queue y = new Queue();
		y.enqueue(-1820064285);
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.enqueue(701643202);
		y.isFull();
		y.toString();
    }
    @Test
    public void test1924() {
		Queue Var = new Queue();
		Var.enqueue(-1205521538);
		Var.enqueue(-1652846935);
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.enqueue(227790443);
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test1925() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(-1132920510);
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isEmpty();
		y.toString();
		y.isFull();
		assertFalse(y.isFull());
		y.enqueue(1693538271);
		assertEquals(1693538271, y.dequeue());
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.enqueue(1655731061);
    }
    @Test
    public void test1926() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.isFull();
		z.isEmpty();
		z.isFull();
		z.isEmpty();
		z.enqueue(1344845708);
    }
    @Test
    public void test1927() {
		Queue x = new Queue();
		x.enqueue(-86883535);
		x.dequeue();
		x.toString();
		x.enqueue(166774967);
		x.isEmpty();
		x.isEmpty();
		assertEquals(166774967, x.dequeue());
		x.toString();
		x.enqueue(1735556289);
		x.isFull();
    }
    @Test
    public void test1928() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-1296793114);
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test1929() {
		Queue z = new Queue();
		z.enqueue(-1618613378);
		z.isEmpty();
		z.enqueue(-148712340);
		z.toString();
		z.enqueue(-1480823557);
		z.isFull();
		z.dequeue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test1930() {
		Queue z = new Queue();
		z.enqueue(1379808804);
		assertEquals(1379808804, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(1841225160);
    }
    @Test
    public void test1931() {
		Queue z = new Queue();
		z.enqueue(1956679914);
		z.isEmpty();
		z.enqueue(-2125420323);
		z.toString();
		z.enqueue(-2033455982);
		z.isFull();
		z.enqueue(1471877007);
    }
    @Test
    public void test1932() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-852518751);
		x.enqueue(1934098874);
		x.isFull();
		x.enqueue(2137289518);
    }
    @Test
    public void test1933() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.toString();
		x.toString();
		x.enqueue(-1639017722);
		x.toString();
    }
    @Test
    public void test1934() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.enqueue(42069985);
		y.dequeue();
		y.enqueue(1601500195);
    }
    @Test
    public void test1935() {
		Queue Var = new Queue();
		Var.enqueue(-1637051541);
		Var.dequeue();
		Var.toString();
		Var.enqueue(-486005268);
		Var.toString();
		Var.toString();
		Var.toString();
		Var.isFull();
		Var.enqueue(-978419306);
    }
    @Test
    public void test1936() {
		Queue z = new Queue();
		z.enqueue(1188522982);
		z.toString();
		z.isFull();
		assertEquals("[1188522982]", z.toString());
		z.toString();
		z.isFull();
		z.toString();
		z.isFull();
		assertFalse(z.isEmpty());
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test1937() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.enqueue(1360752208);
    }
    @Test
    public void test1938() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(915820167);
		Var.enqueue(2055216903);
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test1939() {
		Queue z = new Queue();
		z.enqueue(-755293825);
		z.isFull();
		z.toString();
		z.enqueue(2027137736);
		z.enqueue(1451176781);
		assertEquals(2027137736, z.dequeue());
		z.dequeue();
		z.isFull();
		z.toString();
    }
    @Test
    public void test1940() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
    }
    @Test
    public void test1941() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.isFull();
		x.enqueue(54052423);
		assertEquals("[54052423]", x.toString());
		assertFalse(x.isFull());
		x.dequeue();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.enqueue(-572837875);
		x.toString();
		x.enqueue(1616276214);
		x.enqueue(1071307957);
		x.toString();
    }
    @Test
    public void test1942() {
		Queue Var = new Queue();
		Var.enqueue(-1500826341);
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
		Var.enqueue(1241633986);
		assertFalse(Var.isFull());
		assertEquals("[1241633986]", Var.toString());
		Var.enqueue(-45014448);
		Var.isFull();
		Var.enqueue(-49882789);
		Var.isFull();
		Var.enqueue(-1724178066);
    }
    @Test
    public void test1943() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isEmpty();
		x.isFull();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.toString();
		x.enqueue(704525996);
		x.isEmpty();
		x.enqueue(-556410172);
    }
    @Test
    public void test1944() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test1945() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		x.isFull();
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(-599932617);
		x.isEmpty();
		x.enqueue(-615872431);
		x.enqueue(-720386752);
		x.dequeue();
    }
    @Test
    public void test1946() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.toString();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isFull();
    }
    @Test
    public void test1947() {
		Queue x = new Queue();
		x.enqueue(-300998961);
		assertTrue(x.isEmpty());
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test1948() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.isFull();
		z.dequeue();
		z.enqueue(1913386158);
		z.dequeue();
    }
    @Test
    public void test1949() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.isFull();
		z.dequeue();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.enqueue(-1418782930);
		z.enqueue(109318161);
		z.isFull();
		z.enqueue(363977854);
		z.isEmpty();
    }
    @Test
    public void test1950() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(1349746305);
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(617098351);
		assertEquals(1349746305, x.dequeue());
		x.toString();
    }
    @Test
    public void test1951() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.toString();
    }
    @Test
    public void test1952() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1514342453);
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test1953() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.toString();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test1954() {
		Queue y = new Queue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.enqueue(786019929);
		y.dequeue();
		y.enqueue(-683010042);
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test1955() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test1956() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		z.isEmpty();
		z.enqueue(1100652404);
		z.toString();
		assertFalse(z.isFull());
		assertEquals("[1100652404]", z.toString());
		z.dequeue();
		z.toString();
    }
    @Test
    public void test1957() {
		Queue Var = new Queue();
		Var.enqueue(-1859374366);
    }
    @Test
    public void test1958() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.isFull();
		y.enqueue(282908877);
		y.isEmpty();
		y.toString();
		y.toString();
    }
    @Test
    public void test1959() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-27366897);
		assertEquals(-1, y.dequeue());
		y.enqueue(-840683317);
		y.enqueue(-877517972);
		y.toString();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test1960() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test1961() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test1962() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.enqueue(-1681341643);
		z.toString();
		assertTrue(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test1963() {
		Queue Var = new Queue();
		Var.enqueue(-1546707769);
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(1307565691);
		Var.toString();
		assertEquals(1307565691, Var.dequeue());
		Var.dequeue();
		Var.enqueue(-649131049);
    }
    @Test
    public void test1964() {
		Queue variable = new Queue();
		variable.enqueue(-547897794);
		variable.isFull();
    }
    @Test
    public void test1965() {
		Queue y = new Queue();
		y.enqueue(-1787190308);
		y.toString();
		y.enqueue(-1525131156);
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test1966() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test1967() {
		Queue z = new Queue();
		z.enqueue(1249450858);
		z.enqueue(-1867634983);
		z.dequeue();
		z.isFull();
		z.isEmpty();
		z.dequeue();
		z.enqueue(-282482608);
		z.toString();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test1968() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-475981984);
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(462484594);
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(-710327591);
    }
    @Test
    public void test1969() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(-1822001257);
    }
    @Test
    public void test1970() {
		Queue y = new Queue();
		y.enqueue(-1456795711);
		y.dequeue();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test1971() {
		Queue z = new Queue();
		z.enqueue(-868453893);
		z.enqueue(-1128567728);
		z.toString();
		z.isFull();
		assertTrue(z.isEmpty());
		z.enqueue(-257091049);
		z.isFull();
		z.isFull();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test1972() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test1973() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
		z.toString();
		z.isEmpty();
		z.enqueue(-1984219664);
    }
    @Test
    public void test1974() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test1975() {
		Queue z = new Queue();
		z.enqueue(-653979647);
    }
    @Test
    public void test1976() {
		Queue y = new Queue();
		y.enqueue(273190613);
		y.isFull();
		y.toString();
		y.isFull();
		assertEquals("[273190613]", y.toString());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test1977() {
		Queue z = new Queue();
		z.enqueue(33473392);
		z.isEmpty();
		z.isFull();
		z.enqueue(337093388);
		z.toString();
		z.enqueue(2140057127);
    }
    @Test
    public void test1978() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isFull();
		z.isFull();
		z.toString();
		z.enqueue(-555723020);
		z.dequeue();
		z.enqueue(-992279540);
    }
    @Test
    public void test1979() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.enqueue(1158331193);
		assertEquals(1158331193, x.dequeue());
		x.dequeue();
		x.isFull();
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test1980() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		assertEquals("[]", x.toString());
		x.enqueue(196746973);
    }
    @Test
    public void test1981() {
		Queue Var = new Queue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test1982() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(768344869);
		y.enqueue(884154476);
		y.isEmpty();
		y.toString();
		assertFalse(y.isEmpty());
		y.toString();
    }
    @Test
    public void test1983() {
		Queue y = new Queue();
		y.enqueue(-188889414);
		assertEquals("[]", y.toString());
		y.dequeue();
		y.isFull();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test1984() {
		Queue Var = new Queue();
		Var.enqueue(-775974462);
		Var.isFull();
		Var.enqueue(12141092);
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test1985() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.enqueue(2069203267);
		assertFalse(z.isEmpty());
		z.enqueue(853349654);
		assertEquals("[2069203267, 853349654]", z.toString());
		z.isFull();
    }
    @Test
    public void test1986() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(887038132);
		x.isFull();
    }
    @Test
    public void test1987() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		assertTrue(y.isEmpty());
		y.isFull();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test1988() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.enqueue(629596490);
		Var.toString();
		Var.enqueue(1278462692);
    }
    @Test
    public void test1989() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.enqueue(-917727080);
		y.enqueue(-237336370);
    }
    @Test
    public void test1990() {
		Queue Var = new Queue();
		Var.enqueue(1971187430);
		assertEquals("[1971187430]", Var.toString());
		Var.isFull();
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test1991() {
		Queue z = new Queue();
		z.enqueue(1011953432);
		z.isEmpty();
		assertFalse(z.isEmpty());
		assertEquals("[1011953432]", z.toString());
		z.isEmpty();
		assertEquals(1011953432, z.dequeue());
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test1992() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-153384243);
		assertEquals("[]", z.toString());
		z.dequeue();
		z.dequeue();
		z.isFull();
		assertEquals("[]", z.toString());
		z.isFull();
		assertEquals("[]", z.toString());
		z.enqueue(1731751881);
    }
    @Test
    public void test1993() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(692214512);
		variable.dequeue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test1994() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.enqueue(1004784912);
		z.dequeue();
		z.isFull();
		z.dequeue();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test1995() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isEmpty();
		y.toString();
		y.isEmpty();
		y.enqueue(1634187181);
    }
    @Test
    public void test1996() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(76008604);
    }
    @Test
    public void test1997() {
		Queue y = new Queue();
		y.enqueue(-138035138);
		assertTrue(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test1998() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(292297623);
		Var.enqueue(-169969417);
    }
    @Test
    public void test1999() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
    }
    @Test
    public void test2000() {
		Queue Var = new Queue();
		Var.enqueue(-1389960369);
		Var.enqueue(1560304457);
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-1528948856);
    }
    @Test
    public void test2001() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.toString();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.enqueue(-637792430);
		assertEquals(-1, z.dequeue());
		z.enqueue(-254497418);
		z.isEmpty();
		z.enqueue(1026577563);
		assertEquals("[1026577563]", z.toString());
		z.enqueue(1665025741);
		z.dequeue();
		assertFalse(z.isEmpty());
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test2002() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-78842313);
		assertFalse(variable.isFull());
		variable.enqueue(1698277924);
		variable.isEmpty();
		variable.toString();
		variable.enqueue(1916618614);
		variable.dequeue();
		variable.enqueue(1816888327);
		variable.toString();
    }
    @Test
    public void test2003() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isEmpty();
		z.enqueue(947897671);
		z.dequeue();
		z.dequeue();
		z.toString();
		z.dequeue();
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test2004() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(-602872771);
		variable.toString();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test2005() {
		Queue z = new Queue();
		z.toString();
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(-1307059432);
		assertFalse(z.isFull());
		z.enqueue(-1021459058);
		z.enqueue(-299636193);
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isFull();
		z.dequeue();
		z.toString();
		z.isFull();
    }
    @Test
    public void test2006() {
		Queue variable = new Queue();
		variable.enqueue(-375945343);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test2007() {
		Queue Var = new Queue();
		Var.enqueue(671832273);
		Var.enqueue(859794817);
		Var.enqueue(1291183240);
		Var.dequeue();
		Var.toString();
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.enqueue(473970594);
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test2008() {
		Queue z = new Queue();
		z.enqueue(499531904);
    }
    @Test
    public void test2009() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.enqueue(866005808);
		variable.isFull();
    }
    @Test
    public void test2010() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(-1927955305);
		x.isFull();
		x.toString();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test2011() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.enqueue(1262765864);
		assertEquals(1262765864, variable.dequeue());
		variable.dequeue();
		variable.enqueue(-488922928);
		variable.toString();
		variable.isEmpty();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test2012() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-802645417);
		z.enqueue(-1011100124);
		assertEquals("[]", z.toString());
		z.enqueue(-216272222);
		z.toString();
		z.isEmpty();
		z.toString();
		z.enqueue(-2087308267);
		assertTrue(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test2013() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-427052760);
		variable.toString();
    }
    @Test
    public void test2014() {
		Queue z = new Queue();
		z.enqueue(1251784056);
		z.dequeue();
    }
    @Test
    public void test2015() {
		Queue Var = new Queue();
		Var.enqueue(-532405238);
		Var.isFull();
		Var.toString();
		Var.enqueue(298411690);
		Var.enqueue(2139759162);
		Var.isEmpty();
    }
    @Test
    public void test2016() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(1019866103);
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.isEmpty();
		Var.enqueue(1287008726);
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertEquals(1019866103, Var.dequeue());
		Var.enqueue(113725538);
		assertFalse(Var.isFull());
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test2017() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		assertEquals("[]", x.toString());
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(157554343);
		x.isEmpty();
		x.enqueue(-410065450);
    }
    @Test
    public void test2018() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1760198556);
		variable.toString();
		variable.enqueue(1377956612);
		variable.enqueue(516890473);
		assertFalse(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test2019() {
		Queue variable = new Queue();
		variable.isFull();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test2020() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-2105356570);
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test2021() {
		Queue Var = new Queue();
		Var.enqueue(-1324005088);
		Var.isFull();
		Var.enqueue(1526827196);
		Var.dequeue();
    }
    @Test
    public void test2022() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(-1957899100);
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test2023() {
		Queue y = new Queue();
		y.isFull();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.toString();
		y.dequeue();
		y.dequeue();
		y.toString();
		y.isFull();
		y.isEmpty();
		y.enqueue(-698845353);
    }
    @Test
    public void test2024() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test2025() {
		Queue variable = new Queue();
		variable.enqueue(840366349);
    }
    @Test
    public void test2026() {
		Queue y = new Queue();
		y.enqueue(2132996194);
		y.enqueue(-1418872586);
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test2027() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.isFull();
		y.isEmpty();
		y.enqueue(-667566811);
		y.dequeue();
    }
    @Test
    public void test2028() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.enqueue(-2071229749);
		z.isEmpty();
    }
    @Test
    public void test2029() {
		Queue variable = new Queue();
		variable.enqueue(1284631747);
		variable.isFull();
		assertEquals(1284631747, variable.dequeue());
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test2030() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(1261016631);
		z.toString();
		z.enqueue(1306547415);
		z.enqueue(-1683120788);
		z.enqueue(832808825);
		assertEquals("[1261016631, 1306547415, 832808825]", z.toString());
		z.dequeue();
		z.toString();
    }
    @Test
    public void test2031() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(715952918);
		variable.dequeue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(1921731429);
		assertEquals(1921731429, variable.dequeue());
		variable.enqueue(1359002174);
    }
    @Test
    public void test2032() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.enqueue(-24915867);
		Var.enqueue(-97393163);
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.enqueue(-858179895);
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test2033() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.toString();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test2034() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(476382916);
		Var.enqueue(925560737);
		Var.enqueue(1713416870);
    }
    @Test
    public void test2035() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.enqueue(-1052532621);
		y.toString();
		y.isEmpty();
		y.enqueue(950833081);
		assertFalse(y.isEmpty());
		y.enqueue(953061737);
		y.isEmpty();
		y.isEmpty();
		assertFalse(y.isEmpty());
		y.enqueue(-1068218390);
    }
    @Test
    public void test2036() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(523067299);
    }
    @Test
    public void test2037() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isFull();
		x.toString();
		x.isFull();
		x.enqueue(-752091864);
		x.dequeue();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test2038() {
		Queue z = new Queue();
		z.isFull();
		assertFalse(z.isFull());
		z.isFull();
		z.isEmpty();
		z.enqueue(1666885688);
		z.toString();
		z.enqueue(-2060611288);
		z.isEmpty();
    }
    @Test
    public void test2039() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isFull();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(-273203383);
    }
    @Test
    public void test2040() {
		Queue x = new Queue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.toString();
    }
    @Test
    public void test2041() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.enqueue(162972933);
		y.isEmpty();
		y.enqueue(1094106626);
    }
    @Test
    public void test2042() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isEmpty();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test2043() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.dequeue();
		y.enqueue(-1019211635);
		y.toString();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.enqueue(-1846393162);
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(-2115964002);
		y.isEmpty();
		y.enqueue(420752394);
		y.isFull();
    }
    @Test
    public void test2044() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.isFull();
		z.enqueue(-609041550);
    }
    @Test
    public void test2045() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(1298430119);
		Var.dequeue();
    }
    @Test
    public void test2046() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test2047() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1218289353);
		variable.isFull();
		variable.isFull();
		variable.enqueue(1316316762);
		assertEquals(1316316762, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(791960632);
		assertEquals("[791960632]", variable.toString());
		assertEquals("[791960632]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test2048() {
		Queue y = new Queue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isEmpty();
		y.toString();
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test2049() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
		z.isFull();
		assertEquals("[]", z.toString());
		z.enqueue(-959046772);
		assertFalse(z.isFull());
		z.enqueue(227913840);
    }
    @Test
    public void test2050() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(-1303012067);
		x.enqueue(229874462);
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isFull();
		x.enqueue(1132324734);
		x.isEmpty();
    }
    @Test
    public void test2051() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isFull();
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.isFull();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test2052() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.enqueue(-306330670);
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1512714908);
    }
    @Test
    public void test2053() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.toString();
		x.isFull();
		x.enqueue(1037071883);
		x.isEmpty();
		x.enqueue(1678037488);
		x.enqueue(-817051972);
		assertEquals(1037071883, x.dequeue());
		x.dequeue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isFull();
    }
    @Test
    public void test2054() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.dequeue();
    }
    @Test
    public void test2055() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test2056() {
		Queue Var = new Queue();
		Var.enqueue(-1036775001);
		Var.enqueue(-669922493);
		Var.enqueue(-1895437363);
		Var.enqueue(-985674657);
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test2057() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(1944147981);
    }
    @Test
    public void test2058() {
		Queue variable = new Queue();
		variable.enqueue(690179700);
		assertFalse(variable.isEmpty());
		assertEquals("[690179700]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test2059() {
		Queue y = new Queue();
		y.enqueue(592635441);
		assertEquals(592635441, y.dequeue());
		y.enqueue(-717617702);
		assertTrue(y.isEmpty());
		y.dequeue();
		y.toString();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isFull();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.dequeue();
    }
    @Test
    public void test2060() {
		Queue x = new Queue();
		x.enqueue(1161836792);
		assertEquals(1161836792, x.dequeue());
		assertFalse(x.isFull());
		x.enqueue(1719344446);
		assertFalse(x.isEmpty());
		x.toString();
    }
    @Test
    public void test2061() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1520175702);
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.enqueue(-150158606);
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-1232600221);
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test2062() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		y.isFull();
		y.enqueue(-1968654872);
    }
    @Test
    public void test2063() {
		Queue Var = new Queue();
		Var.enqueue(-1220295141);
    }
    @Test
    public void test2064() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test2065() {
		Queue y = new Queue();
		y.enqueue(1580759083);
		assertFalse(y.isEmpty());
		assertFalse(y.isEmpty());
		y.enqueue(1849221419);
		y.enqueue(592652378);
		y.toString();
		y.enqueue(1352808627);
		y.enqueue(1204048130);
		y.enqueue(1374820779);
		y.enqueue(741345457);
		y.enqueue(-1153729722);
		y.dequeue();
    }
    @Test
    public void test2066() {
		Queue x = new Queue();
		x.enqueue(1411194330);
		x.dequeue();
    }
    @Test
    public void test2067() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test2068() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(783761418);
		Var.dequeue();
    }
    @Test
    public void test2069() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test2070() {
		Queue y = new Queue();
		y.enqueue(954913818);
		y.enqueue(268441038);
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.isFull();
		y.enqueue(-1046083417);
		y.dequeue();
    }
    @Test
    public void test2071() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(-1086372200);
		y.isFull();
		y.toString();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1437275860);
		y.toString();
		y.enqueue(-1658953614);
		y.toString();
    }
    @Test
    public void test2072() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test2073() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.enqueue(233029323);
    }
    @Test
    public void test2074() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.toString();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test2075() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		Var.toString();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.enqueue(156612831);
		Var.enqueue(924997273);
		Var.isEmpty();
    }
    @Test
    public void test2076() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.enqueue(507426165);
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test2077() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test2078() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test2079() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.toString();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.toString();
		y.dequeue();
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(-1614551351);
		y.toString();
    }
    @Test
    public void test2080() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-1106842567);
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.enqueue(1416037837);
		variable.enqueue(-481128856);
		variable.dequeue();
    }
    @Test
    public void test2081() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		z.isFull();
		z.dequeue();
		z.toString();
		z.dequeue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test2082() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-2146646671);
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.toString();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test2083() {
		Queue variable = new Queue();
		variable.enqueue(-448503474);
		variable.enqueue(786626493);
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test2084() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test2085() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test2086() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test2087() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test2088() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.dequeue();
		y.dequeue();
		y.dequeue();
		y.enqueue(2094276410);
		y.isEmpty();
		assertEquals(2094276410, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test2089() {
		Queue variable = new Queue();
		variable.enqueue(219480354);
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1858208143);
		assertEquals(1858208143, variable.dequeue());
		variable.enqueue(1774983412);
		variable.dequeue();
    }
    @Test
    public void test2090() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test2091() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test2092() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(587447864);
		variable.enqueue(-2025845460);
		variable.enqueue(-820423185);
    }
    @Test
    public void test2093() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test2094() {
		Queue z = new Queue();
		z.enqueue(-156207178);
		z.enqueue(-1767037498);
    }
    @Test
    public void test2095() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-516420053);
		y.toString();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test2096() {
		Queue y = new Queue();
		y.enqueue(1382304586);
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		y.enqueue(274562793);
		y.enqueue(-995104345);
		y.isFull();
		assertFalse(y.isEmpty());
		y.isFull();
		y.toString();
		y.isFull();
    }
    @Test
    public void test2097() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test2098() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.toString();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(-529938444);
    }
    @Test
    public void test2099() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		y.isFull();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.enqueue(1083362032);
    }
    @Test
    public void test2100() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test2101() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.isEmpty();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test2102() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test2103() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		z.toString();
		z.dequeue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(1634999447);
    }
    @Test
    public void test2104() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test2105() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.enqueue(-1182223074);
		y.toString();
    }
    @Test
    public void test2106() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		Var.enqueue(-917759541);
		Var.enqueue(-1044490820);
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test2107() {
		Queue y = new Queue();
		y.enqueue(758640782);
		y.dequeue();
		y.enqueue(-159323137);
		y.enqueue(-978103185);
		y.enqueue(1059452682);
		assertEquals(1059452682, y.dequeue());
		y.toString();
		y.dequeue();
    }
    @Test
    public void test2108() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-963508292);
		Var.dequeue();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test2109() {
		Queue z = new Queue();
		z.enqueue(-2080326142);
		z.toString();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test2110() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(2141494786);
		assertFalse(Var.isFull());
		Var.enqueue(1009393151);
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.toString();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(108933061);
		assertEquals(108933061, Var.dequeue());
		Var.enqueue(1877218750);
		assertFalse(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test2111() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isEmpty();
		z.toString();
		z.enqueue(1092074939);
		assertEquals(1092074939, z.dequeue());
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test2112() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test2113() {
		Queue y = new Queue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test2114() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.dequeue();
		y.dequeue();
		y.enqueue(-769782987);
		y.isEmpty();
		y.isFull();
		y.toString();
		y.enqueue(-555448114);
    }
    @Test
    public void test2115() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.enqueue(444709308);
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
		assertEquals(444709308, x.dequeue());
		x.enqueue(1548879392);
    }
    @Test
    public void test2116() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1171294097);
		variable.dequeue();
		variable.enqueue(-1151638123);
		variable.enqueue(-1131417468);
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test2117() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(-1209561080);
		y.toString();
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.dequeue();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.enqueue(911751703);
		y.isEmpty();
		y.isFull();
		assertFalse(y.isEmpty());
		y.isEmpty();
		assertEquals("[911751703]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test2118() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(1659611919);
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.isFull();
		assertEquals(1659611919, variable.dequeue());
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test2119() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.dequeue();
		variable.enqueue(653407314);
		assertEquals(653407314, variable.dequeue());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.enqueue(-593936959);
		variable.enqueue(1714651378);
    }
    @Test
    public void test2120() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(122998685);
		assertEquals("[122998685]", variable.toString());
		variable.enqueue(-2093851732);
		variable.enqueue(1590068639);
		variable.isFull();
		assertEquals(122998685, variable.dequeue());
		variable.enqueue(-1563986469);
    }
    @Test
    public void test2121() {
		Queue y = new Queue();
		y.enqueue(-1475764975);
		y.dequeue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test2122() {
		Queue y = new Queue();
		y.enqueue(-1437165957);
		y.enqueue(1609389736);
		assertFalse(y.isFull());
		y.isEmpty();
		assertFalse(y.isEmpty());
		y.toString();
		y.dequeue();
		y.toString();
		y.isFull();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test2123() {
		Queue x = new Queue();
		x.enqueue(1769115769);
		x.enqueue(526084136);
		x.toString();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test2124() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.enqueue(553578465);
		y.toString();
		assertFalse(y.isEmpty());
		assertFalse(y.isEmpty());
		y.isFull();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test2125() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-1328022821);
		variable.isFull();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test2126() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(219234698);
		z.isEmpty();
		assertFalse(z.isEmpty());
		z.isFull();
		z.enqueue(-2118199653);
		z.enqueue(756520067);
		assertFalse(z.isEmpty());
		z.enqueue(-2054123163);
		z.isFull();
    }
    @Test
    public void test2127() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.toString();
		y.enqueue(584991010);
    }
    @Test
    public void test2128() {
		Queue z = new Queue();
		z.enqueue(93342933);
		z.isEmpty();
		z.isEmpty();
		assertEquals(93342933, z.dequeue());
		assertTrue(z.isEmpty());
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test2129() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(-764187533);
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test2130() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(-990772546);
		x.isEmpty();
		x.dequeue();
		x.enqueue(184430714);
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test2131() {
		Queue y = new Queue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.dequeue();
		y.enqueue(56288255);
		y.enqueue(474402918);
    }
    @Test
    public void test2132() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test2133() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(1957710544);
		x.isEmpty();
		x.enqueue(1395020439);
		x.isEmpty();
		x.enqueue(-395675738);
		assertEquals("[1957710544, 1395020439]", x.toString());
		x.enqueue(1538473707);
		x.enqueue(-681125597);
    }
    @Test
    public void test2134() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.toString();
		z.isFull();
		z.toString();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test2135() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.isFull();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		Var.enqueue(878447263);
		assertFalse(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test2136() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test2137() {
		Queue variable = new Queue();
		variable.enqueue(-554908727);
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(565874864);
    }
    @Test
    public void test2138() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-397051852);
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test2139() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-1458927240);
		z.enqueue(-193742741);
		z.dequeue();
    }
    @Test
    public void test2140() {
		Queue variable = new Queue();
		variable.enqueue(-1962841475);
		variable.enqueue(-651079678);
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-665497390);
		variable.dequeue();
		variable.enqueue(1923766514);
		variable.enqueue(-1257812590);
    }
    @Test
    public void test2141() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(260884531);
		assertEquals("[260884531]", x.toString());
		x.isFull();
		x.isFull();
    }
    @Test
    public void test2142() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(326250735);
		assertEquals("[326250735]", Var.toString());
		assertEquals("[326250735]", Var.toString());
		assertFalse(Var.isEmpty());
		Var.enqueue(-890895820);
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test2143() {
		Queue variable = new Queue();
		variable.enqueue(1908832738);
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test2144() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(-1525910413);
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-1007799939);
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-608552194);
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-68081188);
    }
    @Test
    public void test2145() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(1913343466);
		variable.toString();
		variable.isFull();
		variable.toString();
		variable.enqueue(1068201532);
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test2146() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test2147() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isFull();
		Var.enqueue(1253800139);
		Var.toString();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test2148() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.enqueue(1277970160);
		variable.isFull();
		assertEquals(1277970160, variable.dequeue());
		variable.enqueue(519051985);
		variable.isEmpty();
		variable.enqueue(64676269);
		assertEquals("[519051985, 64676269]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test2149() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.enqueue(395154165);
		assertEquals("[395154165]", x.toString());
		assertFalse(x.isFull());
		x.toString();
		x.toString();
		assertEquals("[395154165]", x.toString());
		assertEquals("[395154165]", x.toString());
		x.toString();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test2150() {
		Queue y = new Queue();
		y.enqueue(680127159);
		y.isEmpty();
		assertEquals("[680127159]", y.toString());
		assertFalse(y.isEmpty());
		y.dequeue();
		y.enqueue(339301904);
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test2151() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(1050141218);
    }
    @Test
    public void test2152() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.enqueue(-1716281308);
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-610230670);
		z.toString();
    }
    @Test
    public void test2153() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(1726304107);
		z.isEmpty();
		assertEquals(1726304107, z.dequeue());
		z.isFull();
		z.isEmpty();
		z.isFull();
		z.toString();
		z.dequeue();
		assertFalse(z.isFull());
		z.isFull();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test2154() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(328549174);
		x.dequeue();
    }
    @Test
    public void test2155() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test2156() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.enqueue(668563403);
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(801968292);
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test2157() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test2158() {
		Queue y = new Queue();
		y.enqueue(1189195613);
		assertFalse(y.isEmpty());
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.dequeue();
		y.enqueue(1439390622);
		assertEquals("[1439390622]", y.toString());
		y.dequeue();
    }
    @Test
    public void test2159() {
		Queue y = new Queue();
		y.enqueue(-1959406228);
		y.dequeue();
		y.enqueue(-214574282);
		y.toString();
		y.toString();
		y.isFull();
    }
    @Test
    public void test2160() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.toString();
		y.isEmpty();
		y.enqueue(-1667734128);
		assertEquals(-1, y.dequeue());
		y.enqueue(-702580059);
		y.dequeue();
    }
    @Test
    public void test2161() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test2162() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.enqueue(-1129816719);
		x.dequeue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(1300348088);
		x.isEmpty();
		x.isFull();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		assertEquals(1300348088, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test2163() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test2164() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(1339730982);
		z.toString();
		z.toString();
		z.isFull();
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(-1392964987);
		z.dequeue();
    }
    @Test
    public void test2165() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.isFull();
		z.toString();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test2166() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(247942043);
		variable.enqueue(-1756557114);
		variable.isFull();
		variable.toString();
		variable.enqueue(985303317);
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test2167() {
		Queue Var = new Queue();
		Var.enqueue(-251787239);
		Var.toString();
		Var.enqueue(691013091);
		Var.enqueue(863551387);
		Var.enqueue(-1080825379);
		Var.isFull();
		assertFalse(Var.isEmpty());
		assertFalse(Var.isEmpty());
		Var.enqueue(632861488);
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test2168() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(1693276855);
		Var.isFull();
		Var.toString();
		Var.isFull();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test2169() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(311817442);
		y.dequeue();
		y.enqueue(1429662628);
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test2170() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
		y.enqueue(-1674900820);
		y.isFull();
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test2171() {
		Queue z = new Queue();
		z.enqueue(-737751923);
		z.isFull();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.toString();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.toString();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test2172() {
		Queue x = new Queue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.enqueue(1304233818);
		assertEquals("[1304233818]", x.toString());
		x.enqueue(-1427162142);
		x.toString();
		x.enqueue(1699156116);
		assertEquals("[1304233818, 1699156116]", x.toString());
		x.isFull();
    }
    @Test
    public void test2173() {
		Queue y = new Queue();
		y.enqueue(1002687031);
    }
    @Test
    public void test2174() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-1248200274);
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(1574967603);
		Var.enqueue(63211523);
		Var.enqueue(2081058193);
		Var.isFull();
    }
    @Test
    public void test2175() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.toString();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test2176() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test2177() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1745879500);
		variable.dequeue();
		variable.enqueue(114075161);
    }
    @Test
    public void test2178() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.isFull();
		z.dequeue();
		z.isEmpty();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test2179() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(165325639);
		variable.enqueue(-1044857719);
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test2180() {
		Queue z = new Queue();
		z.enqueue(-233510921);
		z.enqueue(-681845387);
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test2181() {
		Queue y = new Queue();
		y.enqueue(782761013);
		assertFalse(y.isEmpty());
		y.isFull();
		assertEquals(782761013, y.dequeue());
		y.toString();
		y.isFull();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test2182() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.enqueue(897670617);
		assertFalse(z.isFull());
		assertEquals("[897670617]", z.toString());
		z.toString();
		z.toString();
    }
    @Test
    public void test2183() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test2184() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1378765614);
		variable.enqueue(-594394001);
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test2185() {
		Queue z = new Queue();
		z.enqueue(-922724269);
		z.toString();
		z.enqueue(-1543712437);
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.enqueue(-1891483296);
		z.dequeue();
		z.enqueue(1949143515);
		assertFalse(z.isEmpty());
		z.isEmpty();
		assertFalse(z.isEmpty());
		z.enqueue(1453005900);
    }
    @Test
    public void test2186() {
		Queue y = new Queue();
		y.enqueue(-858697949);
		y.dequeue();
		y.enqueue(-947872304);
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1668926953);
		y.toString();
		y.toString();
		y.enqueue(934775884);
    }
    @Test
    public void test2187() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(-1793442015);
		x.isEmpty();
    }
    @Test
    public void test2188() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
		variable.toString();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(578836510);
    }
    @Test
    public void test2189() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.toString();
		x.dequeue();
		x.enqueue(-1788141347);
    }
    @Test
    public void test2190() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test2191() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.isFull();
		z.enqueue(991937526);
		z.dequeue();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(-2006232784);
		z.toString();
		assertEquals("[]", z.toString());
		z.toString();
		z.isFull();
    }
    @Test
    public void test2192() {
		Queue x = new Queue();
		x.enqueue(1135385366);
    }
    @Test
    public void test2193() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.enqueue(1586030064);
		assertEquals("[1586030064]", Var.toString());
		Var.toString();
		Var.toString();
    }
    @Test
    public void test2194() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
		z.enqueue(654313987);
		z.isFull();
		z.toString();
		z.isFull();
		assertFalse(z.isFull());
		assertEquals(654313987, z.dequeue());
		z.isFull();
    }
    @Test
    public void test2195() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test2196() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(-2051568928);
		x.dequeue();
		x.enqueue(516159903);
    }
    @Test
    public void test2197() {
		Queue variable = new Queue();
		variable.enqueue(397192773);
    }
    @Test
    public void test2198() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test2199() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.toString();
		y.dequeue();
		y.isFull();
		y.toString();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(1601499315);
    }
    @Test
    public void test2200() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-742024496);
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.enqueue(-414989485);
    }
    @Test
    public void test2201() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		assertFalse(z.isFull());
		z.dequeue();
		z.enqueue(-487353699);
		z.isEmpty();
		z.enqueue(344962532);
		z.isFull();
    }
    @Test
    public void test2202() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.isFull();
		z.toString();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test2203() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(2099741285);
    }
    @Test
    public void test2204() {
		Queue y = new Queue();
		y.enqueue(998480444);
		y.toString();
		y.enqueue(-857571744);
		y.enqueue(1552023026);
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.toString();
		y.toString();
    }
    @Test
    public void test2205() {
		Queue Var = new Queue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test2206() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.dequeue();
		y.isFull();
		y.enqueue(1521580262);
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
		y.toString();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test2207() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		z.enqueue(1863447057);
		z.toString();
		z.enqueue(45540767);
		z.dequeue();
		z.toString();
		assertFalse(z.isEmpty());
		z.toString();
		z.enqueue(-1829108849);
    }
    @Test
    public void test2208() {
		Queue x = new Queue();
		x.enqueue(-1605262518);
		assertEquals("[]", x.toString());
		x.enqueue(834836071);
		x.isFull();
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.enqueue(793940936);
		x.enqueue(-1018347584);
		assertFalse(x.isEmpty());
		x.toString();
    }
    @Test
    public void test2209() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		Var.toString();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.enqueue(200554861);
		Var.enqueue(52239404);
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test2210() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.enqueue(-1566408643);
    }
    @Test
    public void test2211() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test2212() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isFull();
    }
    @Test
    public void test2213() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test2214() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test2215() {
		Queue x = new Queue();
		x.enqueue(1654650850);
		x.toString();
    }
    @Test
    public void test2216() {
		Queue x = new Queue();
		x.enqueue(1364131329);
		x.enqueue(-1557488374);
		x.dequeue();
		x.enqueue(1376358154);
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.isFull();
		x.enqueue(1337217589);
    }
    @Test
    public void test2217() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-282071011);
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-1937321674);
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.enqueue(1037100946);
		variable.enqueue(-612375387);
    }
    @Test
    public void test2218() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isFull();
		assertEquals("[]", z.toString());
		z.toString();
		assertTrue(z.isEmpty());
		z.isFull();
		z.toString();
		z.toString();
		z.enqueue(-730585877);
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test2219() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.enqueue(-1406124544);
		y.isFull();
		assertFalse(y.isFull());
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test2220() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test2221() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-364275050);
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(843330202);
		Var.toString();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test2222() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(1030611120);
		assertEquals("[1030611120]", x.toString());
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.isFull();
		x.enqueue(-219970250);
		x.enqueue(-1821101868);
    }
    @Test
    public void test2223() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.enqueue(-1623309963);
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.enqueue(-1590131809);
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test2224() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.dequeue();
		z.toString();
		assertTrue(z.isEmpty());
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test2225() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
		y.toString();
    }
    @Test
    public void test2226() {
		Queue y = new Queue();
		y.enqueue(295774957);
		y.enqueue(1851379201);
		y.enqueue(1595488655);
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test2227() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-746636148);
		assertTrue(variable.isEmpty());
		variable.enqueue(1682066971);
    }
    @Test
    public void test2228() {
		Queue variable = new Queue();
		variable.enqueue(-1778920381);
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(1656994097);
		assertFalse(variable.isEmpty());
		variable.isFull();
		assertEquals("[1656994097]", variable.toString());
		variable.enqueue(-566885075);
		variable.isFull();
		variable.enqueue(-1867344869);
		assertEquals("[1656994097]", variable.toString());
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test2229() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-1688434713);
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test2230() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.dequeue();
		x.enqueue(661109482);
		x.dequeue();
		x.isEmpty();
		x.enqueue(-916044531);
		x.isEmpty();
    }
    @Test
    public void test2231() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test2232() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-1628746606);
		y.dequeue();
		y.toString();
		y.toString();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(1458163381);
    }
    @Test
    public void test2233() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-878401604);
		y.dequeue();
    }
    @Test
    public void test2234() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-1743639165);
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test2235() {
		Queue z = new Queue();
		z.enqueue(2142442876);
		assertFalse(z.isEmpty());
		z.isFull();
		z.enqueue(914823325);
		assertEquals("[2142442876, 914823325]", z.toString());
		assertEquals(2142442876, z.dequeue());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isFull();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.enqueue(-1479582218);
		z.isEmpty();
		z.toString();
		assertEquals("[]", z.toString());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(1242744044);
    }
    @Test
    public void test2236() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test2237() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1017780090);
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test2238() {
		Queue z = new Queue();
		z.dequeue();
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(198707659);
		assertEquals("[198707659]", z.toString());
		z.dequeue();
		z.toString();
		z.enqueue(-789562185);
    }
    @Test
    public void test2239() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-1249049612);
    }
    @Test
    public void test2240() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test2241() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test2242() {
		Queue z = new Queue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.toString();
    }
    @Test
    public void test2243() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(1640819610);
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
		x.enqueue(-562600090);
		x.enqueue(137561626);
    }
    @Test
    public void test2244() {
		Queue variable = new Queue();
		variable.enqueue(1582868413);
    }
    @Test
    public void test2245() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		x.enqueue(362926851);
    }
    @Test
    public void test2246() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test2247() {
		Queue variable = new Queue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-293222124);
		assertEquals("[]", variable.toString());
		variable.enqueue(-1703952995);
		variable.dequeue();
		variable.enqueue(493464369);
    }
    @Test
    public void test2248() {
		Queue x = new Queue();
		x.enqueue(-412073831);
		x.isEmpty();
		x.toString();
		x.enqueue(1983653638);
		x.isEmpty();
    }
    @Test
    public void test2249() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test2250() {
		Queue y = new Queue();
		y.enqueue(777240809);
		assertEquals(777240809, y.dequeue());
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test2251() {
		Queue z = new Queue();
		z.enqueue(82567270);
		assertEquals("[82567270]", z.toString());
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test2252() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test2253() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.toString();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(-205445580);
		x.isFull();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test2254() {
		Queue Var = new Queue();
		Var.enqueue(-411053369);
		Var.enqueue(1041068126);
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test2255() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-756258629);
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(1405642525);
    }
    @Test
    public void test2256() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(1215484100);
		variable.dequeue();
		variable.toString();
		variable.enqueue(423873820);
		variable.enqueue(1677347164);
		variable.enqueue(82310042);
    }
    @Test
    public void test2257() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(725735363);
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test2258() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(1747511508);
		variable.enqueue(460709837);
		variable.dequeue();
    }
    @Test
    public void test2259() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(1135524615);
		assertEquals("[1135524615]", z.toString());
		z.enqueue(-803345388);
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
		z.isFull();
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.dequeue();
    }
    @Test
    public void test2260() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test2261() {
		Queue y = new Queue();
		y.enqueue(-710804996);
		y.dequeue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.enqueue(-14222790);
		y.enqueue(2070595880);
		y.dequeue();
    }
    @Test
    public void test2262() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test2263() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		assertTrue(x.isEmpty());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(-1477811937);
		assertFalse(x.isFull());
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test2264() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test2265() {
		Queue Var = new Queue();
		Var.enqueue(-1198051474);
		Var.toString();
		Var.enqueue(1396163113);
		Var.toString();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test2266() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(1410778346);
		assertEquals("[1410778346]", x.toString());
		assertEquals(1410778346, x.dequeue());
		x.enqueue(-1364928710);
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test2267() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isFull();
		x.enqueue(-1261209656);
		x.enqueue(-1898622159);
		x.isEmpty();
		x.toString();
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(-423822591);
    }
    @Test
    public void test2268() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(-643972652);
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.enqueue(-898218701);
		z.enqueue(-921985353);
		z.dequeue();
		z.toString();
		assertEquals("[]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test2269() {
		Queue variable = new Queue();
		variable.enqueue(-2091051536);
		variable.toString();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test2270() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test2271() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.dequeue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test2272() {
		Queue variable = new Queue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(641886819);
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		variable.enqueue(1491692199);
		variable.toString();
		variable.enqueue(-763973834);
    }
    @Test
    public void test2273() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test2274() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test2275() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.isFull();
		x.toString();
		x.isFull();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test2276() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.enqueue(-1954504596);
		variable.toString();
		variable.isFull();
		variable.enqueue(1028468519);
		variable.enqueue(-397916189);
    }
    @Test
    public void test2277() {
		Queue Var = new Queue();
		Var.enqueue(-1030924371);
		Var.enqueue(134390104);
		assertEquals(134390104, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.enqueue(-1210292130);
		Var.isEmpty();
		Var.toString();
		Var.enqueue(1263882488);
		Var.toString();
    }
    @Test
    public void test2278() {
		Queue Var = new Queue();
		Var.enqueue(-1689116624);
		Var.dequeue();
		Var.enqueue(-2142455211);
		Var.enqueue(-501824203);
		Var.enqueue(878715700);
    }
    @Test
    public void test2279() {
		Queue x = new Queue();
		x.enqueue(1304512653);
		x.isEmpty();
		x.isEmpty();
		assertEquals("[1304512653]", x.toString());
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test2280() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.enqueue(138331336);
		x.enqueue(-1800919086);
		x.enqueue(1360885922);
		assertEquals("[138331336, 1360885922]", x.toString());
		x.toString();
		assertEquals("[138331336, 1360885922]", x.toString());
		x.isEmpty();
		x.enqueue(-1286422180);
    }
    @Test
    public void test2281() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test2282() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test2283() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-1481401558);
    }
    @Test
    public void test2284() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test2285() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test2286() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test2287() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.enqueue(546661289);
		assertEquals(546661289, x.dequeue());
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-266962711);
    }
    @Test
    public void test2288() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(-1036486569);
		Var.enqueue(1336780725);
		assertFalse(Var.isEmpty());
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test2289() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test2290() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-344849165);
		z.enqueue(-1545815127);
		z.isFull();
		z.isFull();
    }
    @Test
    public void test2291() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-1318046407);
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test2292() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.enqueue(525023690);
		variable.dequeue();
    }
    @Test
    public void test2293() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.enqueue(1894285069);
		x.dequeue();
    }
    @Test
    public void test2294() {
		Queue x = new Queue();
		x.toString();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.enqueue(-1838949905);
		x.dequeue();
		assertTrue(x.isEmpty());
		x.enqueue(-1033707820);
		x.isFull();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test2295() {
		Queue z = new Queue();
		z.enqueue(-1704327226);
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test2296() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.enqueue(-1501388481);
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test2297() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.toString();
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.toString();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.toString();
    }
    @Test
    public void test2298() {
		Queue variable = new Queue();
		variable.enqueue(101925510);
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test2299() {
		Queue x = new Queue();
		x.dequeue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test2300() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.isFull();
		assertFalse(y.isFull());
		y.enqueue(1996589015);
		assertEquals(1996589015, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test2301() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test2302() {
		Queue variable = new Queue();
		variable.enqueue(-1719563709);
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test2303() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test2304() {
		Queue x = new Queue();
		x.enqueue(-1824428537);
		x.isEmpty();
		x.enqueue(1823036036);
		x.enqueue(1547620043);
		x.isEmpty();
		assertFalse(x.isEmpty());
		x.isEmpty();
		assertFalse(x.isEmpty());
		x.toString();
		x.isFull();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test2305() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test2306() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		z.isFull();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		z.enqueue(1966599258);
		z.dequeue();
		z.toString();
		z.enqueue(-2083990137);
    }
    @Test
    public void test2307() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(1852774217);
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(64541190);
		assertFalse(y.isEmpty());
		y.dequeue();
		y.enqueue(875006195);
		y.toString();
		assertEquals(875006195, y.dequeue());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test2308() {
		Queue Var = new Queue();
		Var.enqueue(198792910);
		Var.isEmpty();
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.enqueue(-2079510862);
    }
    @Test
    public void test2309() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test2310() {
		Queue variable = new Queue();
		variable.enqueue(-167908095);
		variable.dequeue();
    }
    @Test
    public void test2311() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test2312() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test2313() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-644154787);
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test2314() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		x.isFull();
    }
    @Test
    public void test2315() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-1982134829);
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(306369926);
		Var.isEmpty();
		assertEquals("[306369926]", Var.toString());
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test2316() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(-518453748);
		assertFalse(z.isFull());
		z.isEmpty();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test2317() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(960062596);
		variable.enqueue(-67178287);
    }
    @Test
    public void test2318() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.enqueue(1212165241);
		assertEquals("[1212165241]", Var.toString());
		Var.toString();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test2319() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test2320() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.toString();
		z.isFull();
		z.toString();
		z.enqueue(733097633);
		z.enqueue(412835154);
		assertEquals("[733097633, 412835154]", z.toString());
		z.toString();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test2321() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test2322() {
		Queue x = new Queue();
		x.enqueue(1014719777);
    }
    @Test
    public void test2323() {
		Queue variable = new Queue();
		variable.enqueue(-1738584195);
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test2324() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(2005335064);
		y.isFull();
		y.toString();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test2325() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(789655696);
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.enqueue(921438763);
		Var.enqueue(856273706);
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(-1397911631);
    }
    @Test
    public void test2326() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-913768083);
		y.isFull();
		y.toString();
		y.enqueue(-451935218);
		y.enqueue(-1005409517);
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.toString();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.enqueue(1675516406);
    }
    @Test
    public void test2327() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(-1131468962);
		Var.enqueue(475727668);
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.toString();
		assertEquals("[475727668]", Var.toString());
		Var.toString();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test2328() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test2329() {
		Queue variable = new Queue();
		variable.enqueue(-2032677911);
		variable.enqueue(1220089115);
		variable.isFull();
		variable.isFull();
		assertEquals(1220089115, variable.dequeue());
		variable.toString();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.enqueue(-805524344);
    }
    @Test
    public void test2330() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.toString();
		x.enqueue(1177028603);
		x.enqueue(-820868678);
		x.isFull();
    }
    @Test
    public void test2331() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(2066153604);
		z.toString();
		z.isFull();
		z.dequeue();
		z.isFull();
		z.enqueue(1520527345);
    }
    @Test
    public void test2332() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test2333() {
		Queue x = new Queue();
		x.toString();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.dequeue();
		assertFalse(x.isFull());
		x.isFull();
    }
    @Test
    public void test2334() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(-689456640);
    }
    @Test
    public void test2335() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.toString();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test2336() {
		Queue x = new Queue();
		x.enqueue(-675543424);
		x.isFull();
    }
    @Test
    public void test2337() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.enqueue(-579517641);
		x.isFull();
		x.dequeue();
		x.enqueue(-869890527);
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.dequeue();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test2338() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.enqueue(112433959);
		x.isEmpty();
		x.enqueue(792356020);
		x.enqueue(-794146786);
		x.isFull();
		x.isEmpty();
		x.dequeue();
		x.enqueue(1824792560);
		x.toString();
    }
    @Test
    public void test2339() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test2340() {
		Queue z = new Queue();
		z.enqueue(1262500582);
		assertFalse(z.isEmpty());
		z.toString();
    }
    @Test
    public void test2341() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(-109327032);
		Var.enqueue(1620889838);
		assertFalse(Var.isFull());
		Var.enqueue(-592959249);
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(61287810);
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test2342() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-171895037);
		z.isFull();
		z.toString();
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(1962605720);
		z.isFull();
		assertEquals("[1962605720]", z.toString());
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test2343() {
		Queue z = new Queue();
		z.enqueue(1450613471);
		z.isFull();
		assertFalse(z.isEmpty());
		z.enqueue(1169383227);
		assertFalse(z.isFull());
		z.enqueue(-103962317);
		z.enqueue(-1324369439);
		assertEquals("[1450613471, 1169383227]", z.toString());
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test2344() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test2345() {
		Queue y = new Queue();
		y.enqueue(1984774743);
    }
    @Test
    public void test2346() {
		Queue Var = new Queue();
		Var.enqueue(-1347440993);
		Var.enqueue(-1307743549);
		Var.enqueue(-1187529042);
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test2347() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(1905464981);
		assertFalse(variable.isFull());
		assertEquals("[1905464981]", variable.toString());
		variable.isEmpty();
		variable.enqueue(-849281487);
		assertFalse(variable.isFull());
		variable.isFull();
		assertFalse(variable.isFull());
		assertEquals("[1905464981]", variable.toString());
		variable.isFull();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test2348() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.enqueue(262022631);
		Var.enqueue(1548339657);
		Var.dequeue();
		Var.enqueue(883243514);
		Var.enqueue(-1875786638);
    }
    @Test
    public void test2349() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.toString();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test2350() {
		Queue y = new Queue();
		y.enqueue(-47436277);
		y.toString();
		y.dequeue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.enqueue(1275303524);
		y.enqueue(997086703);
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test2351() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test2352() {
		Queue variable = new Queue();
		variable.enqueue(-725261948);
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(706877352);
		assertEquals("[706877352]", variable.toString());
		assertEquals(706877352, variable.dequeue());
		variable.isFull();
		variable.enqueue(-470364476);
		variable.isEmpty();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test2353() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.isFull();
		Var.toString();
		Var.enqueue(1043216824);
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test2354() {
		Queue z = new Queue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.enqueue(-1492598757);
		z.dequeue();
		z.isFull();
		z.toString();
		z.toString();
    }
    @Test
    public void test2355() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(-1584626575);
		assertEquals(-1, x.dequeue());
		x.enqueue(-1504247721);
    }
    @Test
    public void test2356() {
		Queue variable = new Queue();
		variable.enqueue(-790333661);
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(1793480390);
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test2357() {
		Queue variable = new Queue();
		variable.enqueue(-704808463);
		variable.enqueue(2083493975);
		variable.toString();
    }
    @Test
    public void test2358() {
		Queue y = new Queue();
		y.enqueue(-1908815691);
		assertTrue(y.isEmpty());
		y.toString();
		assertEquals(-1, y.dequeue());
		y.enqueue(645753194);
		assertFalse(y.isFull());
		assertEquals(645753194, y.dequeue());
		assertEquals("[]", y.toString());
		y.isFull();
		y.isFull();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(250396469);
		y.isFull();
		assertFalse(y.isEmpty());
		y.toString();
		y.dequeue();
    }
    @Test
    public void test2359() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-991952842);
    }
    @Test
    public void test2360() {
		Queue x = new Queue();
		x.enqueue(-958313281);
		assertEquals("[]", x.toString());
		x.enqueue(1499083473);
		x.dequeue();
    }
    @Test
    public void test2361() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.enqueue(545641324);
    }
    @Test
    public void test2362() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(356166946);
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test2363() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.isFull();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test2364() {
		Queue x = new Queue();
		x.enqueue(1334872897);
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.toString();
    }
    @Test
    public void test2365() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-55927700);
		z.isEmpty();
		z.enqueue(-479843462);
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test2366() {
		Queue y = new Queue();
		y.enqueue(-1994329782);
		assertFalse(y.isFull());
		y.isFull();
		y.toString();
		y.toString();
		y.isEmpty();
		y.toString();
		y.isEmpty();
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test2367() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		variable.isFull();
		variable.toString();
		variable.enqueue(179260355);
		variable.toString();
    }
    @Test
    public void test2368() {
		Queue y = new Queue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.dequeue();
		y.isFull();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.isFull();
		assertEquals("[]", y.toString());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-808548028);
		y.dequeue();
    }
    @Test
    public void test2369() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test2370() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.enqueue(427311135);
		assertFalse(z.isFull());
		z.isFull();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(1873324022);
		z.isFull();
		z.enqueue(1889366849);
		z.enqueue(-196729786);
    }
    @Test
    public void test2371() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(-1127481294);
		Var.enqueue(1296341819);
		Var.enqueue(-136590330);
		Var.isEmpty();
		Var.enqueue(565422915);
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test2372() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.toString();
		Var.enqueue(685876613);
    }
    @Test
    public void test2373() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(1099597811);
		variable.dequeue();
		variable.enqueue(2116816754);
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test2374() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(482251620);
		y.enqueue(1868984879);
		y.toString();
		y.enqueue(1168805165);
    }
    @Test
    public void test2375() {
		Queue y = new Queue();
		y.enqueue(-1039174785);
		y.toString();
		assertTrue(y.isEmpty());
		y.toString();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test2376() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test2377() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.enqueue(-1604861384);
		assertTrue(variable.isEmpty());
		variable.enqueue(848741683);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(-520850608);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.toString();
		assertFalse(variable.isFull());
		assertFalse(variable.isEmpty());
		variable.enqueue(287426015);
		assertEquals("[848741683, 287426015]", variable.toString());
		assertEquals("[848741683, 287426015]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test2378() {
		Queue x = new Queue();
		x.enqueue(-188744413);
		x.toString();
		x.isEmpty();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.isFull();
		x.toString();
		x.enqueue(1983433972);
		x.enqueue(518063611);
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test2379() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-990253863);
		x.enqueue(410364918);
    }
    @Test
    public void test2380() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(149173154);
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test2381() {
		Queue y = new Queue();
		y.enqueue(-1564134351);
		y.toString();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.enqueue(-1900426478);
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test2382() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(-914873124);
		z.enqueue(-2053735026);
		z.isFull();
		z.toString();
    }
    @Test
    public void test2383() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.toString();
		Var.enqueue(-888839047);
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test2384() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		z.isFull();
		z.isFull();
		z.isFull();
		z.isEmpty();
		z.dequeue();
		z.isFull();
		z.dequeue();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test2385() {
		Queue y = new Queue();
		y.enqueue(1601392115);
		y.toString();
		y.enqueue(870493594);
		assertEquals("[1601392115, 870493594]", y.toString());
		y.enqueue(-2128031200);
		assertEquals("[1601392115, 870493594]", y.toString());
		y.toString();
		y.isFull();
		y.enqueue(2010167112);
    }
    @Test
    public void test2386() {
		Queue y = new Queue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.enqueue(1018730851);
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test2387() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-442441591);
		z.enqueue(1386726447);
		z.isEmpty();
    }
    @Test
    public void test2388() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(111905954);
    }
    @Test
    public void test2389() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test2390() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isFull();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isEmpty();
		z.toString();
		z.enqueue(-1710860312);
		z.isFull();
		z.enqueue(1335587976);
		z.dequeue();
		z.enqueue(-1923044028);
    }
    @Test
    public void test2391() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		assertEquals("[]", y.toString());
		y.dequeue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.dequeue();
		y.isFull();
		y.enqueue(694146437);
		y.enqueue(-916326147);
    }
    @Test
    public void test2392() {
		Queue Var = new Queue();
		Var.enqueue(2057616038);
		Var.enqueue(-130772638);
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.enqueue(794031712);
		assertFalse(Var.isFull());
		Var.enqueue(-1243853346);
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.enqueue(911925170);
		Var.dequeue();
		Var.toString();
		Var.enqueue(1606800822);
    }
    @Test
    public void test2393() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1755350683);
		Var.isEmpty();
    }
    @Test
    public void test2394() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(-1497690283);
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test2395() {
		Queue x = new Queue();
		x.enqueue(-135582365);
		assertEquals(-1, x.dequeue());
		x.isFull();
    }
    @Test
    public void test2396() {
		Queue z = new Queue();
		z.enqueue(-347137758);
		assertTrue(z.isEmpty());
		z.toString();
		z.toString();
    }
    @Test
    public void test2397() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(102441781);
		x.enqueue(-111205263);
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.enqueue(-2029486426);
		assertFalse(x.isFull());
		x.enqueue(-1537906705);
		x.enqueue(639430040);
		x.isFull();
    }
    @Test
    public void test2398() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-463540063);
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test2399() {
		Queue x = new Queue();
		x.enqueue(-384954457);
		x.enqueue(-871580690);
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(234294372);
		x.toString();
		x.enqueue(-1203780365);
		x.isEmpty();
    }
    @Test
    public void test2400() {
		Queue z = new Queue();
		z.enqueue(740723628);
		z.isEmpty();
		z.enqueue(1893843921);
		assertFalse(z.isEmpty());
		z.isEmpty();
		z.enqueue(624201956);
		z.dequeue();
		z.toString();
		z.toString();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test2401() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.toString();
		Var.toString();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test2402() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.isFull();
		y.toString();
    }
    @Test
    public void test2403() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test2404() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.enqueue(1009729009);
		x.toString();
    }
    @Test
    public void test2405() {
		Queue variable = new Queue();
		variable.enqueue(-650921223);
		variable.enqueue(-1588927769);
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.toString();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.enqueue(15116220);
		variable.isEmpty();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test2406() {
		Queue x = new Queue();
		x.enqueue(-284929362);
		x.enqueue(-1126664408);
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.enqueue(2084863985);
		x.dequeue();
		x.dequeue();
		x.enqueue(-331268214);
    }
    @Test
    public void test2407() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(1099017895);
		assertEquals("[1099017895]", variable.toString());
		variable.toString();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-434983544);
		assertTrue(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test2408() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(-1964871238);
		z.dequeue();
		z.enqueue(-1181146715);
		z.toString();
		z.enqueue(707232762);
		z.enqueue(-946307048);
		z.isFull();
		z.enqueue(2061796524);
		assertEquals("[707232762, 2061796524]", z.toString());
		z.toString();
    }
    @Test
    public void test2409() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(338320244);
		assertFalse(z.isFull());
		z.enqueue(1846402446);
		z.toString();
		assertEquals(338320244, z.dequeue());
		z.dequeue();
		z.isFull();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test2410() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test2411() {
		Queue variable = new Queue();
		variable.enqueue(-1449225195);
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-2018402283);
    }
    @Test
    public void test2412() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.toString();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.isEmpty();
		z.toString();
		z.isFull();
		assertTrue(z.isEmpty());
		z.enqueue(149630229);
    }
    @Test
    public void test2413() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.dequeue();
		z.dequeue();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.dequeue();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test2414() {
		Queue x = new Queue();
		x.enqueue(1750806269);
		x.enqueue(-1032456324);
		assertEquals("[1750806269]", x.toString());
		x.enqueue(1597501256);
    }
    @Test
    public void test2415() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test2416() {
		Queue z = new Queue();
		z.enqueue(1478040035);
		z.isEmpty();
    }
    @Test
    public void test2417() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.enqueue(197145);
		assertEquals("[197145]", y.toString());
		y.enqueue(-1742658541);
    }
    @Test
    public void test2418() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test2419() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1375741209);
		variable.toString();
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test2420() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
    }
    @Test
    public void test2421() {
		Queue y = new Queue();
		y.enqueue(-2022338634);
    }
    @Test
    public void test2422() {
		Queue variable = new Queue();
		variable.enqueue(-1766331226);
		variable.dequeue();
		variable.enqueue(913979460);
		variable.enqueue(1263400214);
		variable.enqueue(-328046205);
		variable.enqueue(-1813193617);
		assertEquals("[913979460, 1263400214]", variable.toString());
		variable.dequeue();
		variable.enqueue(2127696380);
    }
    @Test
    public void test2423() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(569288584);
		z.enqueue(2097046406);
		z.isFull();
		assertEquals("[569288584, 2097046406]", z.toString());
		z.isFull();
		assertEquals(569288584, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test2424() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-312646539);
		variable.enqueue(533015660);
		variable.enqueue(252790893);
		variable.isEmpty();
		variable.dequeue();
		assertEquals("[252790893]", variable.toString());
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-762909608);
		variable.isEmpty();
    }
    @Test
    public void test2425() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.enqueue(1767713962);
		x.dequeue();
		x.toString();
		assertEquals("[]", x.toString());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.enqueue(-1371010260);
		x.isEmpty();
    }
    @Test
    public void test2426() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test2427() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.enqueue(845567867);
		assertFalse(variable.isFull());
		assertFalse(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test2428() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test2429() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test2430() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.toString();
    }
    @Test
    public void test2431() {
		Queue Var = new Queue();
		Var.enqueue(-380518711);
		Var.enqueue(743882039);
		Var.enqueue(-887879503);
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-1450435937);
    }
    @Test
    public void test2432() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test2433() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(1187021264);
		y.isFull();
		assertFalse(y.isEmpty());
		assertEquals(1187021264, y.dequeue());
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test2434() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.enqueue(240035900);
    }
    @Test
    public void test2435() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.enqueue(660092367);
		x.isFull();
		x.dequeue();
		x.toString();
		x.enqueue(430045816);
    }
    @Test
    public void test2436() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test2437() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(-1291149862);
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test2438() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.toString();
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(-1652934503);
		x.isEmpty();
		x.toString();
		x.toString();
    }
    @Test
    public void test2439() {
		Queue variable = new Queue();
		variable.enqueue(-723629593);
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(-1490019972);
    }
    @Test
    public void test2440() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test2441() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1781506943);
		variable.isFull();
		variable.enqueue(-1801988257);
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test2442() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(2079650131);
		assertFalse(variable.isFull());
		assertEquals(2079650131, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test2443() {
		Queue variable = new Queue();
		variable.enqueue(701499385);
		variable.enqueue(1636450964);
		variable.isEmpty();
		variable.dequeue();
		assertFalse(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
		variable.toString();
		assertFalse(variable.isEmpty());
		assertFalse(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test2444() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.enqueue(-387778044);
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.enqueue(765442260);
    }
    @Test
    public void test2445() {
		Queue Var = new Queue();
		Var.enqueue(1443047493);
		Var.dequeue();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test2446() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test2447() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.toString();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(306880105);
		x.toString();
		x.enqueue(-2037865860);
		x.enqueue(418303362);
		x.dequeue();
    }
    @Test
    public void test2448() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(1841260574);
    }
    @Test
    public void test2449() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-1795050754);
		Var.enqueue(1962856057);
		assertEquals(1962856057, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test2450() {
		Queue z = new Queue();
		z.enqueue(-1619630960);
		z.enqueue(-1192035371);
		z.isEmpty();
		z.enqueue(1137950104);
		assertEquals(1137950104, z.dequeue());
		z.enqueue(-412446368);
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test2451() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(242293107);
    }
    @Test
    public void test2452() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.enqueue(-872773708);
		x.isEmpty();
		x.toString();
		x.isFull();
    }
    @Test
    public void test2453() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertFalse(x.isFull());
		x.isFull();
		assertEquals("[]", x.toString());
		x.isEmpty();
    }
    @Test
    public void test2454() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-908204149);
		assertFalse(z.isFull());
		z.dequeue();
		z.enqueue(1458384520);
		z.isEmpty();
    }
    @Test
    public void test2455() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.enqueue(1052956953);
		x.isFull();
		x.isFull();
		assertEquals("[1052956953]", x.toString());
		x.isEmpty();
    }
    @Test
    public void test2456() {
		Queue Var = new Queue();
		Var.enqueue(2076259973);
		assertEquals(2076259973, Var.dequeue());
		Var.toString();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test2457() {
		Queue y = new Queue();
		y.enqueue(348403760);
		y.toString();
		assertEquals(348403760, y.dequeue());
		assertTrue(y.isEmpty());
		y.dequeue();
		y.dequeue();
		y.enqueue(-1962328138);
		y.enqueue(2080603359);
    }
    @Test
    public void test2458() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test2459() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test2460() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(-779701713);
    }
    @Test
    public void test2461() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.enqueue(-44898450);
		x.enqueue(1598163156);
		assertEquals(1598163156, x.dequeue());
		x.enqueue(1658187548);
		assertEquals(1658187548, x.dequeue());
		x.dequeue();
		x.enqueue(878288434);
    }
    @Test
    public void test2462() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.toString();
		assertEquals("[]", x.toString());
		x.toString();
    }
    @Test
    public void test2463() {
		Queue z = new Queue();
		z.isFull();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.enqueue(76786033);
		z.isEmpty();
    }
    @Test
    public void test2464() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		variable.enqueue(1730957487);
		variable.isEmpty();
		variable.toString();
		variable.enqueue(740169282);
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test2465() {
		Queue x = new Queue();
		x.enqueue(-1548686249);
		x.isEmpty();
		x.dequeue();
		x.enqueue(-52797258);
    }
    @Test
    public void test2466() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(-1819210601);
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test2467() {
		Queue variable = new Queue();
		variable.enqueue(1775908582);
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(-1641344106);
		variable.dequeue();
    }
    @Test
    public void test2468() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.isFull();
		z.isFull();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.isFull();
		z.toString();
		z.isFull();
		z.toString();
		z.isFull();
		z.toString();
    }
    @Test
    public void test2469() {
		Queue z = new Queue();
		z.enqueue(-609504297);
		z.dequeue();
		z.isFull();
		z.toString();
		assertFalse(z.isFull());
		z.toString();
		z.enqueue(-1311587997);
		z.isFull();
    }
    @Test
    public void test2470() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-194654953);
    }
    @Test
    public void test2471() {
		Queue z = new Queue();
		z.enqueue(1109078086);
		z.toString();
    }
    @Test
    public void test2472() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test2473() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test2474() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.dequeue();
		x.toString();
		x.enqueue(491023495);
		x.isFull();
    }
    @Test
    public void test2475() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.enqueue(-629992323);
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(2111787053);
		x.enqueue(282243387);
		x.isFull();
    }
    @Test
    public void test2476() {
		Queue Var = new Queue();
		Var.enqueue(-422153160);
		Var.enqueue(-804539085);
		Var.dequeue();
		Var.dequeue();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.enqueue(-564817858);
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test2477() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test2478() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.toString();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test2479() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test2480() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test2481() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(2047352325);
    }
    @Test
    public void test2482() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(-232389419);
		y.dequeue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test2483() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.toString();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test2484() {
		Queue x = new Queue();
		x.enqueue(1155728393);
		x.toString();
		x.enqueue(394911410);
		x.dequeue();
		x.enqueue(-578808401);
		x.enqueue(1052701528);
    }
    @Test
    public void test2485() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-195870770);
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test2486() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.enqueue(-59794377);
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test2487() {
		Queue variable = new Queue();
		variable.enqueue(942126107);
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		variable.enqueue(696426592);
		assertFalse(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test2488() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1271896642);
		y.enqueue(-1774113706);
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.toString();
		y.isFull();
		y.isEmpty();
		y.enqueue(1988197240);
    }
    @Test
    public void test2489() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test2490() {
		Queue variable = new Queue();
		variable.enqueue(-193345865);
		variable.enqueue(-672674072);
		variable.dequeue();
		variable.enqueue(922582863);
		variable.dequeue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		assertFalse(variable.isFull());
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test2491() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-708026978);
		z.isEmpty();
		z.enqueue(-136124356);
		z.isEmpty();
		assertFalse(z.isFull());
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test2492() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		variable.enqueue(835996920);
		assertFalse(variable.isFull());
		variable.enqueue(-1859972554);
    }
    @Test
    public void test2493() {
		Queue variable = new Queue();
		variable.enqueue(-76531270);
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test2494() {
		Queue y = new Queue();
		y.enqueue(-490959214);
		y.isEmpty();
		y.toString();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test2495() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.toString();
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test2496() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(1757151164);
		x.isFull();
    }
    @Test
    public void test2497() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.dequeue();
		x.toString();
		x.toString();
		x.enqueue(1206996082);
		x.enqueue(529889773);
		x.toString();
    }
    @Test
    public void test2498() {
		Queue z = new Queue();
		z.enqueue(-1840200044);
		assertTrue(z.isEmpty());
		z.enqueue(2047138603);
		assertEquals("[2047138603]", z.toString());
		z.enqueue(-502625573);
		z.enqueue(-421926361);
    }
    @Test
    public void test2499() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(-1496460681);
		assertEquals("[]", variable.toString());
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.enqueue(-636983950);
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1419640025);
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test2500() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.toString();
		y.enqueue(-37014857);
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test2501() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(867912694);
		y.isEmpty();
		assertEquals("[867912694]", y.toString());
		y.enqueue(293127924);
		y.dequeue();
		assertFalse(y.isEmpty());
		y.dequeue();
		y.dequeue();
		y.enqueue(-435114022);
    }
    @Test
    public void test2502() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-1840067593);
		y.isFull();
		y.isFull();
		y.enqueue(160444590);
    }
    @Test
    public void test2503() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(268623530);
		assertEquals("[268623530]", variable.toString());
		variable.toString();
		variable.enqueue(627219799);
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(1545782539);
    }
    @Test
    public void test2504() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(1349609899);
		x.toString();
		assertEquals("[1349609899]", x.toString());
		x.isFull();
		x.enqueue(-1494304640);
		x.isFull();
    }
    @Test
    public void test2505() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.enqueue(84334725);
    }
    @Test
    public void test2506() {
		Queue Var = new Queue();
		Var.enqueue(1321782404);
		Var.enqueue(1232449109);
		Var.isEmpty();
		Var.enqueue(-958477731);
		Var.enqueue(-243233940);
		Var.isEmpty();
		Var.enqueue(-382156773);
		Var.toString();
    }
    @Test
    public void test2507() {
		Queue y = new Queue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.toString();
		y.toString();
		y.enqueue(-21590527);
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isFull();
		y.toString();
		assertEquals("[]", y.toString());
		y.isFull();
		y.toString();
		y.toString();
    }
    @Test
    public void test2508() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.enqueue(1842721945);
		assertEquals("[1842721945]", y.toString());
		y.enqueue(1423032964);
		assertEquals("[1842721945, 1423032964]", y.toString());
		y.enqueue(2067658050);
    }
    @Test
    public void test2509() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.enqueue(1635740926);
    }
    @Test
    public void test2510() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		z.isFull();
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test2511() {
		Queue y = new Queue();
		y.enqueue(-1371336086);
		y.isFull();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.enqueue(-896985557);
    }
    @Test
    public void test2512() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.dequeue();
		y.isFull();
		y.enqueue(-76718426);
		y.isEmpty();
    }
    @Test
    public void test2513() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(-519004379);
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isFull();
		Var.toString();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test2514() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.enqueue(1359362978);
		Var.toString();
		Var.enqueue(-1034136266);
    }
    @Test
    public void test2515() {
		Queue Var = new Queue();
		Var.enqueue(2065699616);
		Var.dequeue();
    }
    @Test
    public void test2516() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test2517() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test2518() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test2519() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.enqueue(1225690241);
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test2520() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.enqueue(-1248918032);
		x.isFull();
		x.dequeue();
		x.enqueue(-753248347);
		x.enqueue(1849151598);
		x.enqueue(-440566879);
		x.isFull();
    }
    @Test
    public void test2521() {
		Queue z = new Queue();
		z.enqueue(-1090731931);
		z.toString();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(1739073739);
    }
    @Test
    public void test2522() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(256260453);
		y.enqueue(-196457730);
		y.isEmpty();
    }
    @Test
    public void test2523() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(597149918);
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		assertEquals(597149918, x.dequeue());
		x.dequeue();
		assertFalse(x.isFull());
		x.isFull();
    }
    @Test
    public void test2524() {
		Queue Var = new Queue();
		Var.enqueue(-1119339540);
		Var.enqueue(143040812);
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(997715692);
    }
    @Test
    public void test2525() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test2526() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-1214745197);
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.enqueue(-562113493);
		Var.toString();
		Var.isFull();
		Var.enqueue(-1591884006);
    }
    @Test
    public void test2527() {
		Queue y = new Queue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.enqueue(-932588882);
    }
    @Test
    public void test2528() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-1963036908);
    }
    @Test
    public void test2529() {
		Queue y = new Queue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(548323997);
    }
    @Test
    public void test2530() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test2531() {
		Queue z = new Queue();
		z.enqueue(489599213);
		z.toString();
		z.isEmpty();
		z.dequeue();
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(117584412);
		z.isFull();
		z.toString();
		assertFalse(z.isFull());
		z.toString();
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test2532() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.isFull();
		x.toString();
		x.dequeue();
		x.enqueue(-1540665415);
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.enqueue(-1849631245);
		x.toString();
		assertEquals("[]", x.toString());
		x.dequeue();
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test2533() {
		Queue variable = new Queue();
		variable.enqueue(328549341);
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test2534() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1514625436);
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-995937260);
		Var.isFull();
    }
    @Test
    public void test2535() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.enqueue(-446130531);
		y.enqueue(-1559793022);
		y.enqueue(-592134884);
    }
    @Test
    public void test2536() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-436302498);
		variable.toString();
    }
    @Test
    public void test2537() {
		Queue variable = new Queue();
		variable.enqueue(-51834077);
		variable.dequeue();
    }
    @Test
    public void test2538() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test2539() {
		Queue y = new Queue();
		y.enqueue(-1504849551);
		assertFalse(y.isFull());
		y.toString();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test2540() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test2541() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test2542() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(120256071);
		x.enqueue(1681723886);
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(-522736693);
		assertFalse(x.isFull());
		x.isEmpty();
		x.dequeue();
		x.enqueue(-244184902);
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test2543() {
		Queue y = new Queue();
		y.enqueue(-219524767);
		y.enqueue(1601076759);
		y.toString();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test2544() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.enqueue(-1060903965);
		x.isEmpty();
		x.isFull();
		x.enqueue(1020355690);
    }
    @Test
    public void test2545() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test2546() {
		Queue y = new Queue();
		y.enqueue(-712505353);
		y.toString();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.enqueue(291957649);
		y.dequeue();
		y.toString();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test2547() {
		Queue y = new Queue();
		y.enqueue(740191228);
		assertEquals("[740191228]", y.toString());
		assertEquals(740191228, y.dequeue());
		y.enqueue(-2112670476);
		y.enqueue(1681381876);
		assertEquals(1681381876, y.dequeue());
		y.enqueue(-2089880479);
		assertEquals(-1, y.dequeue());
		y.enqueue(1217928487);
		y.toString();
    }
    @Test
    public void test2548() {
		Queue x = new Queue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.enqueue(-1435951575);
    }
    @Test
    public void test2549() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
    }
    @Test
    public void test2550() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test2551() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(-1841121973);
		variable.enqueue(1910123103);
    }
    @Test
    public void test2552() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(759941822);
    }
    @Test
    public void test2553() {
		Queue y = new Queue();
		y.enqueue(1809967555);
		y.enqueue(-1980372020);
		y.toString();
		y.isFull();
		y.enqueue(-1323238760);
		y.toString();
		y.enqueue(-1359548923);
		y.isEmpty();
		y.isFull();
		assertEquals(1809967555, y.dequeue());
		y.isFull();
    }
    @Test
    public void test2554() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(1226379207);
		x.dequeue();
    }
    @Test
    public void test2555() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.isFull();
		variable.enqueue(1172923690);
		variable.toString();
    }
    @Test
    public void test2556() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(84639401);
		z.enqueue(-2034143406);
		z.enqueue(1964540591);
		assertEquals("[84639401, 1964540591]", z.toString());
		z.enqueue(-356509829);
		z.enqueue(-782779287);
		z.enqueue(1080545263);
		assertEquals("[84639401, 1964540591, 1080545263]", z.toString());
		z.isEmpty();
		z.enqueue(-826745528);
		z.isEmpty();
    }
    @Test
    public void test2557() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.dequeue();
		z.dequeue();
		z.isFull();
		z.isFull();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test2558() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test2559() {
		Queue y = new Queue();
		y.enqueue(-1217071098);
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.enqueue(1628888367);
		y.dequeue();
		y.toString();
		y.enqueue(-1617426595);
		assertEquals(-1, y.dequeue());
		y.toString();
    }
    @Test
    public void test2560() {
		Queue y = new Queue();
		y.enqueue(1356210660);
		y.isEmpty();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test2561() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(458473277);
		assertEquals("[458473277]", variable.toString());
		variable.isFull();
		variable.toString();
		assertFalse(variable.isFull());
		variable.toString();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test2562() {
		Queue x = new Queue();
		x.enqueue(1130344897);
		x.isFull();
    }
    @Test
    public void test2563() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test2564() {
		Queue z = new Queue();
		z.enqueue(-1259664651);
		z.isFull();
		z.enqueue(1812035574);
    }
    @Test
    public void test2565() {
		Queue z = new Queue();
		z.toString();
		assertFalse(z.isFull());
		z.isFull();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.toString();
    }
    @Test
    public void test2566() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test2567() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-2060104851);
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isEmpty();
		y.enqueue(-883263307);
		y.toString();
		y.isFull();
    }
    @Test
    public void test2568() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.isFull();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.enqueue(1601801399);
		assertFalse(x.isEmpty());
		x.enqueue(-789561187);
		assertFalse(x.isFull());
		x.enqueue(1345234507);
    }
    @Test
    public void test2569() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(-1976957862);
		y.isFull();
    }
    @Test
    public void test2570() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.enqueue(-159644194);
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test2571() {
		Queue x = new Queue();
		x.enqueue(-300714499);
		x.enqueue(1568473809);
    }
    @Test
    public void test2572() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test2573() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.toString();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.enqueue(1873865672);
		x.toString();
		x.dequeue();
    }
    @Test
    public void test2574() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		variable.enqueue(1515642413);
    }
    @Test
    public void test2575() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test2576() {
		Queue x = new Queue();
		x.enqueue(1562570415);
		x.isFull();
		x.toString();
		assertEquals("[1562570415]", x.toString());
		x.enqueue(1326128998);
		x.isEmpty();
		assertFalse(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test2577() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.enqueue(2138888469);
		y.isEmpty();
		assertEquals("[2138888469]", y.toString());
		y.enqueue(-1531213012);
		assertEquals("[2138888469]", y.toString());
		y.toString();
		y.isEmpty();
		assertEquals(2138888469, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test2578() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(545828961);
		variable.enqueue(-1133548832);
    }
    @Test
    public void test2579() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.toString();
    }
    @Test
    public void test2580() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		assertEquals("[]", z.toString());
		z.enqueue(1034677314);
		assertFalse(z.isEmpty());
		assertEquals(1034677314, z.dequeue());
		assertEquals("[]", z.toString());
		z.enqueue(-599024848);
		z.enqueue(1423563366);
		z.isFull();
		z.enqueue(-1756308899);
		assertFalse(z.isEmpty());
		z.enqueue(-1581163862);
		z.isEmpty();
    }
    @Test
    public void test2581() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.toString();
		z.isEmpty();
		z.toString();
		z.enqueue(1711482331);
		z.isEmpty();
    }
    @Test
    public void test2582() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(911212102);
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test2583() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.toString();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test2584() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.enqueue(1917063545);
		z.enqueue(259431183);
    }
    @Test
    public void test2585() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(-456944674);
		x.isFull();
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(-1226310775);
    }
    @Test
    public void test2586() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(-1865776891);
		x.enqueue(-1787022120);
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.enqueue(-1967443903);
    }
    @Test
    public void test2587() {
		Queue z = new Queue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.isEmpty();
		z.enqueue(-26897666);
		assertTrue(z.isEmpty());
		z.isFull();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test2588() {
		Queue x = new Queue();
		x.toString();
		assertEquals("[]", x.toString());
		x.toString();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.enqueue(15036763);
		x.enqueue(1634106849);
		x.isEmpty();
		assertEquals("[15036763, 1634106849]", x.toString());
		x.enqueue(-1374435149);
		x.enqueue(-69752494);
    }
    @Test
    public void test2589() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		variable.enqueue(1357598017);
		variable.toString();
    }
    @Test
    public void test2590() {
		Queue variable = new Queue();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.toString();
		variable.isFull();
		variable.enqueue(-1560659546);
		variable.toString();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(-1949124549);
		variable.dequeue();
    }
    @Test
    public void test2591() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(2095253239);
		variable.isEmpty();
    }
    @Test
    public void test2592() {
		Queue variable = new Queue();
		variable.enqueue(-1731424133);
		variable.isFull();
		variable.enqueue(1934108013);
		variable.dequeue();
    }
    @Test
    public void test2593() {
		Queue z = new Queue();
		z.enqueue(1336038566);
		z.toString();
		assertFalse(z.isFull());
		z.isFull();
		assertFalse(z.isFull());
		z.dequeue();
		z.isFull();
		z.dequeue();
		assertFalse(z.isFull());
		z.toString();
		z.toString();
		z.isFull();
    }
    @Test
    public void test2594() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test2595() {
		Queue x = new Queue();
		x.enqueue(1394864309);
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test2596() {
		Queue z = new Queue();
		z.enqueue(-2082194530);
		z.isEmpty();
		z.enqueue(-337094630);
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test2597() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test2598() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.enqueue(1759634340);
		Var.enqueue(-484807523);
    }
    @Test
    public void test2599() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.isEmpty();
		y.toString();
		assertFalse(y.isFull());
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test2600() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test2601() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(308937505);
		z.isEmpty();
		z.enqueue(1562062758);
		z.enqueue(2118640136);
		assertFalse(z.isFull());
		assertEquals("[308937505, 1562062758, 2118640136]", z.toString());
		assertFalse(z.isEmpty());
		assertEquals(308937505, z.dequeue());
		z.isEmpty();
		z.enqueue(1698325788);
		z.dequeue();
    }
    @Test
    public void test2602() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.enqueue(1421151957);
		z.toString();
		assertFalse(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test2603() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-1812611638);
		assertFalse(x.isFull());
		x.enqueue(-382993411);
		x.enqueue(-736369848);
		x.toString();
		x.toString();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test2604() {
		Queue z = new Queue();
		z.enqueue(-623997381);
		z.isEmpty();
		z.dequeue();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.enqueue(-2068989786);
		assertFalse(z.isFull());
		z.isEmpty();
		z.isFull();
		z.enqueue(945490533);
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test2605() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.toString();
		x.enqueue(1923686812);
		assertEquals(1923686812, x.dequeue());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.dequeue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.toString();
		assertTrue(x.isEmpty());
		x.isFull();
		assertEquals("[]", x.toString());
		x.enqueue(-928248501);
    }
    @Test
    public void test2606() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test2607() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(-613112082);
		z.toString();
		z.isFull();
    }
    @Test
    public void test2608() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test2609() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test2610() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(1238566443);
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(-368479411);
		variable.toString();
    }
    @Test
    public void test2611() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test2612() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-1462941442);
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(1638153612);
		assertEquals(1638153612, y.dequeue());
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.isFull();
		assertTrue(y.isEmpty());
		y.enqueue(1113347165);
		y.isFull();
		y.toString();
		y.toString();
    }
    @Test
    public void test2613() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.enqueue(-1871949765);
		z.toString();
		z.isEmpty();
		z.enqueue(1266277172);
		z.isFull();
		z.enqueue(59903778);
		z.enqueue(1601242683);
		assertFalse(z.isFull());
		assertEquals("[1266277172, 59903778, 1601242683]", z.toString());
		z.enqueue(1672018721);
    }
    @Test
    public void test2614() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-1824066649);
		x.enqueue(-1831432313);
		x.isEmpty();
    }
    @Test
    public void test2615() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test2616() {
		Queue z = new Queue();
		z.enqueue(1336411595);
		z.toString();
		z.enqueue(-415880645);
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.toString();
		z.isFull();
		assertEquals("[]", z.toString());
		z.toString();
		z.dequeue();
    }
    @Test
    public void test2617() {
		Queue x = new Queue();
		x.enqueue(-181904175);
		x.enqueue(-99105370);
		x.enqueue(-431304272);
		x.enqueue(-2052994574);
		x.toString();
		x.isEmpty();
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test2618() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(302385301);
		Var.isFull();
    }
    @Test
    public void test2619() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isFull();
		x.isFull();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.toString();
    }
    @Test
    public void test2620() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test2621() {
		Queue z = new Queue();
		z.enqueue(-1251140356);
		z.isEmpty();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test2622() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
		variable.enqueue(-1795292094);
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test2623() {
		Queue z = new Queue();
		z.isFull();
		assertFalse(z.isFull());
		z.isFull();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(898992352);
		assertFalse(z.isEmpty());
		assertEquals(898992352, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.enqueue(377307502);
		z.isEmpty();
    }
    @Test
    public void test2624() {
		Queue z = new Queue();
		z.toString();
		assertTrue(z.isEmpty());
		z.isFull();
		assertEquals("[]", z.toString());
		z.enqueue(1039321261);
		z.dequeue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1648204304);
    }
    @Test
    public void test2625() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(-522491968);
		x.toString();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test2626() {
		Queue variable = new Queue();
		variable.enqueue(1572062453);
		variable.enqueue(-545024726);
		assertEquals(1572062453, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.toString();
		variable.toString();
		variable.enqueue(-886827292);
    }
    @Test
    public void test2627() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.toString();
		y.isFull();
		y.dequeue();
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.toString();
		y.isFull();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.toString();
    }
    @Test
    public void test2628() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(964392147);
		variable.enqueue(-1303053787);
    }
    @Test
    public void test2629() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test2630() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(2142881722);
		x.toString();
		x.isFull();
		x.toString();
    }
    @Test
    public void test2631() {
		Queue z = new Queue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.toString();
		z.isFull();
		z.enqueue(940112986);
		assertEquals(940112986, z.dequeue());
		z.enqueue(797229326);
		z.toString();
		assertFalse(z.isEmpty());
		z.toString();
    }
    @Test
    public void test2632() {
		Queue Var = new Queue();
		Var.enqueue(-13662251);
    }
    @Test
    public void test2633() {
		Queue x = new Queue();
		x.enqueue(1354819575);
		x.isFull();
		x.toString();
    }
    @Test
    public void test2634() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(-460183802);
		x.isFull();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.enqueue(977680773);
    }
    @Test
    public void test2635() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.toString();
    }
    @Test
    public void test2636() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.toString();
		z.enqueue(1329100778);
		assertFalse(z.isEmpty());
		z.enqueue(1778508296);
    }
    @Test
    public void test2637() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.enqueue(1443536771);
		assertEquals("[1443536771]", z.toString());
		z.toString();
		z.enqueue(-1316576529);
    }
    @Test
    public void test2638() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(421480047);
		assertFalse(y.isEmpty());
		y.toString();
		y.isFull();
		y.isFull();
		assertEquals(421480047, y.dequeue());
		assertTrue(y.isEmpty());
		y.enqueue(1104032583);
		y.enqueue(490571600);
    }
    @Test
    public void test2639() {
		Queue x = new Queue();
		x.enqueue(-557483285);
		x.enqueue(1112308891);
		x.isEmpty();
		assertFalse(x.isEmpty());
		x.enqueue(-34650495);
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test2640() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test2641() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.enqueue(291575413);
		variable.enqueue(-1156412581);
		variable.toString();
    }
    @Test
    public void test2642() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test2643() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test2644() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.enqueue(671099242);
		variable.isFull();
		variable.isFull();
		variable.enqueue(-232199124);
    }
    @Test
    public void test2645() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-1793429583);
		variable.dequeue();
		variable.toString();
		variable.enqueue(-1423180829);
    }
    @Test
    public void test2646() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-1045850042);
    }
    @Test
    public void test2647() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.toString();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.toString();
		Var.enqueue(-549396649);
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1860532744);
		Var.dequeue();
    }
    @Test
    public void test2648() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test2649() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test2650() {
		Queue variable = new Queue();
		variable.enqueue(-583918163);
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(737016402);
		variable.enqueue(-978733286);
		assertEquals("[737016402]", variable.toString());
		variable.enqueue(-161354466);
		assertEquals("[737016402]", variable.toString());
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(122521528);
		variable.enqueue(332941151);
		assertEquals("[122521528, 332941151]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test2651() {
		Queue y = new Queue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.toString();
		y.isFull();
    }
    @Test
    public void test2652() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(677277885);
		Var.isFull();
    }
    @Test
    public void test2653() {
		Queue x = new Queue();
		x.enqueue(-2051045080);
		x.isFull();
		x.isFull();
		x.toString();
		x.dequeue();
		x.enqueue(-1633843306);
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test2654() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test2655() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test2656() {
		Queue Var = new Queue();
		Var.enqueue(1916911821);
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(1150190578);
		Var.toString();
    }
    @Test
    public void test2657() {
		Queue Var = new Queue();
		Var.enqueue(-2094884664);
		Var.isEmpty();
    }
    @Test
    public void test2658() {
		Queue z = new Queue();
		z.enqueue(-1732862332);
		z.isEmpty();
		z.toString();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isEmpty();
		z.enqueue(-1933237110);
		z.isFull();
		z.dequeue();
		z.toString();
		z.isFull();
    }
    @Test
    public void test2659() {
		Queue variable = new Queue();
		variable.enqueue(-1443402479);
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test2660() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
		y.dequeue();
		y.enqueue(405338156);
    }
    @Test
    public void test2661() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test2662() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test2663() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.enqueue(1299728337);
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.enqueue(-1010823179);
    }
    @Test
    public void test2664() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.toString();
		Var.enqueue(-921454152);
		Var.toString();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test2665() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.isFull();
		z.isFull();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test2666() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(150711075);
		variable.enqueue(-1232774099);
		variable.enqueue(1323755700);
		variable.dequeue();
    }
    @Test
    public void test2667() {
		Queue variable = new Queue();
		variable.enqueue(-1112117489);
		assertFalse(variable.isFull());
		variable.enqueue(-356938338);
		variable.enqueue(-1708649460);
		variable.enqueue(-1024514051);
		variable.isEmpty();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
    }
    @Test
    public void test2668() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.isFull();
		Var.isFull();
		Var.enqueue(-2052137014);
    }
    @Test
    public void test2669() {
		Queue variable = new Queue();
		variable.enqueue(1127260512);
    }
    @Test
    public void test2670() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test2671() {
		Queue y = new Queue();
		y.enqueue(-1200826552);
		assertTrue(y.isEmpty());
		y.enqueue(-1311232881);
		y.dequeue();
    }
    @Test
    public void test2672() {
		Queue x = new Queue();
		x.enqueue(-924514321);
		x.enqueue(-849422824);
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		assertEquals("[]", x.toString());
		x.toString();
		x.isFull();
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(-86545869);
		x.toString();
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test2673() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test2674() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test2675() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test2676() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.enqueue(-642532348);
		z.dequeue();
    }
    @Test
    public void test2677() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test2678() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(621648506);
		variable.enqueue(1162217679);
    }
    @Test
    public void test2679() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(-1742921319);
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test2680() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test2681() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test2682() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1335988308);
		assertEquals(-1, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test2683() {
		Queue Var = new Queue();
		Var.enqueue(-1024362514);
		assertFalse(Var.isFull());
		Var.toString();
		Var.isFull();
		Var.enqueue(1421917795);
		assertEquals(1421917795, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test2684() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(1916320672);
		z.enqueue(-1854405416);
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test2685() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.toString();
		y.isFull();
    }
    @Test
    public void test2686() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test2687() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.toString();
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test2688() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.toString();
    }
    @Test
    public void test2689() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.enqueue(1123003745);
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test2690() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(1773484);
		x.enqueue(-1117052300);
		x.enqueue(1611170086);
		assertEquals("[1773484, 1611170086]", x.toString());
		x.enqueue(-2132965434);
    }
    @Test
    public void test2691() {
		Queue x = new Queue();
		x.enqueue(148726857);
		assertEquals("[148726857]", x.toString());
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.isEmpty();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test2692() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.dequeue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1572894130);
		variable.isEmpty();
    }
    @Test
    public void test2693() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-510210266);
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test2694() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test2695() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.enqueue(1782703975);
		x.dequeue();
		x.enqueue(-106999668);
		x.enqueue(-2039596511);
    }
    @Test
    public void test2696() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(-148244028);
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.toString();
    }
    @Test
    public void test2697() {
		Queue variable = new Queue();
		variable.enqueue(-1893738044);
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test2698() {
		Queue z = new Queue();
		z.enqueue(1139151936);
		z.toString();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test2699() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.toString();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isEmpty();
		x.enqueue(979908258);
		x.isFull();
		x.isFull();
		x.dequeue();
		x.enqueue(593071612);
    }
    @Test
    public void test2700() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test2701() {
		Queue Var = new Queue();
		Var.enqueue(-1888960708);
		Var.dequeue();
		Var.toString();
		Var.enqueue(-598717972);
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.dequeue();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(1858587664);
    }
    @Test
    public void test2702() {
		Queue z = new Queue();
		z.enqueue(-2132848207);
		z.isFull();
    }
    @Test
    public void test2703() {
		Queue variable = new Queue();
		variable.enqueue(-1997973850);
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test2704() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.enqueue(-1241332359);
		z.enqueue(-387271078);
		z.isFull();
		z.isFull();
		z.toString();
    }
    @Test
    public void test2705() {
		Queue z = new Queue();
		z.enqueue(11458510);
		z.isEmpty();
		z.enqueue(-1511040699);
		z.toString();
		assertEquals(11458510, z.dequeue());
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test2706() {
		Queue z = new Queue();
		z.enqueue(1377246138);
		z.enqueue(152555966);
		z.isFull();
		assertEquals("[1377246138, 152555966]", z.toString());
		z.toString();
		z.toString();
		z.dequeue();
		z.toString();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test2707() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.isEmpty();
		y.enqueue(437036903);
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test2708() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(1816639944);
		x.isFull();
    }
    @Test
    public void test2709() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test2710() {
		Queue z = new Queue();
		z.enqueue(-1141387143);
		z.isEmpty();
		z.enqueue(-1425084085);
    }
    @Test
    public void test2711() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.isFull();
		assertEquals("[]", x.toString());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isFull();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.enqueue(-2024902957);
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test2712() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(18239442);
		assertEquals("[18239442]", y.toString());
		y.toString();
		y.enqueue(-8876001);
		y.isEmpty();
		y.toString();
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test2713() {
		Queue variable = new Queue();
		variable.enqueue(1434379308);
		variable.enqueue(-1585257801);
		assertEquals("[1434379308]", variable.toString());
		assertFalse(variable.isEmpty());
		assertEquals(1434379308, variable.dequeue());
		variable.enqueue(1735161102);
		assertFalse(variable.isFull());
		variable.isFull();
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(-153315691);
		variable.enqueue(-1279616624);
		assertFalse(variable.isEmpty());
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(-272306871);
		variable.dequeue();
    }
    @Test
    public void test2714() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(1623438532);
		assertEquals(1623438532, x.dequeue());
		x.toString();
		x.isFull();
		x.enqueue(1632488230);
    }
    @Test
    public void test2715() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.toString();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isFull();
		z.isFull();
		z.isEmpty();
		z.enqueue(1048895185);
		z.dequeue();
    }
    @Test
    public void test2716() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.enqueue(-240620405);
		assertTrue(variable.isEmpty());
		variable.enqueue(-1250449906);
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test2717() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.enqueue(1275710797);
		assertEquals("[1275710797]", x.toString());
		x.enqueue(-1700266636);
		x.isEmpty();
    }
    @Test
    public void test2718() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test2719() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test2720() {
		Queue variable = new Queue();
		variable.enqueue(1805606513);
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test2721() {
		Queue y = new Queue();
		y.enqueue(838817155);
		assertEquals("[838817155]", y.toString());
		y.enqueue(-778002971);
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test2722() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test2723() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test2724() {
		Queue x = new Queue();
		x.enqueue(-1827329160);
		x.enqueue(501269885);
		x.enqueue(1789211428);
		assertEquals("[501269885, 1789211428]", x.toString());
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(1999500516);
		assertFalse(x.isEmpty());
		x.isEmpty();
		x.enqueue(-2012081679);
		x.enqueue(618837695);
		x.enqueue(846413885);
    }
    @Test
    public void test2725() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test2726() {
		Queue variable = new Queue();
		variable.enqueue(1381721492);
		assertEquals(1381721492, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.enqueue(-1607539729);
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(-737756484);
		assertEquals(-1, variable.dequeue());
		variable.enqueue(848260171);
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test2727() {
		Queue Var = new Queue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(951275792);
    }
    @Test
    public void test2728() {
		Queue x = new Queue();
		x.enqueue(-863295364);
		x.isEmpty();
		x.dequeue();
		x.enqueue(-2121392883);
		x.toString();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.toString();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.enqueue(-85409381);
		x.dequeue();
    }
    @Test
    public void test2729() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test2730() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test2731() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.toString();
		variable.toString();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.enqueue(390488487);
    }
    @Test
    public void test2732() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(1935880935);
		z.enqueue(-951667502);
    }
    @Test
    public void test2733() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-978713547);
		x.enqueue(-1063710403);
		x.toString();
		x.isEmpty();
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(1443700170);
		x.enqueue(789096175);
    }
    @Test
    public void test2734() {
		Queue z = new Queue();
		z.enqueue(737662127);
		z.dequeue();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.dequeue();
		z.toString();
		z.isFull();
		z.isFull();
		z.dequeue();
		z.enqueue(1890149127);
    }
    @Test
    public void test2735() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.enqueue(-884933658);
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isEmpty();
		x.enqueue(1718738972);
		x.dequeue();
    }
    @Test
    public void test2736() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(1822192377);
		Var.enqueue(-329955641);
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-943057592);
    }
    @Test
    public void test2737() {
		Queue Var = new Queue();
		Var.enqueue(-751346967);
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test2738() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(1715572237);
		assertEquals(1715572237, Var.dequeue());
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test2739() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.enqueue(-1410147376);
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test2740() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test2741() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test2742() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test2743() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(2078757852);
		x.enqueue(1331920753);
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test2744() {
		Queue z = new Queue();
		z.enqueue(-313841724);
		z.isFull();
		z.isFull();
		assertEquals("[]", z.toString());
		z.enqueue(-1969472005);
		assertEquals(-1, z.dequeue());
		z.enqueue(-1914618589);
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test2745() {
		Queue x = new Queue();
		x.enqueue(1536776810);
    }
    @Test
    public void test2746() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-529492714);
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test2747() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(743493677);
		assertEquals("[743493677]", z.toString());
		assertEquals(743493677, z.dequeue());
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.toString();
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test2748() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.toString();
		variable.toString();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test2749() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
    }
    @Test
    public void test2750() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-484041823);
		y.toString();
    }
    @Test
    public void test2751() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1332615195);
		variable.enqueue(364413800);
		assertFalse(variable.isEmpty());
		variable.toString();
		variable.dequeue();
		variable.isFull();
		variable.enqueue(1090591865);
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test2752() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		z.toString();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isFull();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(1147735268);
		z.isEmpty();
    }
    @Test
    public void test2753() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		assertFalse(x.isFull());
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(-1908749351);
		assertEquals(-1, x.dequeue());
		x.toString();
		x.toString();
		x.isFull();
		x.enqueue(-1729053013);
		assertEquals("[]", x.toString());
		x.isEmpty();
    }
    @Test
    public void test2754() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-1674697042);
		variable.enqueue(-80115904);
    }
    @Test
    public void test2755() {
		Queue x = new Queue();
		x.enqueue(-729567146);
		x.toString();
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test2756() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(600285721);
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(104171608);
		variable.dequeue();
    }
    @Test
    public void test2757() {
		Queue Var = new Queue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-1158840636);
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test2758() {
		Queue x = new Queue();
		x.enqueue(-772438985);
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test2759() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(2390738);
		assertEquals("[2390738]", y.toString());
		y.dequeue();
		y.enqueue(396182424);
		y.isEmpty();
		y.toString();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test2760() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test2761() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test2762() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.toString();
		y.dequeue();
		y.toString();
		y.enqueue(-811590014);
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.enqueue(106449259);
		y.toString();
		y.toString();
		y.dequeue();
		y.enqueue(1193628711);
		y.enqueue(-260608301);
    }
    @Test
    public void test2763() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(1612170108);
    }
    @Test
    public void test2764() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(2088710774);
		variable.enqueue(-596728292);
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(987413591);
		variable.isFull();
    }
    @Test
    public void test2765() {
		Queue y = new Queue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test2766() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-1786340908);
		z.enqueue(1860094913);
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test2767() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test2768() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.toString();
		x.isFull();
		x.enqueue(-373067281);
		assertEquals("[]", x.toString());
		x.enqueue(-277860477);
		x.isEmpty();
		x.isFull();
		x.toString();
    }
    @Test
    public void test2769() {
		Queue z = new Queue();
		z.enqueue(1706693732);
		z.toString();
		z.isFull();
		assertFalse(z.isEmpty());
		assertEquals(1706693732, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test2770() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test2771() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test2772() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test2773() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isFull();
		assertFalse(z.isFull());
		z.isEmpty();
		z.dequeue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isFull();
    }
    @Test
    public void test2774() {
		Queue variable = new Queue();
		variable.enqueue(1601069225);
		variable.isFull();
		variable.enqueue(460192267);
		variable.dequeue();
		variable.enqueue(2073700114);
    }
    @Test
    public void test2775() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isFull();
		y.enqueue(2099270477);
		y.dequeue();
		y.toString();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test2776() {
		Queue y = new Queue();
		y.enqueue(-1961545153);
		y.isEmpty();
		y.enqueue(893968904);
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test2777() {
		Queue x = new Queue();
		x.enqueue(848518472);
		x.dequeue();
		x.enqueue(-441462205);
		x.dequeue();
		x.toString();
		x.toString();
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test2778() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-356270227);
		assertFalse(z.isFull());
		z.enqueue(524521975);
		assertFalse(z.isFull());
		z.enqueue(832176495);
		assertFalse(z.isEmpty());
		z.enqueue(1769265376);
		z.isFull();
		assertFalse(z.isEmpty());
		assertEquals("[524521975, 832176495, 1769265376]", z.toString());
		z.toString();
    }
    @Test
    public void test2779() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test2780() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(-1736271085);
    }
    @Test
    public void test2781() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-2118922583);
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test2782() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.isFull();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.toString();
    }
    @Test
    public void test2783() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.dequeue();
		y.enqueue(-988677876);
		y.isEmpty();
		y.enqueue(-282085870);
		y.isFull();
    }
    @Test
    public void test2784() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(692236384);
		assertEquals("[692236384]", y.toString());
		y.isFull();
		y.isEmpty();
		y.isFull();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test2785() {
		Queue variable = new Queue();
		variable.enqueue(593174918);
		assertEquals("[593174918]", variable.toString());
		variable.isFull();
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1701961435);
		variable.toString();
    }
    @Test
    public void test2786() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.toString();
		y.enqueue(105049412);
		y.toString();
		y.enqueue(-826028954);
		y.isFull();
    }
    @Test
    public void test2787() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(-1590461367);
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-782636399);
    }
    @Test
    public void test2788() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test2789() {
		Queue variable = new Queue();
		variable.enqueue(655364267);
		variable.enqueue(-400073385);
    }
    @Test
    public void test2790() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(-1735861718);
		x.isEmpty();
		x.toString();
		x.enqueue(808386230);
		x.isFull();
		x.toString();
		x.isFull();
		x.enqueue(8318691);
		x.enqueue(-337523680);
    }
    @Test
    public void test2791() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test2792() {
		Queue Var = new Queue();
		Var.enqueue(-791832856);
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.toString();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test2793() {
		Queue z = new Queue();
		z.toString();
		assertTrue(z.isEmpty());
		z.isFull();
		z.isFull();
		z.toString();
		z.enqueue(762785344);
		z.enqueue(-258203334);
		assertFalse(z.isEmpty());
		assertEquals(762785344, z.dequeue());
		z.isFull();
		z.isFull();
		z.enqueue(-1747074455);
    }
    @Test
    public void test2794() {
		Queue Var = new Queue();
		Var.enqueue(-1903424710);
		Var.isFull();
		Var.toString();
		Var.enqueue(127953465);
		assertEquals(127953465, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.enqueue(46631299);
		Var.toString();
		Var.isFull();
		Var.enqueue(-977548793);
    }
    @Test
    public void test2795() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test2796() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test2797() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-724744470);
		x.enqueue(-1173362131);
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(1064455672);
		x.enqueue(-434111174);
		assertFalse(x.isEmpty());
		x.isFull();
		x.enqueue(-1156071199);
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.isFull();
    }
    @Test
    public void test2798() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-1010590505);
		Var.enqueue(-897738705);
		assertTrue(Var.isEmpty());
		Var.enqueue(-17056185);
    }
    @Test
    public void test2799() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(-1036993431);
    }
    @Test
    public void test2800() {
		Queue x = new Queue();
		x.enqueue(1456508438);
    }
    @Test
    public void test2801() {
		Queue y = new Queue();
		y.enqueue(1427986207);
		y.toString();
		y.enqueue(592925752);
		assertEquals(1427986207, y.dequeue());
		assertEquals(592925752, y.dequeue());
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test2802() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(-2114079773);
    }
    @Test
    public void test2803() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		z.toString();
		z.isEmpty();
		z.dequeue();
		z.toString();
		z.dequeue();
		z.isFull();
		z.toString();
    }
    @Test
    public void test2804() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test2805() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.enqueue(1599577029);
		z.dequeue();
    }
    @Test
    public void test2806() {
		Queue x = new Queue();
		x.toString();
		assertTrue(x.isEmpty());
		x.toString();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.isFull();
		assertFalse(x.isFull());
		x.toString();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isFull();
		x.enqueue(-1605495282);
		assertEquals(-1, x.dequeue());
		x.toString();
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test2807() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.dequeue();
		z.toString();
		z.dequeue();
		z.toString();
		z.toString();
		z.toString();
    }
    @Test
    public void test2808() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test2809() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isFull();
		Var.enqueue(-1138234395);
		assertFalse(Var.isFull());
		Var.toString();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1256650885);
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test2810() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.toString();
		y.isEmpty();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test2811() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(561966210);
		y.enqueue(793151496);
		y.enqueue(-1354494244);
    }
    @Test
    public void test2812() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.enqueue(-1543361480);
		x.enqueue(-44914517);
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test2813() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-1815149711);
		y.toString();
		y.dequeue();
		y.isFull();
		y.dequeue();
		y.isFull();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test2814() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test2815() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(-1211047677);
		variable.enqueue(-1820237266);
		variable.dequeue();
		variable.toString();
		variable.toString();
		variable.enqueue(1789493378);
    }
    @Test
    public void test2816() {
		Queue variable = new Queue();
		variable.enqueue(1527178830);
		variable.toString();
		variable.enqueue(-1307940352);
    }
    @Test
    public void test2817() {
		Queue Var = new Queue();
		Var.enqueue(-916710195);
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(1317183135);
		Var.dequeue();
		Var.enqueue(1673038705);
		Var.enqueue(-219225754);
    }
    @Test
    public void test2818() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1763933969);
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test2819() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.enqueue(1696855351);
		y.enqueue(421053590);
		y.dequeue();
		assertFalse(y.isEmpty());
		assertEquals("[421053590]", y.toString());
		y.enqueue(-1720900418);
		y.isFull();
		assertEquals("[421053590]", y.toString());
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
		assertFalse(y.isFull());
		y.toString();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test2820() {
		Queue y = new Queue();
		y.enqueue(-564888482);
		assertFalse(y.isFull());
		y.isFull();
		assertTrue(y.isEmpty());
		y.enqueue(319857750);
		y.enqueue(-1539852832);
    }
    @Test
    public void test2821() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test2822() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(-1074717318);
		y.isEmpty();
		y.enqueue(720710546);
		assertFalse(y.isFull());
		assertEquals("[720710546]", y.toString());
		y.toString();
		y.enqueue(-1593617934);
		y.isEmpty();
    }
    @Test
    public void test2823() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.enqueue(-1432529765);
		assertFalse(y.isFull());
		y.isEmpty();
		y.enqueue(754232140);
		y.dequeue();
		y.toString();
    }
    @Test
    public void test2824() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.enqueue(1608299974);
		assertFalse(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test2825() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		Var.toString();
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test2826() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-240342061);
		Var.isEmpty();
		Var.enqueue(287620793);
    }
    @Test
    public void test2827() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.enqueue(1370557528);
		x.dequeue();
		x.toString();
		x.toString();
		x.isFull();
		x.toString();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test2828() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.enqueue(-384744165);
		x.isEmpty();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
		x.enqueue(-379270784);
    }
    @Test
    public void test2829() {
		Queue variable = new Queue();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(-1586639206);
		variable.dequeue();
		variable.enqueue(-1556747524);
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.dequeue();
		variable.enqueue(443140930);
		variable.isFull();
		variable.enqueue(551017747);
		variable.toString();
    }
    @Test
    public void test2830() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.enqueue(-2032112126);
		assertFalse(variable.isFull());
		variable.enqueue(537904270);
		variable.isFull();
		variable.enqueue(517018042);
		variable.enqueue(765696527);
    }
    @Test
    public void test2831() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-1576235774);
		y.toString();
		y.toString();
		y.toString();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test2832() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.enqueue(501673352);
		x.enqueue(-1128318413);
		assertEquals(501673352, x.dequeue());
		assertFalse(x.isFull());
		x.enqueue(27714535);
		x.enqueue(289768853);
		x.toString();
		assertFalse(x.isFull());
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test2833() {
		Queue y = new Queue();
		y.enqueue(1497096729);
		assertFalse(y.isEmpty());
		y.isFull();
		y.enqueue(-1241317139);
		y.enqueue(-1664227466);
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test2834() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1360646257);
		variable.dequeue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test2835() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.isEmpty();
		x.isFull();
		x.enqueue(1639525199);
		x.isFull();
		x.enqueue(-990319394);
    }
    @Test
    public void test2836() {
		Queue z = new Queue();
		z.enqueue(-860731947);
		assertEquals("[]", z.toString());
		z.isFull();
		z.isEmpty();
		z.enqueue(387367302);
		z.dequeue();
    }
    @Test
    public void test2837() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(2001275082);
		y.enqueue(-1549857473);
		y.enqueue(-1544422155);
		y.dequeue();
    }
    @Test
    public void test2838() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.enqueue(-1193287883);
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test2839() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(-2022351629);
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(-147347448);
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test2840() {
		Queue x = new Queue();
		x.enqueue(393413593);
		assertEquals(393413593, x.dequeue());
		x.isEmpty();
		x.dequeue();
		assertFalse(x.isFull());
		x.isFull();
		x.toString();
		x.toString();
		x.dequeue();
		x.enqueue(-222402359);
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test2841() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test2842() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
    }
    @Test
    public void test2843() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.toString();
		variable.isFull();
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test2844() {
		Queue y = new Queue();
		y.enqueue(-1494739147);
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test2845() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.enqueue(297840713);
		Var.isEmpty();
		assertEquals("[297840713]", Var.toString());
		Var.isEmpty();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test2846() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test2847() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
		y.isFull();
		y.enqueue(1848114398);
		y.toString();
		assertEquals("[1848114398]", y.toString());
		y.enqueue(-976365426);
		assertEquals(1848114398, y.dequeue());
		y.toString();
    }
    @Test
    public void test2848() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(1140681083);
		y.isEmpty();
		y.isEmpty();
		y.enqueue(30282296);
		y.isFull();
    }
    @Test
    public void test2849() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.toString();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.isFull();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test2850() {
		Queue variable = new Queue();
		variable.enqueue(-2103522570);
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-772954458);
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-61410037);
		variable.toString();
		variable.toString();
    }
    @Test
    public void test2851() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.isEmpty();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.enqueue(-1602219472);
		x.toString();
		x.toString();
    }
    @Test
    public void test2852() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-1380566854);
		z.toString();
    }
    @Test
    public void test2853() {
		Queue z = new Queue();
		z.isFull();
		assertEquals("[]", z.toString());
		z.enqueue(2018685887);
		z.dequeue();
    }
    @Test
    public void test2854() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(2033844426);
		variable.enqueue(-515377812);
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(1176405931);
		variable.enqueue(-1630915198);
		variable.isEmpty();
    }
    @Test
    public void test2855() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.toString();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test2856() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test2857() {
		Queue variable = new Queue();
		variable.enqueue(504087150);
		assertFalse(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test2858() {
		Queue Var = new Queue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.toString();
		Var.dequeue();
		Var.enqueue(-2099091660);
		Var.toString();
		Var.enqueue(1254559453);
    }
    @Test
    public void test2859() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test2860() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.isFull();
		variable.enqueue(1657972749);
		variable.isFull();
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-1816250447);
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test2861() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.toString();
		z.enqueue(1316465174);
    }
    @Test
    public void test2862() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(741503258);
		assertEquals(741503258, z.dequeue());
		z.toString();
		z.dequeue();
		z.isFull();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test2863() {
		Queue Var = new Queue();
		Var.enqueue(-1962845036);
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(733535836);
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test2864() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test2865() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test2866() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.isFull();
		x.enqueue(486014926);
		x.enqueue(243373464);
		x.enqueue(954089734);
		x.enqueue(524735171);
		x.enqueue(-1272938782);
		x.isFull();
    }
    @Test
    public void test2867() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test2868() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.toString();
		x.enqueue(717254650);
    }
    @Test
    public void test2869() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.toString();
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test2870() {
		Queue Var = new Queue();
		Var.enqueue(426440285);
		Var.enqueue(1874989621);
		Var.isFull();
		Var.enqueue(-711371209);
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(-1959376942);
    }
    @Test
    public void test2871() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(329049583);
    }
    @Test
    public void test2872() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(1446543159);
		x.dequeue();
		x.enqueue(32806979);
		assertFalse(x.isEmpty());
		x.enqueue(1946618598);
    }
    @Test
    public void test2873() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.toString();
		y.enqueue(195853470);
    }
    @Test
    public void test2874() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(886374487);
		y.enqueue(2061130002);
		y.enqueue(1976177993);
		y.isEmpty();
    }
    @Test
    public void test2875() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.toString();
		x.enqueue(1649253645);
		x.enqueue(1932246706);
		x.isFull();
		x.isFull();
    }
    @Test
    public void test2876() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(1037450291);
    }
    @Test
    public void test2877() {
		Queue Var = new Queue();
		Var.enqueue(328271184);
		Var.dequeue();
		Var.enqueue(773179896);
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(360154821);
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test2878() {
		Queue z = new Queue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.dequeue();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(-1292393056);
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test2879() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test2880() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.enqueue(1210546022);
		assertFalse(z.isFull());
		z.dequeue();
		z.isFull();
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(1038918322);
		assertEquals("[1038918322]", z.toString());
		assertEquals(1038918322, z.dequeue());
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test2881() {
		Queue z = new Queue();
		z.enqueue(-266796129);
		z.enqueue(-1885123945);
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		z.isFull();
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test2882() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test2883() {
		Queue Var = new Queue();
		Var.enqueue(-1823696816);
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.enqueue(1044430756);
		Var.enqueue(281365559);
    }
    @Test
    public void test2884() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(-599506199);
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test2885() {
		Queue z = new Queue();
		z.enqueue(1466228907);
    }
    @Test
    public void test2886() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.enqueue(-434759692);
		z.isFull();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test2887() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test2888() {
		Queue x = new Queue();
		x.enqueue(-672781052);
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.enqueue(212374232);
		x.enqueue(-681016414);
		assertEquals("[212374232]", x.toString());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.toString();
    }
    @Test
    public void test2889() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test2890() {
		Queue y = new Queue();
		y.enqueue(782903783);
		y.isFull();
		y.isEmpty();
		assertEquals("[782903783]", y.toString());
		assertFalse(y.isFull());
		y.dequeue();
		y.toString();
    }
    @Test
    public void test2891() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		assertFalse(x.isFull());
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(378315110);
    }
    @Test
    public void test2892() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.isFull();
		x.toString();
    }
    @Test
    public void test2893() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isEmpty();
		x.enqueue(1176279532);
		x.isEmpty();
		assertEquals("[1176279532]", x.toString());
		x.enqueue(1028654299);
    }
    @Test
    public void test2894() {
		Queue x = new Queue();
		x.enqueue(-276662476);
		x.isFull();
		x.isEmpty();
		x.isFull();
		assertEquals("[]", x.toString());
		x.enqueue(-849720019);
    }
    @Test
    public void test2895() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(900722556);
		y.isEmpty();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.enqueue(901543303);
		y.isFull();
    }
    @Test
    public void test2896() {
		Queue Var = new Queue();
		Var.enqueue(1768101800);
		Var.toString();
    }
    @Test
    public void test2897() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.dequeue();
		z.toString();
		z.toString();
		z.enqueue(1717117556);
    }
    @Test
    public void test2898() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.toString();
    }
    @Test
    public void test2899() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.toString();
		y.isFull();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test2900() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-821844631);
		z.isFull();
    }
    @Test
    public void test2901() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(1681408890);
		variable.isFull();
		assertFalse(variable.isEmpty());
		assertEquals(1681408890, variable.dequeue());
		variable.enqueue(-645919561);
		variable.isFull();
		variable.enqueue(-531383753);
		variable.dequeue();
    }
    @Test
    public void test2902() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		x.dequeue();
		x.enqueue(-1298733561);
		x.enqueue(1589301674);
		x.enqueue(1047965837);
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.enqueue(1587235950);
    }
    @Test
    public void test2903() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.isFull();
		x.isFull();
    }
    @Test
    public void test2904() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(-1378741419);
		z.enqueue(1864697327);
		z.isEmpty();
		z.enqueue(-56751733);
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test2905() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.enqueue(-1102071674);
		x.dequeue();
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test2906() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.toString();
		x.isFull();
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test2907() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.toString();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test2908() {
		Queue x = new Queue();
		x.enqueue(-1171431565);
		x.enqueue(1947231621);
		assertFalse(x.isFull());
		x.isFull();
    }
    @Test
    public void test2909() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.toString();
		y.enqueue(-2037958821);
		assertFalse(y.isFull());
		y.toString();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(1650765922);
    }
    @Test
    public void test2910() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(-720463186);
		assertEquals("[]", z.toString());
		z.toString();
		z.enqueue(-1941726683);
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test2911() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.enqueue(-1227208638);
		variable.isEmpty();
		variable.enqueue(-815722610);
		variable.enqueue(1704305911);
    }
    @Test
    public void test2912() {
		Queue variable = new Queue();
		variable.enqueue(1268281069);
		variable.toString();
		assertEquals("[1268281069]", variable.toString());
		assertEquals(1268281069, variable.dequeue());
		variable.enqueue(-966946258);
		variable.enqueue(382166818);
		assertEquals("[382166818]", variable.toString());
		variable.isEmpty();
		variable.enqueue(-143196715);
		assertEquals(382166818, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(1953509316);
    }
    @Test
    public void test2913() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test2914() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isFull();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.toString();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test2915() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.toString();
		assertEquals(-1, x.dequeue());
		x.enqueue(-600584887);
		x.isEmpty();
    }
    @Test
    public void test2916() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
		y.isFull();
		assertFalse(y.isFull());
		y.isFull();
		y.isEmpty();
		y.isFull();
		y.enqueue(1933482462);
		y.isEmpty();
    }
    @Test
    public void test2917() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-428111474);
		z.enqueue(857950013);
		z.enqueue(-639705637);
		z.toString();
		assertFalse(z.isEmpty());
		z.dequeue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test2918() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test2919() {
		Queue z = new Queue();
		z.toString();
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.enqueue(-1567777757);
    }
    @Test
    public void test2920() {
		Queue z = new Queue();
		z.enqueue(-259347701);
		z.isFull();
		z.enqueue(1661422536);
		z.isEmpty();
		z.enqueue(-587701290);
		z.isFull();
		z.toString();
    }
    @Test
    public void test2921() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test2922() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-510805682);
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test2923() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(202764656);
		assertFalse(x.isFull());
		x.isFull();
		assertFalse(x.isFull());
		assertEquals("[202764656]", x.toString());
		x.toString();
    }
    @Test
    public void test2924() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test2925() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.toString();
		y.dequeue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.enqueue(943129480);
    }
    @Test
    public void test2926() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isEmpty();
		y.enqueue(1386612743);
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test2927() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.dequeue();
		y.dequeue();
		y.toString();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.toString();
		y.dequeue();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.enqueue(1431601711);
    }
    @Test
    public void test2928() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.toString();
    }
    @Test
    public void test2929() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.isFull();
		assertTrue(x.isEmpty());
		x.enqueue(1224474499);
		x.isFull();
		x.enqueue(-709973942);
    }
    @Test
    public void test2930() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test2931() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.enqueue(-1748654680);
    }
    @Test
    public void test2932() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(1321640558);
		assertEquals("[1321640558]", variable.toString());
		variable.enqueue(-113928110);
		variable.toString();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test2933() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(-531834434);
		x.toString();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test2934() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.isEmpty();
		x.toString();
		assertTrue(x.isEmpty());
		x.toString();
		x.isFull();
		x.toString();
		x.toString();
		x.isFull();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test2935() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-90278024);
		x.enqueue(1952642265);
    }
    @Test
    public void test2936() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.toString();
    }
    @Test
    public void test2937() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.isFull();
		variable.enqueue(1942248700);
		variable.isEmpty();
		assertEquals(1942248700, variable.dequeue());
		variable.enqueue(-1063986122);
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(1830487852);
		variable.isEmpty();
    }
    @Test
    public void test2938() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.enqueue(823401695);
		y.enqueue(1931861175);
		y.enqueue(-144005157);
		assertFalse(y.isEmpty());
		y.enqueue(1973351815);
		y.enqueue(151153502);
		y.toString();
		assertEquals(823401695, y.dequeue());
		y.enqueue(1473123171);
		y.enqueue(89594409);
		assertEquals(1931861175, y.dequeue());
		assertFalse(y.isEmpty());
		y.dequeue();
    }
    @Test
    public void test2939() {
		Queue x = new Queue();
		x.enqueue(1713897517);
		x.enqueue(-1260667578);
		x.dequeue();
		assertFalse(x.isFull());
		x.isFull();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isEmpty();
		x.enqueue(-835031087);
    }
    @Test
    public void test2940() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test2941() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.enqueue(2130233033);
		assertEquals("[2130233033]", variable.toString());
		assertFalse(variable.isEmpty());
		variable.enqueue(-794600027);
		variable.toString();
		variable.enqueue(-669483720);
		variable.isEmpty();
		variable.enqueue(-1336574606);
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test2942() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(871700401);
		assertFalse(variable.isEmpty());
		assertEquals(871700401, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test2943() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test2944() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test2945() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test2946() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.enqueue(-1847864932);
    }
    @Test
    public void test2947() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.isEmpty();
		z.enqueue(-47944568);
		assertTrue(z.isEmpty());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test2948() {
		Queue y = new Queue();
		y.enqueue(-867618186);
		assertEquals(-1, y.dequeue());
		y.enqueue(718952523);
		y.isFull();
		y.isFull();
		y.enqueue(-1009596727);
		y.enqueue(1998927415);
    }
    @Test
    public void test2949() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.enqueue(-1398467769);
		z.isEmpty();
		z.enqueue(750710303);
    }
    @Test
    public void test2950() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.toString();
		assertFalse(x.isFull());
		x.dequeue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.enqueue(206218518);
		x.toString();
		assertEquals("[206218518]", x.toString());
		x.dequeue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.toString();
    }
    @Test
    public void test2951() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1092082647);
		variable.enqueue(-1539122252);
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-1200123771);
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(366862465);
    }
    @Test
    public void test2952() {
		Queue x = new Queue();
		x.enqueue(155944577);
		x.dequeue();
		x.enqueue(2144313341);
		x.isEmpty();
		x.isFull();
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(449604603);
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test2953() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		Var.enqueue(386287759);
		Var.enqueue(1447650750);
    }
    @Test
    public void test2954() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-1042169439);
		Var.toString();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test2955() {
		Queue variable = new Queue();
		variable.enqueue(22341164);
		variable.dequeue();
    }
    @Test
    public void test2956() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(-852338676);
		y.isFull();
		y.toString();
		y.isEmpty();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test2957() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-243580972);
		variable.isFull();
		variable.toString();
		variable.enqueue(729858047);
    }
    @Test
    public void test2958() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isFull();
		y.toString();
		y.isFull();
		y.dequeue();
		y.toString();
		y.enqueue(-1186871232);
    }
    @Test
    public void test2959() {
		Queue y = new Queue();
		y.enqueue(294552236);
		y.isEmpty();
		y.enqueue(1174968131);
    }
    @Test
    public void test2960() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(-526714204);
		z.isEmpty();
		z.toString();
		assertFalse(z.isFull());
		z.dequeue();
		z.toString();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test2961() {
		Queue Var = new Queue();
		Var.enqueue(116163777);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(-905885715);
    }
    @Test
    public void test2962() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isFull();
		variable.toString();
		variable.enqueue(28289176);
		variable.enqueue(-192441908);
    }
    @Test
    public void test2963() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.toString();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(-859478677);
    }
    @Test
    public void test2964() {
		Queue y = new Queue();
		y.enqueue(1274656812);
		y.dequeue();
		y.enqueue(1652173398);
		y.dequeue();
		y.toString();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test2965() {
		Queue y = new Queue();
		y.enqueue(-1070068658);
		y.enqueue(-1754589181);
    }
    @Test
    public void test2966() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test2967() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(-1736791099);
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(-703732116);
		assertFalse(z.isFull());
		z.enqueue(2035727799);
		z.toString();
		assertEquals("[2035727799]", z.toString());
		assertFalse(z.isEmpty());
		assertFalse(z.isEmpty());
		z.isEmpty();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test2968() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test2969() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isFull();
		y.toString();
		y.dequeue();
		y.enqueue(1493837211);
		assertEquals("[1493837211]", y.toString());
		y.enqueue(350537360);
		assertEquals(1493837211, y.dequeue());
		y.toString();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test2970() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test2971() {
		Queue y = new Queue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.enqueue(2015066416);
		y.isFull();
		y.enqueue(-81076395);
		assertEquals("[2015066416]", y.toString());
		y.isFull();
		y.isEmpty();
		y.enqueue(121520233);
		assertEquals("[2015066416, 121520233]", y.toString());
		assertFalse(y.isFull());
		assertEquals(2015066416, y.dequeue());
		y.enqueue(-2121393497);
    }
    @Test
    public void test2972() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(374171716);
		Var.enqueue(-2024303418);
		Var.toString();
		Var.enqueue(-1721178342);
    }
    @Test
    public void test2973() {
		Queue z = new Queue();
		z.enqueue(104674677);
		z.enqueue(2138977204);
		z.enqueue(-935373438);
		z.isFull();
		z.isFull();
		z.dequeue();
		z.enqueue(-1519781020);
    }
    @Test
    public void test2974() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(-1114762669);
		x.toString();
		x.dequeue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test2975() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1086288759);
		assertEquals("[]", variable.toString());
		variable.enqueue(-863288400);
		variable.isEmpty();
		variable.enqueue(81350981);
		assertFalse(variable.isFull());
		variable.enqueue(1019533581);
		variable.isFull();
		variable.enqueue(-1113550789);
		assertEquals("[81350981, 1019533581]", variable.toString());
		assertFalse(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test2976() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.enqueue(1215559222);
		x.dequeue();
    }
    @Test
    public void test2977() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-1097899454);
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.enqueue(107290573);
		z.enqueue(-823453036);
		z.toString();
		z.dequeue();
		z.enqueue(1955934801);
		z.enqueue(1060709504);
		assertEquals("[1955934801, 1060709504]", z.toString());
		z.dequeue();
    }
    @Test
    public void test2978() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test2979() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(266285690);
		assertEquals(266285690, Var.dequeue());
		assertFalse(Var.isFull());
		Var.toString();
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(1981280795);
		Var.dequeue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test2980() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.isFull();
		assertEquals("[]", x.toString());
		x.toString();
		x.toString();
		x.enqueue(-957813190);
		x.toString();
    }
    @Test
    public void test2981() {
		Queue y = new Queue();
		y.enqueue(45448168);
		y.enqueue(-1874457982);
		assertFalse(y.isFull());
		y.toString();
		y.enqueue(-1293790710);
		y.enqueue(966903269);
		y.dequeue();
		y.enqueue(-174894803);
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test2982() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.toString();
    }
    @Test
    public void test2983() {
		Queue z = new Queue();
		z.enqueue(1185506140);
		assertFalse(z.isEmpty());
		z.isEmpty();
		z.enqueue(1113732884);
		z.isEmpty();
    }
    @Test
    public void test2984() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1327419806);
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(1568889835);
    }
    @Test
    public void test2985() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(1105702118);
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test2986() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(1084058107);
    }
    @Test
    public void test2987() {
		Queue y = new Queue();
		y.enqueue(794483837);
		y.enqueue(34518571);
		y.isFull();
		assertFalse(y.isEmpty());
		y.enqueue(-150093070);
		y.isEmpty();
		assertEquals(794483837, y.dequeue());
		y.dequeue();
		y.toString();
		y.toString();
		y.enqueue(-520461477);
		y.enqueue(-1195851028);
    }
    @Test
    public void test2988() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(-1101766486);
    }
    @Test
    public void test2989() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.enqueue(-1428716760);
		assertFalse(Var.isFull());
		Var.enqueue(-1175129688);
		Var.toString();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test2990() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(882357829);
		z.isFull();
		assertFalse(z.isEmpty());
		z.dequeue();
		z.isFull();
		z.enqueue(-276728521);
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test2991() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.enqueue(377490987);
		z.enqueue(-602794068);
		z.toString();
		z.enqueue(-1762593109);
		z.toString();
		z.isEmpty();
		assertEquals("[377490987]", z.toString());
		z.isEmpty();
		z.isEmpty();
		z.enqueue(1258625213);
    }
    @Test
    public void test2992() {
		Queue variable = new Queue();
		variable.enqueue(-226740624);
		variable.toString();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.enqueue(714812035);
    }
    @Test
    public void test2993() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.enqueue(1640709088);
		y.enqueue(-750402312);
		y.isFull();
		y.isEmpty();
		assertEquals("[1640709088]", y.toString());
		y.enqueue(-1861051359);
		y.isEmpty();
    }
    @Test
    public void test2994() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-1743474154);
		variable.toString();
		variable.dequeue();
		variable.enqueue(-35547208);
		variable.toString();
    }
    @Test
    public void test2995() {
		Queue z = new Queue();
		z.enqueue(-1577329057);
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(-673945514);
		z.isEmpty();
    }
    @Test
    public void test2996() {
		Queue variable = new Queue();
		variable.enqueue(-972042365);
		variable.isEmpty();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(305289310);
		assertFalse(variable.isFull());
		variable.toString();
		variable.toString();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test2997() {
		Queue variable = new Queue();
		variable.enqueue(-325816560);
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		variable.enqueue(1142747644);
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test2998() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(2091360335);
		z.dequeue();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.toString();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.toString();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.enqueue(782773038);
		z.isEmpty();
    }
    @Test
    public void test2999() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(258220413);
    }
    @Test
    public void test3000() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(1236653800);
		Var.toString();
		assertEquals(1236653800, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test3001() {
		Queue x = new Queue();
		x.toString();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.toString();
		x.enqueue(-586675136);
		x.toString();
		x.toString();
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test3002() {
		Queue Var = new Queue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.enqueue(-351255312);
		Var.toString();
    }
    @Test
    public void test3003() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.enqueue(-1167798758);
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(20752378);
    }
    @Test
    public void test3004() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test3005() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test3006() {
		Queue y = new Queue();
		y.enqueue(-273007332);
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.enqueue(-1514089430);
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test3007() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1292194046);
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-2126295436);
		Var.isFull();
		Var.enqueue(-1811306771);
    }
    @Test
    public void test3008() {
		Queue variable = new Queue();
		variable.enqueue(330589519);
		variable.toString();
		variable.isFull();
		variable.enqueue(-833934264);
		assertEquals(330589519, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test3009() {
		Queue z = new Queue();
		z.enqueue(883942843);
		z.isEmpty();
    }
    @Test
    public void test3010() {
		Queue y = new Queue();
		y.enqueue(1732039764);
		assertFalse(y.isEmpty());
		assertFalse(y.isEmpty());
		assertFalse(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test3011() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test3012() {
		Queue y = new Queue();
		y.enqueue(946717808);
		y.enqueue(-801506065);
		y.toString();
		y.enqueue(-1514929238);
		y.isEmpty();
		assertFalse(y.isFull());
		assertEquals("[946717808]", y.toString());
		y.dequeue();
		y.toString();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test3013() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-533974212);
		Var.enqueue(-2042883179);
		Var.dequeue();
		Var.enqueue(-1120145445);
		Var.dequeue();
    }
    @Test
    public void test3014() {
		Queue y = new Queue();
		y.toString();
		assertTrue(y.isEmpty());
		y.isFull();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.enqueue(-125879951);
		y.toString();
		y.enqueue(1426042721);
    }
    @Test
    public void test3015() {
		Queue Var = new Queue();
		Var.enqueue(-1067953896);
		assertTrue(Var.isEmpty());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.enqueue(-1975396061);
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(221694662);
		assertFalse(Var.isEmpty());
		Var.toString();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test3016() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1358481517);
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test3017() {
		Queue z = new Queue();
		z.enqueue(1233942196);
		z.enqueue(-1536774268);
		z.toString();
		z.isFull();
		z.enqueue(1182983661);
		z.dequeue();
		z.toString();
		assertEquals("[1182983661]", z.toString());
		assertFalse(z.isEmpty());
		z.isFull();
		z.isEmpty();
		z.enqueue(-2146463238);
    }
    @Test
    public void test3018() {
		Queue variable = new Queue();
		variable.enqueue(1669022494);
		variable.dequeue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(-1149831663);
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-613787674);
		variable.enqueue(-619844015);
		variable.enqueue(1654994419);
    }
    @Test
    public void test3019() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test3020() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.enqueue(-172110991);
		assertTrue(x.isEmpty());
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test3021() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.enqueue(1796450603);
		assertEquals(1796450603, variable.dequeue());
		variable.enqueue(-771170058);
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1972254536);
    }
    @Test
    public void test3022() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.isFull();
		y.dequeue();
		y.isEmpty();
		y.toString();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test3023() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.enqueue(2005450017);
		assertEquals(2005450017, z.dequeue());
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.enqueue(-1290633616);
		z.toString();
    }
    @Test
    public void test3024() {
		Queue variable = new Queue();
		variable.enqueue(1983158249);
		assertEquals("[1983158249]", variable.toString());
		variable.enqueue(-1416696530);
		variable.isEmpty();
    }
    @Test
    public void test3025() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test3026() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test3027() {
		Queue variable = new Queue();
		variable.enqueue(-46174452);
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.enqueue(570487695);
		variable.isEmpty();
		assertEquals(570487695, variable.dequeue());
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-723067770);
    }
    @Test
    public void test3028() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.enqueue(1508534272);
		x.enqueue(1351442041);
		x.isEmpty();
		x.enqueue(-451202545);
		x.isEmpty();
		assertEquals("[1508534272, 1351442041]", x.toString());
		x.toString();
		x.isFull();
    }
    @Test
    public void test3029() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.toString();
    }
    @Test
    public void test3030() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(558948326);
		variable.enqueue(1719261804);
		variable.toString();
		assertFalse(variable.isFull());
		assertEquals(558948326, variable.dequeue());
		assertEquals(1719261804, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(2146260032);
    }
    @Test
    public void test3031() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.enqueue(583881394);
		assertEquals(583881394, Var.dequeue());
		Var.toString();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(1045813743);
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test3032() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.enqueue(-509445614);
		y.dequeue();
		y.dequeue();
		y.enqueue(619153766);
		y.isEmpty();
		assertEquals(619153766, y.dequeue());
		assertEquals("[]", y.toString());
		y.enqueue(-1463000273);
		y.isFull();
    }
    @Test
    public void test3033() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		variable.enqueue(-2076446630);
		variable.enqueue(1459719391);
		assertEquals("[1459719391]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test3034() {
		Queue y = new Queue();
		y.enqueue(294314974);
		y.isFull();
		y.toString();
		y.enqueue(-590784184);
		assertFalse(y.isEmpty());
		y.isFull();
		assertEquals("[294314974]", y.toString());
		y.isEmpty();
		assertFalse(y.isEmpty());
		y.isEmpty();
		y.dequeue();
		y.toString();
		y.toString();
    }
    @Test
    public void test3035() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.enqueue(466765404);
		assertFalse(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test3036() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test3037() {
		Queue variable = new Queue();
		variable.enqueue(311656997);
		variable.toString();
		variable.enqueue(-993977477);
		variable.enqueue(1776136863);
    }
    @Test
    public void test3038() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.enqueue(2076269692);
		assertFalse(z.isFull());
		z.enqueue(1403746368);
		z.isEmpty();
		assertFalse(z.isFull());
		z.toString();
		z.dequeue();
    }
    @Test
    public void test3039() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(-1523908269);
		Var.dequeue();
		Var.enqueue(-1413633148);
		Var.isFull();
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test3040() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(1390126733);
		variable.isFull();
    }
    @Test
    public void test3041() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.enqueue(-259552909);
    }
    @Test
    public void test3042() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.isFull();
		z.enqueue(-577734516);
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.enqueue(-1436909673);
    }
    @Test
    public void test3043() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(-1126847459);
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test3044() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		y.enqueue(-2073056591);
		y.isFull();
		assertTrue(y.isEmpty());
		y.toString();
		y.enqueue(1322246488);
		y.isEmpty();
		y.isFull();
		y.enqueue(1399620969);
		y.enqueue(1885946658);
		y.dequeue();
    }
    @Test
    public void test3045() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-2124652189);
		assertEquals("[]", Var.toString());
		Var.enqueue(299303745);
		Var.isEmpty();
    }
    @Test
    public void test3046() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.enqueue(1107729156);
		y.isFull();
		y.enqueue(-286461675);
		y.isEmpty();
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(1294032983);
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test3047() {
		Queue variable = new Queue();
		variable.enqueue(-375793261);
		variable.isEmpty();
		variable.enqueue(2100822028);
		variable.dequeue();
		variable.enqueue(1729901379);
		variable.isEmpty();
		assertEquals(1729901379, variable.dequeue());
		variable.enqueue(1459291936);
    }
    @Test
    public void test3048() {
		Queue x = new Queue();
		x.enqueue(-1187270629);
		assertTrue(x.isEmpty());
		x.enqueue(-821062790);
		x.isFull();
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
    }
    @Test
    public void test3049() {
		Queue z = new Queue();
		z.enqueue(38659308);
		assertFalse(z.isFull());
		z.isEmpty();
		assertEquals(38659308, z.dequeue());
		assertEquals("[]", z.toString());
		z.isFull();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.isFull();
		z.isEmpty();
		z.enqueue(-1956443440);
		z.toString();
    }
    @Test
    public void test3050() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test3051() {
		Queue Var = new Queue();
		Var.enqueue(-1117346410);
		Var.enqueue(-1768324069);
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test3052() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.enqueue(503977680);
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test3053() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isEmpty();
		y.isFull();
		y.enqueue(-1639713312);
		y.enqueue(-1463786651);
    }
    @Test
    public void test3054() {
		Queue z = new Queue();
		z.toString();
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test3055() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		variable.dequeue();
		variable.enqueue(1837914716);
		variable.dequeue();
		variable.toString();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test3056() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-1288773571);
		z.toString();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isFull();
		z.toString();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test3057() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		z.isFull();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.toString();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.toString();
    }
    @Test
    public void test3058() {
		Queue x = new Queue();
		x.enqueue(106091359);
		x.toString();
		x.toString();
    }
    @Test
    public void test3059() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(1069365428);
		Var.toString();
		Var.enqueue(121144130);
		Var.dequeue();
		Var.enqueue(1098324862);
		Var.isFull();
		Var.toString();
		Var.enqueue(1303431180);
		Var.enqueue(1171372367);
    }
    @Test
    public void test3060() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.toString();
		x.isFull();
		x.dequeue();
		x.enqueue(2144227995);
		x.isEmpty();
		x.enqueue(214868957);
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test3061() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test3062() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(-1758684756);
		assertFalse(y.isFull());
		y.dequeue();
		y.dequeue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.enqueue(1935615740);
    }
    @Test
    public void test3063() {
		Queue Var = new Queue();
		Var.enqueue(-488075325);
		Var.isFull();
		Var.enqueue(-1344672800);
		Var.isFull();
		Var.isFull();
		Var.enqueue(1604264302);
		Var.isEmpty();
		Var.enqueue(-1247980653);
    }
    @Test
    public void test3064() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(1935927879);
		Var.enqueue(937334673);
		Var.dequeue();
		Var.enqueue(-428533413);
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(-1685705390);
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-223133990);
    }
    @Test
    public void test3065() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test3066() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		assertEquals("[]", x.toString());
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(-580355101);
    }
    @Test
    public void test3067() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.toString();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.enqueue(-365047327);
		z.isFull();
		z.toString();
		z.dequeue();
		z.dequeue();
		z.enqueue(1193108846);
    }
    @Test
    public void test3068() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(1990275278);
		variable.dequeue();
		variable.enqueue(-1680300958);
		variable.enqueue(-1250966057);
		variable.isFull();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-750978304);
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test3069() {
		Queue x = new Queue();
		x.isFull();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.isFull();
		x.toString();
		x.dequeue();
		x.isFull();
		x.enqueue(-452900121);
		x.enqueue(-758529811);
		x.toString();
    }
    @Test
    public void test3070() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.toString();
		y.enqueue(-682396460);
		y.enqueue(1361055614);
		y.enqueue(968071624);
		y.isEmpty();
		y.enqueue(-1209485820);
    }
    @Test
    public void test3071() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1904432246);
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test3072() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		y.enqueue(1691343642);
    }
    @Test
    public void test3073() {
		Queue z = new Queue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.enqueue(-1785954960);
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test3074() {
		Queue y = new Queue();
		y.enqueue(-1635847227);
		y.isEmpty();
		y.toString();
		y.enqueue(-1776343444);
		y.enqueue(-978784704);
		y.isFull();
		assertTrue(y.isEmpty());
		y.enqueue(-1460517171);
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test3075() {
		Queue z = new Queue();
		z.enqueue(615151665);
		z.isEmpty();
    }
    @Test
    public void test3076() {
		Queue y = new Queue();
		y.enqueue(-1406555400);
		y.isFull();
		y.isFull();
		y.isEmpty();
		y.isFull();
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test3077() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(1949465607);
		y.toString();
		y.isFull();
		y.enqueue(-558281179);
    }
    @Test
    public void test3078() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.isFull();
		assertFalse(Var.isFull());
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test3079() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(276505362);
		Var.toString();
		Var.enqueue(-2028638659);
    }
    @Test
    public void test3080() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test3081() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.isFull();
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test3082() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.enqueue(-361798816);
		z.isEmpty();
		z.dequeue();
		z.toString();
		z.enqueue(1029521942);
    }
    @Test
    public void test3083() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.enqueue(1300883538);
		x.isFull();
		x.enqueue(-1470330533);
		x.isEmpty();
    }
    @Test
    public void test3084() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.toString();
		assertFalse(z.isFull());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.enqueue(-993111641);
		z.toString();
		z.enqueue(-1492746981);
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(1580206165);
    }
    @Test
    public void test3085() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.enqueue(-1934683720);
		y.enqueue(-1295223226);
		y.enqueue(805389701);
		y.isEmpty();
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test3086() {
		Queue variable = new Queue();
		variable.enqueue(-1379478630);
		variable.enqueue(503191147);
		variable.isFull();
    }
    @Test
    public void test3087() {
		Queue x = new Queue();
		x.enqueue(-1998180590);
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(1344347508);
    }
    @Test
    public void test3088() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(915017253);
		z.isFull();
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test3089() {
		Queue variable = new Queue();
		variable.enqueue(-1873090486);
    }
    @Test
    public void test3090() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(-1559146223);
		Var.dequeue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test3091() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.dequeue();
		z.enqueue(1388368256);
		z.isEmpty();
		z.isEmpty();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.toString();
		z.isEmpty();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test3092() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test3093() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-77183349);
    }
    @Test
    public void test3094() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(436963242);
		Var.dequeue();
		Var.enqueue(1540752448);
		assertEquals(1540752448, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test3095() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(982014765);
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test3096() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(1509843383);
		variable.enqueue(-1383551684);
    }
    @Test
    public void test3097() {
		Queue z = new Queue();
		z.enqueue(723461742);
		z.dequeue();
		z.toString();
		z.toString();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.dequeue();
		z.isFull();
		assertFalse(z.isFull());
		z.enqueue(-1812225719);
    }
    @Test
    public void test3098() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.enqueue(-2055612197);
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test3099() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.toString();
		x.enqueue(234249981);
		assertEquals(234249981, x.dequeue());
		x.enqueue(339814424);
		assertFalse(x.isEmpty());
		assertEquals(339814424, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test3100() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test3101() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(1200529209);
		z.dequeue();
		z.dequeue();
		z.dequeue();
		z.enqueue(-1733113440);
		z.isEmpty();
		z.enqueue(-1622286017);
		z.isEmpty();
    }
    @Test
    public void test3102() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test3103() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(762276065);
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(1669709396);
		assertEquals("[1669709396]", Var.toString());
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		assertFalse(Var.isFull());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.enqueue(-65582339);
    }
    @Test
    public void test3104() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-225315367);
		assertTrue(z.isEmpty());
		z.enqueue(1787077731);
		z.dequeue();
    }
    @Test
    public void test3105() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(-1468869556);
		z.enqueue(-1372064498);
		z.isEmpty();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.toString();
		z.dequeue();
		z.isFull();
		z.enqueue(-135034790);
		z.dequeue();
		z.toString();
    }
    @Test
    public void test3106() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1029729727);
		variable.toString();
		variable.enqueue(-1146978294);
		variable.enqueue(-23458472);
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test3107() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test3108() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(780747935);
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test3109() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.toString();
		x.enqueue(-1120565008);
		x.toString();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.enqueue(1138768483);
		x.isFull();
    }
    @Test
    public void test3110() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.enqueue(105766903);
		y.isEmpty();
		y.toString();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test3111() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-720200077);
    }
    @Test
    public void test3112() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test3113() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test3114() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test3115() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test3116() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.enqueue(-331548878);
		x.isEmpty();
    }
    @Test
    public void test3117() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-89910626);
    }
    @Test
    public void test3118() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test3119() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.toString();
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.enqueue(-378401121);
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test3120() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-936039205);
		variable.toString();
		variable.enqueue(140866418);
		variable.isEmpty();
		variable.enqueue(1448569709);
    }
    @Test
    public void test3121() {
		Queue z = new Queue();
		z.enqueue(-2082321960);
		assertEquals("[]", z.toString());
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test3122() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test3123() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test3124() {
		Queue variable = new Queue();
		variable.enqueue(1523839308);
		variable.toString();
		variable.toString();
		variable.toString();
		variable.enqueue(599193745);
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		assertEquals("[599193745]", variable.toString());
		variable.dequeue();
		variable.enqueue(755837161);
    }
    @Test
    public void test3125() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.toString();
		x.toString();
		assertTrue(x.isEmpty());
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.enqueue(-1640581871);
		x.enqueue(-1403446855);
		assertTrue(x.isEmpty());
		x.enqueue(797466428);
    }
    @Test
    public void test3126() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(905455932);
    }
    @Test
    public void test3127() {
		Queue z = new Queue();
		z.enqueue(-2098614163);
		z.enqueue(-68693313);
		z.dequeue();
		z.toString();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.toString();
		z.toString();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test3128() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(1841863815);
		variable.enqueue(549547066);
		assertFalse(variable.isEmpty());
		variable.enqueue(-131996494);
		assertEquals("[1841863815, 549547066]", variable.toString());
		assertEquals("[1841863815, 549547066]", variable.toString());
		assertFalse(variable.isFull());
		assertFalse(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.enqueue(-470263508);
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		variable.enqueue(192014317);
    }
    @Test
    public void test3129() {
		Queue y = new Queue();
		y.enqueue(-1071788098);
    }
    @Test
    public void test3130() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.isFull();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.toString();
		x.enqueue(948766141);
		x.isFull();
		assertFalse(x.isFull());
		x.isFull();
		assertFalse(x.isFull());
		assertEquals("[948766141]", x.toString());
		x.enqueue(-2018925671);
		x.toString();
    }
    @Test
    public void test3131() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-534089571);
		variable.dequeue();
		variable.enqueue(1285745649);
		assertEquals("[1285745649]", variable.toString());
		variable.enqueue(-1239926170);
    }
    @Test
    public void test3132() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
		Var.enqueue(267945763);
		Var.enqueue(516545709);
		Var.enqueue(1155009803);
		assertFalse(Var.isEmpty());
		Var.toString();
		assertEquals(267945763, Var.dequeue());
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test3133() {
		Queue x = new Queue();
		x.enqueue(-201744375);
		x.enqueue(1453289875);
		x.enqueue(815034770);
		assertEquals("[1453289875, 815034770]", x.toString());
		x.dequeue();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test3134() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.enqueue(1048295407);
		Var.toString();
    }
    @Test
    public void test3135() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.dequeue();
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.toString();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.dequeue();
		z.enqueue(1991200456);
		assertFalse(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test3136() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.isFull();
		z.toString();
    }
    @Test
    public void test3137() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.toString();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test3138() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isEmpty();
		x.toString();
		x.enqueue(-555090388);
		x.toString();
    }
    @Test
    public void test3139() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
		y.dequeue();
		y.toString();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.toString();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.enqueue(1504035290);
		y.toString();
		y.dequeue();
		y.enqueue(-256291480);
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test3140() {
		Queue y = new Queue();
		y.enqueue(2111628958);
		y.toString();
		y.isEmpty();
		y.toString();
		y.enqueue(1679343094);
		y.isFull();
		y.isEmpty();
		y.dequeue();
		assertEquals(1679343094, y.dequeue());
		y.toString();
    }
    @Test
    public void test3141() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test3142() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test3143() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(1604022617);
		Var.enqueue(1688785797);
		Var.isFull();
    }
    @Test
    public void test3144() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-1952081197);
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.toString();
		y.isFull();
    }
    @Test
    public void test3145() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test3146() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(-1635119251);
    }
    @Test
    public void test3147() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test3148() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(27306854);
		Var.enqueue(-1850050686);
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.enqueue(-477084139);
		Var.toString();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test3149() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test3150() {
		Queue y = new Queue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.dequeue();
		y.dequeue();
		y.enqueue(-968458166);
		y.dequeue();
		y.enqueue(1999520171);
		y.isEmpty();
    }
    @Test
    public void test3151() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test3152() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1653788963);
		variable.enqueue(-1547131593);
		variable.enqueue(2096862019);
		assertEquals("[2096862019]", variable.toString());
		variable.enqueue(862041347);
		variable.isEmpty();
    }
    @Test
    public void test3153() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(1129623831);
		assertFalse(z.isEmpty());
		assertEquals("[1129623831]", z.toString());
		z.isFull();
		z.enqueue(952175314);
		z.dequeue();
		assertEquals("[952175314]", z.toString());
		assertEquals("[952175314]", z.toString());
		assertFalse(z.isEmpty());
		z.dequeue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test3154() {
		Queue variable = new Queue();
		variable.enqueue(-428468710);
		variable.enqueue(1338258184);
		assertEquals(1338258184, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test3155() {
		Queue y = new Queue();
		y.enqueue(1838933729);
		y.enqueue(1547600337);
		y.enqueue(826290554);
		y.dequeue();
		assertEquals("[1547600337, 826290554]", y.toString());
		y.isFull();
		y.dequeue();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test3156() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.dequeue();
		x.toString();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.enqueue(1639546055);
		assertFalse(x.isFull());
		assertEquals("[1639546055]", x.toString());
		assertEquals("[1639546055]", x.toString());
		x.toString();
		assertFalse(x.isFull());
		x.toString();
		x.toString();
		assertEquals(1639546055, x.dequeue());
		x.enqueue(-725530012);
    }
    @Test
    public void test3157() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.dequeue();
		y.enqueue(-1668052342);
		y.dequeue();
		assertTrue(y.isEmpty());
		y.toString();
		y.enqueue(-2049886877);
    }
    @Test
    public void test3158() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-1234945030);
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isEmpty();
		x.enqueue(173644851);
    }
    @Test
    public void test3159() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-2105657431);
		y.enqueue(257312462);
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(184117499);
		y.isFull();
		y.isEmpty();
		y.enqueue(1035232543);
    }
    @Test
    public void test3160() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-1484922664);
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.enqueue(927488381);
		Var.enqueue(-7466581);
		Var.dequeue();
		Var.enqueue(-1324584608);
		Var.enqueue(2126130427);
		Var.toString();
    }
    @Test
    public void test3161() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.toString();
    }
    @Test
    public void test3162() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(-660543993);
    }
    @Test
    public void test3163() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.toString();
		Var.dequeue();
		Var.enqueue(-1091944221);
		assertTrue(Var.isEmpty());
		Var.enqueue(539189784);
    }
    @Test
    public void test3164() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.enqueue(-1969648460);
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test3165() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(105541679);
		variable.isFull();
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test3166() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(73113376);
		assertEquals("[73113376]", y.toString());
		y.isEmpty();
		assertFalse(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test3167() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.enqueue(1583427555);
		z.dequeue();
		assertTrue(z.isEmpty());
		z.toString();
		z.isEmpty();
		z.isFull();
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test3168() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(-1373958214);
		z.enqueue(-384891348);
		z.dequeue();
		assertEquals("[]", z.toString());
		z.toString();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(-530704302);
		z.toString();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.isFull();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test3169() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(861827764);
		Var.dequeue();
		Var.enqueue(1306933052);
		Var.isFull();
    }
    @Test
    public void test3170() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-2140294252);
		Var.isEmpty();
    }
    @Test
    public void test3171() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.toString();
		x.toString();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test3172() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test3173() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(-1332240);
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test3174() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.toString();
    }
    @Test
    public void test3175() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(1261301295);
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(-1374181197);
		y.toString();
    }
    @Test
    public void test3176() {
		Queue x = new Queue();
		x.enqueue(-1354782318);
		x.isFull();
		x.enqueue(-848894821);
		x.isFull();
    }
    @Test
    public void test3177() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(1667427544);
    }
    @Test
    public void test3178() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		Var.isFull();
		Var.toString();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1757678741);
		Var.toString();
    }
    @Test
    public void test3179() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.isEmpty();
		z.dequeue();
		z.enqueue(1483085793);
		z.isFull();
    }
    @Test
    public void test3180() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(-420120955);
		z.dequeue();
		z.dequeue();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test3181() {
		Queue variable = new Queue();
		variable.enqueue(-649880130);
		variable.toString();
		variable.isFull();
		variable.toString();
		variable.enqueue(-1032626000);
		variable.enqueue(1142320959);
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test3182() {
		Queue Var = new Queue();
		Var.enqueue(-1481833497);
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isFull();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test3183() {
		Queue variable = new Queue();
		variable.enqueue(-1085575782);
		variable.enqueue(-1727701033);
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test3184() {
		Queue z = new Queue();
		z.toString();
		assertTrue(z.isEmpty());
		z.toString();
		z.dequeue();
		z.dequeue();
		assertFalse(z.isFull());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isFull();
		z.toString();
    }
    @Test
    public void test3185() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test3186() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(1130809930);
		variable.isFull();
		assertEquals("[1130809930]", variable.toString());
		variable.toString();
		variable.isFull();
		variable.toString();
		assertFalse(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		assertFalse(variable.isEmpty());
		assertEquals(1130809930, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test3187() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test3188() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test3189() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(398549854);
		variable.isFull();
    }
    @Test
    public void test3190() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.toString();
		x.dequeue();
		x.enqueue(-409945477);
    }
    @Test
    public void test3191() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test3192() {
		Queue y = new Queue();
		y.enqueue(-1273604779);
		y.isEmpty();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test3193() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-1933908723);
		z.isEmpty();
		z.isEmpty();
		z.toString();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.dequeue();
    }
    @Test
    public void test3194() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertFalse(x.isFull());
		x.toString();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test3195() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.enqueue(-966244399);
		Var.isEmpty();
    }
    @Test
    public void test3196() {
		Queue z = new Queue();
		z.enqueue(-1589013);
		z.dequeue();
    }
    @Test
    public void test3197() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(760584603);
		assertFalse(z.isFull());
		z.isEmpty();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test3198() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.toString();
		x.enqueue(-1040120813);
		x.isFull();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.dequeue();
		x.enqueue(-981041247);
    }
    @Test
    public void test3199() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test3200() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test3201() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertFalse(Var.isFull());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test3202() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.toString();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test3203() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.enqueue(-704762587);
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.enqueue(1371547940);
		x.enqueue(357098627);
		x.enqueue(1653583624);
		x.enqueue(-1366108861);
		x.isFull();
    }
    @Test
    public void test3204() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(-963850909);
		assertEquals(-1, y.dequeue());
		y.toString();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.enqueue(-1263594244);
		y.isEmpty();
    }
    @Test
    public void test3205() {
		Queue Var = new Queue();
		Var.enqueue(2061946829);
		assertFalse(Var.isFull());
		Var.enqueue(-347578917);
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test3206() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.dequeue();
		x.enqueue(923514495);
		x.toString();
		x.toString();
		assertEquals(923514495, x.dequeue());
		assertEquals("[]", x.toString());
		x.isFull();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test3207() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test3208() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(465523581);
		Var.enqueue(-824351123);
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-891532831);
    }
    @Test
    public void test3209() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test3210() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.isFull();
		x.isFull();
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.enqueue(1390498322);
    }
    @Test
    public void test3211() {
		Queue y = new Queue();
		y.enqueue(-468272996);
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.toString();
		assertTrue(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test3212() {
		Queue y = new Queue();
		y.enqueue(-1688735102);
		y.dequeue();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.toString();
		y.enqueue(-1852614508);
		y.toString();
		y.toString();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(-1376148866);
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.toString();
    }
    @Test
    public void test3213() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.isFull();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test3214() {
		Queue z = new Queue();
		z.enqueue(-92250599);
		z.enqueue(1502365167);
    }
    @Test
    public void test3215() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.isFull();
    }
    @Test
    public void test3216() {
		Queue y = new Queue();
		y.enqueue(-1888172123);
		assertEquals("[]", y.toString());
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		y.isFull();
		y.dequeue();
		y.isFull();
		y.enqueue(892478613);
    }
    @Test
    public void test3217() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.dequeue();
		y.toString();
		y.enqueue(450336187);
		y.dequeue();
		y.toString();
    }
    @Test
    public void test3218() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-1255969477);
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-356584000);
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test3219() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.enqueue(-1559488168);
		z.isFull();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test3220() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1972059462);
		assertEquals("[]", Var.toString());
		Var.enqueue(-137234544);
		Var.toString();
		Var.enqueue(953277600);
		assertEquals("[953277600]", Var.toString());
		assertEquals(953277600, Var.dequeue());
		Var.dequeue();
		Var.enqueue(-1682114535);
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test3221() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test3222() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.enqueue(563696172);
		z.enqueue(-330347101);
		z.toString();
    }
    @Test
    public void test3223() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1810157304);
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test3224() {
		Queue z = new Queue();
		z.toString();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(-438181029);
		z.toString();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(347087371);
		z.isFull();
		z.isEmpty();
		assertEquals(347087371, z.dequeue());
		z.toString();
    }
    @Test
    public void test3225() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.toString();
		x.enqueue(803497631);
		x.enqueue(-1116463990);
		x.enqueue(-1989291707);
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test3226() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test3227() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.toString();
		x.enqueue(-679931569);
		x.dequeue();
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test3228() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.enqueue(839911854);
		variable.enqueue(-192417002);
    }
    @Test
    public void test3229() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isFull();
		variable.enqueue(-1861920854);
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test3230() {
		Queue x = new Queue();
		x.enqueue(-993229646);
		assertTrue(x.isEmpty());
		x.dequeue();
		x.toString();
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
		x.enqueue(-596811123);
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test3231() {
		Queue x = new Queue();
		x.isFull();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.isFull();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isEmpty();
		assertFalse(x.isFull());
		x.toString();
		assertEquals(-1, x.dequeue());
		x.toString();
    }
    @Test
    public void test3232() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(271124354);
    }
    @Test
    public void test3233() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		Var.dequeue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1426534375);
		Var.dequeue();
    }
    @Test
    public void test3234() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(661382533);
		variable.enqueue(-1689767196);
		assertFalse(variable.isFull());
		variable.enqueue(560049995);
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test3235() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(469887506);
		variable.dequeue();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(274009933);
    }
    @Test
    public void test3236() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test3237() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.enqueue(-748691776);
    }
    @Test
    public void test3238() {
		Queue z = new Queue();
		z.enqueue(-872549693);
		assertEquals("[]", z.toString());
		z.dequeue();
    }
    @Test
    public void test3239() {
		Queue Var = new Queue();
		Var.enqueue(-933172536);
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test3240() {
		Queue z = new Queue();
		z.enqueue(472510769);
		z.toString();
    }
    @Test
    public void test3241() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.enqueue(-347737601);
		assertFalse(variable.isFull());
		variable.enqueue(-1213586404);
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.toString();
		variable.enqueue(1829178451);
		variable.enqueue(1267840219);
    }
    @Test
    public void test3242() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(617996779);
		assertFalse(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test3243() {
		Queue y = new Queue();
		y.enqueue(1737599585);
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		assertEquals(1737599585, y.dequeue());
		y.enqueue(-149668896);
    }
    @Test
    public void test3244() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.dequeue();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test3245() {
		Queue variable = new Queue();
		variable.enqueue(2086026176);
		variable.enqueue(1679260821);
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		variable.toString();
		assertEquals("[2086026176, 1679260821]", variable.toString());
		variable.enqueue(1767812516);
		variable.isFull();
    }
    @Test
    public void test3246() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test3247() {
		Queue Var = new Queue();
		Var.enqueue(-2142852296);
		Var.toString();
		Var.isFull();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test3248() {
		Queue x = new Queue();
		x.enqueue(172284112);
		x.enqueue(914885684);
		x.isFull();
		x.isFull();
    }
    @Test
    public void test3249() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(995126922);
		z.toString();
		z.enqueue(1163712980);
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		assertEquals("[1163712980]", z.toString());
		z.enqueue(176087871);
    }
    @Test
    public void test3250() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.isFull();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.enqueue(465406839);
		z.enqueue(-1771559078);
		z.dequeue();
		z.enqueue(1236898270);
		z.isEmpty();
		assertEquals("[1236898270]", z.toString());
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test3251() {
		Queue z = new Queue();
		z.isFull();
		assertEquals("[]", z.toString());
		z.enqueue(627989925);
		z.dequeue();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.enqueue(1996825674);
		assertEquals(1996825674, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(2023890974);
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test3252() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(562503641);
		x.isEmpty();
		x.enqueue(-1150142145);
		x.dequeue();
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(1844439709);
		x.toString();
    }
    @Test
    public void test3253() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.isFull();
		x.isFull();
		x.toString();
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test3254() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-644946216);
		z.toString();
		z.toString();
		z.dequeue();
		z.enqueue(-1886797409);
    }
    @Test
    public void test3255() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-256133489);
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(1309808420);
		assertEquals("[1309808420]", z.toString());
		assertEquals("[1309808420]", z.toString());
		z.dequeue();
    }
    @Test
    public void test3256() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test3257() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test3258() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test3259() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(-1499733332);
		y.isEmpty();
		y.enqueue(-871214857);
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.enqueue(1449272819);
    }
    @Test
    public void test3260() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test3261() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(1197487256);
    }
    @Test
    public void test3262() {
		Queue variable = new Queue();
		variable.enqueue(-1570631776);
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test3263() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test3264() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(-830631140);
		y.enqueue(849520031);
    }
    @Test
    public void test3265() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-165591265);
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		variable.enqueue(-782183505);
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test3266() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.enqueue(-67076132);
    }
    @Test
    public void test3267() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(1328143822);
		z.isFull();
		z.enqueue(100828567);
		z.isFull();
		z.isFull();
		z.isEmpty();
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test3268() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.enqueue(-1696270729);
		Var.enqueue(-1660683192);
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
    }
    @Test
    public void test3269() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(-1837398288);
		z.dequeue();
		z.dequeue();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test3270() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.toString();
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(1569019756);
		x.toString();
		x.enqueue(39596007);
		x.enqueue(-1811827818);
		x.toString();
		x.toString();
		assertEquals(1569019756, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test3271() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.enqueue(-639542928);
		assertEquals("[]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test3272() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test3273() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test3274() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test3275() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isFull();
		y.enqueue(-662910540);
		y.isEmpty();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test3276() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isFull();
		variable.isFull();
		variable.enqueue(1989730196);
		assertFalse(variable.isFull());
		variable.isFull();
		assertFalse(variable.isFull());
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(1959464863);
    }
    @Test
    public void test3277() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(82444065);
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test3278() {
		Queue Var = new Queue();
		Var.enqueue(1028219533);
		Var.enqueue(-1732032199);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(199463049);
		Var.dequeue();
    }
    @Test
    public void test3279() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(1543216752);
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test3280() {
		Queue y = new Queue();
		y.enqueue(-1238100046);
		y.enqueue(-1284126434);
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.isFull();
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test3281() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test3282() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(-608185951);
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.toString();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test3283() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test3284() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.enqueue(1795346693);
    }
    @Test
    public void test3285() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test3286() {
		Queue Var = new Queue();
		Var.enqueue(1416228320);
    }
    @Test
    public void test3287() {
		Queue Var = new Queue();
		Var.enqueue(1823358288);
		assertFalse(Var.isEmpty());
		Var.enqueue(1847283688);
		Var.isFull();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test3288() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(-521198775);
		z.enqueue(-1176841819);
		z.enqueue(-1385603773);
		z.enqueue(-742610943);
    }
    @Test
    public void test3289() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.toString();
		assertEquals("[]", x.toString());
		x.isEmpty();
    }
    @Test
    public void test3290() {
		Queue variable = new Queue();
		variable.enqueue(-544460047);
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(58700485);
		assertEquals("[58700485]", variable.toString());
		variable.dequeue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(1253828217);
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test3291() {
		Queue y = new Queue();
		y.toString();
		assertFalse(y.isFull());
		y.toString();
		y.dequeue();
		y.enqueue(-188297904);
		y.toString();
		y.toString();
    }
    @Test
    public void test3292() {
		Queue z = new Queue();
		z.toString();
		assertFalse(z.isFull());
		z.isFull();
		z.dequeue();
		z.isFull();
		z.toString();
		assertEquals("[]", z.toString());
		z.dequeue();
    }
    @Test
    public void test3293() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(4877218);
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test3294() {
		Queue y = new Queue();
		y.enqueue(316587486);
    }
    @Test
    public void test3295() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isFull();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test3296() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(2128627799);
		assertFalse(z.isEmpty());
		assertEquals("[2128627799]", z.toString());
		z.toString();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-2056380025);
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test3297() {
		Queue z = new Queue();
		z.enqueue(-2005843109);
		z.enqueue(93521052);
		z.toString();
		z.enqueue(208625272);
		z.enqueue(428320010);
		z.toString();
		z.dequeue();
		z.enqueue(757935721);
		z.isEmpty();
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test3298() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.toString();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.enqueue(-968891953);
		variable.enqueue(-2111526861);
		variable.enqueue(-2006129746);
		variable.toString();
    }
    @Test
    public void test3299() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(2101984850);
		assertFalse(z.isEmpty());
		z.enqueue(-2098870551);
		assertFalse(z.isEmpty());
		z.toString();
		z.enqueue(540341208);
		z.isEmpty();
		z.enqueue(676818223);
		assertEquals("[2101984850, 540341208, 676818223]", z.toString());
		assertEquals("[2101984850, 540341208, 676818223]", z.toString());
		assertFalse(z.isEmpty());
		z.dequeue();
		z.enqueue(1291247616);
    }
    @Test
    public void test3300() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(-876678947);
		Var.toString();
    }
    @Test
    public void test3301() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(-1998779065);
    }
    @Test
    public void test3302() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.isEmpty();
		y.enqueue(-1970341252);
		y.enqueue(1185261689);
		y.dequeue();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test3303() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test3304() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(-1664735012);
		y.dequeue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test3305() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-520360400);
    }
    @Test
    public void test3306() {
		Queue x = new Queue();
		x.enqueue(-1773908550);
		x.isFull();
		x.dequeue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(821167380);
    }
    @Test
    public void test3307() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(662261826);
		y.isFull();
    }
    @Test
    public void test3308() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.enqueue(1631368062);
    }
    @Test
    public void test3309() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(621532103);
    }
    @Test
    public void test3310() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.toString();
		Var.enqueue(-291080088);
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(1910720725);
		assertEquals("[1910720725]", Var.toString());
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		Var.enqueue(-2070485175);
		assertFalse(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test3311() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test3312() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(-560121518);
    }
    @Test
    public void test3313() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1097780284);
    }
    @Test
    public void test3314() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isFull();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.toString();
		x.dequeue();
		x.enqueue(1171383745);
		x.toString();
		x.isEmpty();
		assertEquals(1171383745, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test3315() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
		y.isFull();
		y.enqueue(-507465227);
		y.toString();
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test3316() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-1572179140);
		Var.toString();
    }
    @Test
    public void test3317() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.dequeue();
		Var.toString();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(213329638);
    }
    @Test
    public void test3318() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test3319() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-1465746456);
		y.enqueue(-218108027);
		y.toString();
    }
    @Test
    public void test3320() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.dequeue();
		z.isEmpty();
		z.enqueue(1690997735);
		z.isFull();
		assertFalse(z.isEmpty());
		z.enqueue(1967349654);
		z.isFull();
		z.enqueue(-1030088219);
		z.isEmpty();
    }
    @Test
    public void test3321() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(-789187926);
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(831417344);
		variable.isFull();
		variable.enqueue(-150223594);
		assertEquals(831417344, variable.dequeue());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test3322() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.dequeue();
		assertTrue(z.isEmpty());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test3323() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test3324() {
		Queue z = new Queue();
		z.enqueue(-2081126798);
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(1248483406);
		z.toString();
    }
    @Test
    public void test3325() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.dequeue();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.isFull();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test3326() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(1812174199);
		assertEquals("[1812174199]", y.toString());
		y.enqueue(-1854548212);
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test3327() {
		Queue variable = new Queue();
		variable.enqueue(-1494343200);
		variable.toString();
		variable.enqueue(1777209149);
		variable.isFull();
		assertEquals("[1777209149]", variable.toString());
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(-168059846);
		variable.dequeue();
    }
    @Test
    public void test3328() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test3329() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test3330() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-1779875086);
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(2011285414);
		z.enqueue(-2051582958);
		z.isEmpty();
    }
    @Test
    public void test3331() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.dequeue();
		y.enqueue(405854396);
		y.isEmpty();
    }
    @Test
    public void test3332() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test3333() {
		Queue z = new Queue();
		z.enqueue(1247991621);
		assertEquals(1247991621, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test3334() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.toString();
		variable.enqueue(817975931);
		variable.isFull();
		variable.toString();
		assertEquals(817975931, variable.dequeue());
		variable.enqueue(1699661129);
		assertEquals(1699661129, variable.dequeue());
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.enqueue(-85162656);
		variable.toString();
    }
    @Test
    public void test3335() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.enqueue(2130331009);
		y.dequeue();
		y.toString();
		y.toString();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test3336() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(-1104371123);
		variable.isFull();
		variable.dequeue();
		variable.toString();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test3337() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test3338() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.enqueue(-733340295);
		y.isFull();
		y.toString();
    }
    @Test
    public void test3339() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-784735704);
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test3340() {
		Queue Var = new Queue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(1751048732);
		Var.toString();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test3341() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(1031351202);
		x.isEmpty();
		assertFalse(x.isFull());
		x.toString();
		x.isFull();
		assertFalse(x.isEmpty());
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(-201166993);
		x.enqueue(764945026);
    }
    @Test
    public void test3342() {
		Queue variable = new Queue();
		variable.enqueue(-2143554182);
		variable.toString();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-1223973811);
    }
    @Test
    public void test3343() {
		Queue z = new Queue();
		z.enqueue(439081133);
		z.toString();
    }
    @Test
    public void test3344() {
		Queue x = new Queue();
		x.enqueue(37027807);
		x.enqueue(730689076);
		x.enqueue(1307939488);
		x.isEmpty();
		assertFalse(x.isEmpty());
		assertFalse(x.isEmpty());
		x.enqueue(1427487689);
		assertEquals("[37027807, 730689076, 1307939488, 1427487689]", x.toString());
		x.isFull();
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test3345() {
		Queue z = new Queue();
		z.enqueue(426713763);
		z.toString();
		z.isFull();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test3346() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.enqueue(115130949);
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		variable.toString();
		variable.enqueue(683538728);
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertEquals(115130949, variable.dequeue());
		variable.isFull();
		variable.enqueue(-1559557454);
    }
    @Test
    public void test3347() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(2008196146);
		z.enqueue(-176050541);
		z.dequeue();
		z.enqueue(-25433197);
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isFull();
    }
    @Test
    public void test3348() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test3349() {
		Queue y = new Queue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isFull();
		y.enqueue(-38823272);
		y.dequeue();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.isFull();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.isFull();
		y.isFull();
		y.toString();
    }
    @Test
    public void test3350() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		z.enqueue(539299509);
    }
    @Test
    public void test3351() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-150452944);
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.toString();
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test3352() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(-422569421);
		y.enqueue(-1222866208);
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		y.toString();
		y.enqueue(795308909);
    }
    @Test
    public void test3353() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test3354() {
		Queue Var = new Queue();
		Var.enqueue(1805279034);
		Var.isEmpty();
		assertEquals(1805279034, Var.dequeue());
		Var.enqueue(1486075001);
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test3355() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1413169328);
		z.enqueue(881024964);
		z.dequeue();
		z.isFull();
		z.enqueue(943343999);
		z.isEmpty();
    }
    @Test
    public void test3356() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(492462704);
		assertFalse(variable.isEmpty());
		assertEquals("[492462704]", variable.toString());
		assertEquals(492462704, variable.dequeue());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.enqueue(-1627002108);
    }
    @Test
    public void test3357() {
		Queue x = new Queue();
		x.enqueue(1062231029);
    }
    @Test
    public void test3358() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test3359() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.enqueue(707279727);
		Var.toString();
		Var.isFull();
		Var.dequeue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.enqueue(486942205);
    }
    @Test
    public void test3360() {
		Queue variable = new Queue();
		variable.enqueue(-1255414895);
    }
    @Test
    public void test3361() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(981912197);
		variable.dequeue();
		variable.enqueue(-1994773590);
    }
    @Test
    public void test3362() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.enqueue(804115657);
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test3363() {
		Queue variable = new Queue();
		variable.enqueue(-1305132143);
		variable.enqueue(221439658);
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(1395807984);
		assertEquals("[1395807984]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test3364() {
		Queue x = new Queue();
		x.enqueue(-399730183);
		assertTrue(x.isEmpty());
		x.isFull();
		x.isFull();
		x.dequeue();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(715344278);
		assertEquals("[715344278]", x.toString());
		assertEquals(715344278, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test3365() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.enqueue(1913833320);
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(940200891);
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test3366() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1972299235);
		variable.toString();
    }
    @Test
    public void test3367() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(284447353);
		Var.enqueue(780877140);
		Var.isEmpty();
		assertEquals("[284447353, 780877140]", Var.toString());
		Var.isEmpty();
		assertEquals(284447353, Var.dequeue());
		Var.enqueue(520276591);
		Var.enqueue(2039967782);
		Var.dequeue();
		Var.isFull();
		Var.enqueue(1580053788);
    }
    @Test
    public void test3368() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test3369() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.enqueue(-1216446112);
		Var.isEmpty();
		Var.enqueue(959474837);
		assertEquals(959474837, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test3370() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-395633154);
		assertEquals(-1, z.dequeue());
		z.enqueue(1151132222);
		z.isEmpty();
		z.toString();
		z.enqueue(1683711430);
		z.enqueue(1595055199);
		z.isEmpty();
		z.enqueue(-1241686964);
    }
    @Test
    public void test3371() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-1719122711);
		variable.enqueue(770708125);
		variable.enqueue(1541693897);
		variable.isEmpty();
		variable.isFull();
		assertEquals(770708125, variable.dequeue());
		variable.dequeue();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test3372() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.enqueue(410742985);
		z.dequeue();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test3373() {
		Queue y = new Queue();
		y.enqueue(1365196091);
		y.toString();
		assertEquals("[1365196091]", y.toString());
		y.toString();
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.enqueue(430973865);
		y.dequeue();
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test3374() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1037152827);
		assertEquals("[]", Var.toString());
		Var.enqueue(-890346533);
		assertEquals("[]", Var.toString());
		Var.enqueue(1136955558);
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test3375() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test3376() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.toString();
		x.toString();
		x.isEmpty();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isFull();
		x.toString();
		x.isFull();
		x.enqueue(-425883459);
    }
    @Test
    public void test3377() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.enqueue(-490706036);
		x.toString();
		x.enqueue(2055880640);
		x.enqueue(1815215854);
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test3378() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(-2055005003);
		Var.isFull();
    }
    @Test
    public void test3379() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(-2097991968);
		variable.dequeue();
    }
    @Test
    public void test3380() {
		Queue y = new Queue();
		y.enqueue(972978102);
		assertEquals("[972978102]", y.toString());
		assertFalse(y.isEmpty());
		y.isFull();
		y.enqueue(386800659);
    }
    @Test
    public void test3381() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.dequeue();
		z.isFull();
		z.enqueue(1063152878);
		z.isEmpty();
		z.enqueue(-475547428);
		z.isEmpty();
		z.enqueue(1658455637);
		z.isEmpty();
    }
    @Test
    public void test3382() {
		Queue z = new Queue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isFull();
		z.dequeue();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isFull();
    }
    @Test
    public void test3383() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test3384() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.enqueue(1333053220);
		z.isFull();
		z.isEmpty();
		z.enqueue(1839805378);
		z.isEmpty();
    }
    @Test
    public void test3385() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.dequeue();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(1506222273);
		x.isEmpty();
		assertFalse(x.isFull());
		assertEquals(1506222273, x.dequeue());
		x.enqueue(880489380);
		x.isFull();
    }
    @Test
    public void test3386() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(-30305039);
		y.enqueue(1948763939);
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test3387() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.toString();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.enqueue(178520365);
		Var.dequeue();
    }
    @Test
    public void test3388() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(839357528);
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		z.toString();
		z.enqueue(476609205);
		z.isFull();
		assertEquals("[476609205]", z.toString());
		assertEquals("[476609205]", z.toString());
		z.enqueue(5174929);
    }
    @Test
    public void test3389() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test3390() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1411946575);
		assertEquals("[]", variable.toString());
		variable.enqueue(-1463626594);
		variable.toString();
    }
    @Test
    public void test3391() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.enqueue(1994535257);
		variable.isFull();
    }
    @Test
    public void test3392() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test3393() {
		Queue Var = new Queue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(-1870302831);
		Var.enqueue(121506684);
		Var.dequeue();
		Var.enqueue(801668060);
    }
    @Test
    public void test3394() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test3395() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(2093126174);
    }
    @Test
    public void test3396() {
		Queue z = new Queue();
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(392515687);
    }
    @Test
    public void test3397() {
		Queue x = new Queue();
		x.enqueue(332547358);
		assertEquals("[332547358]", x.toString());
		x.dequeue();
		x.toString();
		x.dequeue();
		x.enqueue(147331112);
		x.enqueue(-753023137);
		x.enqueue(-457218116);
    }
    @Test
    public void test3398() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.enqueue(76294236);
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test3399() {
		Queue z = new Queue();
		z.enqueue(-420007824);
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.enqueue(77738688);
		z.enqueue(2104385321);
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test3400() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.toString();
		variable.toString();
		variable.toString();
		variable.toString();
		variable.enqueue(1909077740);
		assertFalse(variable.isFull());
		variable.enqueue(1716720304);
		variable.isFull();
    }
    @Test
    public void test3401() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(1258284961);
		assertFalse(variable.isEmpty());
		variable.enqueue(-1603397914);
		variable.enqueue(-1085733948);
		variable.dequeue();
    }
    @Test
    public void test3402() {
		Queue y = new Queue();
		y.enqueue(-404484713);
		y.dequeue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.enqueue(-1532783334);
		y.isFull();
    }
    @Test
    public void test3403() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.toString();
		variable.toString();
		variable.isFull();
		variable.toString();
		variable.enqueue(-1373457271);
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test3404() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.enqueue(2123844283);
		assertFalse(y.isEmpty());
		y.toString();
		y.enqueue(-1497782104);
    }
    @Test
    public void test3405() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(642417442);
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test3406() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isFull();
		z.enqueue(-1927301385);
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test3407() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test3408() {
		Queue variable = new Queue();
		variable.enqueue(720754300);
		variable.enqueue(-467174261);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test3409() {
		Queue y = new Queue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isFull();
		y.isFull();
		y.isFull();
		y.toString();
		y.isFull();
    }
    @Test
    public void test3410() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test3411() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(895255219);
		y.enqueue(-1070421396);
		y.isEmpty();
		y.enqueue(1100111342);
		assertEquals("[895255219, 1100111342]", y.toString());
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test3412() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test3413() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-1751025934);
		assertEquals("[]", x.toString());
		x.enqueue(-1323020266);
    }
    @Test
    public void test3414() {
		Queue x = new Queue();
		x.enqueue(1539826031);
		x.enqueue(-1414402616);
		x.toString();
		assertFalse(x.isFull());
		x.dequeue();
		assertFalse(x.isFull());
		x.dequeue();
		x.enqueue(-798830915);
		x.toString();
		x.toString();
    }
    @Test
    public void test3415() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(-1713343896);
		variable.dequeue();
    }
    @Test
    public void test3416() {
		Queue variable = new Queue();
		variable.enqueue(-2115821793);
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1033744492);
		assertEquals(1033744492, variable.dequeue());
		variable.enqueue(2128726938);
		variable.isEmpty();
    }
    @Test
    public void test3417() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(1519073846);
    }
    @Test
    public void test3418() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test3419() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.isEmpty();
		z.toString();
		z.isFull();
		assertEquals("[]", z.toString());
		z.enqueue(1975928297);
    }
    @Test
    public void test3420() {
		Queue y = new Queue();
		y.enqueue(-715993150);
		assertTrue(y.isEmpty());
		y.enqueue(-844184704);
		y.isEmpty();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isFull();
		y.enqueue(-368780599);
		assertFalse(y.isFull());
		y.isEmpty();
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(617614643);
    }
    @Test
    public void test3421() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-2034050192);
    }
    @Test
    public void test3422() {
		Queue x = new Queue();
		x.enqueue(-77089691);
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test3423() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-713987999);
		z.enqueue(-1362696249);
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.enqueue(-393561063);
		z.enqueue(-49004420);
    }
    @Test
    public void test3424() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(-950224656);
		variable.toString();
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test3425() {
		Queue Var = new Queue();
		Var.enqueue(1663692032);
		Var.isEmpty();
		Var.toString();
		Var.enqueue(1476079717);
		Var.dequeue();
    }
    @Test
    public void test3426() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isEmpty();
		z.toString();
		z.toString();
		z.enqueue(-802442932);
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.toString();
		z.enqueue(-1655442760);
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test3427() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(915712104);
		y.toString();
		assertEquals(915712104, y.dequeue());
		y.enqueue(1933234104);
		y.isFull();
		y.isFull();
    }
    @Test
    public void test3428() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.enqueue(-2029264066);
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(-528238654);
    }
    @Test
    public void test3429() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-1393292950);
		Var.toString();
		Var.enqueue(-1594416266);
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test3430() {
		Queue x = new Queue();
		x.enqueue(-2072392482);
		x.enqueue(596587620);
		assertFalse(x.isEmpty());
		x.isEmpty();
		x.enqueue(69431400);
		x.enqueue(-1793374780);
    }
    @Test
    public void test3431() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
		x.dequeue();
		x.enqueue(-1782969005);
		x.isEmpty();
    }
    @Test
    public void test3432() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test3433() {
		Queue Var = new Queue();
		Var.enqueue(-1329140025);
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test3434() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.enqueue(-1523678792);
		y.enqueue(-381991968);
		y.dequeue();
    }
    @Test
    public void test3435() {
		Queue y = new Queue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.toString();
		y.isEmpty();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.toString();
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(301831579);
		y.dequeue();
    }
    @Test
    public void test3436() {
		Queue y = new Queue();
		y.enqueue(-1214801131);
		y.dequeue();
		y.toString();
		y.isFull();
		y.enqueue(-657231679);
		y.isEmpty();
		y.isEmpty();
		y.enqueue(937077530);
		assertEquals(937077530, y.dequeue());
		y.isFull();
    }
    @Test
    public void test3437() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
    }
    @Test
    public void test3438() {
		Queue z = new Queue();
		z.enqueue(1604085544);
		assertEquals("[1604085544]", z.toString());
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test3439() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(862475016);
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(-1935741731);
		x.isEmpty();
		assertFalse(x.isEmpty());
		x.toString();
		x.toString();
    }
    @Test
    public void test3440() {
		Queue y = new Queue();
		y.enqueue(238307050);
		assertFalse(y.isFull());
		y.isEmpty();
		y.toString();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test3441() {
		Queue y = new Queue();
		y.enqueue(1760653199);
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
		y.dequeue();
		y.dequeue();
		y.toString();
		assertFalse(y.isFull());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(387635706);
		assertFalse(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test3442() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(1866276994);
		variable.enqueue(-2032865745);
		assertFalse(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test3443() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test3444() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test3445() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-47946188);
		variable.isFull();
		variable.enqueue(-1636766548);
		variable.isFull();
		variable.enqueue(484050574);
		variable.enqueue(1141559748);
		variable.enqueue(-1928785215);
    }
    @Test
    public void test3446() {
		Queue y = new Queue();
		y.enqueue(298084867);
		y.isFull();
		assertFalse(y.isEmpty());
		assertEquals("[298084867]", y.toString());
		y.toString();
		y.isFull();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test3447() {
		Queue x = new Queue();
		x.enqueue(-328896910);
		x.toString();
		x.dequeue();
    }
    @Test
    public void test3448() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.enqueue(-1077659864);
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.enqueue(-1716461615);
    }
    @Test
    public void test3449() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.toString();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.toString();
    }
    @Test
    public void test3450() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.toString();
		variable.enqueue(-1951324614);
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test3451() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.isFull();
		assertEquals("[]", x.toString());
		x.toString();
		x.toString();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.enqueue(1031326335);
    }
    @Test
    public void test3452() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.toString();
		y.enqueue(916982126);
		assertEquals("[916982126]", y.toString());
		y.enqueue(-1862905879);
		y.toString();
		y.toString();
		y.enqueue(148246147);
		assertEquals("[916982126, 148246147]", y.toString());
		y.enqueue(739607675);
		y.enqueue(591379300);
		assertEquals(916982126, y.dequeue());
		assertFalse(y.isEmpty());
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test3453() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test3454() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isFull();
		z.toString();
		z.enqueue(-831542187);
		z.isEmpty();
		z.enqueue(-306105164);
    }
    @Test
    public void test3455() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test3456() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.enqueue(1393743016);
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test3457() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test3458() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test3459() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test3460() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.enqueue(-1412695249);
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(272558890);
		variable.toString();
		variable.enqueue(1462005728);
		assertEquals(272558890, variable.dequeue());
		variable.toString();
    }
    @Test
    public void test3461() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(767653532);
		Var.enqueue(43486073);
		Var.enqueue(-39580119);
    }
    @Test
    public void test3462() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test3463() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.dequeue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(-700989216);
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test3464() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test3465() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.toString();
		x.enqueue(1662224018);
		x.isEmpty();
		x.enqueue(305092981);
		assertEquals(1662224018, x.dequeue());
		x.enqueue(-813611155);
		x.enqueue(210676838);
		x.isEmpty();
    }
    @Test
    public void test3466() {
		Queue z = new Queue();
		z.enqueue(-2121792009);
		z.dequeue();
		z.dequeue();
		z.enqueue(988099009);
		assertFalse(z.isEmpty());
		z.enqueue(-807510426);
		z.isFull();
		z.toString();
		z.toString();
    }
    @Test
    public void test3467() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1732925158);
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test3468() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-412988129);
		Var.enqueue(1991243683);
		Var.isEmpty();
    }
    @Test
    public void test3469() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.enqueue(-1657498096);
		assertTrue(z.isEmpty());
		z.enqueue(-4308285);
		z.toString();
		z.isEmpty();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test3470() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test3471() {
		Queue Var = new Queue();
		Var.enqueue(2066818185);
		assertFalse(Var.isEmpty());
		Var.isEmpty();
		Var.enqueue(-973013946);
		Var.isFull();
		assertFalse(Var.isEmpty());
		assertFalse(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test3472() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(1359829394);
		Var.isFull();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test3473() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.enqueue(221079852);
		z.enqueue(1785235505);
		z.toString();
		assertFalse(z.isFull());
		z.isFull();
		z.dequeue();
		z.dequeue();
		z.dequeue();
		z.enqueue(-1473419724);
    }
    @Test
    public void test3474() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(70989191);
    }
    @Test
    public void test3475() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.dequeue();
    }
    @Test
    public void test3476() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.toString();
		y.toString();
		y.isFull();
		assertTrue(y.isEmpty());
		y.enqueue(-1891524172);
		y.enqueue(593757117);
		y.enqueue(-1051179741);
		assertEquals(593757117, y.dequeue());
		y.enqueue(714043035);
		y.enqueue(165167396);
    }
    @Test
    public void test3477() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-1090420020);
		x.isEmpty();
		x.isFull();
		assertEquals("[]", x.toString());
		x.enqueue(-1852821207);
		assertTrue(x.isEmpty());
		x.enqueue(1178381830);
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test3478() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test3479() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-1346221681);
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test3480() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test3481() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(298430929);
		assertFalse(x.isFull());
		assertEquals("[298430929]", x.toString());
		x.isFull();
    }
    @Test
    public void test3482() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.toString();
		z.enqueue(2094979071);
		z.isEmpty();
		z.enqueue(929570985);
    }
    @Test
    public void test3483() {
		Queue z = new Queue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.toString();
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(1673999481);
		z.dequeue();
    }
    @Test
    public void test3484() {
		Queue y = new Queue();
		y.enqueue(-684684739);
		y.toString();
		assertTrue(y.isEmpty());
		y.toString();
		y.isFull();
		y.enqueue(-984230894);
		y.isEmpty();
		y.enqueue(81416198);
		y.isFull();
		assertFalse(y.isFull());
		assertFalse(y.isEmpty());
		y.enqueue(-516624261);
		y.dequeue();
    }
    @Test
    public void test3485() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test3486() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(525022630);
		variable.dequeue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(2121376017);
		variable.enqueue(656539427);
    }
    @Test
    public void test3487() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(-844547408);
		y.isFull();
		assertEquals("[]", y.toString());
		y.toString();
		assertTrue(y.isEmpty());
		y.enqueue(1743346156);
		assertFalse(y.isEmpty());
		assertEquals("[1743346156]", y.toString());
		y.enqueue(-1553019881);
		y.toString();
		assertEquals("[1743346156]", y.toString());
		y.enqueue(-1694768903);
    }
    @Test
    public void test3488() {
		Queue y = new Queue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.enqueue(825338839);
		y.isEmpty();
		y.enqueue(597894757);
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test3489() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.enqueue(-1791555826);
		y.toString();
		y.isFull();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test3490() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(1729354695);
		x.enqueue(-1571457567);
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test3491() {
		Queue z = new Queue();
		z.dequeue();
		assertFalse(z.isFull());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(895616550);
		assertFalse(z.isEmpty());
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.enqueue(-1108784320);
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test3492() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.dequeue();
		variable.enqueue(425981646);
		assertFalse(variable.isEmpty());
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-55889997);
		variable.enqueue(-530918810);
    }
    @Test
    public void test3493() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isEmpty();
		y.isFull();
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test3494() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.toString();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test3495() {
		Queue y = new Queue();
		y.enqueue(-1184927967);
		y.toString();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test3496() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test3497() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test3498() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(730690011);
		x.dequeue();
    }
    @Test
    public void test3499() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(771043139);
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(699581725);
		assertEquals(699581725, variable.dequeue());
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test3500() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.enqueue(-1423304480);
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test3501() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.enqueue(-2129944333);
		Var.enqueue(1515058584);
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.isFull();
		Var.enqueue(1096671835);
    }
    @Test
    public void test3502() {
		Queue x = new Queue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.toString();
		x.isFull();
    }
    @Test
    public void test3503() {
		Queue z = new Queue();
		z.enqueue(841467835);
		z.isFull();
		assertFalse(z.isFull());
		z.enqueue(-139147796);
		assertFalse(z.isEmpty());
		assertEquals(841467835, z.dequeue());
		z.enqueue(1657394699);
		z.enqueue(-294643524);
		z.enqueue(-1171175495);
		assertFalse(z.isEmpty());
		assertEquals(1657394699, z.dequeue());
		z.enqueue(-2070663549);
		z.dequeue();
		z.toString();
    }
    @Test
    public void test3504() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(1445342967);
		variable.toString();
		variable.enqueue(-830492671);
		assertEquals(1445342967, variable.dequeue());
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test3505() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.enqueue(947447922);
    }
    @Test
    public void test3506() {
		Queue x = new Queue();
		x.enqueue(1984382069);
		x.dequeue();
		x.enqueue(753031638);
		assertFalse(x.isFull());
		x.toString();
		assertFalse(x.isEmpty());
		x.isFull();
		assertFalse(x.isFull());
		assertFalse(x.isEmpty());
		x.isFull();
		assertFalse(x.isEmpty());
		x.isFull();
		x.isFull();
    }
    @Test
    public void test3507() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.isFull();
		assertFalse(x.isFull());
		x.isFull();
		x.isFull();
		x.dequeue();
		x.enqueue(-2044391975);
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test3508() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(1141416671);
		Var.dequeue();
    }
    @Test
    public void test3509() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test3510() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.dequeue();
		x.enqueue(-540377121);
    }
    @Test
    public void test3511() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test3512() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(2128488727);
		y.isFull();
		y.toString();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(-930233697);
		y.isEmpty();
    }
    @Test
    public void test3513() {
		Queue Var = new Queue();
		Var.enqueue(1702517308);
		assertEquals(1702517308, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.enqueue(-592190917);
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test3514() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.dequeue();
		z.enqueue(-213326742);
		z.dequeue();
		z.dequeue();
		z.enqueue(1910429204);
    }
    @Test
    public void test3515() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		assertTrue(z.isEmpty());
		z.toString();
		z.dequeue();
		z.isFull();
		z.isFull();
		z.enqueue(-1173541042);
    }
    @Test
    public void test3516() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test3517() {
		Queue x = new Queue();
		x.isFull();
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
		x.isFull();
		x.isEmpty();
		x.enqueue(718454308);
		x.toString();
    }
    @Test
    public void test3518() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.toString();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(-1856248019);
		y.dequeue();
    }
    @Test
    public void test3519() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.enqueue(-297042565);
		Var.enqueue(-1915893551);
    }
    @Test
    public void test3520() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.toString();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test3521() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(913827764);
		Var.enqueue(-174009131);
		Var.enqueue(1900276360);
    }
    @Test
    public void test3522() {
		Queue variable = new Queue();
		variable.enqueue(667054020);
		assertEquals(667054020, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(669907552);
		variable.dequeue();
		variable.toString();
		variable.enqueue(-923299565);
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-1649503068);
    }
    @Test
    public void test3523() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(-1540382427);
		x.enqueue(1036319005);
		x.dequeue();
		x.enqueue(522196580);
		assertFalse(x.isEmpty());
		assertEquals(522196580, x.dequeue());
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test3524() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.toString();
		Var.enqueue(-1702567182);
    }
    @Test
    public void test3525() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.enqueue(-1750227054);
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test3526() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.enqueue(1301274566);
		x.isFull();
    }
    @Test
    public void test3527() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test3528() {
		Queue Var = new Queue();
		Var.enqueue(482705022);
		Var.enqueue(812067220);
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test3529() {
		Queue variable = new Queue();
		variable.enqueue(989053247);
		variable.enqueue(-1869944578);
		variable.isFull();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test3530() {
		Queue y = new Queue();
		y.enqueue(-1238957870);
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.dequeue();
		y.enqueue(704962799);
		y.dequeue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.toString();
		y.enqueue(53702955);
    }
    @Test
    public void test3531() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.toString();
		x.isFull();
		x.isEmpty();
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(171878992);
    }
    @Test
    public void test3532() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.enqueue(1820939574);
    }
    @Test
    public void test3533() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.isFull();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test3534() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test3535() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test3536() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.toString();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.enqueue(1164948016);
		y.isFull();
    }
    @Test
    public void test3537() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(296524436);
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.enqueue(-1817926802);
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(802875199);
    }
    @Test
    public void test3538() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1841315068);
		variable.toString();
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.toString();
    }
    @Test
    public void test3539() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test3540() {
		Queue z = new Queue();
		z.toString();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isEmpty();
		z.enqueue(-1047789040);
		assertTrue(z.isEmpty());
		z.isFull();
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test3541() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(342451301);
		x.enqueue(869209788);
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test3542() {
		Queue x = new Queue();
		x.enqueue(485046310);
		x.isFull();
		x.dequeue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
		x.toString();
    }
    @Test
    public void test3543() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test3544() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(1667834994);
		Var.isFull();
		Var.isFull();
		Var.enqueue(-1531567299);
		Var.enqueue(-412011069);
		assertEquals("[1667834994]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test3545() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-814597914);
    }
    @Test
    public void test3546() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(44170053);
		x.isFull();
		assertFalse(x.isEmpty());
		x.dequeue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.toString();
    }
    @Test
    public void test3547() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test3548() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test3549() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isFull();
		x.enqueue(18712161);
		assertEquals(18712161, x.dequeue());
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test3550() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
    }
    @Test
    public void test3551() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.enqueue(-1743544859);
    }
    @Test
    public void test3552() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(-1306895135);
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test3553() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test3554() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
		x.enqueue(-173282956);
		x.dequeue();
		x.enqueue(-1740175724);
		x.enqueue(-616758663);
    }
    @Test
    public void test3555() {
		Queue x = new Queue();
		x.isFull();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.enqueue(-2131337513);
		x.dequeue();
    }
    @Test
    public void test3556() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.toString();
		assertTrue(x.isEmpty());
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.enqueue(1216145461);
		x.enqueue(-870580077);
		assertEquals("[1216145461]", x.toString());
		assertFalse(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test3557() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(15518499);
		z.enqueue(-649191393);
		z.enqueue(-779062185);
		z.enqueue(-233640053);
		z.enqueue(1113949801);
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test3558() {
		Queue variable = new Queue();
		variable.enqueue(1233387358);
		variable.isEmpty();
		variable.toString();
		assertFalse(variable.isFull());
		variable.toString();
		assertEquals(1233387358, variable.dequeue());
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-557009993);
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test3559() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test3560() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.dequeue();
		Var.enqueue(401153740);
		assertEquals("[401153740]", Var.toString());
		Var.enqueue(-1264700191);
    }
    @Test
    public void test3561() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1726335976);
		variable.toString();
    }
    @Test
    public void test3562() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.toString();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test3563() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-568199094);
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.enqueue(-1284041231);
		variable.enqueue(1510814656);
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test3564() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(2143099587);
		variable.toString();
		variable.enqueue(-47942343);
    }
    @Test
    public void test3565() {
		Queue Var = new Queue();
		Var.enqueue(1648187498);
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test3566() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.toString();
		x.isEmpty();
		x.enqueue(-1547568117);
		x.dequeue();
		x.toString();
		x.isFull();
		x.toString();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test3567() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(1407544144);
    }
    @Test
    public void test3568() {
		Queue y = new Queue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(-173539694);
    }
    @Test
    public void test3569() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.dequeue();
		z.enqueue(-1623543352);
    }
    @Test
    public void test3570() {
		Queue y = new Queue();
		y.enqueue(924578040);
		y.isEmpty();
		y.isFull();
		y.dequeue();
		y.isFull();
		y.dequeue();
		y.enqueue(1753470458);
    }
    @Test
    public void test3571() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.toString();
		y.dequeue();
		y.enqueue(1621907826);
		assertEquals("[1621907826]", y.toString());
		y.isEmpty();
		y.toString();
		y.isEmpty();
		assertFalse(y.isFull());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.enqueue(687796934);
    }
    @Test
    public void test3572() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.toString();
		Var.enqueue(1911669494);
		Var.toString();
		Var.enqueue(-601012347);
		Var.dequeue();
    }
    @Test
    public void test3573() {
		Queue Var = new Queue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test3574() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test3575() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.enqueue(-1713805525);
		assertTrue(z.isEmpty());
		z.enqueue(-776389423);
		z.enqueue(-196381427);
		z.enqueue(805827109);
    }
    @Test
    public void test3576() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test3577() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.enqueue(-840422027);
    }
    @Test
    public void test3578() {
		Queue y = new Queue();
		y.toString();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
		y.enqueue(-814663563);
    }
    @Test
    public void test3579() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test3580() {
		Queue variable = new Queue();
		variable.enqueue(-1682577010);
		variable.dequeue();
		variable.enqueue(2058353567);
    }
    @Test
    public void test3581() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.enqueue(-401938260);
		x.isEmpty();
		x.enqueue(-533587460);
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test3582() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
    }
    @Test
    public void test3583() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-1170703638);
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(852754269);
    }
    @Test
    public void test3584() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.isFull();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isFull();
		x.toString();
    }
    @Test
    public void test3585() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(537194713);
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test3586() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.enqueue(-290574830);
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isFull();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-1124251959);
		x.dequeue();
    }
    @Test
    public void test3587() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.toString();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test3588() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(1108081345);
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test3589() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test3590() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.enqueue(-521769373);
		Var.dequeue();
		Var.enqueue(991544727);
    }
    @Test
    public void test3591() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test3592() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test3593() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test3594() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1050721613);
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(752837586);
    }
    @Test
    public void test3595() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-1570906563);
		Var.enqueue(1244427777);
		Var.enqueue(-1473648157);
    }
    @Test
    public void test3596() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test3597() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.enqueue(1109120856);
		assertFalse(x.isEmpty());
		x.enqueue(1148547324);
		x.enqueue(1462888929);
		x.enqueue(-71044318);
		x.dequeue();
		x.isFull();
		x.enqueue(1652840706);
    }
    @Test
    public void test3598() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test3599() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test3600() {
		Queue Var = new Queue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(1207138601);
		Var.isEmpty();
    }
    @Test
    public void test3601() {
		Queue variable = new Queue();
		variable.enqueue(-1005534377);
    }
    @Test
    public void test3602() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(2118346741);
		Var.enqueue(2138282457);
		Var.enqueue(-777423125);
		assertFalse(Var.isFull());
		Var.toString();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test3603() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test3604() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1376770857);
		variable.isEmpty();
		variable.enqueue(-1490586774);
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test3605() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test3606() {
		Queue y = new Queue();
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(-1485327615);
		y.isFull();
		y.isEmpty();
		y.toString();
		y.enqueue(2092478805);
		assertEquals("[2092478805]", y.toString());
		y.toString();
		y.dequeue();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test3607() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(1972171727);
		assertEquals(1972171727, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.enqueue(1194073443);
		x.enqueue(1184706855);
		x.isFull();
		assertEquals("[1194073443, 1184706855]", x.toString());
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(-488487388);
    }
    @Test
    public void test3608() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isFull();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(-1790456902);
    }
    @Test
    public void test3609() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isFull();
		x.dequeue();
		x.enqueue(1556825595);
		assertFalse(x.isFull());
		x.enqueue(-1826589766);
		x.isFull();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test3610() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.dequeue();
		z.enqueue(1634610175);
		z.enqueue(-1703861296);
		assertEquals(1634610175, z.dequeue());
		z.toString();
		z.isFull();
		z.isFull();
		z.toString();
    }
    @Test
    public void test3611() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.dequeue();
		x.toString();
		x.enqueue(-97640573);
    }
    @Test
    public void test3612() {
		Queue z = new Queue();
		z.enqueue(-1402233749);
		z.enqueue(842203764);
    }
    @Test
    public void test3613() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test3614() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.dequeue();
		x.enqueue(-628180743);
		x.isFull();
    }
    @Test
    public void test3615() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isFull();
		z.enqueue(-1476314838);
		z.enqueue(1493282558);
		z.isFull();
    }
    @Test
    public void test3616() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test3617() {
		Queue x = new Queue();
		x.enqueue(-977688030);
    }
    @Test
    public void test3618() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(501805305);
    }
    @Test
    public void test3619() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test3620() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-503353074);
		variable.isEmpty();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(1853177698);
		variable.isFull();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test3621() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-575278657);
    }
    @Test
    public void test3622() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test3623() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.toString();
		variable.dequeue();
		variable.toString();
		variable.enqueue(649076928);
		variable.enqueue(1818175463);
    }
    @Test
    public void test3624() {
		Queue y = new Queue();
		y.dequeue();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.enqueue(-1324268111);
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isFull();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.toString();
		y.isFull();
    }
    @Test
    public void test3625() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(1895535855);
		z.toString();
		z.toString();
    }
    @Test
    public void test3626() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.enqueue(-599216969);
		y.enqueue(417621957);
		y.enqueue(-1553066823);
		y.isFull();
    }
    @Test
    public void test3627() {
		Queue variable = new Queue();
		variable.enqueue(1375583644);
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		variable.dequeue();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.enqueue(-609537981);
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test3628() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-739882731);
		assertTrue(variable.isEmpty());
		variable.enqueue(-665252475);
		variable.enqueue(-173995782);
		variable.isFull();
		variable.enqueue(-978199536);
    }
    @Test
    public void test3629() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(590122314);
    }
    @Test
    public void test3630() {
		Queue Var = new Queue();
		Var.enqueue(2084691426);
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(1044107470);
		Var.enqueue(-77774550);
		assertEquals(2084691426, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test3631() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-2011395108);
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.enqueue(-892122342);
		variable.dequeue();
    }
    @Test
    public void test3632() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		variable.toString();
		variable.enqueue(1895613321);
    }
    @Test
    public void test3633() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(1352104483);
		variable.dequeue();
		variable.enqueue(-1356700584);
		variable.enqueue(1872260200);
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(1633098574);
		variable.toString();
		variable.isFull();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test3634() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test3635() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(-1769200845);
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test3636() {
		Queue Var = new Queue();
		Var.enqueue(1740370613);
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(1525581507);
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test3637() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test3638() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test3639() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test3640() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.toString();
		assertEquals("[]", x.toString());
		x.isFull();
		assertTrue(x.isEmpty());
		x.toString();
		x.toString();
		x.isEmpty();
		x.enqueue(2029441915);
		assertEquals(2029441915, x.dequeue());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test3641() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1231915112);
		variable.toString();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.enqueue(-390453534);
		variable.isEmpty();
    }
    @Test
    public void test3642() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test3643() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(1289825279);
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(569124519);
		variable.dequeue();
    }
    @Test
    public void test3644() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(917362606);
		Var.isFull();
		assertFalse(Var.isFull());
		assertEquals(917362606, Var.dequeue());
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test3645() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test3646() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.enqueue(-137193917);
		assertEquals(-1, y.dequeue());
		y.toString();
		y.toString();
		y.dequeue();
		y.dequeue();
		y.enqueue(-888811723);
    }
    @Test
    public void test3647() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		variable.enqueue(-404959922);
		variable.isFull();
    }
    @Test
    public void test3648() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.enqueue(1127522365);
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(-1311903651);
		variable.enqueue(1484710477);
		variable.dequeue();
    }
    @Test
    public void test3649() {
		Queue z = new Queue();
		z.enqueue(-1441994425);
		assertEquals("[]", z.toString());
		z.enqueue(-130457029);
		z.dequeue();
		z.enqueue(-1824750390);
		z.dequeue();
    }
    @Test
    public void test3650() {
		Queue variable = new Queue();
		variable.enqueue(-329371206);
    }
    @Test
    public void test3651() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(-769777249);
		assertFalse(y.isFull());
		y.isEmpty();
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.toString();
		y.enqueue(1085077483);
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test3652() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test3653() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test3654() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-675379394);
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(1657166837);
		assertFalse(variable.isEmpty());
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(-378700620);
    }
    @Test
    public void test3655() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(1145965384);
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.toString();
    }
    @Test
    public void test3656() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test3657() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isFull();
		assertTrue(z.isEmpty());
		z.enqueue(-1825499354);
    }
    @Test
    public void test3658() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
		y.enqueue(-933162787);
    }
    @Test
    public void test3659() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test3660() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.enqueue(1758215419);
		z.enqueue(-929971706);
    }
    @Test
    public void test3661() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test3662() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test3663() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(136876211);
		assertEquals("[136876211]", variable.toString());
		variable.toString();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-966721929);
    }
    @Test
    public void test3664() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-48100203);
    }
    @Test
    public void test3665() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test3666() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test3667() {
		Queue variable = new Queue();
		variable.enqueue(-1874376627);
		assertEquals("[]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test3668() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-2049666845);
    }
    @Test
    public void test3669() {
		Queue Var = new Queue();
		Var.enqueue(-888519097);
    }
    @Test
    public void test3670() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test3671() {
		Queue Var = new Queue();
		Var.enqueue(-1610515843);
		Var.enqueue(1143851855);
		Var.enqueue(2017015936);
		Var.isFull();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test3672() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(180676426);
		Var.isEmpty();
		assertEquals("[180676426]", Var.toString());
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test3673() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.enqueue(-923414507);
		assertFalse(x.isFull());
		x.toString();
		x.isFull();
    }
    @Test
    public void test3674() {
		Queue y = new Queue();
		y.enqueue(2091889631);
		y.toString();
		y.enqueue(-1512827104);
		y.isEmpty();
		y.isFull();
		y.enqueue(-2061350218);
		y.enqueue(37809727);
		y.toString();
		y.toString();
    }
    @Test
    public void test3675() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-139442975);
    }
    @Test
    public void test3676() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test3677() {
		Queue variable = new Queue();
		variable.enqueue(2108202526);
		variable.toString();
		assertFalse(variable.isEmpty());
		variable.isFull();
		variable.enqueue(-502052610);
		variable.enqueue(186649704);
		assertFalse(variable.isFull());
		variable.isFull();
		assertFalse(variable.isFull());
		assertFalse(variable.isEmpty());
		assertEquals(2108202526, variable.dequeue());
		variable.toString();
		assertFalse(variable.isEmpty());
		assertEquals(186649704, variable.dequeue());
		variable.enqueue(1051179155);
    }
    @Test
    public void test3678() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1880926467);
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test3679() {
		Queue x = new Queue();
		x.enqueue(-818088242);
		x.enqueue(-1398824791);
		x.isFull();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isFull();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(-50049625);
		x.dequeue();
    }
    @Test
    public void test3680() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test3681() {
		Queue y = new Queue();
		y.enqueue(-1560379204);
		y.toString();
		y.dequeue();
		y.enqueue(1319702777);
		y.enqueue(-129922728);
		y.toString();
		y.toString();
		assertEquals(1319702777, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test3682() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.enqueue(-39891219);
		y.isEmpty();
    }
    @Test
    public void test3683() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(1481585563);
		x.dequeue();
		x.enqueue(-1070665749);
		x.isEmpty();
		x.toString();
		x.isFull();
    }
    @Test
    public void test3684() {
		Queue y = new Queue();
		y.enqueue(694601360);
		y.isFull();
		y.enqueue(273738713);
		y.dequeue();
		y.enqueue(-916264568);
		assertEquals(273738713, y.dequeue());
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(-1323083798);
		y.enqueue(92671039);
    }
    @Test
    public void test3685() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test3686() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.toString();
		y.toString();
		y.enqueue(-1769773671);
		assertFalse(y.isFull());
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test3687() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test3688() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(1216957331);
		assertEquals(1216957331, variable.dequeue());
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-1824470983);
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test3689() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
    }
    @Test
    public void test3690() {
		Queue variable = new Queue();
		variable.enqueue(-322166514);
		variable.enqueue(1054224816);
		variable.dequeue();
		variable.enqueue(-1820235540);
		variable.enqueue(712593758);
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test3691() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.enqueue(1808699996);
		variable.isFull();
		assertEquals(1808699996, variable.dequeue());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-511457911);
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(-1162028196);
		assertEquals(-1, variable.dequeue());
		variable.enqueue(183822180);
		variable.isFull();
		assertEquals("[183822180]", variable.toString());
		variable.toString();
    }
    @Test
    public void test3692() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.isFull();
		Var.enqueue(-702130043);
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(-356500458);
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test3693() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		assertFalse(x.isFull());
		x.isEmpty();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(669762723);
		x.isEmpty();
		assertFalse(x.isEmpty());
		x.dequeue();
		x.enqueue(-1353440392);
		x.isEmpty();
    }
    @Test
    public void test3694() {
		Queue y = new Queue();
		y.enqueue(1612949362);
		y.isFull();
		assertEquals("[1612949362]", y.toString());
		y.enqueue(899192535);
		y.enqueue(320984391);
		y.isEmpty();
		y.toString();
		assertEquals("[1612949362, 899192535, 320984391]", y.toString());
		y.toString();
    }
    @Test
    public void test3695() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test3696() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(-175672738);
		x.enqueue(1568374843);
		assertEquals("[1568374843]", x.toString());
		x.toString();
		x.enqueue(109311312);
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test3697() {
		Queue y = new Queue();
		y.enqueue(-2136640552);
		assertTrue(y.isEmpty());
		y.isFull();
		y.isEmpty();
		y.enqueue(-784494039);
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test3698() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.enqueue(-1467808196);
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test3699() {
		Queue y = new Queue();
		y.enqueue(854771408);
		y.enqueue(1920283164);
		y.enqueue(-556950987);
		assertEquals(854771408, y.dequeue());
		y.isFull();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.enqueue(-1717528648);
		y.toString();
    }
    @Test
    public void test3700() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(-1684153635);
		x.toString();
    }
    @Test
    public void test3701() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.enqueue(840113218);
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.enqueue(-865404148);
		Var.dequeue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.enqueue(2104563321);
		Var.enqueue(2126149754);
    }
    @Test
    public void test3702() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-357442398);
		x.isFull();
		assertEquals("[]", x.toString());
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(670633493);
		assertEquals("[670633493]", x.toString());
		assertFalse(x.isEmpty());
		x.isFull();
		x.toString();
		x.toString();
    }
    @Test
    public void test3703() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test3704() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test3705() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isFull();
		x.toString();
		x.enqueue(-15847017);
		x.isFull();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test3706() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test3707() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test3708() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isFull();
		Var.enqueue(-1260733271);
    }
    @Test
    public void test3709() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test3710() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(400868140);
		assertFalse(y.isFull());
		y.toString();
		assertFalse(y.isFull());
		y.dequeue();
		y.isFull();
		y.enqueue(778404067);
		y.isEmpty();
		y.enqueue(-1895831491);
		assertEquals(778404067, y.dequeue());
		y.toString();
    }
    @Test
    public void test3711() {
		Queue z = new Queue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isEmpty();
		z.enqueue(-2035431607);
		z.enqueue(564967646);
		z.isFull();
		z.enqueue(934466578);
		z.enqueue(1375890111);
		z.enqueue(1660925112);
		assertFalse(z.isEmpty());
		z.toString();
    }
    @Test
    public void test3712() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
    }
    @Test
    public void test3713() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(168187301);
		Var.isEmpty();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.toString();
		assertEquals(168187301, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test3714() {
		Queue y = new Queue();
		y.toString();
		assertTrue(y.isEmpty());
		y.dequeue();
    }
    @Test
    public void test3715() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(56598456);
		assertEquals("[56598456]", x.toString());
		x.isEmpty();
    }
    @Test
    public void test3716() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.isFull();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
		x.toString();
    }
    @Test
    public void test3717() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(1485565649);
		assertEquals(1485565649, x.dequeue());
		x.toString();
		x.enqueue(-361444673);
		x.toString();
		x.dequeue();
    }
    @Test
    public void test3718() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(1631046941);
		variable.enqueue(-1575842348);
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(1507434976);
    }
    @Test
    public void test3719() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		assertTrue(y.isEmpty());
		y.toString();
		y.dequeue();
		y.enqueue(-264304763);
		y.dequeue();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test3720() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.enqueue(1180711660);
		assertEquals("[1180711660]", x.toString());
		x.dequeue();
		x.enqueue(-2003331756);
    }
    @Test
    public void test3721() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.enqueue(757663757);
		y.enqueue(611992988);
		assertEquals("[757663757, 611992988]", y.toString());
		assertFalse(y.isEmpty());
		y.toString();
		assertEquals("[757663757, 611992988]", y.toString());
		y.dequeue();
		y.enqueue(-671415937);
		assertEquals("[611992988]", y.toString());
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test3722() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(88586489);
		x.isEmpty();
		assertEquals(88586489, x.dequeue());
		x.toString();
		x.enqueue(-1130000464);
    }
    @Test
    public void test3723() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.toString();
		x.enqueue(1023105913);
		x.dequeue();
		x.isFull();
		x.enqueue(-344468016);
		x.dequeue();
    }
    @Test
    public void test3724() {
		Queue variable = new Queue();
		variable.enqueue(57239558);
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.toString();
		variable.toString();
		variable.dequeue();
		variable.enqueue(1044184925);
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(658788207);
		variable.enqueue(1846760461);
    }
    @Test
    public void test3725() {
		Queue y = new Queue();
		y.enqueue(-2024009467);
		assertFalse(y.isFull());
		y.isEmpty();
		y.isFull();
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(1621301255);
		assertFalse(y.isFull());
		y.enqueue(-290365792);
		y.isFull();
    }
    @Test
    public void test3726() {
		Queue z = new Queue();
		z.enqueue(-890508870);
		z.enqueue(567394891);
		z.enqueue(-1429419710);
		z.toString();
		z.isEmpty();
		z.enqueue(-1928403143);
		z.enqueue(-1676014411);
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test3727() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(258065898);
		variable.enqueue(-1434790039);
		variable.isFull();
		assertEquals("[258065898]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test3728() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isFull();
		y.enqueue(-119943556);
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test3729() {
		Queue z = new Queue();
		z.enqueue(1721788784);
		z.isFull();
		z.toString();
		z.dequeue();
		z.toString();
		z.isFull();
		z.enqueue(-1521275715);
    }
    @Test
    public void test3730() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.enqueue(126242185);
		x.isEmpty();
    }
    @Test
    public void test3731() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.toString();
		z.enqueue(288585428);
		z.isFull();
    }
    @Test
    public void test3732() {
		Queue y = new Queue();
		y.enqueue(1756410103);
		y.enqueue(-553456359);
		y.toString();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.enqueue(-1307671490);
		y.enqueue(-122147895);
    }
    @Test
    public void test3733() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-1001676576);
		Var.isEmpty();
    }
    @Test
    public void test3734() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test3735() {
		Queue x = new Queue();
		x.enqueue(1365516521);
		assertEquals(1365516521, x.dequeue());
		assertEquals("[]", x.toString());
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test3736() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-232605931);
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test3737() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		Var.enqueue(-1221994474);
		Var.enqueue(-332852367);
		Var.enqueue(-1049577979);
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test3738() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.dequeue();
		z.dequeue();
		z.isFull();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.enqueue(769119707);
    }
    @Test
    public void test3739() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-742706656);
		y.isFull();
		y.enqueue(-37912627);
    }
    @Test
    public void test3740() {
		Queue Var = new Queue();
		Var.enqueue(678713653);
		Var.dequeue();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(-204755500);
		Var.toString();
    }
    @Test
    public void test3741() {
		Queue Var = new Queue();
		Var.enqueue(2067502173);
		Var.isFull();
		Var.enqueue(1775306011);
		Var.isFull();
		Var.dequeue();
		assertFalse(Var.isFull());
		assertEquals("[1775306011]", Var.toString());
		Var.toString();
		Var.toString();
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test3742() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1689296395);
    }
    @Test
    public void test3743() {
		Queue x = new Queue();
		x.isFull();
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(-1335982851);
		x.isEmpty();
    }
    @Test
    public void test3744() {
		Queue x = new Queue();
		x.toString();
		x.toString();
    }
    @Test
    public void test3745() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-1884437771);
		x.isFull();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.enqueue(1816855882);
		x.toString();
    }
    @Test
    public void test3746() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(-1532665812);
		x.toString();
		x.enqueue(-1240442318);
		x.isFull();
		x.dequeue();
		x.enqueue(1553383482);
		x.isFull();
		assertEquals("[1553383482]", x.toString());
		x.enqueue(-1286173202);
		x.enqueue(-1901087315);
		x.isFull();
    }
    @Test
    public void test3747() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		x.enqueue(832924801);
    }
    @Test
    public void test3748() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.toString();
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.toString();
    }
    @Test
    public void test3749() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isFull();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.isEmpty();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.isFull();
		x.dequeue();
		x.enqueue(-1524179313);
		assertFalse(x.isFull());
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test3750() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.enqueue(-817292898);
		variable.isEmpty();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(1113322055);
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test3751() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(-347065516);
		z.isFull();
		z.toString();
    }
    @Test
    public void test3752() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.dequeue();
		z.dequeue();
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test3753() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test3754() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.isFull();
		x.toString();
		x.enqueue(-2091390618);
		assertFalse(x.isFull());
		x.isFull();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.enqueue(-326176540);
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test3755() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(23096254);
		Var.isFull();
		Var.dequeue();
		Var.enqueue(178565208);
    }
    @Test
    public void test3756() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test3757() {
		Queue Var = new Queue();
		Var.enqueue(433794899);
		Var.isEmpty();
		Var.enqueue(298954343);
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		assertEquals("[298954343]", Var.toString());
		assertFalse(Var.isFull());
		Var.enqueue(-1281822626);
    }
    @Test
    public void test3758() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test3759() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test3760() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(-1718624647);
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test3761() {
		Queue y = new Queue();
		y.enqueue(-644282116);
		y.enqueue(1463566771);
		y.toString();
    }
    @Test
    public void test3762() {
		Queue variable = new Queue();
		variable.enqueue(-65660643);
		variable.enqueue(838696554);
		variable.isFull();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test3763() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(68515231);
		assertFalse(z.isFull());
		z.enqueue(-1703943531);
		z.enqueue(-519269560);
		z.isFull();
		z.toString();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test3764() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(159969138);
		assertEquals("[159969138]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test3765() {
		Queue y = new Queue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isFull();
		y.isFull();
		y.enqueue(141115975);
    }
    @Test
    public void test3766() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.enqueue(1068207098);
		Var.isFull();
		Var.enqueue(-1498830414);
		Var.isFull();
    }
    @Test
    public void test3767() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test3768() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.enqueue(1068890475);
    }
    @Test
    public void test3769() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-2092206117);
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.enqueue(-1414042619);
		variable.isEmpty();
		variable.enqueue(1432950306);
		variable.isEmpty();
    }
    @Test
    public void test3770() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test3771() {
		Queue z = new Queue();
		z.enqueue(-1353837974);
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test3772() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.enqueue(409217403);
		z.isFull();
		z.enqueue(1436408754);
		z.enqueue(-183644003);
    }
    @Test
    public void test3773() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.enqueue(-592079026);
		z.toString();
		z.dequeue();
		z.enqueue(1219933886);
		z.toString();
		z.dequeue();
    }
    @Test
    public void test3774() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(864031522);
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test3775() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-2094501031);
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.toString();
		x.toString();
    }
    @Test
    public void test3776() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(1134138703);
		x.isEmpty();
		x.dequeue();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.toString();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test3777() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-1666590611);
    }
    @Test
    public void test3778() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-1480960519);
		z.isFull();
		assertTrue(z.isEmpty());
		z.toString();
		assertEquals("[]", z.toString());
		z.toString();
		z.isEmpty();
		z.isFull();
		assertFalse(z.isFull());
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test3779() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.enqueue(434455349);
		variable.toString();
		variable.enqueue(1828499892);
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(930944199);
		variable.isFull();
    }
    @Test
    public void test3780() {
		Queue x = new Queue();
		x.enqueue(338425336);
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(2081612100);
		x.dequeue();
		x.enqueue(-1107363056);
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(-2113847007);
    }
    @Test
    public void test3781() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test3782() {
		Queue x = new Queue();
		x.enqueue(-190735428);
		x.enqueue(1547341701);
		x.isFull();
		assertEquals(1547341701, x.dequeue());
		x.isEmpty();
		x.enqueue(463777857);
		x.toString();
		assertFalse(x.isEmpty());
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test3783() {
		Queue Var = new Queue();
		Var.enqueue(-774132504);
		Var.isEmpty();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(1034078611);
		assertEquals(1034078611, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test3784() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(989128866);
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isEmpty();
		z.enqueue(1481138333);
    }
    @Test
    public void test3785() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test3786() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.enqueue(2069285366);
    }
    @Test
    public void test3787() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.enqueue(-1029890665);
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.enqueue(-2138372803);
		Var.isEmpty();
		Var.enqueue(109569268);
		assertFalse(Var.isFull());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(1327538785);
		assertEquals(1327538785, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test3788() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(535726212);
		x.toString();
		assertEquals(535726212, x.dequeue());
		x.enqueue(59009759);
    }
    @Test
    public void test3789() {
		Queue y = new Queue();
		y.enqueue(-321571331);
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test3790() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test3791() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(1907276154);
		variable.enqueue(555163877);
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test3792() {
		Queue z = new Queue();
		z.enqueue(414261068);
		assertEquals(414261068, z.dequeue());
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test3793() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.isFull();
		x.toString();
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(2014236744);
    }
    @Test
    public void test3794() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.enqueue(1193368760);
		y.isEmpty();
		y.enqueue(-1856150730);
		y.isFull();
		y.isFull();
		assertFalse(y.isEmpty());
		y.dequeue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test3795() {
		Queue z = new Queue();
		z.dequeue();
		assertFalse(z.isFull());
		z.toString();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.toString();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(-2011011482);
		z.enqueue(-169540606);
		z.dequeue();
		z.toString();
		z.toString();
    }
    @Test
    public void test3796() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test3797() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test3798() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(1630113617);
		variable.isEmpty();
		assertEquals("[1630113617]", variable.toString());
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test3799() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(601607310);
		x.dequeue();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.toString();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(1035528349);
    }
    @Test
    public void test3800() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(2071116966);
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test3801() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
		x.enqueue(865068633);
    }
    @Test
    public void test3802() {
		Queue variable = new Queue();
		variable.enqueue(-522527417);
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(-145633447);
		variable.enqueue(-420702842);
		assertFalse(variable.isFull());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1711399312);
    }
    @Test
    public void test3803() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test3804() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(1422921933);
    }
    @Test
    public void test3805() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-271002758);
    }
    @Test
    public void test3806() {
		Queue Var = new Queue();
		Var.enqueue(2014382556);
    }
    @Test
    public void test3807() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-134139866);
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.enqueue(1636962149);
		variable.enqueue(1876053415);
    }
    @Test
    public void test3808() {
		Queue Var = new Queue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-190465580);
    }
    @Test
    public void test3809() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.enqueue(-782405296);
		y.enqueue(-2143541662);
		y.dequeue();
		y.enqueue(-1984044609);
		y.isEmpty();
    }
    @Test
    public void test3810() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test3811() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test3812() {
		Queue Var = new Queue();
		Var.enqueue(-132112732);
		Var.isFull();
		Var.toString();
		Var.enqueue(-479675013);
		Var.enqueue(336260103);
    }
    @Test
    public void test3813() {
		Queue Var = new Queue();
		Var.enqueue(-1310777162);
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.enqueue(-748476442);
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.enqueue(-1790867798);
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test3814() {
		Queue Var = new Queue();
		Var.enqueue(-1702362998);
		Var.isEmpty();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1975476871);
		Var.isEmpty();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test3815() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
		y.isFull();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test3816() {
		Queue y = new Queue();
		y.enqueue(262504028);
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.enqueue(1388750983);
		y.dequeue();
		assertEquals(1388750983, y.dequeue());
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test3817() {
		Queue z = new Queue();
		z.toString();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		z.isFull();
		assertEquals("[]", z.toString());
		z.toString();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test3818() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test3819() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test3820() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(-1817667722);
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.enqueue(-893925435);
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.enqueue(1024661509);
		z.enqueue(566132674);
		z.toString();
		z.enqueue(-1535958730);
		z.isEmpty();
		assertEquals("[1024661509, 566132674]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test3821() {
		Queue Var = new Queue();
		Var.enqueue(1501671150);
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test3822() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(-1347007341);
		Var.isFull();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(1777840269);
		Var.isFull();
		assertEquals("[1777840269]", Var.toString());
		assertFalse(Var.isFull());
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test3823() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(-64523731);
		x.toString();
		x.isFull();
		x.enqueue(1883117162);
		assertFalse(x.isEmpty());
		x.toString();
		assertEquals("[1883117162]", x.toString());
		x.dequeue();
		x.toString();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test3824() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test3825() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(-692490080);
    }
    @Test
    public void test3826() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.enqueue(-1448853298);
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.enqueue(-114750741);
		assertEquals("[]", x.toString());
		x.dequeue();
		x.enqueue(-2007234179);
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(-186246679);
    }
    @Test
    public void test3827() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.toString();
		x.enqueue(33185173);
		x.isFull();
    }
    @Test
    public void test3828() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-302437782);
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(894080729);
		Var.enqueue(266621701);
		Var.enqueue(1745048372);
    }
    @Test
    public void test3829() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(1288966977);
		x.isEmpty();
    }
    @Test
    public void test3830() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test3831() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(1565136809);
		y.isFull();
		assertEquals(1565136809, y.dequeue());
		assertTrue(y.isEmpty());
		y.enqueue(-1500983785);
		y.enqueue(965239482);
		assertFalse(y.isEmpty());
		y.dequeue();
    }
    @Test
    public void test3832() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(1102618998);
    }
    @Test
    public void test3833() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test3834() {
		Queue variable = new Queue();
		variable.enqueue(1727553994);
		assertEquals(1727553994, variable.dequeue());
		variable.isFull();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.enqueue(1586243463);
		assertEquals("[1586243463]", variable.toString());
		variable.enqueue(2111619013);
		variable.dequeue();
		assertFalse(variable.isEmpty());
		assertFalse(variable.isFull());
		assertEquals("[2111619013]", variable.toString());
		assertEquals("[2111619013]", variable.toString());
		variable.isEmpty();
		variable.enqueue(560689226);
		variable.toString();
    }
    @Test
    public void test3835() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-404530149);
		assertTrue(x.isEmpty());
		x.enqueue(1190147735);
		assertEquals(1190147735, x.dequeue());
		x.enqueue(-331348768);
		x.isEmpty();
		x.enqueue(-1030369446);
    }
    @Test
    public void test3836() {
		Queue x = new Queue();
		x.enqueue(-1000266337);
		x.enqueue(339071462);
		x.enqueue(692311931);
		x.isEmpty();
		x.toString();
		x.enqueue(-97800867);
    }
    @Test
    public void test3837() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.enqueue(1686038259);
		Var.isEmpty();
		assertEquals("[1686038259]", Var.toString());
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test3838() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(-568174312);
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test3839() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test3840() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-425976543);
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-2109976993);
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test3841() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.isFull();
		y.isEmpty();
		y.toString();
		y.dequeue();
		y.enqueue(693802969);
    }
    @Test
    public void test3842() {
		Queue variable = new Queue();
		variable.enqueue(-1500770761);
		variable.enqueue(-643837534);
		variable.toString();
		variable.enqueue(1520895783);
		variable.dequeue();
    }
    @Test
    public void test3843() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.toString();
		Var.dequeue();
		Var.enqueue(1720258391);
		Var.dequeue();
    }
    @Test
    public void test3844() {
		Queue variable = new Queue();
		variable.enqueue(-38574856);
    }
    @Test
    public void test3845() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test3846() {
		Queue Var = new Queue();
		Var.enqueue(-455356715);
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test3847() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.toString();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(216441259);
    }
    @Test
    public void test3848() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.isFull();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(-1983792659);
    }
    @Test
    public void test3849() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.enqueue(1800538271);
		Var.toString();
		assertFalse(Var.isEmpty());
		assertFalse(Var.isEmpty());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test3850() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isFull();
		x.enqueue(-1037872436);
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test3851() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.enqueue(335045660);
		x.isFull();
		assertEquals("[335045660]", x.toString());
		x.isFull();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test3852() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1923026717);
    }
    @Test
    public void test3853() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test3854() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		assertFalse(x.isFull());
		x.toString();
		x.isFull();
		x.isFull();
		x.enqueue(-1294209849);
		x.isFull();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test3855() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test3856() {
		Queue z = new Queue();
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.enqueue(-838705281);
		assertEquals(-1, z.dequeue());
		z.isFull();
		assertTrue(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test3857() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test3858() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(623390843);
		Var.enqueue(1277362250);
		Var.enqueue(-569768350);
		Var.toString();
    }
    @Test
    public void test3859() {
		Queue y = new Queue();
		y.enqueue(-848778500);
		y.isEmpty();
    }
    @Test
    public void test3860() {
		Queue Var = new Queue();
		Var.enqueue(-569455918);
		assertEquals("[]", Var.toString());
		Var.enqueue(1192964912);
		assertEquals(1192964912, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test3861() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.enqueue(552262585);
		x.enqueue(-1277755495);
		x.dequeue();
		x.enqueue(546681319);
		x.toString();
		assertFalse(x.isEmpty());
		x.isFull();
		x.toString();
    }
    @Test
    public void test3862() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test3863() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertFalse(y.isFull());
		y.isFull();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test3864() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test3865() {
		Queue Var = new Queue();
		Var.enqueue(-112067470);
    }
    @Test
    public void test3866() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(-426540282);
		y.toString();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isEmpty();
		y.isFull();
		y.isFull();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.dequeue();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test3867() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(696240302);
		assertFalse(variable.isFull());
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.enqueue(-1026054595);
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test3868() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.isFull();
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(-657090502);
		y.toString();
		y.enqueue(-602301296);
    }
    @Test
    public void test3869() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test3870() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(1492741696);
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
		x.isEmpty();
		x.enqueue(-1119029853);
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.enqueue(-2060776985);
    }
    @Test
    public void test3871() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test3872() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test3873() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test3874() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
    }
    @Test
    public void test3875() {
		Queue z = new Queue();
		z.enqueue(1127757166);
		z.isEmpty();
		z.toString();
		z.isFull();
		z.enqueue(-2104881395);
		z.enqueue(-1158913670);
    }
    @Test
    public void test3876() {
		Queue z = new Queue();
		z.enqueue(236007876);
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(-1199836399);
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test3877() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.enqueue(1019253042);
		assertEquals(1019253042, Var.dequeue());
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test3878() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.enqueue(812943047);
		y.enqueue(-1573666722);
		y.enqueue(745524428);
		assertFalse(y.isFull());
		y.isEmpty();
		y.isFull();
		assertEquals(812943047, y.dequeue());
		y.isEmpty();
		assertEquals(745524428, y.dequeue());
		y.toString();
    }
    @Test
    public void test3879() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.enqueue(1237469868);
    }
    @Test
    public void test3880() {
		Queue z = new Queue();
		z.enqueue(19873608);
		z.toString();
		z.enqueue(1905171859);
		assertFalse(z.isFull());
		assertFalse(z.isEmpty());
		z.isFull();
		assertFalse(z.isFull());
		z.isFull();
		z.isEmpty();
		z.isFull();
		z.enqueue(-2130203299);
    }
    @Test
    public void test3881() {
		Queue Var = new Queue();
		Var.enqueue(-1889870085);
		Var.enqueue(-442243982);
    }
    @Test
    public void test3882() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(992509656);
		variable.isEmpty();
    }
    @Test
    public void test3883() {
		Queue x = new Queue();
		x.enqueue(-364450296);
		x.isFull();
		x.isEmpty();
		x.dequeue();
		assertFalse(x.isFull());
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(183997793);
    }
    @Test
    public void test3884() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isFull();
		variable.enqueue(23315660);
    }
    @Test
    public void test3885() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test3886() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.toString();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test3887() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-1812397895);
    }
    @Test
    public void test3888() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test3889() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.enqueue(-488559258);
		z.isFull();
		z.dequeue();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test3890() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(329623906);
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test3891() {
		Queue x = new Queue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(54578554);
		x.toString();
    }
    @Test
    public void test3892() {
		Queue variable = new Queue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.toString();
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-652308819);
		assertFalse(variable.isFull());
		variable.enqueue(-1195941102);
    }
    @Test
    public void test3893() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(1285475664);
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-1291184526);
		variable.enqueue(535154821);
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(1282403325);
    }
    @Test
    public void test3894() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.dequeue();
		y.enqueue(1522658435);
		y.isFull();
		assertEquals("[1522658435]", y.toString());
		y.dequeue();
		y.toString();
    }
    @Test
    public void test3895() {
		Queue y = new Queue();
		y.enqueue(-637297747);
		y.enqueue(-1187562666);
		y.dequeue();
		y.enqueue(-1426505261);
		y.toString();
		y.enqueue(-2001541396);
    }
    @Test
    public void test3896() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.toString();
		x.toString();
		x.enqueue(-51595211);
		x.enqueue(1647628856);
		assertEquals(1647628856, x.dequeue());
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test3897() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-549847602);
    }
    @Test
    public void test3898() {
		Queue Var = new Queue();
		Var.enqueue(-1228797311);
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(396227849);
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test3899() {
		Queue variable = new Queue();
		variable.enqueue(-1165811778);
		variable.enqueue(-2097714267);
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.isFull();
		variable.enqueue(-502206108);
		variable.dequeue();
    }
    @Test
    public void test3900() {
		Queue x = new Queue();
		x.enqueue(-2005984552);
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.toString();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test3901() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(-908044542);
		z.dequeue();
		z.enqueue(1168885318);
    }
    @Test
    public void test3902() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(-88872212);
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(-663341041);
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1936943844);
		assertFalse(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test3903() {
		Queue variable = new Queue();
		variable.enqueue(-823516619);
		variable.isEmpty();
    }
    @Test
    public void test3904() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.isFull();
		x.isFull();
    }
    @Test
    public void test3905() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test3906() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.isFull();
		z.enqueue(408749398);
		z.enqueue(-1656967227);
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.toString();
    }
    @Test
    public void test3907() {
		Queue Var = new Queue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.toString();
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test3908() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.toString();
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(-1987192495);
		z.isFull();
		z.dequeue();
		z.dequeue();
		z.dequeue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(1264833119);
    }
    @Test
    public void test3909() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test3910() {
		Queue z = new Queue();
		z.toString();
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test3911() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-1202002338);
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test3912() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.toString();
		Var.enqueue(975932009);
		Var.enqueue(78996073);
		Var.dequeue();
		Var.isFull();
		Var.enqueue(260849988);
		Var.enqueue(261505549);
    }
    @Test
    public void test3913() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(-1002085421);
		z.enqueue(2070084964);
		z.enqueue(1878665478);
		z.enqueue(246904249);
		z.enqueue(-279555129);
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test3914() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-1843981512);
		x.isFull();
		x.toString();
    }
    @Test
    public void test3915() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-500463729);
		y.dequeue();
		y.enqueue(-401223288);
		y.isEmpty();
		y.toString();
		y.enqueue(-2026734113);
    }
    @Test
    public void test3916() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.toString();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.isEmpty();
		z.dequeue();
		z.isFull();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test3917() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-399526188);
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1871256395);
		variable.enqueue(128822002);
		variable.isEmpty();
    }
    @Test
    public void test3918() {
		Queue z = new Queue();
		z.enqueue(-1970903674);
		z.toString();
		z.toString();
		z.isFull();
		z.toString();
		assertTrue(z.isEmpty());
		z.toString();
		z.toString();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.enqueue(1725221964);
		z.toString();
    }
    @Test
    public void test3919() {
		Queue y = new Queue();
		y.enqueue(859721219);
		y.toString();
    }
    @Test
    public void test3920() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1354066067);
		variable.isFull();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test3921() {
		Queue variable = new Queue();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test3922() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test3923() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-1595782229);
		Var.toString();
		Var.enqueue(-291662778);
		Var.enqueue(-979335694);
		Var.isFull();
		Var.enqueue(-2120569864);
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test3924() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test3925() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(1052009640);
		assertFalse(y.isFull());
		y.isEmpty();
		assertFalse(y.isEmpty());
		y.enqueue(-1094392457);
		assertEquals("[1052009640]", y.toString());
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
    }
    @Test
    public void test3926() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test3927() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test3928() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.enqueue(2077787128);
		Var.isEmpty();
    }
    @Test
    public void test3929() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-1688904346);
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test3930() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(1725087948);
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		assertEquals(1725087948, variable.dequeue());
		variable.enqueue(779849358);
		variable.isEmpty();
		variable.toString();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test3931() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.toString();
		z.isEmpty();
		z.dequeue();
		z.enqueue(-2044251750);
		z.enqueue(-1843062579);
    }
    @Test
    public void test3932() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.isFull();
		x.toString();
		x.enqueue(-1408391523);
		x.toString();
		x.enqueue(-1533298825);
		x.isFull();
		x.toString();
		x.toString();
    }
    @Test
    public void test3933() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(177965551);
		assertFalse(variable.isEmpty());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test3934() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.dequeue();
		x.enqueue(-785743327);
		x.isFull();
		x.toString();
		x.dequeue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test3935() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test3936() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(1258375350);
		assertFalse(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(-1482033250);
		assertFalse(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test3937() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test3938() {
		Queue z = new Queue();
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(1118977801);
		assertEquals(1118977801, z.dequeue());
		z.isFull();
    }
    @Test
    public void test3939() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(1457235937);
		assertFalse(y.isEmpty());
		y.isFull();
		y.dequeue();
		y.isFull();
		y.isEmpty();
		y.enqueue(2025706488);
		assertEquals(2025706488, y.dequeue());
		y.isFull();
		y.isFull();
		y.toString();
    }
    @Test
    public void test3940() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(2098871991);
    }
    @Test
    public void test3941() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.enqueue(-633714127);
		y.enqueue(1883434570);
		y.dequeue();
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test3942() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test3943() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.toString();
    }
    @Test
    public void test3944() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test3945() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.toString();
		x.toString();
		x.isFull();
		x.toString();
		x.enqueue(-1254363817);
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isFull();
    }
    @Test
    public void test3946() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.dequeue();
		assertFalse(z.isFull());
		z.toString();
		z.enqueue(1996289673);
		z.toString();
		z.isFull();
		z.enqueue(787921616);
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(145466169);
		z.enqueue(330838179);
    }
    @Test
    public void test3947() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.enqueue(789235438);
		assertFalse(Var.isEmpty());
		assertEquals(789235438, Var.dequeue());
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-1523814909);
		Var.isFull();
    }
    @Test
    public void test3948() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test3949() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test3950() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(-749538395);
		Var.dequeue();
		Var.enqueue(1058317959);
		Var.dequeue();
    }
    @Test
    public void test3951() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-964726573);
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.toString();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test3952() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.toString();
		Var.enqueue(1412085782);
		assertFalse(Var.isFull());
		Var.toString();
		Var.dequeue();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test3953() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.enqueue(-638183922);
		y.isFull();
		y.enqueue(825316589);
		y.isEmpty();
		y.isEmpty();
		assertEquals(825316589, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.dequeue();
    }
    @Test
    public void test3954() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test3955() {
		Queue y = new Queue();
		y.enqueue(476912521);
		y.enqueue(-555311151);
		y.dequeue();
		y.isEmpty();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.dequeue();
		y.enqueue(1627230936);
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test3956() {
		Queue z = new Queue();
		z.enqueue(1071626436);
		assertEquals(1071626436, z.dequeue());
		z.toString();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test3957() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isFull();
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(1775383010);
		assertEquals("[1775383010]", variable.toString());
		variable.enqueue(-335308453);
		variable.enqueue(-250637057);
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test3958() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(1309072498);
		x.toString();
		x.enqueue(-2088139688);
		x.isFull();
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(-316604897);
		x.dequeue();
		x.toString();
		x.isFull();
    }
    @Test
    public void test3959() {
		Queue z = new Queue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test3960() {
		Queue z = new Queue();
		z.enqueue(-667466711);
		z.dequeue();
		z.enqueue(-120433270);
		z.toString();
		z.dequeue();
		z.enqueue(-558192967);
		z.toString();
		z.isFull();
		z.isEmpty();
		z.enqueue(-1410401261);
    }
    @Test
    public void test3961() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test3962() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.toString();
		y.dequeue();
		y.toString();
		y.isEmpty();
		y.enqueue(-481603214);
    }
    @Test
    public void test3963() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(-1977364545);
    }
    @Test
    public void test3964() {
		Queue variable = new Queue();
		variable.enqueue(-1353796431);
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
		variable.enqueue(-1634895373);
		variable.enqueue(734619153);
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(-1604022465);
    }
    @Test
    public void test3965() {
		Queue z = new Queue();
		z.enqueue(-1334137797);
		z.dequeue();
		z.enqueue(-408329611);
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.toString();
		z.enqueue(-251371258);
    }
    @Test
    public void test3966() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(731833174);
		y.toString();
		y.enqueue(-96105506);
		y.isFull();
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(315030637);
		y.dequeue();
    }
    @Test
    public void test3967() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.enqueue(-1854409354);
		y.toString();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test3968() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isFull();
		z.dequeue();
		z.isEmpty();
		z.enqueue(-1255947754);
    }
    @Test
    public void test3969() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test3970() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.enqueue(1230059641);
		variable.enqueue(-1567689925);
		variable.enqueue(391476854);
		assertFalse(variable.isFull());
		variable.enqueue(548544895);
		assertFalse(variable.isFull());
		variable.enqueue(-1158951838);
		variable.isEmpty();
    }
    @Test
    public void test3971() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-1471669594);
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test3972() {
		Queue z = new Queue();
		z.toString();
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(-1989852349);
		z.isFull();
    }
    @Test
    public void test3973() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(1964772541);
		assertFalse(z.isFull());
		z.isFull();
		assertFalse(z.isEmpty());
		z.isFull();
		z.isFull();
		z.isEmpty();
		z.enqueue(882796895);
		assertFalse(z.isEmpty());
		assertEquals(1964772541, z.dequeue());
		z.toString();
		assertFalse(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test3974() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test3975() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.enqueue(-876405432);
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.toString();
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(1569374297);
		variable.isEmpty();
    }
    @Test
    public void test3976() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(1063777962);
    }
    @Test
    public void test3977() {
		Queue y = new Queue();
		y.enqueue(528899004);
		y.enqueue(1589977791);
		assertEquals(528899004, y.dequeue());
		y.enqueue(91723397);
		assertEquals(1589977791, y.dequeue());
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.enqueue(-175914057);
    }
    @Test
    public void test3978() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.isFull();
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(677169157);
    }
    @Test
    public void test3979() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(1714778522);
		x.enqueue(-1490266810);
		x.isFull();
		assertEquals(1714778522, x.dequeue());
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(-1772213874);
    }
    @Test
    public void test3980() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(900988203);
		Var.toString();
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		assertEquals(900988203, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test3981() {
		Queue variable = new Queue();
		variable.enqueue(579530541);
		variable.toString();
    }
    @Test
    public void test3982() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test3983() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test3984() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(-522212063);
		variable.enqueue(1225557502);
		variable.enqueue(-1708458742);
		variable.toString();
		assertFalse(variable.isEmpty());
		assertEquals("[1225557502]", variable.toString());
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test3985() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.enqueue(1573741195);
		assertEquals(1573741195, x.dequeue());
		assertEquals("[]", x.toString());
		x.enqueue(-1223890016);
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.enqueue(2090290787);
    }
    @Test
    public void test3986() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.enqueue(1944588118);
		z.isEmpty();
    }
    @Test
    public void test3987() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-1385416433);
		y.enqueue(-1573979246);
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test3988() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(1285729967);
		x.isFull();
		x.toString();
		x.isEmpty();
		assertEquals(1285729967, x.dequeue());
		x.enqueue(-1515970038);
		x.enqueue(293931602);
		assertFalse(x.isFull());
		assertEquals(293931602, x.dequeue());
		x.isFull();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isFull();
    }
    @Test
    public void test3989() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test3990() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.toString();
		y.enqueue(-238502199);
		y.toString();
    }
    @Test
    public void test3991() {
		Queue variable = new Queue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.enqueue(1805238976);
		variable.toString();
		variable.toString();
		variable.isFull();
		variable.enqueue(940254153);
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(1724249616);
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test3992() {
		Queue variable = new Queue();
		variable.enqueue(-1609509164);
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.enqueue(-1076997712);
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(-541945170);
		assertFalse(variable.isFull());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.enqueue(1052921184);
    }
    @Test
    public void test3993() {
		Queue y = new Queue();
		y.enqueue(-677178529);
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test3994() {
		Queue Var = new Queue();
		Var.enqueue(1197077917);
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(1946275052);
		assertFalse(Var.isEmpty());
		assertFalse(Var.isEmpty());
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test3995() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(511252738);
    }
    @Test
    public void test3996() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.isFull();
		z.dequeue();
		z.dequeue();
		z.enqueue(906021842);
		z.toString();
		z.isEmpty();
		z.enqueue(326937133);
    }
    @Test
    public void test3997() {
		Queue y = new Queue();
		y.toString();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.isFull();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-939337675);
    }
    @Test
    public void test3998() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test3999() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-1542317702);
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test4000() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(319107377);
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test4001() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1075769331);
		Var.enqueue(-1633582157);
		Var.dequeue();
		Var.enqueue(-2003791067);
    }
    @Test
    public void test4002() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.toString();
		variable.enqueue(1593565231);
		assertFalse(variable.isFull());
		variable.enqueue(400370871);
    }
    @Test
    public void test4003() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isFull();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-1053560692);
		assertFalse(Var.isFull());
		Var.enqueue(1488084355);
		Var.toString();
    }
    @Test
    public void test4004() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(957052286);
		y.dequeue();
    }
    @Test
    public void test4005() {
		Queue z = new Queue();
		z.enqueue(1213918453);
		assertEquals(1213918453, z.dequeue());
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.enqueue(203066934);
    }
    @Test
    public void test4006() {
		Queue x = new Queue();
		x.toString();
		assertEquals("[]", x.toString());
		x.isFull();
		x.dequeue();
		x.toString();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isFull();
		x.isFull();
		assertEquals("[]", x.toString());
		x.isFull();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test4007() {
		Queue variable = new Queue();
		variable.enqueue(177410039);
		assertFalse(variable.isEmpty());
		variable.enqueue(1327583085);
		variable.isEmpty();
		variable.isFull();
		assertEquals(177410039, variable.dequeue());
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(345790357);
    }
    @Test
    public void test4008() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.enqueue(-1697138910);
		z.toString();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isEmpty();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test4009() {
		Queue Var = new Queue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test4010() {
		Queue y = new Queue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.toString();
    }
    @Test
    public void test4011() {
		Queue z = new Queue();
		z.enqueue(1928439650);
		z.isEmpty();
		assertFalse(z.isEmpty());
		z.dequeue();
		z.toString();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test4012() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test4013() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.enqueue(-543975356);
		x.dequeue();
		x.dequeue();
		x.enqueue(-1832088775);
		x.enqueue(-146724201);
		assertEquals(-1, x.dequeue());
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test4014() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.isFull();
		y.toString();
		y.isEmpty();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(-1729015975);
		y.isFull();
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test4015() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.enqueue(1289698265);
		assertFalse(y.isEmpty());
		y.enqueue(-1801477275);
		y.enqueue(1436724921);
    }
    @Test
    public void test4016() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test4017() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test4018() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(-2061627999);
		y.dequeue();
		y.isFull();
		assertFalse(y.isFull());
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test4019() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test4020() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.enqueue(1925075722);
		y.isEmpty();
		assertEquals(1925075722, y.dequeue());
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(701860709);
		y.enqueue(1303240937);
		y.enqueue(956126678);
		assertFalse(y.isEmpty());
		assertEquals("[701860709, 1303240937, 956126678]", y.toString());
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test4021() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(1940092890);
		Var.toString();
    }
    @Test
    public void test4022() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isFull();
		y.toString();
		y.toString();
		y.enqueue(587938556);
    }
    @Test
    public void test4023() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.enqueue(-723218372);
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-1505515851);
		Var.isFull();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test4024() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-1128708290);
    }
    @Test
    public void test4025() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test4026() {
		Queue Var = new Queue();
		Var.enqueue(-1434203682);
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.toString();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test4027() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(782693244);
		assertFalse(z.isFull());
		z.dequeue();
		z.toString();
    }
    @Test
    public void test4028() {
		Queue Var = new Queue();
		Var.enqueue(-254068220);
		Var.enqueue(543916871);
		assertEquals(543916871, Var.dequeue());
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test4029() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.enqueue(1765744604);
		Var.enqueue(-273615222);
		Var.enqueue(-1376124649);
		assertEquals("[1765744604]", Var.toString());
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test4030() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-1063947000);
		assertEquals("[]", Var.toString());
		Var.enqueue(-700065501);
		assertEquals(-1, Var.dequeue());
		Var.enqueue(2025706586);
		Var.enqueue(-833463036);
		Var.dequeue();
    }
    @Test
    public void test4031() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.dequeue();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.enqueue(269079161);
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test4032() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isFull();
		y.toString();
    }
    @Test
    public void test4033() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1274044688);
		assertEquals(1274044688, Var.dequeue());
		Var.enqueue(821918625);
		Var.isFull();
    }
    @Test
    public void test4034() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(727891038);
		assertFalse(y.isFull());
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test4035() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test4036() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.toString();
		Var.enqueue(-450650835);
    }
    @Test
    public void test4037() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.dequeue();
		variable.enqueue(1693850118);
    }
    @Test
    public void test4038() {
		Queue z = new Queue();
		z.enqueue(-253759894);
		z.enqueue(-2077138299);
		z.toString();
		z.toString();
		z.isEmpty();
		z.enqueue(-312283746);
		z.toString();
		z.dequeue();
		z.enqueue(-2070884049);
    }
    @Test
    public void test4039() {
		Queue variable = new Queue();
		variable.enqueue(609251714);
		variable.toString();
		variable.enqueue(2079891207);
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(195533574);
    }
    @Test
    public void test4040() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test4041() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.toString();
		x.enqueue(1037274140);
		x.isFull();
		x.dequeue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.enqueue(112548143);
    }
    @Test
    public void test4042() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.enqueue(-1714742771);
		y.enqueue(-600707743);
		y.enqueue(1840055813);
		y.dequeue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test4043() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1036134087);
		assertTrue(variable.isEmpty());
		variable.toString();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test4044() {
		Queue Var = new Queue();
		Var.enqueue(504213919);
    }
    @Test
    public void test4045() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.isFull();
    }
    @Test
    public void test4046() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.dequeue();
		y.enqueue(-386875705);
		y.isEmpty();
    }
    @Test
    public void test4047() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.enqueue(1457721834);
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(-1198373076);
		z.dequeue();
		z.enqueue(-1033167860);
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test4048() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.isEmpty();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test4049() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(1141635788);
		Var.isFull();
		Var.isFull();
		Var.enqueue(-1216890345);
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test4050() {
		Queue y = new Queue();
		y.enqueue(-1894720433);
    }
    @Test
    public void test4051() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.toString();
		z.isEmpty();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isFull();
		z.dequeue();
		z.isFull();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(-1552353772);
		z.isFull();
    }
    @Test
    public void test4052() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-1610290550);
    }
    @Test
    public void test4053() {
		Queue variable = new Queue();
		variable.enqueue(1106824270);
		variable.dequeue();
    }
    @Test
    public void test4054() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test4055() {
		Queue z = new Queue();
		z.isFull();
		assertFalse(z.isFull());
		z.isFull();
		z.toString();
		z.enqueue(-1598916313);
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isFull();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.enqueue(-1557037868);
    }
    @Test
    public void test4056() {
		Queue z = new Queue();
		z.enqueue(834459648);
		z.toString();
		z.isFull();
		z.toString();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.enqueue(-1050352165);
		assertFalse(z.isEmpty());
		assertFalse(z.isFull());
		assertEquals(834459648, z.dequeue());
		assertTrue(z.isEmpty());
		z.toString();
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test4057() {
		Queue y = new Queue();
		y.enqueue(1389298510);
		y.isFull();
    }
    @Test
    public void test4058() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test4059() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(1837567628);
		assertFalse(z.isFull());
		z.dequeue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test4060() {
		Queue y = new Queue();
		y.enqueue(769002481);
    }
    @Test
    public void test4061() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test4062() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.enqueue(461764015);
    }
    @Test
    public void test4063() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test4064() {
		Queue Var = new Queue();
		Var.enqueue(-1608615674);
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(1261610982);
    }
    @Test
    public void test4065() {
		Queue Var = new Queue();
		Var.enqueue(-1245352446);
		Var.dequeue();
    }
    @Test
    public void test4066() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isFull();
		assertFalse(y.isFull());
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test4067() {
		Queue y = new Queue();
		y.enqueue(-228376498);
		y.toString();
		y.enqueue(1988082480);
		y.enqueue(814156317);
		assertEquals(1988082480, y.dequeue());
		y.enqueue(67035082);
		y.enqueue(-1981759828);
		y.enqueue(548057895);
		y.isFull();
    }
    @Test
    public void test4068() {
		Queue x = new Queue();
		x.enqueue(459745870);
		x.enqueue(-829101329);
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test4069() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test4070() {
		Queue y = new Queue();
		y.enqueue(-540942268);
		y.enqueue(-1458379264);
		y.dequeue();
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test4071() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.toString();
		y.isEmpty();
		y.enqueue(-1400406992);
		assertFalse(y.isFull());
		y.isEmpty();
		y.enqueue(1459764446);
		y.dequeue();
		y.enqueue(-2119308988);
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test4072() {
		Queue variable = new Queue();
		variable.enqueue(-192147210);
		variable.enqueue(1439316830);
		assertEquals(1439316830, variable.dequeue());
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.toString();
		variable.toString();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test4073() {
		Queue x = new Queue();
		x.enqueue(-1541554850);
		x.dequeue();
		x.enqueue(-1671007004);
		x.isEmpty();
    }
    @Test
    public void test4074() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.enqueue(1324281167);
		y.toString();
		assertEquals(1324281167, y.dequeue());
		y.enqueue(456797246);
		y.toString();
		y.enqueue(-1407907005);
		y.enqueue(-1285348728);
		y.enqueue(-1843721632);
    }
    @Test
    public void test4075() {
		Queue z = new Queue();
		z.enqueue(883739253);
    }
    @Test
    public void test4076() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(-2025390971);
		assertFalse(z.isFull());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test4077() {
		Queue Var = new Queue();
		Var.enqueue(-1148678762);
		Var.enqueue(1736946154);
		Var.isEmpty();
		assertEquals(1736946154, Var.dequeue());
		Var.isFull();
		assertFalse(Var.isFull());
		Var.toString();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(-1766054060);
		Var.enqueue(-1833439752);
    }
    @Test
    public void test4078() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-357906203);
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.enqueue(660868302);
    }
    @Test
    public void test4079() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test4080() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(-1744208587);
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.enqueue(363477899);
		assertEquals(363477899, x.dequeue());
		assertEquals("[]", x.toString());
		x.enqueue(177290004);
		x.isFull();
		x.toString();
    }
    @Test
    public void test4081() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(2136893633);
    }
    @Test
    public void test4082() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.enqueue(-1429555943);
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.enqueue(-1434761269);
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(842108905);
    }
    @Test
    public void test4083() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
    }
    @Test
    public void test4084() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(-2142028260);
		z.toString();
		z.enqueue(-1139799856);
		z.isFull();
		assertFalse(z.isFull());
		z.enqueue(-1418812755);
		z.enqueue(1003629051);
		z.dequeue();
		z.enqueue(-1989134894);
		z.toString();
    }
    @Test
    public void test4085() {
		Queue x = new Queue();
		x.enqueue(-2118924334);
		x.dequeue();
		x.dequeue();
		x.isFull();
		x.enqueue(-856332003);
		x.dequeue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.enqueue(-848515495);
		x.toString();
    }
    @Test
    public void test4086() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1941445076);
    }
    @Test
    public void test4087() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.enqueue(666918446);
		x.enqueue(1713590682);
		x.enqueue(-1351355913);
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test4088() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(761488570);
		y.toString();
		y.enqueue(-1519165029);
		y.toString();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test4089() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test4090() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(1472674803);
		Var.toString();
		assertFalse(Var.isFull());
		assertEquals(1472674803, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.enqueue(99590426);
		Var.enqueue(398692895);
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		assertEquals("[398692895]", Var.toString());
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test4091() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(-1172015985);
		Var.isEmpty();
    }
    @Test
    public void test4092() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-2033815982);
    }
    @Test
    public void test4093() {
		Queue x = new Queue();
		x.enqueue(2035927566);
		x.isEmpty();
    }
    @Test
    public void test4094() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.enqueue(330111490);
		variable.toString();
		variable.isFull();
		variable.dequeue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(813991095);
		assertEquals(813991095, variable.dequeue());
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test4095() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(1512174606);
		y.isFull();
		y.isFull();
		y.isEmpty();
		assertEquals("[1512174606]", y.toString());
		assertFalse(y.isEmpty());
		y.enqueue(-1823752820);
    }
    @Test
    public void test4096() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test4097() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test4098() {
		Queue y = new Queue();
		y.dequeue();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isFull();
		y.enqueue(624224570);
		y.isEmpty();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(1204237733);
    }
    @Test
    public void test4099() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(87034811);
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test4100() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test4101() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test4102() {
		Queue variable = new Queue();
		variable.enqueue(-1739283937);
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.toString();
		variable.enqueue(635024135);
		variable.dequeue();
    }
    @Test
    public void test4103() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1016905008);
		Var.enqueue(-814393583);
		Var.dequeue();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.enqueue(2042291506);
		Var.toString();
    }
    @Test
    public void test4104() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(775410552);
		z.toString();
		assertFalse(z.isFull());
		z.isFull();
		z.dequeue();
		z.toString();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.enqueue(154215105);
		z.toString();
    }
    @Test
    public void test4105() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.toString();
		variable.enqueue(-1323530684);
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(64438788);
		variable.toString();
		variable.enqueue(-1027721145);
		variable.enqueue(1419801406);
    }
    @Test
    public void test4106() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(1753639136);
		z.isEmpty();
    }
    @Test
    public void test4107() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(1997720366);
    }
    @Test
    public void test4108() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test4109() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-961370514);
		z.dequeue();
		z.toString();
    }
    @Test
    public void test4110() {
		Queue z = new Queue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(137657030);
		assertEquals("[137657030]", z.toString());
		assertEquals(137657030, z.dequeue());
		z.toString();
		z.toString();
		assertTrue(z.isEmpty());
		z.toString();
		z.isFull();
		z.toString();
		assertTrue(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test4111() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.enqueue(799049331);
		assertEquals("[799049331]", y.toString());
		assertFalse(y.isEmpty());
		y.toString();
		y.enqueue(1995050031);
    }
    @Test
    public void test4112() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test4113() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test4114() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(1416334304);
		variable.enqueue(1095349260);
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
		variable.toString();
		assertFalse(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test4115() {
		Queue variable = new Queue();
		variable.enqueue(1426515808);
		assertFalse(variable.isFull());
		variable.isFull();
		assertFalse(variable.isFull());
		assertEquals(1426515808, variable.dequeue());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test4116() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(453974148);
		Var.isFull();
		Var.enqueue(-569878216);
		Var.isEmpty();
		assertEquals(453974148, Var.dequeue());
		Var.toString();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(-48103760);
		Var.dequeue();
		Var.enqueue(1138057388);
    }
    @Test
    public void test4117() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.toString();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(2022228749);
		x.enqueue(-281328244);
		x.dequeue();
		x.enqueue(-2121241464);
    }
    @Test
    public void test4118() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test4119() {
		Queue variable = new Queue();
		variable.enqueue(-1494028428);
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		variable.toString();
		variable.toString();
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test4120() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.toString();
		Var.toString();
		Var.enqueue(-1650583392);
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test4121() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(-725875272);
    }
    @Test
    public void test4122() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isFull();
		assertTrue(z.isEmpty());
		z.enqueue(639478793);
		assertEquals(639478793, z.dequeue());
		z.toString();
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test4123() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(-1475339849);
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isEmpty();
		x.enqueue(2059671388);
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test4124() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.isFull();
		y.enqueue(1557995497);
		y.dequeue();
		y.enqueue(328418872);
		y.toString();
		y.toString();
    }
    @Test
    public void test4125() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(445743002);
		variable.isFull();
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		assertEquals(445743002, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(-1690226190);
		variable.dequeue();
    }
    @Test
    public void test4126() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.enqueue(1396460076);
		Var.isFull();
		Var.enqueue(-122078847);
		assertFalse(Var.isEmpty());
		Var.toString();
		assertEquals("[1396460076]", Var.toString());
		Var.toString();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test4127() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test4128() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.toString();
		y.isEmpty();
		y.enqueue(-2050987884);
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test4129() {
		Queue y = new Queue();
		y.enqueue(-134971457);
		y.enqueue(-1485875950);
		y.isEmpty();
    }
    @Test
    public void test4130() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(233484433);
		assertEquals("[233484433]", z.toString());
		z.isEmpty();
		z.isEmpty();
		z.enqueue(756931099);
		assertFalse(z.isFull());
		assertFalse(z.isEmpty());
		assertEquals(233484433, z.dequeue());
		z.toString();
		z.isEmpty();
		z.isEmpty();
		assertFalse(z.isEmpty());
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test4131() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.isFull();
		variable.enqueue(1944842950);
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test4132() {
		Queue Var = new Queue();
		Var.enqueue(-981646032);
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test4133() {
		Queue Var = new Queue();
		Var.enqueue(1000938321);
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isEmpty();
		Var.enqueue(-1849462384);
		assertEquals("[]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test4134() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isFull();
		y.isFull();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test4135() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.enqueue(1654479807);
		x.enqueue(940968144);
		x.isFull();
		x.isFull();
		x.toString();
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test4136() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.isEmpty();
		z.toString();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1432713284);
    }
    @Test
    public void test4137() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(1492970690);
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(1595720354);
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(-1665517348);
		assertEquals(1595720354, variable.dequeue());
		variable.enqueue(-580075812);
		variable.dequeue();
    }
    @Test
    public void test4138() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test4139() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		variable.toString();
		variable.enqueue(1604204315);
		variable.isEmpty();
		variable.enqueue(-1232541064);
    }
    @Test
    public void test4140() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test4141() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.toString();
    }
    @Test
    public void test4142() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test4143() {
		Queue y = new Queue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.dequeue();
    }
    @Test
    public void test4144() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(235280596);
		x.isEmpty();
		assertFalse(x.isFull());
		x.isFull();
		x.isFull();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test4145() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test4146() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-664178961);
		Var.enqueue(941073030);
		assertEquals("[941073030]", Var.toString());
		assertFalse(Var.isEmpty());
		assertEquals("[941073030]", Var.toString());
		Var.toString();
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test4147() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isFull();
		x.toString();
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.isFull();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test4148() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(-751786436);
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test4149() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test4150() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(1644818235);
		variable.toString();
		variable.enqueue(389550589);
		variable.toString();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test4151() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertFalse(x.isFull());
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.enqueue(-1294337043);
    }
    @Test
    public void test4152() {
		Queue y = new Queue();
		y.enqueue(-1652095016);
    }
    @Test
    public void test4153() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test4154() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(740817863);
		assertFalse(Var.isFull());
		assertEquals(740817863, Var.dequeue());
		Var.dequeue();
		Var.enqueue(-670277940);
    }
    @Test
    public void test4155() {
		Queue variable = new Queue();
		variable.enqueue(-977056865);
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		assertFalse(variable.isFull());
		variable.toString();
		variable.toString();
    }
    @Test
    public void test4156() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.isFull();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test4157() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test4158() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.toString();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(-1857665668);
		assertFalse(y.isFull());
		y.isFull();
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test4159() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(299931082);
    }
    @Test
    public void test4160() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test4161() {
		Queue z = new Queue();
		z.toString();
		assertFalse(z.isFull());
		z.toString();
		z.enqueue(-898040664);
		z.enqueue(-1816028298);
		z.isEmpty();
		z.enqueue(-887403237);
    }
    @Test
    public void test4162() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(1324293991);
		assertFalse(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test4163() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.enqueue(-959335575);
		y.dequeue();
		y.enqueue(708153855);
		assertFalse(y.isEmpty());
		y.enqueue(920583630);
		y.isEmpty();
		y.toString();
		assertEquals(708153855, y.dequeue());
		y.isFull();
    }
    @Test
    public void test4164() {
		Queue z = new Queue();
		z.enqueue(-719965164);
		z.isFull();
		assertEquals("[]", z.toString());
		z.toString();
		z.enqueue(-1040145559);
		z.toString();
		z.isFull();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(356073402);
		z.enqueue(-863281837);
    }
    @Test
    public void test4165() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test4166() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test4167() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.enqueue(1642590708);
		assertEquals("[1642590708]", z.toString());
		z.isEmpty();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test4168() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test4169() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test4170() {
		Queue variable = new Queue();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(-1127513917);
    }
    @Test
    public void test4171() {
		Queue z = new Queue();
		z.enqueue(-1028579619);
		assertTrue(z.isEmpty());
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.enqueue(-1771544625);
		z.isFull();
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(1972691022);
		z.enqueue(901306530);
		z.isFull();
		z.isFull();
    }
    @Test
    public void test4172() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(580890385);
		assertEquals(580890385, z.dequeue());
		z.isFull();
		z.isFull();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test4173() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test4174() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(846840236);
		variable.enqueue(2028803484);
		assertEquals("[846840236, 2028803484]", variable.toString());
		variable.toString();
		assertFalse(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
		variable.enqueue(2114125948);
    }
    @Test
    public void test4175() {
		Queue y = new Queue();
		y.enqueue(-1703631632);
		assertEquals(-1, y.dequeue());
		y.toString();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.toString();
		y.toString();
		y.enqueue(1498618259);
		assertFalse(y.isEmpty());
		y.isFull();
		y.isFull();
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(-7277972);
    }
    @Test
    public void test4176() {
		Queue Var = new Queue();
		Var.enqueue(-850227430);
		Var.isFull();
    }
    @Test
    public void test4177() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(-386958922);
		x.toString();
		x.isFull();
		x.enqueue(1495082307);
		x.enqueue(200749079);
		x.toString();
    }
    @Test
    public void test4178() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		Var.enqueue(-1194560688);
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test4179() {
		Queue y = new Queue();
		y.toString();
		assertTrue(y.isEmpty());
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.enqueue(608586621);
		y.isFull();
		y.enqueue(-409705555);
		y.enqueue(7595487);
    }
    @Test
    public void test4180() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.dequeue();
		y.enqueue(124268521);
		y.toString();
		y.dequeue();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.toString();
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test4181() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.toString();
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-1595409847);
    }
    @Test
    public void test4182() {
		Queue y = new Queue();
		y.enqueue(-1270781003);
		y.dequeue();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test4183() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(1507123388);
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertEquals("[1507123388]", Var.toString());
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test4184() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1810900572);
		variable.enqueue(-1136147325);
		assertFalse(variable.isEmpty());
		assertEquals("[1810900572]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test4185() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(-184397560);
		variable.toString();
		variable.enqueue(1962102483);
		variable.dequeue();
    }
    @Test
    public void test4186() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.isEmpty();
		z.toString();
		z.dequeue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test4187() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1494176141);
		Var.isEmpty();
		Var.enqueue(450163430);
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(1161359703);
		assertFalse(Var.isEmpty());
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
    }
    @Test
    public void test4188() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(1406726668);
		variable.enqueue(-99084306);
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test4189() {
		Queue variable = new Queue();
		variable.enqueue(661351290);
		variable.enqueue(-1368859633);
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test4190() {
		Queue y = new Queue();
		y.enqueue(673536271);
		assertEquals("[673536271]", y.toString());
		y.isEmpty();
		assertFalse(y.isEmpty());
		assertFalse(y.isEmpty());
		y.toString();
		y.toString();
		y.toString();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test4191() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.enqueue(-754628264);
		assertEquals("[]", x.toString());
		x.enqueue(-1637035793);
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.enqueue(1421615236);
    }
    @Test
    public void test4192() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.toString();
		Var.enqueue(-856843983);
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.enqueue(1907108265);
		assertFalse(Var.isFull());
		assertEquals("[1907108265]", Var.toString());
		assertEquals(1907108265, Var.dequeue());
		Var.enqueue(1816888284);
    }
    @Test
    public void test4193() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-1327197358);
		z.enqueue(-80773719);
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isFull();
		z.toString();
		z.isFull();
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test4194() {
		Queue x = new Queue();
		x.enqueue(944877445);
		assertFalse(x.isEmpty());
		assertEquals(944877445, x.dequeue());
		x.dequeue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.enqueue(-742648148);
		x.enqueue(561124032);
		x.dequeue();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test4195() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isFull();
		x.toString();
    }
    @Test
    public void test4196() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test4197() {
		Queue z = new Queue();
		z.enqueue(-1506792369);
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.enqueue(868062844);
		z.enqueue(778368498);
		z.enqueue(-8858949);
		z.dequeue();
		assertFalse(z.isFull());
		assertFalse(z.isEmpty());
		z.enqueue(268185210);
		z.toString();
		z.toString();
		z.enqueue(2140849702);
    }
    @Test
    public void test4198() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isFull();
		x.toString();
		x.isFull();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.enqueue(356375255);
		x.isEmpty();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test4199() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isFull();
		x.enqueue(2118516505);
		x.isEmpty();
		x.enqueue(-1418682501);
    }
    @Test
    public void test4200() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(-2145639668);
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.toString();
		x.isFull();
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
		x.enqueue(-583139258);
    }
    @Test
    public void test4201() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(73509861);
		x.toString();
		x.isEmpty();
		x.toString();
		x.toString();
		assertEquals(73509861, x.dequeue());
		x.enqueue(758819308);
		x.toString();
    }
    @Test
    public void test4202() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isFull();
		y.dequeue();
		y.toString();
		y.toString();
    }
    @Test
    public void test4203() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(853110238);
		x.isEmpty();
		x.enqueue(-620255028);
		assertFalse(x.isEmpty());
		x.toString();
		x.enqueue(390745543);
		x.isEmpty();
		assertFalse(x.isEmpty());
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test4204() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.dequeue();
		z.isFull();
		z.enqueue(982569519);
		z.isEmpty();
    }
    @Test
    public void test4205() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.toString();
		variable.enqueue(-428706193);
		variable.toString();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test4206() {
		Queue x = new Queue();
		x.enqueue(30594147);
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		x.toString();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test4207() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test4208() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.toString();
    }
    @Test
    public void test4209() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(651634006);
		z.enqueue(-2018367537);
		assertEquals("[651634006]", z.toString());
		z.enqueue(1546186642);
		z.enqueue(-1406455191);
		z.enqueue(1339184972);
    }
    @Test
    public void test4210() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		y.isFull();
		y.dequeue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(-394018420);
    }
    @Test
    public void test4211() {
		Queue y = new Queue();
		y.enqueue(1225594257);
		assertFalse(y.isEmpty());
		y.dequeue();
		y.dequeue();
		y.dequeue();
		y.toString();
		y.isFull();
		y.enqueue(-1528421222);
		y.enqueue(-1101852867);
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test4212() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-1932553949);
		Var.dequeue();
    }
    @Test
    public void test4213() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test4214() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isFull();
		y.dequeue();
		y.isEmpty();
		y.enqueue(-1644303278);
		assertFalse(y.isFull());
		y.dequeue();
		y.toString();
		y.enqueue(1698162807);
    }
    @Test
    public void test4215() {
		Queue variable = new Queue();
		variable.enqueue(1262634966);
		variable.toString();
		variable.isEmpty();
		assertEquals("[1262634966]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test4216() {
		Queue x = new Queue();
		x.enqueue(801895424);
		assertFalse(x.isEmpty());
		assertEquals("[801895424]", x.toString());
		x.isEmpty();
		x.toString();
		assertFalse(x.isEmpty());
		assertFalse(x.isFull());
		x.dequeue();
		x.isFull();
		x.isFull();
		x.enqueue(-457884161);
		x.dequeue();
		x.enqueue(981987515);
    }
    @Test
    public void test4217() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(-2017046131);
		assertFalse(z.isFull());
		z.dequeue();
		z.toString();
		z.isEmpty();
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test4218() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isEmpty();
		z.isFull();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test4219() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test4220() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test4221() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.enqueue(483236303);
		z.toString();
		assertFalse(z.isEmpty());
		z.toString();
		z.toString();
		z.enqueue(-1168281908);
		z.dequeue();
    }
    @Test
    public void test4222() {
		Queue y = new Queue();
		y.enqueue(1031677711);
		y.isEmpty();
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(2062512984);
		y.enqueue(581162511);
		y.isFull();
		y.isFull();
    }
    @Test
    public void test4223() {
		Queue Var = new Queue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test4224() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test4225() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.toString();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test4226() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(-865869197);
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test4227() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(1266775044);
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test4228() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-516304650);
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.toString();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.enqueue(546658390);
    }
    @Test
    public void test4229() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.toString();
		Var.enqueue(1046054628);
		assertEquals(1046054628, Var.dequeue());
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test4230() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertFalse(z.isFull());
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(-1344134227);
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.enqueue(325282359);
    }
    @Test
    public void test4231() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1495820456);
    }
    @Test
    public void test4232() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(677713051);
		variable.enqueue(110294504);
		variable.enqueue(-1313601888);
    }
    @Test
    public void test4233() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test4234() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(1890782479);
		assertEquals("[1890782479]", y.toString());
		y.toString();
		y.dequeue();
		y.enqueue(-727709591);
		y.isFull();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test4235() {
		Queue z = new Queue();
		z.enqueue(1765662066);
		assertFalse(z.isFull());
		assertEquals("[1765662066]", z.toString());
		assertFalse(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test4236() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.dequeue();
		y.toString();
		y.isFull();
    }
    @Test
    public void test4237() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(1284037779);
		x.enqueue(-1760023158);
		assertFalse(x.isEmpty());
		x.enqueue(-1495256330);
		x.isFull();
    }
    @Test
    public void test4238() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.toString();
		z.enqueue(1065466772);
		z.enqueue(410472364);
		z.isFull();
    }
    @Test
    public void test4239() {
		Queue Var = new Queue();
		Var.enqueue(-736782741);
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(1711629960);
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(2058251804);
		Var.enqueue(-874434212);
		Var.isEmpty();
    }
    @Test
    public void test4240() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		variable.enqueue(298533478);
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test4241() {
		Queue z = new Queue();
		z.enqueue(1031955402);
		z.isFull();
		z.enqueue(-1808081892);
		z.enqueue(371883510);
		z.toString();
		z.toString();
		z.isFull();
    }
    @Test
    public void test4242() {
		Queue variable = new Queue();
		variable.enqueue(978562671);
		variable.toString();
		variable.isFull();
		variable.isFull();
		variable.enqueue(1255162267);
		variable.toString();
		variable.enqueue(1839680827);
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test4243() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.toString();
		x.toString();
		x.dequeue();
		x.toString();
		x.enqueue(969448390);
		x.toString();
		x.toString();
		assertEquals("[969448390]", x.toString());
		x.enqueue(1974056407);
    }
    @Test
    public void test4244() {
		Queue x = new Queue();
		x.toString();
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(674172258);
		x.isEmpty();
		x.isEmpty();
		x.enqueue(954561914);
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test4245() {
		Queue variable = new Queue();
		variable.enqueue(-1530794327);
		variable.dequeue();
    }
    @Test
    public void test4246() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(1185150788);
		variable.isEmpty();
		variable.enqueue(816716435);
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test4247() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(145710801);
		variable.isFull();
    }
    @Test
    public void test4248() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.toString();
    }
    @Test
    public void test4249() {
		Queue y = new Queue();
		y.enqueue(294403618);
		y.isEmpty();
		y.dequeue();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test4250() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(-2140842586);
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.enqueue(248564023);
		assertFalse(x.isFull());
		x.isEmpty();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test4251() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.toString();
		assertFalse(y.isFull());
		y.dequeue();
		y.isFull();
		y.toString();
		y.enqueue(-924978583);
    }
    @Test
    public void test4252() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(1454373790);
		assertFalse(x.isEmpty());
		x.toString();
		x.isFull();
		assertEquals("[1454373790]", x.toString());
		x.enqueue(-93493750);
		x.toString();
		x.enqueue(767359211);
    }
    @Test
    public void test4253() {
		Queue Var = new Queue();
		Var.enqueue(1923340796);
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1991017254);
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test4254() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test4255() {
		Queue y = new Queue();
		y.enqueue(1424836793);
		y.toString();
		y.isFull();
		y.enqueue(-1527391202);
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test4256() {
		Queue variable = new Queue();
		variable.enqueue(1067726591);
		variable.dequeue();
		variable.enqueue(1361893858);
		assertFalse(variable.isFull());
		variable.toString();
		variable.toString();
    }
    @Test
    public void test4257() {
		Queue x = new Queue();
		x.enqueue(1354671284);
		x.dequeue();
    }
    @Test
    public void test4258() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.enqueue(-249598515);
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.enqueue(1984606167);
		assertEquals("[1984606167]", y.toString());
		y.isEmpty();
		assertFalse(y.isEmpty());
		y.dequeue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.enqueue(1796208966);
		assertFalse(y.isFull());
		y.isFull();
		y.toString();
    }
    @Test
    public void test4259() {
		Queue variable = new Queue();
		variable.enqueue(1739962087);
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(-1184014459);
		variable.toString();
		variable.enqueue(481420248);
    }
    @Test
    public void test4260() {
		Queue z = new Queue();
		z.enqueue(-1369776881);
		assertTrue(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test4261() {
		Queue variable = new Queue();
		variable.enqueue(1112679937);
		variable.enqueue(328079857);
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(730369543);
		variable.isFull();
		variable.enqueue(-1462928669);
    }
    @Test
    public void test4262() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
		x.enqueue(760530953);
		x.enqueue(-822615094);
		x.dequeue();
		x.isFull();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.enqueue(-1514167993);
		x.isEmpty();
    }
    @Test
    public void test4263() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test4264() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test4265() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.enqueue(228077630);
    }
    @Test
    public void test4266() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		variable.enqueue(99643541);
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(682171451);
    }
    @Test
    public void test4267() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(-1456379923);
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(939091156);
		variable.enqueue(1332950847);
		variable.enqueue(-32113101);
    }
    @Test
    public void test4268() {
		Queue Var = new Queue();
		Var.enqueue(1273156508);
		Var.enqueue(1901849890);
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-109359338);
		Var.dequeue();
    }
    @Test
    public void test4269() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.toString();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test4270() {
		Queue y = new Queue();
		y.enqueue(-1367417588);
		y.enqueue(-166912700);
		assertTrue(y.isEmpty());
		y.enqueue(-858061329);
		assertEquals("[]", y.toString());
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test4271() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test4272() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-822333063);
    }
    @Test
    public void test4273() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(-2146282361);
		assertEquals("[]", y.toString());
		y.isFull();
		y.enqueue(-982542260);
    }
    @Test
    public void test4274() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(1458196579);
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		assertEquals(1458196579, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test4275() {
		Queue z = new Queue();
		z.enqueue(55794127);
		z.isFull();
		assertEquals(55794127, z.dequeue());
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test4276() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.enqueue(-1132170541);
		assertEquals("[]", z.toString());
		z.toString();
		z.isFull();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.enqueue(1297495493);
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test4277() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.isFull();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(-1537774836);
    }
    @Test
    public void test4278() {
		Queue y = new Queue();
		y.toString();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isFull();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.isFull();
		y.dequeue();
		y.toString();
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test4279() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test4280() {
		Queue z = new Queue();
		z.enqueue(-650905930);
		z.enqueue(-1081471617);
		assertEquals(-1, z.dequeue());
		z.toString();
		z.dequeue();
    }
    @Test
    public void test4281() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.toString();
    }
    @Test
    public void test4282() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.toString();
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(-218588135);
		y.enqueue(-1746540733);
		y.toString();
		assertEquals("[]", y.toString());
		y.isFull();
		y.toString();
    }
    @Test
    public void test4283() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(1640176102);
		assertFalse(variable.isEmpty());
		assertEquals("[1640176102]", variable.toString());
		variable.isEmpty();
		assertEquals("[1640176102]", variable.toString());
		variable.enqueue(217534477);
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test4284() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.enqueue(-1459583504);
    }
    @Test
    public void test4285() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		x.isFull();
		x.isFull();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-471818636);
		x.dequeue();
    }
    @Test
    public void test4286() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test4287() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.toString();
		variable.isFull();
		variable.enqueue(-366464505);
		variable.isEmpty();
		variable.enqueue(-1831125667);
		variable.toString();
    }
    @Test
    public void test4288() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(2123730418);
		y.enqueue(250405967);
		y.toString();
    }
    @Test
    public void test4289() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-1764291619);
		y.toString();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.enqueue(-733095933);
    }
    @Test
    public void test4290() {
		Queue y = new Queue();
		y.enqueue(1909884753);
		y.dequeue();
		y.isFull();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.enqueue(-1645882372);
		y.isFull();
		y.enqueue(-23912636);
		y.enqueue(453593657);
		y.isFull();
    }
    @Test
    public void test4291() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.toString();
		assertEquals("[]", y.toString());
		y.toString();
		y.enqueue(-448635759);
    }
    @Test
    public void test4292() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(516313228);
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-1535426893);
    }
    @Test
    public void test4293() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(375685054);
		assertEquals("[375685054]", z.toString());
		z.toString();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test4294() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(304341832);
		variable.toString();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		assertEquals(304341832, variable.dequeue());
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(-339773707);
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test4295() {
		Queue variable = new Queue();
		variable.enqueue(1834984177);
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test4296() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test4297() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.enqueue(375668788);
		Var.isFull();
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-1989259518);
		assertFalse(Var.isEmpty());
		Var.isFull();
		assertEquals("[375668788]", Var.toString());
		Var.enqueue(-147686089);
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test4298() {
		Queue z = new Queue();
		z.enqueue(512184599);
		assertFalse(z.isEmpty());
		z.dequeue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.enqueue(793300930);
		z.isEmpty();
		assertEquals("[793300930]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test4299() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.enqueue(795550446);
		y.enqueue(1135430664);
		assertFalse(y.isEmpty());
		assertEquals(795550446, y.dequeue());
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test4300() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.toString();
    }
    @Test
    public void test4301() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test4302() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.toString();
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test4303() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(505754199);
		variable.isEmpty();
		variable.enqueue(1699083968);
		assertFalse(variable.isEmpty());
		variable.toString();
		assertFalse(variable.isEmpty());
		variable.enqueue(-601699478);
		variable.isFull();
		assertEquals("[505754199, 1699083968]", variable.toString());
		variable.toString();
    }
    @Test
    public void test4304() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.enqueue(-1320401217);
		variable.enqueue(-980711395);
    }
    @Test
    public void test4305() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
		x.enqueue(813628843);
		assertFalse(x.isEmpty());
		assertEquals("[813628843]", x.toString());
		assertFalse(x.isFull());
		x.isEmpty();
		x.enqueue(-922237544);
		x.enqueue(1319508942);
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test4306() {
		Queue z = new Queue();
		z.enqueue(2008194891);
		assertEquals("[2008194891]", z.toString());
		z.dequeue();
		z.toString();
		z.isFull();
    }
    @Test
    public void test4307() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.isFull();
		y.toString();
    }
    @Test
    public void test4308() {
		Queue variable = new Queue();
		variable.enqueue(-1974101371);
		variable.enqueue(1692123900);
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(-640882159);
		variable.enqueue(-1446702779);
    }
    @Test
    public void test4309() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.dequeue();
		Var.enqueue(464544028);
		Var.toString();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-1711230236);
		assertTrue(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test4310() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test4311() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test4312() {
		Queue variable = new Queue();
		variable.enqueue(811115501);
		variable.toString();
		variable.dequeue();
		variable.toString();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.enqueue(1326330452);
    }
    @Test
    public void test4313() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.toString();
		x.enqueue(-875425939);
		x.isEmpty();
		x.isFull();
		x.toString();
		x.enqueue(186552981);
		x.isEmpty();
		assertEquals(186552981, x.dequeue());
		assertEquals("[]", x.toString());
		x.toString();
    }
    @Test
    public void test4314() {
		Queue variable = new Queue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(421281384);
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test4315() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(1293207689);
		z.enqueue(-2054699672);
		z.toString();
		assertFalse(z.isEmpty());
		z.toString();
		z.enqueue(2112596276);
		z.toString();
		z.isEmpty();
		z.enqueue(-181981186);
    }
    @Test
    public void test4316() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test4317() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(-623145252);
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.enqueue(-849674273);
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test4318() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		Var.enqueue(-1006655955);
		Var.enqueue(-1973844314);
    }
    @Test
    public void test4319() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.enqueue(163035053);
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test4320() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(71660665);
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.enqueue(-636621581);
		Var.enqueue(260038482);
		Var.dequeue();
    }
    @Test
    public void test4321() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.toString();
		y.enqueue(-2103601455);
		y.enqueue(-1567184882);
		y.isEmpty();
    }
    @Test
    public void test4322() {
		Queue y = new Queue();
		y.enqueue(762930741);
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test4323() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test4324() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.enqueue(-1302736333);
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.enqueue(1148175069);
    }
    @Test
    public void test4325() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-871628888);
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test4326() {
		Queue Var = new Queue();
		Var.enqueue(423455841);
		assertFalse(Var.isFull());
		Var.toString();
		assertEquals("[423455841]", Var.toString());
		assertFalse(Var.isEmpty());
		Var.enqueue(-99779857);
		Var.toString();
    }
    @Test
    public void test4327() {
		Queue variable = new Queue();
		variable.enqueue(462539989);
    }
    @Test
    public void test4328() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1316143807);
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.isFull();
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test4329() {
		Queue Var = new Queue();
		Var.enqueue(845739068);
		Var.isEmpty();
		Var.enqueue(-564985827);
		Var.dequeue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test4330() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test4331() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(1744364256);
		x.enqueue(704983760);
		x.toString();
		assertFalse(x.isEmpty());
		x.enqueue(-2138624587);
		x.enqueue(1978781604);
    }
    @Test
    public void test4332() {
		Queue x = new Queue();
		x.enqueue(1695321035);
		x.dequeue();
		x.dequeue();
		x.isFull();
		x.isFull();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isFull();
		assertEquals("[]", x.toString());
		x.enqueue(76180043);
    }
    @Test
    public void test4333() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(33225436);
		y.isFull();
    }
    @Test
    public void test4334() {
		Queue y = new Queue();
		y.enqueue(-1540539276);
		y.isFull();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.enqueue(663475282);
		y.toString();
    }
    @Test
    public void test4335() {
		Queue z = new Queue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.toString();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.enqueue(1993178187);
		z.isEmpty();
		z.toString();
		z.isEmpty();
		assertFalse(z.isEmpty());
		assertFalse(z.isEmpty());
		assertFalse(z.isFull());
		z.enqueue(-601297725);
		assertEquals("[1993178187]", z.toString());
		z.dequeue();
		z.toString();
    }
    @Test
    public void test4336() {
		Queue variable = new Queue();
		variable.enqueue(146314172);
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(888921781);
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test4337() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test4338() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.enqueue(-200111230);
		x.isFull();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(298921798);
    }
    @Test
    public void test4339() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test4340() {
		Queue z = new Queue();
		z.enqueue(-1330157805);
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(-215037570);
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isFull();
    }
    @Test
    public void test4341() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isFull();
    }
    @Test
    public void test4342() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1124257648);
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.enqueue(-313335293);
		Var.toString();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test4343() {
		Queue z = new Queue();
		z.toString();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test4344() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.toString();
		variable.enqueue(-1988954398);
		assertFalse(variable.isFull());
		variable.toString();
		variable.toString();
		variable.enqueue(-579780219);
		variable.toString();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test4345() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test4346() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.enqueue(1608523751);
		assertEquals("[1608523751]", y.toString());
		assertFalse(y.isEmpty());
		y.enqueue(1170732572);
		y.isFull();
		y.isFull();
		y.toString();
		y.isFull();
    }
    @Test
    public void test4347() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test4348() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test4349() {
		Queue Var = new Queue();
		Var.enqueue(-2074476055);
		Var.dequeue();
		Var.enqueue(128272310);
		assertEquals(128272310, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test4350() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(326208905);
		variable.isFull();
    }
    @Test
    public void test4351() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.toString();
		y.isFull();
		y.dequeue();
		y.isFull();
		y.enqueue(695563498);
		assertEquals(695563498, y.dequeue());
		y.toString();
		y.toString();
    }
    @Test
    public void test4352() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(1025598609);
		y.toString();
		assertFalse(y.isEmpty());
		y.enqueue(1952596343);
		y.isFull();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test4353() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.toString();
		x.toString();
		x.dequeue();
		x.enqueue(-882981972);
		assertEquals(-1, x.dequeue());
		x.enqueue(885433759);
		x.enqueue(-2039879195);
    }
    @Test
    public void test4354() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		Var.enqueue(-566905413);
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test4355() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-26048949);
    }
    @Test
    public void test4356() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(1559790845);
		Var.isEmpty();
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.toString();
		Var.enqueue(-1933342523);
		assertEquals("[1559790845]", Var.toString());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
		Var.enqueue(1182966422);
    }
    @Test
    public void test4357() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(1841379918);
		variable.dequeue();
    }
    @Test
    public void test4358() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		x.dequeue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertFalse(x.isFull());
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(1755989869);
		assertEquals("[1755989869]", x.toString());
		x.toString();
		x.enqueue(-1757834393);
    }
    @Test
    public void test4359() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test4360() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test4361() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertFalse(x.isFull());
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(-269341554);
    }
    @Test
    public void test4362() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1729139928);
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isFull();
		variable.enqueue(-538005349);
    }
    @Test
    public void test4363() {
		Queue z = new Queue();
		z.isFull();
		assertFalse(z.isFull());
		z.enqueue(381223919);
		z.isFull();
		z.toString();
		z.toString();
		z.isFull();
		z.isEmpty();
		z.toString();
		assertEquals(381223919, z.dequeue());
		z.toString();
    }
    @Test
    public void test4364() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test4365() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test4366() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(-1776244314);
		y.isEmpty();
		y.enqueue(-898856971);
		y.dequeue();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test4367() {
		Queue variable = new Queue();
		variable.enqueue(281286525);
		variable.enqueue(-2143160721);
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test4368() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-1963447756);
		z.enqueue(-699845581);
		z.dequeue();
		z.dequeue();
		z.toString();
		z.isFull();
    }
    @Test
    public void test4369() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(1439379404);
		y.enqueue(904094431);
		y.enqueue(-818110618);
		y.enqueue(1096053998);
		y.enqueue(-84140896);
		y.dequeue();
    }
    @Test
    public void test4370() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		y.toString();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isEmpty();
		assertFalse(y.isFull());
		y.toString();
		assertEquals(-1, y.dequeue());
		y.enqueue(-2114026846);
    }
    @Test
    public void test4371() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test4372() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.toString();
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isEmpty();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.enqueue(1785080921);
    }
    @Test
    public void test4373() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.enqueue(-758039318);
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test4374() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test4375() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.enqueue(859316612);
    }
    @Test
    public void test4376() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		y.enqueue(-1973497851);
		y.isEmpty();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test4377() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test4378() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.enqueue(146121662);
		Var.isEmpty();
		Var.enqueue(-2072783085);
		assertEquals("[146121662]", Var.toString());
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test4379() {
		Queue y = new Queue();
		y.enqueue(-781402548);
		y.enqueue(1656091809);
		y.isFull();
		y.isFull();
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
		assertEquals("[1656091809]", y.toString());
		y.enqueue(-1108017255);
		y.isFull();
    }
    @Test
    public void test4380() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test4381() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(234519939);
		assertEquals("[234519939]", z.toString());
		z.toString();
		z.enqueue(1221649252);
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.isEmpty();
		assertEquals("[234519939, 1221649252]", z.toString());
		z.isEmpty();
		z.enqueue(-688212568);
		assertEquals(234519939, z.dequeue());
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test4382() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.enqueue(1685130631);
		y.toString();
		y.enqueue(1886494877);
    }
    @Test
    public void test4383() {
		Queue z = new Queue();
		z.toString();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.enqueue(-590513846);
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isFull();
		z.toString();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test4384() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(2046074691);
		assertFalse(variable.isFull());
		variable.enqueue(-102578768);
		variable.isEmpty();
    }
    @Test
    public void test4385() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(-145253465);
		variable.enqueue(1087398863);
		variable.toString();
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test4386() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(-743574147);
		x.enqueue(-1949910037);
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.enqueue(482380400);
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test4387() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test4388() {
		Queue z = new Queue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isFull();
		assertEquals("[]", z.toString());
		z.toString();
		z.dequeue();
		z.enqueue(1642206088);
		z.isEmpty();
		z.enqueue(-2056627853);
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test4389() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-83812449);
		z.toString();
		z.toString();
		z.enqueue(802292509);
		z.toString();
		z.dequeue();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test4390() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-929463456);
		x.dequeue();
		assertEquals("[]", x.toString());
		x.dequeue();
    }
    @Test
    public void test4391() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(-1146992119);
		y.isFull();
		y.enqueue(-1678135436);
    }
    @Test
    public void test4392() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.enqueue(37430589);
		y.isEmpty();
		y.dequeue();
		y.enqueue(-829381021);
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(-1560138150);
		y.dequeue();
    }
    @Test
    public void test4393() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.toString();
		z.enqueue(-810736595);
		z.toString();
		z.enqueue(340517899);
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test4394() {
		Queue z = new Queue();
		z.enqueue(214751956);
		z.dequeue();
		z.isFull();
		z.enqueue(605375175);
		z.dequeue();
		z.dequeue();
		z.enqueue(-90662085);
		assertTrue(z.isEmpty());
		z.enqueue(-1313492895);
		assertEquals("[]", z.toString());
		z.enqueue(161061370);
		z.enqueue(-1601924793);
    }
    @Test
    public void test4395() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test4396() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test4397() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.toString();
		x.isFull();
		x.toString();
		x.dequeue();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.enqueue(120475997);
		assertFalse(x.isFull());
		x.enqueue(-1084586494);
		x.toString();
    }
    @Test
    public void test4398() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		assertFalse(x.isFull());
		x.dequeue();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test4399() {
		Queue x = new Queue();
		x.enqueue(-701323093);
		x.enqueue(598803603);
		x.toString();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(1071176531);
    }
    @Test
    public void test4400() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.isFull();
		variable.toString();
		variable.enqueue(-298745893);
		variable.dequeue();
    }
    @Test
    public void test4401() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(460846239);
		assertFalse(variable.isFull());
		variable.toString();
		assertEquals("[460846239]", variable.toString());
		variable.toString();
		variable.toString();
		variable.isEmpty();
		assertEquals(460846239, variable.dequeue());
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-120171240);
    }
    @Test
    public void test4402() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isFull();
		x.enqueue(1264244335);
		x.isEmpty();
		assertEquals("[1264244335]", x.toString());
		assertFalse(x.isEmpty());
		x.enqueue(1181498780);
		x.isFull();
		assertFalse(x.isEmpty());
		x.isFull();
		x.isFull();
    }
    @Test
    public void test4403() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(1556399050);
		assertFalse(y.isEmpty());
		y.isEmpty();
		y.toString();
		y.enqueue(181551116);
		y.dequeue();
    }
    @Test
    public void test4404() {
		Queue z = new Queue();
		z.enqueue(-758429952);
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.isFull();
		z.isEmpty();
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.toString();
    }
    @Test
    public void test4405() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(-2108365999);
		y.isFull();
    }
    @Test
    public void test4406() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(1706014930);
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		variable.enqueue(-764259141);
    }
    @Test
    public void test4407() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(145150486);
		z.enqueue(906342902);
		assertEquals(145150486, z.dequeue());
		z.isEmpty();
		z.isFull();
		z.isFull();
		z.isEmpty();
		assertEquals(906342902, z.dequeue());
		z.isEmpty();
		z.enqueue(-546471634);
		z.isEmpty();
    }
    @Test
    public void test4408() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test4409() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.enqueue(1472099822);
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(1131108895);
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test4410() {
		Queue variable = new Queue();
		variable.enqueue(-1176069896);
		variable.enqueue(-1064595206);
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test4411() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(-72616747);
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.enqueue(-131924178);
		x.dequeue();
    }
    @Test
    public void test4412() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.enqueue(-916385188);
		variable.toString();
		assertFalse(variable.isFull());
		variable.toString();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test4413() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test4414() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test4415() {
		Queue Var = new Queue();
		Var.enqueue(794949561);
		Var.isFull();
    }
    @Test
    public void test4416() {
		Queue y = new Queue();
		y.enqueue(1327703186);
		y.isFull();
		assertEquals(1327703186, y.dequeue());
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(-1288716632);
		y.enqueue(25207662);
		assertFalse(y.isFull());
		y.enqueue(257725903);
		y.toString();
		y.isEmpty();
		y.enqueue(-1217990408);
    }
    @Test
    public void test4417() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-2042692778);
		variable.isFull();
		variable.enqueue(-775751562);
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(-641084198);
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(-328036799);
    }
    @Test
    public void test4418() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test4419() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test4420() {
		Queue Var = new Queue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test4421() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		assertFalse(x.isFull());
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test4422() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(1250310122);
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(379726805);
		Var.isEmpty();
    }
    @Test
    public void test4423() {
		Queue z = new Queue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(948089734);
		z.toString();
		z.enqueue(993901835);
    }
    @Test
    public void test4424() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test4425() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-1938619851);
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(-569770501);
		variable.enqueue(1954778754);
		variable.enqueue(35363439);
		variable.isEmpty();
		variable.enqueue(-592572116);
    }
    @Test
    public void test4426() {
		Queue x = new Queue();
		x.enqueue(6781057);
		assertFalse(x.isEmpty());
		x.isEmpty();
		x.enqueue(-1396243053);
		x.dequeue();
    }
    @Test
    public void test4427() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.enqueue(-1085075364);
		assertTrue(z.isEmpty());
		z.dequeue();
		z.dequeue();
		z.enqueue(-1398698710);
		z.dequeue();
		z.dequeue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test4428() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.enqueue(528926767);
		y.isFull();
		y.toString();
		y.enqueue(290753908);
		y.enqueue(1287174517);
		y.isFull();
		y.dequeue();
		y.enqueue(216619300);
    }
    @Test
    public void test4429() {
		Queue z = new Queue();
		z.enqueue(1952590903);
		assertEquals(1952590903, z.dequeue());
		z.isEmpty();
		z.toString();
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertFalse(z.isFull());
		z.toString();
		z.dequeue();
		z.enqueue(-450240500);
		z.dequeue();
    }
    @Test
    public void test4430() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(1623464644);
		variable.toString();
		assertEquals(1623464644, variable.dequeue());
		variable.dequeue();
		variable.enqueue(20704087);
    }
    @Test
    public void test4431() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.toString();
		x.enqueue(626980604);
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		assertFalse(x.isEmpty());
		assertFalse(x.isEmpty());
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test4432() {
		Queue y = new Queue();
		y.enqueue(1784281540);
		y.enqueue(388591518);
		y.dequeue();
		y.isFull();
		y.isFull();
		y.enqueue(-2087947362);
		y.toString();
		y.dequeue();
		y.enqueue(-249601012);
    }
    @Test
    public void test4433() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.enqueue(-997152296);
		assertTrue(x.isEmpty());
		x.isFull();
		x.toString();
		x.isFull();
		x.toString();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test4434() {
		Queue z = new Queue();
		z.toString();
		assertTrue(z.isEmpty());
		z.toString();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test4435() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test4436() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(-1156707716);
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.enqueue(2008250267);
    }
    @Test
    public void test4437() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(468661809);
		x.isFull();
		x.isFull();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(1921482698);
    }
    @Test
    public void test4438() {
		Queue y = new Queue();
		y.enqueue(666224182);
		y.dequeue();
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test4439() {
		Queue z = new Queue();
		z.enqueue(820217143);
		z.toString();
		z.isEmpty();
		z.isEmpty();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test4440() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.enqueue(-189370032);
		variable.isFull();
		variable.toString();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test4441() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.toString();
		z.toString();
		z.enqueue(-176047043);
		assertEquals("[]", z.toString());
		z.enqueue(-671610687);
    }
    @Test
    public void test4442() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.dequeue();
		z.isFull();
		z.dequeue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.toString();
    }
    @Test
    public void test4443() {
		Queue x = new Queue();
		x.enqueue(1367158150);
		x.enqueue(232555575);
		x.toString();
		x.isFull();
		x.isFull();
		assertFalse(x.isEmpty());
		x.enqueue(1812034161);
		assertEquals(1367158150, x.dequeue());
		x.enqueue(-1737140677);
		assertFalse(x.isEmpty());
		x.toString();
    }
    @Test
    public void test4444() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(938344965);
		z.toString();
		assertFalse(z.isFull());
		assertEquals("[938344965]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test4445() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test4446() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(1325748172);
		variable.enqueue(949338742);
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.enqueue(-915173052);
    }
    @Test
    public void test4447() {
		Queue x = new Queue();
		x.enqueue(-947942831);
		x.enqueue(-24960735);
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test4448() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(1016270757);
		Var.isFull();
		Var.isFull();
		Var.enqueue(706794463);
		Var.enqueue(-1450270377);
		Var.enqueue(-1669272362);
    }
    @Test
    public void test4449() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test4450() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.dequeue();
		x.enqueue(-1274246157);
		assertEquals(-1, x.dequeue());
		x.enqueue(-1507782742);
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.dequeue();
		x.enqueue(16690268);
		x.isFull();
		x.isFull();
		assertFalse(x.isEmpty());
		x.enqueue(-40505976);
    }
    @Test
    public void test4451() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-683737883);
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(1535564862);
		variable.toString();
    }
    @Test
    public void test4452() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test4453() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test4454() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.dequeue();
		variable.enqueue(187606722);
		variable.enqueue(268915630);
		variable.isFull();
		assertFalse(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test4455() {
		Queue z = new Queue();
		z.toString();
		assertTrue(z.isEmpty());
		z.toString();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.toString();
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test4456() {
		Queue z = new Queue();
		z.enqueue(999537922);
		z.toString();
		z.enqueue(553968470);
		z.enqueue(-2102074078);
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(1470170083);
		assertEquals("[999537922, 553968470, 1470170083]", z.toString());
		z.isFull();
    }
    @Test
    public void test4457() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(1751018010);
		Var.toString();
    }
    @Test
    public void test4458() {
		Queue x = new Queue();
		x.enqueue(-823986875);
		assertEquals("[]", x.toString());
		x.enqueue(-953678915);
    }
    @Test
    public void test4459() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(-472939719);
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test4460() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test4461() {
		Queue x = new Queue();
		x.enqueue(911706717);
    }
    @Test
    public void test4462() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isEmpty();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1562653858);
		z.toString();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isFull();
		z.enqueue(-380310575);
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test4463() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		assertFalse(z.isFull());
		z.toString();
		z.toString();
    }
    @Test
    public void test4464() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.enqueue(-1031076819);
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test4465() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1302679919);
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.toString();
		y.isFull();
		assertFalse(y.isFull());
		y.enqueue(-1562469403);
		y.isEmpty();
    }
    @Test
    public void test4466() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.enqueue(-1354277535);
    }
    @Test
    public void test4467() {
		Queue Var = new Queue();
		Var.enqueue(1889313438);
		assertFalse(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(1866760600);
		Var.isEmpty();
    }
    @Test
    public void test4468() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.toString();
		y.enqueue(1090999092);
		y.enqueue(-1858782859);
		assertFalse(y.isFull());
		assertEquals("[1090999092]", y.toString());
		y.isFull();
		y.isFull();
    }
    @Test
    public void test4469() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(1949983812);
		Var.isEmpty();
		Var.enqueue(263231271);
		Var.toString();
		Var.enqueue(463429227);
		Var.dequeue();
    }
    @Test
    public void test4470() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test4471() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.enqueue(1639113354);
    }
    @Test
    public void test4472() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.enqueue(-2072331537);
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isFull();
		Var.enqueue(873730096);
		Var.isFull();
		Var.enqueue(-588770873);
		Var.isEmpty();
    }
    @Test
    public void test4473() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(2001887766);
		y.enqueue(1318960580);
		y.dequeue();
		y.dequeue();
		y.enqueue(2046601068);
		y.isEmpty();
		y.isFull();
		assertEquals("[2046601068]", y.toString());
		y.enqueue(1811659940);
		assertFalse(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test4474() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.enqueue(334269555);
    }
    @Test
    public void test4475() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test4476() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.isEmpty();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(-1320120277);
		x.isFull();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test4477() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.enqueue(-1680629864);
		x.toString();
		x.isFull();
		x.toString();
		assertFalse(x.isFull());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test4478() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test4479() {
		Queue z = new Queue();
		z.isFull();
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.enqueue(1480621249);
		z.isFull();
		assertEquals(1480621249, z.dequeue());
		z.enqueue(-1496007822);
		z.enqueue(2097310371);
		z.isFull();
		z.toString();
		z.toString();
    }
    @Test
    public void test4480() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test4481() {
		Queue x = new Queue();
		x.enqueue(-1553795359);
		x.enqueue(-337464130);
    }
    @Test
    public void test4482() {
		Queue variable = new Queue();
		variable.enqueue(1971500998);
		assertFalse(variable.isEmpty());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.toString();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.enqueue(1706682315);
		variable.enqueue(-1155265896);
		assertFalse(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(-316432397);
    }
    @Test
    public void test4483() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.toString();
		x.isFull();
		x.enqueue(642029335);
		x.enqueue(-804351928);
		assertEquals("[642029335]", x.toString());
		assertEquals("[642029335]", x.toString());
		x.isFull();
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test4484() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isFull();
		z.dequeue();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		z.enqueue(-1562101427);
    }
    @Test
    public void test4485() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(432242649);
		Var.enqueue(-460376022);
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.enqueue(-404953185);
    }
    @Test
    public void test4486() {
		Queue Var = new Queue();
		Var.enqueue(1373800885);
		Var.isFull();
		assertEquals(1373800885, Var.dequeue());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1282707545);
		Var.dequeue();
		Var.enqueue(1125279804);
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(-1725973589);
    }
    @Test
    public void test4487() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.enqueue(61723871);
		y.isFull();
		y.enqueue(888870632);
		y.isFull();
		assertFalse(y.isEmpty());
		y.dequeue();
    }
    @Test
    public void test4488() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test4489() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test4490() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.enqueue(1134857674);
		y.isFull();
		assertEquals(1134857674, y.dequeue());
		y.isFull();
		y.enqueue(937056762);
		y.enqueue(782423101);
		y.toString();
		y.enqueue(2003069419);
		y.toString();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test4491() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.toString();
		z.enqueue(-1990359);
    }
    @Test
    public void test4492() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-1134017333);
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isFull();
		y.enqueue(1024787882);
		y.isEmpty();
    }
    @Test
    public void test4493() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test4494() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.toString();
		y.dequeue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test4495() {
		Queue variable = new Queue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test4496() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(2050986793);
    }
    @Test
    public void test4497() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test4498() {
		Queue variable = new Queue();
		variable.enqueue(1902125877);
    }
    @Test
    public void test4499() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.enqueue(845716059);
		z.isFull();
		z.isFull();
		z.isEmpty();
		z.enqueue(-1409912018);
		z.isEmpty();
    }
    @Test
    public void test4500() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test4501() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test4502() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(873689981);
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test4503() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(-599212025);
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test4504() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test4505() {
		Queue Var = new Queue();
		Var.enqueue(1468147167);
		Var.enqueue(816402545);
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.dequeue();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test4506() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-552330824);
    }
    @Test
    public void test4507() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test4508() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(672896025);
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test4509() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(1422511583);
    }
    @Test
    public void test4510() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(611049948);
		x.dequeue();
		x.toString();
		x.toString();
		x.isEmpty();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.toString();
		assertEquals("[]", x.toString());
		x.dequeue();
    }
    @Test
    public void test4511() {
		Queue y = new Queue();
		y.enqueue(-587704041);
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test4512() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.isFull();
		x.toString();
    }
    @Test
    public void test4513() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(1585456165);
		Var.enqueue(-1465362230);
		assertFalse(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test4514() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test4515() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.dequeue();
		z.enqueue(1026542801);
		z.dequeue();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test4516() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.toString();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.toString();
    }
    @Test
    public void test4517() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.toString();
		assertTrue(z.isEmpty());
		z.toString();
    }
    @Test
    public void test4518() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test4519() {
		Queue z = new Queue();
		z.dequeue();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.toString();
    }
    @Test
    public void test4520() {
		Queue x = new Queue();
		x.enqueue(-465191727);
		x.enqueue(828705823);
		x.toString();
		assertFalse(x.isEmpty());
		assertEquals("[828705823]", x.toString());
		assertEquals(828705823, x.dequeue());
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test4521() {
		Queue variable = new Queue();
		variable.enqueue(256964519);
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test4522() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test4523() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(1809559949);
		assertEquals(1809559949, Var.dequeue());
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test4524() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.isFull();
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-1426107074);
		z.toString();
		z.enqueue(-1794856389);
		z.isFull();
    }
    @Test
    public void test4525() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(-2015635957);
		y.enqueue(942281707);
		y.isFull();
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
		y.toString();
		y.toString();
		y.dequeue();
		y.enqueue(594379181);
		y.enqueue(-710980186);
    }
    @Test
    public void test4526() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1538097756);
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.enqueue(577973339);
		assertEquals("[577973339]", variable.toString());
		variable.enqueue(1868499235);
		variable.enqueue(-778988162);
		variable.enqueue(-1929913161);
    }
    @Test
    public void test4527() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(854982976);
		x.toString();
		x.enqueue(1330677874);
		x.isFull();
    }
    @Test
    public void test4528() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test4529() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test4530() {
		Queue z = new Queue();
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(541999661);
		z.dequeue();
		z.toString();
    }
    @Test
    public void test4531() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.enqueue(784291397);
		assertEquals("[784291397]", variable.toString());
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test4532() {
		Queue variable = new Queue();
		variable.enqueue(514014504);
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test4533() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.toString();
		x.isFull();
		assertEquals("[]", x.toString());
		x.enqueue(1533733044);
		assertFalse(x.isFull());
		x.dequeue();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test4534() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(-276005483);
    }
    @Test
    public void test4535() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test4536() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.enqueue(1527381875);
		y.isFull();
		y.isFull();
		y.isEmpty();
		y.enqueue(-331603601);
    }
    @Test
    public void test4537() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test4538() {
		Queue variable = new Queue();
		variable.enqueue(29360549);
		variable.toString();
		assertEquals(29360549, variable.dequeue());
		variable.isEmpty();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.toString();
    }
    @Test
    public void test4539() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-31654510);
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test4540() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.enqueue(-293548240);
		Var.enqueue(-1377569586);
		Var.toString();
		Var.toString();
		Var.enqueue(-251182797);
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test4541() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.isFull();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test4542() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test4543() {
		Queue Var = new Queue();
		Var.enqueue(1385356606);
		Var.enqueue(-1989728840);
		Var.toString();
		Var.toString();
    }
    @Test
    public void test4544() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.dequeue();
		z.enqueue(-2066943110);
		z.enqueue(445870187);
    }
    @Test
    public void test4545() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test4546() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(1386217790);
		assertEquals("[1386217790]", Var.toString());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(910497862);
		Var.enqueue(-1382977559);
    }
    @Test
    public void test4547() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-395391991);
		y.toString();
		y.isFull();
		y.toString();
		y.isFull();
		y.enqueue(1604878223);
		y.isFull();
    }
    @Test
    public void test4548() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.isFull();
		x.enqueue(154586542);
		assertEquals("[154586542]", x.toString());
		assertFalse(x.isEmpty());
		x.isEmpty();
		assertEquals(154586542, x.dequeue());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.enqueue(1192244733);
		x.isFull();
    }
    @Test
    public void test4549() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.enqueue(-1341003069);
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test4550() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(-215433104);
		y.dequeue();
		y.isFull();
		y.enqueue(-955008135);
		y.dequeue();
		y.enqueue(1134761167);
		y.enqueue(-763524313);
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test4551() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		x.dequeue();
		x.enqueue(1194230056);
		assertEquals("[1194230056]", x.toString());
		x.toString();
		assertEquals("[1194230056]", x.toString());
		assertEquals("[1194230056]", x.toString());
		x.isFull();
		x.isFull();
		assertFalse(x.isEmpty());
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test4552() {
		Queue y = new Queue();
		y.enqueue(-634576064);
		y.isEmpty();
    }
    @Test
    public void test4553() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test4554() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(1826241915);
		variable.toString();
		variable.dequeue();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test4555() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-631565481);
		Var.enqueue(-93697352);
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test4556() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test4557() {
		Queue z = new Queue();
		z.enqueue(-959466536);
		z.toString();
		z.dequeue();
		z.enqueue(586505704);
    }
    @Test
    public void test4558() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(1603946374);
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test4559() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.toString();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(-1301781235);
		variable.enqueue(-1893319071);
    }
    @Test
    public void test4560() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(1092728005);
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.toString();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.enqueue(2081730299);
		x.isFull();
    }
    @Test
    public void test4561() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test4562() {
		Queue Var = new Queue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(-1606902450);
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(2066060088);
    }
    @Test
    public void test4563() {
		Queue x = new Queue();
		x.enqueue(119930927);
		x.isEmpty();
		x.enqueue(2119803900);
		x.dequeue();
		assertEquals("[2119803900]", x.toString());
		x.enqueue(1444815304);
		x.enqueue(1422433442);
		assertEquals("[2119803900, 1444815304, 1422433442]", x.toString());
		assertEquals("[2119803900, 1444815304, 1422433442]", x.toString());
		assertEquals(2119803900, x.dequeue());
		assertEquals(1444815304, x.dequeue());
		x.enqueue(-724813317);
		x.toString();
    }
    @Test
    public void test4564() {
		Queue variable = new Queue();
		variable.enqueue(1623452423);
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test4565() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-96981775);
		assertEquals(-1, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test4566() {
		Queue variable = new Queue();
		variable.enqueue(292757654);
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-1892121169);
		variable.toString();
		variable.dequeue();
		variable.enqueue(-42036807);
		variable.toString();
		variable.enqueue(32866489);
    }
    @Test
    public void test4567() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test4568() {
		Queue variable = new Queue();
		variable.enqueue(-1581995934);
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test4569() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test4570() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.enqueue(-87642235);
		y.dequeue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.isFull();
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test4571() {
		Queue y = new Queue();
		y.enqueue(1388265122);
		y.dequeue();
    }
    @Test
    public void test4572() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test4573() {
		Queue Var = new Queue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isFull();
		Var.isFull();
		Var.enqueue(1401000783);
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test4574() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-1126278626);
		variable.isEmpty();
		variable.enqueue(678179207);
    }
    @Test
    public void test4575() {
		Queue variable = new Queue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(1803668830);
    }
    @Test
    public void test4576() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(1047846164);
		x.isFull();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test4577() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test4578() {
		Queue variable = new Queue();
		variable.enqueue(715219384);
		variable.isEmpty();
    }
    @Test
    public void test4579() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-92295235);
		x.dequeue();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.enqueue(-392754819);
		assertEquals(-1, x.dequeue());
		x.enqueue(-942795645);
		x.toString();
		x.isFull();
		x.isEmpty();
		x.enqueue(-944108343);
    }
    @Test
    public void test4580() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test4581() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(-202900204);
		Var.enqueue(-1271360026);
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(779009137);
    }
    @Test
    public void test4582() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(-108655963);
		z.isEmpty();
		z.enqueue(-1218733309);
		z.dequeue();
		z.enqueue(1017023828);
    }
    @Test
    public void test4583() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.enqueue(-1936104794);
		assertEquals("[]", z.toString());
		z.enqueue(-1528004267);
		z.isFull();
		z.isFull();
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test4584() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test4585() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test4586() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.toString();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.toString();
		x.enqueue(-2009055277);
		x.isFull();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.toString();
		x.isFull();
    }
    @Test
    public void test4587() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
		y.dequeue();
		y.toString();
		y.isEmpty();
		y.enqueue(-1622728801);
		assertFalse(y.isFull());
		y.isFull();
		assertEquals("[]", y.toString());
		y.enqueue(485353082);
		y.isEmpty();
    }
    @Test
    public void test4588() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test4589() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test4590() {
		Queue y = new Queue();
		y.enqueue(-1439643853);
		y.isFull();
    }
    @Test
    public void test4591() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-793834693);
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.enqueue(326254044);
		x.isEmpty();
		assertEquals("[326254044]", x.toString());
		x.dequeue();
		x.dequeue();
		x.enqueue(1321932206);
		x.enqueue(-1234037867);
		assertEquals("[1321932206]", x.toString());
		x.dequeue();
    }
    @Test
    public void test4592() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.enqueue(-1332899656);
    }
    @Test
    public void test4593() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-1512818420);
    }
    @Test
    public void test4594() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test4595() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isFull();
		x.enqueue(863961454);
		x.enqueue(-1654483542);
		x.enqueue(-1146971579);
		x.isEmpty();
		assertEquals(863961454, x.dequeue());
		x.toString();
    }
    @Test
    public void test4596() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test4597() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-1764902964);
		Var.enqueue(-175358446);
		Var.isEmpty();
    }
    @Test
    public void test4598() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-1164164600);
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(-521821503);
    }
    @Test
    public void test4599() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.dequeue();
		x.enqueue(1580771650);
		x.isFull();
		x.enqueue(-1467033560);
		assertEquals("[1580771650]", x.toString());
		x.enqueue(491988869);
		assertEquals(1580771650, x.dequeue());
		x.toString();
		assertFalse(x.isEmpty());
		assertFalse(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test4600() {
		Queue Var = new Queue();
		Var.enqueue(549209825);
    }
    @Test
    public void test4601() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-1986860782);
		y.isFull();
		assertTrue(y.isEmpty());
		y.enqueue(-1084661861);
		y.dequeue();
		y.enqueue(2073316174);
		y.isFull();
		y.toString();
		y.toString();
    }
    @Test
    public void test4602() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(1475538469);
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(964603541);
    }
    @Test
    public void test4603() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(1784755836);
		x.isFull();
		assertFalse(x.isEmpty());
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test4604() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test4605() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.toString();
		x.enqueue(225731800);
		x.enqueue(2048001527);
		assertEquals("[225731800, 2048001527]", x.toString());
		x.isFull();
    }
    @Test
    public void test4606() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1543726760);
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test4607() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test4608() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test4609() {
		Queue x = new Queue();
		x.enqueue(80591415);
		x.toString();
		x.enqueue(-1574815665);
		assertEquals(80591415, x.dequeue());
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test4610() {
		Queue variable = new Queue();
		variable.enqueue(1102306586);
		variable.dequeue();
		variable.enqueue(195562002);
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(-676170760);
		variable.enqueue(1559731268);
    }
    @Test
    public void test4611() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-2000025780);
		z.toString();
		z.isEmpty();
		assertFalse(z.isFull());
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test4612() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(853184193);
    }
    @Test
    public void test4613() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test4614() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test4615() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.enqueue(1000167608);
		assertEquals("[1000167608]", y.toString());
		assertEquals(1000167608, y.dequeue());
		y.enqueue(275193525);
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test4616() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-996682984);
		x.isFull();
		x.enqueue(502885056);
		x.toString();
		assertFalse(x.isFull());
		assertEquals("[502885056]", x.toString());
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test4617() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.enqueue(-2053725703);
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.toString();
		Var.enqueue(1043656892);
		Var.toString();
		assertEquals(1043656892, Var.dequeue());
		Var.enqueue(-806954399);
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test4618() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test4619() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(1200658410);
		y.enqueue(221955067);
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test4620() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.enqueue(476515692);
		x.enqueue(1327419435);
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.enqueue(-688780264);
    }
    @Test
    public void test4621() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.enqueue(-1441239127);
		y.enqueue(-902738511);
		y.toString();
		y.toString();
		y.isEmpty();
		y.toString();
		y.dequeue();
		y.isFull();
		y.toString();
    }
    @Test
    public void test4622() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.toString();
		variable.enqueue(-1054277541);
		variable.enqueue(1368501046);
		variable.isEmpty();
		variable.toString();
		assertFalse(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test4623() {
		Queue y = new Queue();
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(2118417311);
		y.isFull();
		y.dequeue();
		y.enqueue(-1242836240);
		y.toString();
		assertEquals("[]", y.toString());
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.toString();
    }
    @Test
    public void test4624() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.enqueue(-1030583424);
		x.toString();
    }
    @Test
    public void test4625() {
		Queue x = new Queue();
		x.enqueue(-705939540);
    }
    @Test
    public void test4626() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		y.toString();
		y.enqueue(2037510606);
		y.enqueue(1388040509);
    }
    @Test
    public void test4627() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.enqueue(-94770470);
		z.dequeue();
		z.toString();
		z.toString();
    }
    @Test
    public void test4628() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(-1953758598);
		y.toString();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test4629() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.isFull();
		y.enqueue(2048223678);
		y.enqueue(657052311);
    }
    @Test
    public void test4630() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.toString();
		x.enqueue(-1464107165);
		x.toString();
		assertTrue(x.isEmpty());
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(1985503051);
		x.isEmpty();
		assertEquals(1985503051, x.dequeue());
		x.isEmpty();
		x.enqueue(989059155);
		x.isFull();
    }
    @Test
    public void test4631() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.toString();
		x.isFull();
		x.isFull();
		x.enqueue(-1652096243);
		x.enqueue(2102612960);
    }
    @Test
    public void test4632() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test4633() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.enqueue(-798250525);
		variable.enqueue(-122617114);
		variable.toString();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test4634() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.enqueue(-1239340719);
    }
    @Test
    public void test4635() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.isEmpty();
		x.toString();
		x.toString();
		x.toString();
		x.toString();
		x.isFull();
    }
    @Test
    public void test4636() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(375312504);
    }
    @Test
    public void test4637() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.enqueue(552616973);
		variable.dequeue();
		variable.toString();
		variable.isFull();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.toString();
    }
    @Test
    public void test4638() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.enqueue(470306360);
		z.isFull();
		z.isEmpty();
		z.enqueue(-1668262097);
		z.isFull();
		assertFalse(z.isEmpty());
		z.toString();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test4639() {
		Queue y = new Queue();
		y.enqueue(-1938395642);
		y.isEmpty();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test4640() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.enqueue(-1340689345);
		variable.enqueue(-1677309692);
    }
    @Test
    public void test4641() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.enqueue(296098275);
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-1435075154);
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test4642() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(82871598);
		y.isFull();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test4643() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.isEmpty();
		y.enqueue(604584903);
		y.enqueue(-1515599832);
		y.isFull();
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test4644() {
		Queue Var = new Queue();
		Var.enqueue(-449950766);
    }
    @Test
    public void test4645() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.toString();
		y.isFull();
		y.isEmpty();
		y.isFull();
		y.enqueue(1540672096);
		y.isFull();
		y.toString();
    }
    @Test
    public void test4646() {
		Queue z = new Queue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.enqueue(650970902);
		z.dequeue();
		z.toString();
		z.enqueue(-1989199492);
		assertTrue(z.isEmpty());
		z.enqueue(1282733769);
    }
    @Test
    public void test4647() {
		Queue variable = new Queue();
		variable.enqueue(-905423958);
		assertTrue(variable.isEmpty());
		variable.enqueue(705747909);
    }
    @Test
    public void test4648() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(69369519);
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(801950462);
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.enqueue(192772518);
		x.enqueue(161695090);
    }
    @Test
    public void test4649() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(1838266481);
		x.dequeue();
		x.toString();
		x.toString();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.enqueue(-273279076);
		x.isFull();
		x.enqueue(1175719287);
		x.isEmpty();
    }
    @Test
    public void test4650() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test4651() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test4652() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.dequeue();
		y.enqueue(-962821978);
		y.enqueue(1997333519);
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.enqueue(-122050420);
		y.isFull();
    }
    @Test
    public void test4653() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test4654() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
		y.isFull();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isFull();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.enqueue(-1149884072);
		assertFalse(y.isFull());
		y.toString();
		y.enqueue(351028617);
    }
    @Test
    public void test4655() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test4656() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(112301627);
		Var.isFull();
		assertEquals("[112301627]", Var.toString());
		Var.toString();
    }
    @Test
    public void test4657() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1586336476);
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test4658() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.toString();
    }
    @Test
    public void test4659() {
		Queue x = new Queue();
		x.enqueue(1814920562);
		assertEquals("[1814920562]", x.toString());
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(587458786);
		x.enqueue(1111973463);
		x.dequeue();
		x.enqueue(1558748196);
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test4660() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(1087612917);
		variable.enqueue(-1229917794);
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		assertEquals("[1087612917]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test4661() {
		Queue variable = new Queue();
		variable.enqueue(-1857823160);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.toString();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(1742495979);
		variable.isEmpty();
    }
    @Test
    public void test4662() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		z.isEmpty();
		z.enqueue(-697688885);
		z.enqueue(144012329);
    }
    @Test
    public void test4663() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		variable.isFull();
		variable.enqueue(-1517644665);
		variable.isFull();
		variable.enqueue(1453515953);
    }
    @Test
    public void test4664() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(-627845661);
		z.enqueue(225913844);
		z.enqueue(-146524509);
		z.isFull();
    }
    @Test
    public void test4665() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.isEmpty();
		z.toString();
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(303621863);
    }
    @Test
    public void test4666() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(1268361293);
    }
    @Test
    public void test4667() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.dequeue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1427489142);
    }
    @Test
    public void test4668() {
		Queue Var = new Queue();
		Var.enqueue(-1364543592);
		Var.enqueue(1403736984);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		Var.dequeue();
		Var.enqueue(-411237689);
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.enqueue(-1841594298);
    }
    @Test
    public void test4669() {
		Queue z = new Queue();
		z.enqueue(654462657);
		z.toString();
		z.dequeue();
		z.enqueue(-930846777);
		z.toString();
		z.enqueue(1914301153);
		z.toString();
		assertFalse(z.isFull());
		assertFalse(z.isEmpty());
		z.isEmpty();
		z.isFull();
		z.toString();
    }
    @Test
    public void test4670() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1360819726);
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.enqueue(1779670334);
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.toString();
		Var.enqueue(1972727688);
		assertEquals(1972727688, Var.dequeue());
		Var.toString();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test4671() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test4672() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test4673() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(-842545880);
		z.isEmpty();
    }
    @Test
    public void test4674() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-1291293437);
    }
    @Test
    public void test4675() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.enqueue(-1439708555);
		assertTrue(z.isEmpty());
		z.toString();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test4676() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(645829963);
		z.toString();
    }
    @Test
    public void test4677() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(1082058893);
		y.isFull();
		y.isFull();
		y.enqueue(-807344189);
		y.isEmpty();
		y.toString();
		assertEquals(1082058893, y.dequeue());
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test4678() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.toString();
		variable.toString();
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test4679() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.enqueue(457997344);
    }
    @Test
    public void test4680() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-928347626);
		x.isFull();
    }
    @Test
    public void test4681() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isEmpty();
		y.enqueue(-1604257206);
		y.toString();
		y.isEmpty();
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
    }
    @Test
    public void test4682() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1354189295);
		Var.isEmpty();
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(-805939484);
		Var.toString();
		Var.enqueue(-1005307567);
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-234527944);
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test4683() {
		Queue z = new Queue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.enqueue(-211495033);
		z.toString();
		z.isFull();
		z.enqueue(-1973991097);
		z.enqueue(153380658);
		z.isEmpty();
		z.toString();
		z.isFull();
    }
    @Test
    public void test4684() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test4685() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-822218844);
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(970023518);
    }
    @Test
    public void test4686() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-148146188);
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test4687() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.isEmpty();
		z.enqueue(1047935611);
		z.isEmpty();
		z.enqueue(-453436641);
    }
    @Test
    public void test4688() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.isFull();
		z.toString();
    }
    @Test
    public void test4689() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-1075530220);
    }
    @Test
    public void test4690() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
		Var.enqueue(364132316);
		Var.enqueue(1054391615);
    }
    @Test
    public void test4691() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test4692() {
		Queue x = new Queue();
		x.enqueue(-270128199);
		x.toString();
		x.dequeue();
		x.enqueue(-267480387);
		x.isFull();
		assertFalse(x.isFull());
		x.isEmpty();
		x.enqueue(1299993433);
		x.dequeue();
		x.enqueue(-802693991);
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test4693() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.isFull();
		x.isFull();
		x.isFull();
		x.enqueue(-250618897);
    }
    @Test
    public void test4694() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(1218260855);
		assertEquals(1218260855, variable.dequeue());
		variable.enqueue(1553168053);
		assertEquals(1553168053, variable.dequeue());
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(960048897);
		variable.enqueue(656738167);
		assertEquals(960048897, variable.dequeue());
		variable.dequeue();
		variable.enqueue(-1935532757);
		variable.isEmpty();
		variable.enqueue(1329069722);
    }
    @Test
    public void test4695() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test4696() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(1231510614);
		z.toString();
		assertFalse(z.isFull());
		z.dequeue();
		z.isFull();
		z.toString();
    }
    @Test
    public void test4697() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.enqueue(963602408);
		z.enqueue(-1802267129);
		assertFalse(z.isEmpty());
		z.enqueue(82977985);
		z.enqueue(-747193317);
		z.toString();
		z.enqueue(1518453936);
		z.toString();
		z.enqueue(63379692);
		z.toString();
    }
    @Test
    public void test4698() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test4699() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.enqueue(225812846);
		Var.enqueue(2114851627);
		Var.dequeue();
		Var.isEmpty();
		assertEquals("[2114851627]", Var.toString());
		assertEquals("[2114851627]", Var.toString());
		assertEquals("[2114851627]", Var.toString());
		Var.enqueue(39877979);
		assertEquals("[2114851627, 39877979]", Var.toString());
		Var.dequeue();
		Var.enqueue(857666148);
		Var.enqueue(-1299394511);
		Var.dequeue();
    }
    @Test
    public void test4700() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.enqueue(1696065436);
		z.isEmpty();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.enqueue(1460208784);
    }
    @Test
    public void test4701() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(394164115);
		Var.enqueue(1861273309);
		Var.dequeue();
		assertEquals("[1861273309]", Var.toString());
		assertEquals(1861273309, Var.dequeue());
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test4702() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test4703() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
		x.toString();
		x.toString();
		assertFalse(x.isFull());
		x.isFull();
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test4704() {
		Queue variable = new Queue();
		variable.enqueue(-1738408276);
		variable.enqueue(819745422);
		variable.isFull();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
		assertFalse(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test4705() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-1172481392);
		assertFalse(x.isFull());
		x.enqueue(-1059017122);
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		x.enqueue(1790089748);
		assertEquals(1790089748, x.dequeue());
		x.toString();
    }
    @Test
    public void test4706() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.isFull();
		z.enqueue(-1618063612);
		z.toString();
		z.isFull();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.toString();
    }
    @Test
    public void test4707() {
		Queue Var = new Queue();
		Var.enqueue(-1900685739);
		Var.dequeue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.enqueue(782960760);
    }
    @Test
    public void test4708() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test4709() {
		Queue Var = new Queue();
		Var.enqueue(-916107394);
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-836893576);
		Var.toString();
		Var.isEmpty();
		Var.toString();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test4710() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(23424865);
		assertFalse(x.isEmpty());
		assertFalse(x.isFull());
		x.toString();
		x.toString();
		x.enqueue(2105987831);
		x.toString();
		assertEquals("[23424865, 2105987831]", x.toString());
		x.isFull();
		x.toString();
		x.enqueue(-2100801088);
    }
    @Test
    public void test4711() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.enqueue(-2087877855);
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test4712() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-1814732982);
		assertFalse(variable.isFull());
		variable.enqueue(-295009368);
		variable.isFull();
    }
    @Test
    public void test4713() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test4714() {
		Queue variable = new Queue();
		variable.enqueue(-784180710);
		variable.toString();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-1805370124);
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test4715() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(29696931);
    }
    @Test
    public void test4716() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isFull();
		x.isFull();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.isFull();
		x.toString();
		x.enqueue(-406373517);
		x.isFull();
		x.isEmpty();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test4717() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(1143743067);
		variable.enqueue(-1596362135);
		variable.toString();
		variable.toString();
    }
    @Test
    public void test4718() {
		Queue Var = new Queue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.enqueue(1696839242);
		Var.isFull();
    }
    @Test
    public void test4719() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test4720() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(324477850);
		assertEquals(324477850, variable.dequeue());
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test4721() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test4722() {
		Queue z = new Queue();
		z.enqueue(391002774);
		z.enqueue(2014058937);
		z.dequeue();
		assertFalse(z.isEmpty());
		z.isEmpty();
		z.enqueue(1632237650);
		z.enqueue(-1765121690);
    }
    @Test
    public void test4723() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(1823398017);
		assertEquals(1823398017, z.dequeue());
		z.dequeue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test4724() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(-1479506316);
		y.enqueue(1169474153);
		y.toString();
    }
    @Test
    public void test4725() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-136674011);
		Var.isFull();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.isFull();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test4726() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(513346255);
		Var.isEmpty();
		Var.enqueue(-952893098);
		assertFalse(Var.isFull());
		Var.enqueue(1503935365);
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(1327130385);
    }
    @Test
    public void test4727() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.enqueue(330578189);
		y.isEmpty();
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test4728() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(10795754);
		Var.toString();
    }
    @Test
    public void test4729() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(439171110);
		variable.enqueue(-1653863007);
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-270121073);
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(-1980300774);
    }
    @Test
    public void test4730() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.dequeue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test4731() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test4732() {
		Queue x = new Queue();
		x.enqueue(2106617522);
		x.isFull();
		x.toString();
    }
    @Test
    public void test4733() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(-2138130791);
		y.toString();
    }
    @Test
    public void test4734() {
		Queue x = new Queue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.enqueue(-1249955541);
		x.enqueue(-1434423774);
		x.isFull();
		x.dequeue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test4735() {
		Queue y = new Queue();
		y.toString();
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(259880866);
    }
    @Test
    public void test4736() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.toString();
		z.enqueue(-1537315375);
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(-1823813395);
    }
    @Test
    public void test4737() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(-1565375692);
		y.toString();
		assertFalse(y.isFull());
		y.isFull();
		y.isFull();
    }
    @Test
    public void test4738() {
		Queue y = new Queue();
		y.enqueue(-1680361834);
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.enqueue(576004216);
		y.toString();
		y.isEmpty();
		y.toString();
		assertFalse(y.isEmpty());
		y.toString();
		y.isFull();
    }
    @Test
    public void test4739() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.enqueue(1598580118);
		z.isEmpty();
		assertEquals("[1598580118]", z.toString());
		assertEquals(1598580118, z.dequeue());
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		assertFalse(z.isFull());
		z.isFull();
		z.toString();
    }
    @Test
    public void test4740() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.enqueue(349869254);
		x.dequeue();
		x.enqueue(1659695727);
		assertFalse(x.isFull());
		assertFalse(x.isEmpty());
		x.dequeue();
		x.toString();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.enqueue(-9964037);
		x.enqueue(1744133959);
		x.isEmpty();
    }
    @Test
    public void test4741() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(1105488395);
		z.toString();
		z.isEmpty();
		z.enqueue(1067339715);
		z.toString();
    }
    @Test
    public void test4742() {
		Queue z = new Queue();
		z.enqueue(-609464297);
		z.toString();
		z.isFull();
		z.toString();
		z.toString();
		z.enqueue(1641102842);
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(-1571870821);
    }
    @Test
    public void test4743() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(1378746973);
		Var.enqueue(868770928);
		Var.isEmpty();
    }
    @Test
    public void test4744() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.isFull();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isFull();
    }
    @Test
    public void test4745() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(2061693855);
		Var.isEmpty();
		Var.toString();
		Var.enqueue(-651227878);
		Var.isFull();
		Var.enqueue(1363698971);
		Var.toString();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test4746() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-1026394231);
		x.isEmpty();
		x.toString();
		x.toString();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isFull();
    }
    @Test
    public void test4747() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test4748() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(672414172);
    }
    @Test
    public void test4749() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test4750() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1174000637);
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(174571457);
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(-1606843438);
    }
    @Test
    public void test4751() {
		Queue variable = new Queue();
		variable.enqueue(-714091373);
		assertTrue(variable.isEmpty());
		variable.enqueue(65674187);
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.toString();
		variable.enqueue(619244627);
		variable.enqueue(669798342);
		assertEquals(619244627, variable.dequeue());
		variable.toString();
		variable.toString();
		variable.enqueue(569327423);
    }
    @Test
    public void test4752() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(-55170121);
    }
    @Test
    public void test4753() {
		Queue x = new Queue();
		x.enqueue(93808339);
		assertEquals("[93808339]", x.toString());
		x.dequeue();
		x.isFull();
		x.isFull();
		x.toString();
		x.enqueue(1512076827);
		x.toString();
    }
    @Test
    public void test4754() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-1852069499);
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.enqueue(-1641670142);
		z.dequeue();
    }
    @Test
    public void test4755() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.dequeue();
		x.toString();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-1124524067);
		x.dequeue();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test4756() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
    }
    @Test
    public void test4757() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1626482282);
    }
    @Test
    public void test4758() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(1325557534);
		variable.isFull();
		variable.toString();
		variable.enqueue(842472946);
		variable.enqueue(2023447358);
		variable.isFull();
    }
    @Test
    public void test4759() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isEmpty();
		Var.enqueue(2005140452);
		assertFalse(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(1320774381);
		Var.dequeue();
		Var.enqueue(-868623451);
		Var.toString();
    }
    @Test
    public void test4760() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test4761() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isFull();
		y.toString();
		y.isEmpty();
		y.isFull();
		y.isFull();
		assertEquals("[]", y.toString());
		y.toString();
		y.toString();
    }
    @Test
    public void test4762() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test4763() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(1543401736);
		variable.toString();
		assertEquals("[1543401736]", variable.toString());
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test4764() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test4765() {
		Queue Var = new Queue();
		Var.enqueue(-72178507);
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isFull();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(853835571);
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test4766() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.toString();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.enqueue(-112804915);
		y.toString();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test4767() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		assertFalse(z.isFull());
		z.isEmpty();
		z.dequeue();
		z.enqueue(-1794005323);
    }
    @Test
    public void test4768() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-1558719405);
		Var.dequeue();
		Var.toString();
		Var.enqueue(-784940914);
    }
    @Test
    public void test4769() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(2086819069);
		assertFalse(variable.isFull());
		assertEquals("[2086819069]", variable.toString());
		variable.enqueue(611468544);
		variable.enqueue(1173674439);
    }
    @Test
    public void test4770() {
		Queue variable = new Queue();
		variable.enqueue(-370207391);
    }
    @Test
    public void test4771() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test4772() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isEmpty();
		x.isFull();
		x.toString();
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test4773() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.toString();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test4774() {
		Queue x = new Queue();
		x.enqueue(-334596716);
		x.enqueue(1816330111);
		x.isFull();
		x.enqueue(926083330);
		assertEquals(1816330111, x.dequeue());
		assertFalse(x.isFull());
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test4775() {
		Queue Var = new Queue();
		Var.enqueue(78631202);
		Var.enqueue(-1721311676);
		assertEquals(78631202, Var.dequeue());
		assertFalse(Var.isFull());
		Var.enqueue(-914972991);
		Var.toString();
		Var.toString();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test4776() {
		Queue Var = new Queue();
		Var.enqueue(1625071943);
		Var.toString();
		Var.enqueue(834005735);
    }
    @Test
    public void test4777() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.enqueue(1603610805);
		y.isFull();
		assertEquals(1603610805, y.dequeue());
		y.isFull();
		y.enqueue(106369446);
		y.isEmpty();
    }
    @Test
    public void test4778() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(-878010664);
    }
    @Test
    public void test4779() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isFull();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test4780() {
		Queue x = new Queue();
		x.enqueue(731184074);
		x.dequeue();
		x.enqueue(1395050714);
		assertEquals(1395050714, x.dequeue());
		assertEquals("[]", x.toString());
		x.toString();
		x.enqueue(-1870617825);
		x.toString();
		x.enqueue(-2111083788);
		x.enqueue(-869354129);
    }
    @Test
    public void test4781() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test4782() {
		Queue z = new Queue();
		z.enqueue(-1871489156);
		z.isFull();
		z.isEmpty();
		z.enqueue(58735220);
		z.isFull();
		z.dequeue();
		z.toString();
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test4783() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-2049476736);
		Var.enqueue(-1699411984);
		Var.isFull();
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test4784() {
		Queue y = new Queue();
		y.toString();
		assertTrue(y.isEmpty());
		y.isFull();
		y.toString();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
		y.toString();
		y.enqueue(-122904926);
		y.enqueue(272336219);
    }
    @Test
    public void test4785() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test4786() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.enqueue(-117088594);
		y.isEmpty();
		y.isFull();
		y.dequeue();
		y.enqueue(-986967688);
		assertEquals("[]", y.toString());
		y.enqueue(851997667);
    }
    @Test
    public void test4787() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.enqueue(333545216);
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.enqueue(-543672999);
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test4788() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.enqueue(145091540);
		x.enqueue(1803853841);
		x.dequeue();
		assertFalse(x.isFull());
		x.toString();
		x.toString();
		x.dequeue();
		x.enqueue(-1175664383);
		x.enqueue(-1327926437);
    }
    @Test
    public void test4789() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-367214420);
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(1203347390);
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(1908123375);
		y.isFull();
    }
    @Test
    public void test4790() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-1112354765);
		variable.enqueue(-396472535);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test4791() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(1979951088);
    }
    @Test
    public void test4792() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(487532294);
		assertEquals("[487532294]", y.toString());
		assertEquals("[487532294]", y.toString());
		y.toString();
		y.toString();
		y.toString();
		y.enqueue(1539489230);
		y.toString();
		y.enqueue(-850369034);
		y.isFull();
		assertEquals("[487532294, 1539489230]", y.toString());
		y.isFull();
    }
    @Test
    public void test4793() {
		Queue variable = new Queue();
		variable.enqueue(1799484033);
		variable.enqueue(-1752402975);
		variable.isEmpty();
		variable.enqueue(-799957133);
		variable.toString();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test4794() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test4795() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(82711874);
		assertEquals(82711874, Var.dequeue());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test4796() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isEmpty();
		z.enqueue(-1895352211);
		z.isFull();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(168046619);
    }
    @Test
    public void test4797() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(1967978721);
		y.toString();
		y.toString();
    }
    @Test
    public void test4798() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-1860893017);
		variable.enqueue(-1080254349);
		variable.isEmpty();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test4799() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		assertEquals("[]", y.toString());
		y.toString();
		assertEquals("[]", y.toString());
		y.isFull();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test4800() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(1436817590);
    }
    @Test
    public void test4801() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-1932329329);
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.enqueue(-1535883159);
		y.enqueue(-394232492);
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.toString();
    }
    @Test
    public void test4802() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1435524837);
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.toString();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.enqueue(741362556);
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(-32621778);
		assertFalse(variable.isFull());
		assertEquals("[741362556]", variable.toString());
		variable.toString();
		assertEquals("[741362556]", variable.toString());
		variable.enqueue(1505021523);
    }
    @Test
    public void test4803() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.toString();
		Var.enqueue(442675991);
		Var.toString();
		Var.isEmpty();
		Var.toString();
		assertEquals("[442675991]", Var.toString());
		Var.toString();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test4804() {
		Queue Var = new Queue();
		Var.enqueue(1348139717);
    }
    @Test
    public void test4805() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test4806() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test4807() {
		Queue x = new Queue();
		x.toString();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.enqueue(-1378266662);
    }
    @Test
    public void test4808() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-1411602084);
		assertTrue(y.isEmpty());
		y.enqueue(-2087947449);
		y.toString();
		y.isEmpty();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.isEmpty();
		y.toString();
		y.enqueue(-312593185);
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(2091797466);
    }
    @Test
    public void test4809() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(315444583);
		Var.isFull();
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test4810() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test4811() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.enqueue(-613461612);
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(618658878);
		variable.dequeue();
		variable.enqueue(-1107386635);
		variable.enqueue(-401639519);
    }
    @Test
    public void test4812() {
		Queue z = new Queue();
		z.enqueue(217460726);
		assertEquals("[217460726]", z.toString());
		z.toString();
    }
    @Test
    public void test4813() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test4814() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.dequeue();
		y.enqueue(-1197046352);
		y.isFull();
		y.toString();
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(1579427715);
    }
    @Test
    public void test4815() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.enqueue(557643289);
		x.enqueue(-975758016);
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test4816() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(902351500);
		Var.enqueue(-460224105);
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		assertEquals(902351500, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test4817() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(968364217);
		z.isFull();
    }
    @Test
    public void test4818() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.enqueue(1601040466);
		y.isFull();
		assertEquals("[1601040466]", y.toString());
		y.isEmpty();
		y.enqueue(-728822466);
		y.toString();
		y.isEmpty();
		y.isEmpty();
		y.toString();
		y.isFull();
    }
    @Test
    public void test4819() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(1990087309);
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test4820() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(706150763);
		assertEquals("[706150763]", z.toString());
		z.isEmpty();
		z.enqueue(-545955798);
		assertEquals("[706150763]", z.toString());
		z.enqueue(1117491774);
		assertEquals(706150763, z.dequeue());
		z.enqueue(-694600505);
		z.isEmpty();
    }
    @Test
    public void test4821() {
		Queue y = new Queue();
		y.enqueue(725278559);
		y.dequeue();
    }
    @Test
    public void test4822() {
		Queue x = new Queue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.enqueue(-1042015271);
    }
    @Test
    public void test4823() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test4824() {
		Queue Var = new Queue();
		Var.enqueue(-1031351056);
    }
    @Test
    public void test4825() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-807496209);
		variable.isFull();
    }
    @Test
    public void test4826() {
		Queue z = new Queue();
		z.enqueue(735758406);
    }
    @Test
    public void test4827() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(93373837);
		variable.enqueue(1665691289);
    }
    @Test
    public void test4828() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(-2085319202);
		z.isEmpty();
    }
    @Test
    public void test4829() {
		Queue Var = new Queue();
		Var.enqueue(-1583157694);
		Var.dequeue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.dequeue();
		Var.enqueue(1484323372);
    }
    @Test
    public void test4830() {
		Queue y = new Queue();
		y.enqueue(-1997203490);
		y.isFull();
		y.isFull();
    }
    @Test
    public void test4831() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-1354856309);
		y.enqueue(824771055);
		y.enqueue(64530172);
		y.isFull();
		y.toString();
		y.toString();
		y.enqueue(-375948672);
		y.enqueue(-645180515);
    }
    @Test
    public void test4832() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.enqueue(-2123211133);
		Var.toString();
		Var.toString();
		Var.dequeue();
		Var.enqueue(1601930435);
		assertEquals("[1601930435]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test4833() {
		Queue z = new Queue();
		z.enqueue(2010546547);
		z.enqueue(837782860);
		z.dequeue();
		z.toString();
		assertEquals("[837782860]", z.toString());
		z.toString();
    }
    @Test
    public void test4834() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-1759311448);
		assertEquals("[]", y.toString());
		y.dequeue();
		y.toString();
		y.enqueue(558365485);
		assertEquals("[558365485]", y.toString());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.enqueue(1713254353);
		y.enqueue(785868036);
		y.toString();
    }
    @Test
    public void test4835() {
		Queue x = new Queue();
		x.enqueue(263338580);
		assertEquals(263338580, x.dequeue());
		x.toString();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test4836() {
		Queue y = new Queue();
		y.enqueue(-1826159088);
		y.isFull();
		assertEquals("[]", y.toString());
		y.isFull();
		y.enqueue(1174302053);
		y.dequeue();
		y.isEmpty();
		y.enqueue(-1553910269);
    }
    @Test
    public void test4837() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.enqueue(-1489867154);
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test4838() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-903242022);
		variable.enqueue(359773673);
		variable.toString();
		variable.enqueue(543955569);
		variable.enqueue(823485902);
		variable.isFull();
		assertEquals("[359773673, 543955569, 823485902]", variable.toString());
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test4839() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(1882183686);
		assertFalse(y.isEmpty());
		assertEquals("[1882183686]", y.toString());
		y.enqueue(-1221225386);
		y.toString();
		y.enqueue(1728670237);
    }
    @Test
    public void test4840() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.enqueue(1131360447);
		y.enqueue(-989892381);
		y.enqueue(324373640);
		y.isFull();
		assertFalse(y.isFull());
		y.isFull();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test4841() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		x.toString();
		x.isEmpty();
		x.enqueue(-926514025);
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test4842() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test4843() {
		Queue variable = new Queue();
		variable.enqueue(112143122);
		variable.isFull();
		variable.enqueue(-457973370);
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test4844() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-1242014338);
		z.enqueue(-820181016);
		z.toString();
    }
    @Test
    public void test4845() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test4846() {
		Queue z = new Queue();
		z.enqueue(-452542087);
		z.dequeue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test4847() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(889292602);
		variable.isEmpty();
    }
    @Test
    public void test4848() {
		Queue x = new Queue();
		x.enqueue(2088415033);
		x.isEmpty();
		x.toString();
		assertEquals(2088415033, x.dequeue());
		x.enqueue(-259337520);
    }
    @Test
    public void test4849() {
		Queue variable = new Queue();
		variable.enqueue(-211653974);
		variable.dequeue();
		variable.enqueue(-106757954);
		variable.toString();
		variable.enqueue(-431831334);
		variable.dequeue();
    }
    @Test
    public void test4850() {
		Queue z = new Queue();
		z.enqueue(1973442629);
		z.enqueue(1266293865);
		z.dequeue();
		z.toString();
		z.toString();
		z.dequeue();
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(337801280);
		z.dequeue();
    }
    @Test
    public void test4851() {
		Queue Var = new Queue();
		Var.enqueue(-2137986005);
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(1279400368);
    }
    @Test
    public void test4852() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test4853() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(585707783);
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test4854() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-1545801515);
		z.isFull();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.isEmpty();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test4855() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.enqueue(1090152994);
		y.enqueue(-1619021295);
		y.enqueue(-1846526806);
		assertFalse(y.isFull());
		assertEquals("[1090152994]", y.toString());
		y.isEmpty();
		y.enqueue(-688454237);
		y.isFull();
		assertEquals("[1090152994]", y.toString());
		y.toString();
    }
    @Test
    public void test4856() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.enqueue(738709643);
		x.enqueue(2104989177);
    }
    @Test
    public void test4857() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(1628993710);
		assertEquals(1628993710, variable.dequeue());
		variable.enqueue(1565233425);
		variable.isFull();
		variable.enqueue(-1566032673);
    }
    @Test
    public void test4858() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(-617785843);
    }
    @Test
    public void test4859() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.toString();
    }
    @Test
    public void test4860() {
		Queue z = new Queue();
		z.enqueue(-679657734);
		assertEquals(-1, z.dequeue());
		z.enqueue(1366237527);
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.enqueue(529994820);
		z.enqueue(2051799554);
		z.isFull();
		assertEquals("[1366237527, 529994820, 2051799554]", z.toString());
		z.isFull();
		z.enqueue(1515175503);
		z.toString();
    }
    @Test
    public void test4861() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test4862() {
		Queue Var = new Queue();
		Var.enqueue(314992943);
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test4863() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.toString();
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test4864() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(-617039520);
		Var.toString();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test4865() {
		Queue x = new Queue();
		x.enqueue(-2098366427);
		x.isFull();
		x.dequeue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test4866() {
		Queue y = new Queue();
		y.enqueue(645404604);
    }
    @Test
    public void test4867() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test4868() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-1945467844);
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test4869() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		Var.enqueue(882549719);
		Var.enqueue(-1918452529);
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test4870() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-1792942768);
		x.enqueue(-1426519740);
		x.enqueue(-1458004061);
		x.toString();
		x.isFull();
    }
    @Test
    public void test4871() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.dequeue();
		y.enqueue(2061275045);
		y.isFull();
		y.toString();
		assertFalse(y.isEmpty());
		assertEquals("[2061275045]", y.toString());
		y.toString();
		assertFalse(y.isFull());
		assertFalse(y.isEmpty());
		y.isFull();
		y.enqueue(1758951940);
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test4872() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.enqueue(-1687586762);
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(-1230759425);
    }
    @Test
    public void test4873() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.enqueue(2047172918);
		y.enqueue(351444356);
		y.isFull();
    }
    @Test
    public void test4874() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(465771548);
		x.isFull();
		x.toString();
		x.isFull();
		assertEquals(465771548, x.dequeue());
		x.toString();
		x.isFull();
    }
    @Test
    public void test4875() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.isFull();
		variable.isFull();
		variable.enqueue(81014352);
		variable.isFull();
		variable.enqueue(454784713);
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test4876() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(210842227);
		x.dequeue();
		x.isFull();
		x.enqueue(277361807);
		assertFalse(x.isEmpty());
		assertEquals(277361807, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test4877() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test4878() {
		Queue variable = new Queue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.toString();
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		variable.toString();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test4879() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(-441327182);
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.enqueue(-863328623);
    }
    @Test
    public void test4880() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1078343841);
    }
    @Test
    public void test4881() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(55762073);
		assertFalse(x.isFull());
		x.enqueue(-1416128436);
		x.enqueue(-850991359);
		x.toString();
		assertEquals(55762073, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test4882() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test4883() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(1922224404);
		assertEquals(1922224404, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test4884() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1905018887);
    }
    @Test
    public void test4885() {
		Queue y = new Queue();
		y.enqueue(98180294);
		y.dequeue();
		y.enqueue(-1609019069);
		y.enqueue(-271079673);
		y.toString();
		y.dequeue();
    }
    @Test
    public void test4886() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.toString();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.enqueue(-475156809);
    }
    @Test
    public void test4887() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test4888() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-1221963627);
    }
    @Test
    public void test4889() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-1259046669);
		Var.isFull();
    }
    @Test
    public void test4890() {
		Queue y = new Queue();
		y.toString();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.toString();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test4891() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test4892() {
		Queue Var = new Queue();
		Var.enqueue(-2022407006);
		Var.isFull();
		Var.enqueue(-26084333);
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test4893() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(1947489950);
		z.dequeue();
		z.isFull();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test4894() {
		Queue y = new Queue();
		y.enqueue(-1539652488);
		y.isFull();
    }
    @Test
    public void test4895() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(1313857194);
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		assertEquals("[1313857194]", variable.toString());
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test4896() {
		Queue z = new Queue();
		z.enqueue(51416993);
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(153697044);
		z.isEmpty();
		z.enqueue(70500160);
		z.enqueue(-1366956043);
    }
    @Test
    public void test4897() {
		Queue Var = new Queue();
		Var.enqueue(-1868834317);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test4898() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-1813301244);
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test4899() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.toString();
		y.toString();
		y.enqueue(-1646542388);
		y.toString();
		assertTrue(y.isEmpty());
		y.enqueue(-2062438038);
		assertFalse(y.isFull());
		y.enqueue(403740396);
		y.enqueue(931466742);
		y.isFull();
    }
    @Test
    public void test4900() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.enqueue(-630396786);
    }
    @Test
    public void test4901() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		Var.enqueue(803517627);
		Var.enqueue(274015379);
		Var.isFull();
		Var.enqueue(-470904749);
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(1512634799);
    }
    @Test
    public void test4902() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(-872974250);
		x.dequeue();
		x.toString();
		x.isFull();
		x.enqueue(12790868);
    }
    @Test
    public void test4903() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.enqueue(-1621791671);
		y.enqueue(274724636);
		assertEquals("[274724636]", y.toString());
		y.enqueue(863686362);
		assertFalse(y.isEmpty());
		y.dequeue();
    }
    @Test
    public void test4904() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test4905() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test4906() {
		Queue variable = new Queue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-1449237474);
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(349777221);
		assertEquals("[349777221]", variable.toString());
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test4907() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test4908() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.toString();
		y.isFull();
		y.enqueue(-1377342095);
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.toString();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.enqueue(615797365);
		y.dequeue();
    }
    @Test
    public void test4909() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isFull();
		y.enqueue(-1664761614);
		y.isEmpty();
    }
    @Test
    public void test4910() {
		Queue z = new Queue();
		z.enqueue(1339570947);
		z.isFull();
		z.enqueue(1976177292);
		assertEquals(1339570947, z.dequeue());
		assertEquals(1976177292, z.dequeue());
		z.dequeue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.dequeue();
		z.toString();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test4911() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test4912() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(-1328399560);
    }
    @Test
    public void test4913() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertFalse(z.isFull());
		z.toString();
		z.toString();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(-1120329707);
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(-1655885127);
		z.dequeue();
    }
    @Test
    public void test4914() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test4915() {
		Queue Var = new Queue();
		Var.enqueue(-465423453);
		Var.toString();
		Var.enqueue(-1049993806);
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.toString();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(-482364978);
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test4916() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test4917() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test4918() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(195547134);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test4919() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test4920() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(1861762755);
		assertFalse(variable.isEmpty());
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test4921() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isFull();
		x.enqueue(807663102);
		x.isEmpty();
		assertEquals("[807663102]", x.toString());
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test4922() {
		Queue z = new Queue();
		z.enqueue(-5615857);
		z.isFull();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isFull();
		z.isFull();
		z.enqueue(341369304);
		z.isFull();
    }
    @Test
    public void test4923() {
		Queue Var = new Queue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.enqueue(-719703596);
		Var.enqueue(77717845);
		Var.enqueue(-2120427915);
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test4924() {
		Queue z = new Queue();
		z.enqueue(477201125);
		z.dequeue();
		z.enqueue(743743088);
    }
    @Test
    public void test4925() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(754498398);
		x.isFull();
		x.isEmpty();
		assertEquals(754498398, x.dequeue());
		assertEquals("[]", x.toString());
		x.enqueue(-590869321);
    }
    @Test
    public void test4926() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.toString();
		y.isFull();
		y.dequeue();
		y.enqueue(-183570231);
		y.isFull();
    }
    @Test
    public void test4927() {
		Queue Var = new Queue();
		Var.enqueue(175483327);
		assertEquals("[175483327]", Var.toString());
		assertEquals("[175483327]", Var.toString());
		assertFalse(Var.isEmpty());
		assertFalse(Var.isEmpty());
		Var.enqueue(-527284569);
    }
    @Test
    public void test4928() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-840285752);
		Var.isEmpty();
    }
    @Test
    public void test4929() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-1674427444);
		variable.enqueue(-354901842);
    }
    @Test
    public void test4930() {
		Queue z = new Queue();
		z.enqueue(1569916301);
		assertEquals("[1569916301]", z.toString());
		assertEquals("[1569916301]", z.toString());
		z.toString();
		z.enqueue(779647551);
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test4931() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(330686072);
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test4932() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		Var.isFull();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-1379160330);
    }
    @Test
    public void test4933() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.dequeue();
    }
    @Test
    public void test4934() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
		assertFalse(variable.isFull());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-108634377);
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test4935() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.enqueue(969086654);
		y.toString();
		y.isEmpty();
		y.toString();
		y.enqueue(1218127636);
		assertEquals("[969086654, 1218127636]", y.toString());
		assertEquals(969086654, y.dequeue());
		y.enqueue(159007365);
		assertEquals(1218127636, y.dequeue());
		assertFalse(y.isFull());
		assertEquals("[159007365]", y.toString());
		y.isFull();
		y.isFull();
    }
    @Test
    public void test4936() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.enqueue(-1522854295);
		Var.dequeue();
    }
    @Test
    public void test4937() {
		Queue y = new Queue();
		y.enqueue(1522689416);
    }
    @Test
    public void test4938() {
		Queue y = new Queue();
		y.enqueue(595856000);
		y.enqueue(-1639784566);
		y.isFull();
		y.toString();
		y.isFull();
		assertEquals("[595856000]", y.toString());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.enqueue(1387790272);
    }
    @Test
    public void test4939() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(-306030253);
		variable.isFull();
		variable.enqueue(1281117490);
		assertFalse(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test4940() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test4941() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.enqueue(289895278);
		z.toString();
		z.toString();
    }
    @Test
    public void test4942() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.enqueue(-163090049);
		assertEquals("[]", x.toString());
		x.isEmpty();
    }
    @Test
    public void test4943() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test4944() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.isFull();
		y.isFull();
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(-2083954375);
		y.toString();
		y.enqueue(-1143527173);
		y.isFull();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test4945() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.toString();
		Var.isFull();
		Var.enqueue(625683129);
		Var.enqueue(729275596);
    }
    @Test
    public void test4946() {
		Queue variable = new Queue();
		variable.enqueue(-1861018913);
		variable.toString();
		variable.enqueue(-1671174217);
    }
    @Test
    public void test4947() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test4948() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(-1873853676);
		y.enqueue(1410729680);
		y.dequeue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test4949() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(1268151662);
		x.enqueue(1473798507);
		x.toString();
		x.isFull();
		x.isEmpty();
		assertEquals("[1268151662, 1473798507]", x.toString());
		assertFalse(x.isFull());
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test4950() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.toString();
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.dequeue();
		z.dequeue();
		z.enqueue(403216614);
    }
    @Test
    public void test4951() {
		Queue variable = new Queue();
		variable.enqueue(-1614640581);
		variable.enqueue(-330706316);
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1778362438);
		variable.isFull();
    }
    @Test
    public void test4952() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(1381403456);
		x.enqueue(279175506);
		assertFalse(x.isFull());
		x.dequeue();
		x.toString();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(-1311537463);
    }
    @Test
    public void test4953() {
		Queue variable = new Queue();
		variable.enqueue(-1115988958);
		variable.toString();
		variable.toString();
		variable.dequeue();
		variable.enqueue(2138406941);
		variable.enqueue(-1705949422);
		variable.toString();
		assertFalse(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test4954() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(1156523274);
		assertFalse(x.isFull());
		x.toString();
		x.dequeue();
		x.enqueue(1301865220);
    }
    @Test
    public void test4955() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test4956() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-1861874592);
		variable.isEmpty();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1044271250);
		variable.enqueue(-1340971612);
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test4957() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.enqueue(-186365552);
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.enqueue(-363445035);
		x.isEmpty();
		x.enqueue(-1534801867);
		x.toString();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.isFull();
		x.isFull();
    }
    @Test
    public void test4958() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.toString();
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.isFull();
		y.enqueue(-1763042048);
		y.enqueue(1734052111);
		assertEquals("[1734052111]", y.toString());
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test4959() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1419972290);
		z.isEmpty();
		z.enqueue(-349371137);
		z.dequeue();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.enqueue(-1996684040);
		z.isEmpty();
		z.enqueue(-1124189487);
    }
    @Test
    public void test4960() {
		Queue y = new Queue();
		y.toString();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.dequeue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertEquals("[]", y.toString());
		y.enqueue(-176227086);
		assertEquals("[]", y.toString());
		y.enqueue(-689386615);
		assertFalse(y.isFull());
		y.enqueue(-1890690584);
		y.toString();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test4961() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		variable.toString();
		variable.enqueue(-119596354);
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test4962() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1013661723);
		assertEquals("[1013661723]", x.toString());
		x.toString();
		x.isFull();
		x.isFull();
		x.dequeue();
		x.enqueue(977342691);
		assertEquals("[977342691]", x.toString());
		x.toString();
		assertEquals(977342691, x.dequeue());
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(-1928848020);
    }
    @Test
    public void test4963() {
		Queue variable = new Queue();
		variable.enqueue(-772447428);
		variable.dequeue();
    }
    @Test
    public void test4964() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-1080675557);
		variable.dequeue();
		variable.enqueue(108748026);
		assertEquals("[108748026]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test4965() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test4966() {
		Queue y = new Queue();
		y.enqueue(-1145440067);
		y.toString();
		y.enqueue(2018697040);
		y.toString();
		y.dequeue();
		y.dequeue();
		y.enqueue(500196573);
    }
    @Test
    public void test4967() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(-1050374606);
    }
    @Test
    public void test4968() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
		x.toString();
		x.enqueue(1706574876);
		x.isFull();
    }
    @Test
    public void test4969() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
    }
    @Test
    public void test4970() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isFull();
		x.toString();
    }
    @Test
    public void test4971() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(124161652);
		variable.toString();
		assertEquals("[124161652]", variable.toString());
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test4972() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(1980271315);
		Var.toString();
		Var.enqueue(581436621);
		assertEquals(1980271315, Var.dequeue());
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test4973() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(691361229);
    }
    @Test
    public void test4974() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test4975() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.enqueue(-544853715);
    }
    @Test
    public void test4976() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-1544818896);
		y.enqueue(-977859283);
		y.isFull();
		y.toString();
		assertEquals("[]", y.toString());
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test4977() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-1684879804);
		x.isFull();
		x.isEmpty();
		x.isFull();
		x.enqueue(-1941957593);
		assertEquals(-1, x.dequeue());
		x.isFull();
    }
    @Test
    public void test4978() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.isFull();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test4979() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test4980() {
		Queue x = new Queue();
		x.toString();
		assertEquals("[]", x.toString());
		x.toString();
		x.isEmpty();
		x.isFull();
		x.enqueue(-1589209037);
    }
    @Test
    public void test4981() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test4982() {
		Queue z = new Queue();
		z.enqueue(-549185915);
		assertEquals("[]", z.toString());
		z.isFull();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test4983() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test4984() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.enqueue(1198611839);
		y.enqueue(-1549632925);
		y.enqueue(-1934132578);
		assertFalse(y.isFull());
		y.isFull();
		assertEquals(1198611839, y.dequeue());
		y.toString();
    }
    @Test
    public void test4985() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(-484767215);
    }
    @Test
    public void test4986() {
		Queue Var = new Queue();
		Var.enqueue(-289463743);
		Var.enqueue(-369442821);
		Var.dequeue();
    }
    @Test
    public void test4987() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.enqueue(-1587365392);
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test4988() {
		Queue y = new Queue();
		y.enqueue(-738168171);
    }
    @Test
    public void test4989() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test4990() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		z.dequeue();
		z.enqueue(1226719502);
		z.enqueue(1658244127);
    }
    @Test
    public void test4991() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isEmpty();
		Var.enqueue(1158772181);
		Var.enqueue(-357874144);
		Var.isEmpty();
		assertEquals("[1158772181]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-1501913158);
    }
    @Test
    public void test4992() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.enqueue(-485429399);
		Var.enqueue(1823015704);
    }
    @Test
    public void test4993() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(1323010114);
		variable.isFull();
    }
    @Test
    public void test4994() {
		Queue variable = new Queue();
		variable.enqueue(-337293420);
		variable.toString();
		variable.toString();
    }
    @Test
    public void test4995() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.toString();
    }
    @Test
    public void test4996() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1764215296);
		x.isFull();
		assertEquals(1764215296, x.dequeue());
		x.enqueue(402982230);
    }
    @Test
    public void test4997() {
		Queue variable = new Queue();
		variable.enqueue(-1219438488);
		variable.enqueue(-1024002351);
		variable.enqueue(-337267137);
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test4998() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test4999() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1303586099);
		variable.toString();
		variable.enqueue(-1629438817);
		variable.toString();
    }
    @Test
    public void test5000() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(9251506);
		y.toString();
		y.enqueue(-258351197);
		y.toString();
    }
    @Test
    public void test5001() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.enqueue(2129264514);
    }
    @Test
    public void test5002() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-1516132500);
		variable.toString();
		variable.enqueue(659192131);
		variable.toString();
		variable.isFull();
		variable.enqueue(864889641);
		assertEquals("[659192131, 864889641]", variable.toString());
		variable.dequeue();
		assertEquals("[864889641]", variable.toString());
		variable.enqueue(1870982962);
    }
    @Test
    public void test5003() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(1483184460);
		z.isFull();
		assertEquals("[1483184460]", z.toString());
		z.enqueue(-932533848);
    }
    @Test
    public void test5004() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.enqueue(1441470325);
    }
    @Test
    public void test5005() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(931989768);
		Var.isEmpty();
    }
    @Test
    public void test5006() {
		Queue y = new Queue();
		y.enqueue(502771011);
    }
    @Test
    public void test5007() {
		Queue Var = new Queue();
		Var.enqueue(351459463);
		Var.toString();
    }
    @Test
    public void test5008() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(946470921);
		Var.enqueue(1984815237);
		Var.enqueue(-577057069);
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.isEmpty();
		assertEquals("[946470921, 1984815237]", Var.toString());
		Var.isFull();
		assertEquals("[946470921, 1984815237]", Var.toString());
		assertFalse(Var.isEmpty());
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.enqueue(-587008045);
    }
    @Test
    public void test5009() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test5010() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.toString();
		variable.enqueue(-729258889);
		variable.isEmpty();
    }
    @Test
    public void test5011() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(1594201411);
		z.enqueue(-76592689);
		z.isFull();
		assertEquals(1594201411, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test5012() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.dequeue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.enqueue(-1176862599);
    }
    @Test
    public void test5013() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test5014() {
		Queue variable = new Queue();
		variable.enqueue(475990434);
		variable.enqueue(-1072021686);
    }
    @Test
    public void test5015() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test5016() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-1133569464);
		Var.enqueue(-1825668433);
		Var.toString();
		Var.toString();
    }
    @Test
    public void test5017() {
		Queue y = new Queue();
		y.enqueue(-1623353372);
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test5018() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.toString();
		y.isEmpty();
		y.toString();
		y.enqueue(-98107835);
		assertTrue(y.isEmpty());
		y.dequeue();
		y.toString();
		y.toString();
    }
    @Test
    public void test5019() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(1847989577);
    }
    @Test
    public void test5020() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test5021() {
		Queue y = new Queue();
		y.enqueue(-1489563352);
		y.enqueue(-2139421401);
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.isFull();
		y.enqueue(1770597952);
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.dequeue();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.dequeue();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test5022() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1686685225);
		y.isFull();
		assertFalse(y.isFull());
		y.enqueue(-1465655790);
    }
    @Test
    public void test5023() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.enqueue(555520953);
		y.isFull();
    }
    @Test
    public void test5024() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test5025() {
		Queue variable = new Queue();
		variable.enqueue(-2070734123);
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(-61200279);
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-634687097);
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test5026() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test5027() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.enqueue(-1979866842);
		y.dequeue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isFull();
		y.enqueue(-29164001);
    }
    @Test
    public void test5028() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test5029() {
		Queue x = new Queue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.toString();
		x.toString();
		x.enqueue(-1762732849);
		assertEquals("[]", x.toString());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test5030() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.isFull();
    }
    @Test
    public void test5031() {
		Queue y = new Queue();
		y.enqueue(-527552559);
		y.toString();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(1713624719);
		y.dequeue();
    }
    @Test
    public void test5032() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test5033() {
		Queue y = new Queue();
		y.enqueue(1698492940);
		y.isEmpty();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test5034() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test5035() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.isEmpty();
		y.enqueue(2065822783);
		y.isFull();
		y.enqueue(494322153);
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test5036() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
    }
    @Test
    public void test5037() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(-1215049193);
		assertFalse(x.isFull());
		x.isEmpty();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test5038() {
		Queue y = new Queue();
		y.enqueue(789706145);
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test5039() {
		Queue x = new Queue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.enqueue(1474355168);
		x.isFull();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test5040() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test5041() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(19808419);
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(1910065422);
    }
    @Test
    public void test5042() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-767421368);
		y.dequeue();
		y.toString();
		assertFalse(y.isFull());
		y.toString();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test5043() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
		z.isEmpty();
		z.toString();
		assertFalse(z.isFull());
		z.isFull();
		assertTrue(z.isEmpty());
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test5044() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.enqueue(-2099165346);
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.toString();
		y.enqueue(979601319);
		y.enqueue(-1987625153);
		y.enqueue(664948542);
    }
    @Test
    public void test5045() {
		Queue z = new Queue();
		z.enqueue(-1567549547);
		z.toString();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test5046() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.enqueue(2103738270);
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test5047() {
		Queue z = new Queue();
		z.toString();
		z.toString();
    }
    @Test
    public void test5048() {
		Queue variable = new Queue();
		variable.enqueue(-2002314189);
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test5049() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.dequeue();
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test5050() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(-75885138);
    }
    @Test
    public void test5051() {
		Queue y = new Queue();
		y.enqueue(767188009);
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test5052() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.enqueue(-1893804335);
		z.isFull();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(405856182);
		z.isEmpty();
		z.toString();
		z.enqueue(-2130581234);
		z.toString();
    }
    @Test
    public void test5053() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.enqueue(1216867497);
		variable.enqueue(1542398676);
    }
    @Test
    public void test5054() {
		Queue Var = new Queue();
		Var.enqueue(19942328);
		Var.toString();
		Var.toString();
		Var.toString();
		assertEquals(19942328, Var.dequeue());
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test5055() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.enqueue(-1170493593);
		x.isFull();
		x.enqueue(-1511848151);
    }
    @Test
    public void test5056() {
		Queue variable = new Queue();
		variable.enqueue(1271464272);
		variable.enqueue(-2002119355);
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		assertEquals(1271464272, variable.dequeue());
		variable.enqueue(1426270945);
		variable.toString();
		variable.enqueue(-735871759);
    }
    @Test
    public void test5057() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-460635812);
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(368512291);
    }
    @Test
    public void test5058() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(-132821412);
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-1202703413);
		Var.toString();
    }
    @Test
    public void test5059() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(1463281527);
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test5060() {
		Queue y = new Queue();
		y.enqueue(707677205);
		y.dequeue();
		assertEquals("[]", y.toString());
		y.toString();
		y.enqueue(-263978556);
		y.dequeue();
    }
    @Test
    public void test5061() {
		Queue Var = new Queue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-76509131);
    }
    @Test
    public void test5062() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-181037767);
    }
    @Test
    public void test5063() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
    }
    @Test
    public void test5064() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(468482233);
		assertFalse(y.isEmpty());
		y.toString();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test5065() {
		Queue y = new Queue();
		y.enqueue(218851962);
		y.enqueue(-793702812);
		assertEquals("[218851962]", y.toString());
		y.isFull();
		y.isFull();
    }
    @Test
    public void test5066() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.toString();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test5067() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test5068() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-1858955788);
		z.toString();
		z.isFull();
		z.toString();
		z.dequeue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.toString();
		z.dequeue();
    }
    @Test
    public void test5069() {
		Queue x = new Queue();
		x.enqueue(1314674202);
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test5070() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.enqueue(-210838502);
    }
    @Test
    public void test5071() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test5072() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test5073() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test5074() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(1509883551);
		z.dequeue();
		z.toString();
		z.toString();
    }
    @Test
    public void test5075() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.enqueue(140530664);
		x.isEmpty();
		assertEquals("[140530664]", x.toString());
		x.isFull();
		x.isFull();
		x.enqueue(-215812389);
		x.enqueue(-190801703);
		assertFalse(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test5076() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.toString();
		variable.enqueue(-760979677);
		variable.dequeue();
		variable.isEmpty();
		variable.toString();
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(-1793102028);
    }
    @Test
    public void test5077() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(1349120026);
		x.isEmpty();
		x.dequeue();
		x.isFull();
		assertFalse(x.isFull());
		x.toString();
		x.toString();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test5078() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test5079() {
		Queue variable = new Queue();
		variable.enqueue(-550094580);
    }
    @Test
    public void test5080() {
		Queue y = new Queue();
		y.enqueue(1860592752);
		y.isEmpty();
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(1975016777);
		assertEquals(1860592752, y.dequeue());
		y.toString();
		y.isEmpty();
		assertFalse(y.isEmpty());
		y.isFull();
		y.toString();
    }
    @Test
    public void test5081() {
		Queue y = new Queue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isFull();
    }
    @Test
    public void test5082() {
		Queue z = new Queue();
		z.enqueue(-1424335367);
		z.enqueue(1714008794);
    }
    @Test
    public void test5083() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
		y.dequeue();
    }
    @Test
    public void test5084() {
		Queue Var = new Queue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-1289642617);
		Var.isFull();
		Var.enqueue(-942791282);
    }
    @Test
    public void test5085() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test5086() {
		Queue z = new Queue();
		z.enqueue(56245274);
		z.toString();
		z.isEmpty();
		assertEquals("[56245274]", z.toString());
		assertEquals("[56245274]", z.toString());
		z.enqueue(-1544086189);
    }
    @Test
    public void test5087() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.toString();
		y.enqueue(1612180723);
		y.toString();
		assertEquals(1612180723, y.dequeue());
		y.isEmpty();
		y.enqueue(-723877329);
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test5088() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(241223262);
    }
    @Test
    public void test5089() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.toString();
    }
    @Test
    public void test5090() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test5091() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-1679780629);
		assertTrue(x.isEmpty());
		x.isFull();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test5092() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.toString();
		y.isFull();
		y.enqueue(2006829959);
    }
    @Test
    public void test5093() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test5094() {
		Queue variable = new Queue();
		variable.enqueue(812854161);
		variable.enqueue(-140006844);
    }
    @Test
    public void test5095() {
		Queue Var = new Queue();
		Var.enqueue(-1193840836);
		Var.dequeue();
		Var.isFull();
		Var.enqueue(162062765);
		assertFalse(Var.isEmpty());
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test5096() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(1124951785);
    }
    @Test
    public void test5097() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test5098() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
		y.dequeue();
		y.isFull();
		y.toString();
		y.enqueue(1269418461);
		y.toString();
    }
    @Test
    public void test5099() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-433300097);
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test5100() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-778824887);
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.toString();
		y.enqueue(-1160894347);
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test5101() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(1180086687);
    }
    @Test
    public void test5102() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.dequeue();
		Var.enqueue(1571265884);
		Var.isEmpty();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test5103() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(564681477);
		Var.isEmpty();
		Var.enqueue(226666874);
    }
    @Test
    public void test5104() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.enqueue(1785931871);
		x.enqueue(1790505742);
		x.enqueue(1670878204);
		x.toString();
    }
    @Test
    public void test5105() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test5106() {
		Queue x = new Queue();
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(-387558406);
		assertEquals("[]", x.toString());
		x.toString();
		x.enqueue(-1777312464);
    }
    @Test
    public void test5107() {
		Queue z = new Queue();
		z.enqueue(-1468109922);
    }
    @Test
    public void test5108() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.enqueue(-223474719);
		y.isFull();
		y.enqueue(-113514614);
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.isFull();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test5109() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.enqueue(-180447869);
		x.isFull();
		x.enqueue(242440713);
		x.enqueue(120664688);
		x.toString();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test5110() {
		Queue Var = new Queue();
		Var.enqueue(-1316913832);
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test5111() {
		Queue variable = new Queue();
		variable.enqueue(-1734142083);
		variable.isFull();
    }
    @Test
    public void test5112() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(1653578673);
		Var.isFull();
		Var.toString();
		assertEquals("[1653578673]", Var.toString());
		Var.enqueue(221967801);
    }
    @Test
    public void test5113() {
		Queue z = new Queue();
		z.enqueue(1020749367);
		z.isEmpty();
		assertEquals("[1020749367]", z.toString());
		z.toString();
		z.enqueue(-578962508);
		z.dequeue();
		z.isFull();
		z.toString();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test5114() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test5115() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test5116() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.enqueue(1522928433);
		Var.isEmpty();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test5117() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test5118() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(1900368252);
		variable.toString();
		assertFalse(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test5119() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test5120() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test5121() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		z.enqueue(-1918997054);
		assertEquals(-1, z.dequeue());
		z.enqueue(-1096948172);
    }
    @Test
    public void test5122() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-973248064);
		z.dequeue();
		z.enqueue(-1525614278);
		z.enqueue(1102713457);
		z.toString();
		z.isFull();
		z.toString();
		assertFalse(z.isEmpty());
		z.toString();
    }
    @Test
    public void test5123() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1906016566);
		variable.enqueue(-1413753890);
		variable.toString();
		variable.isFull();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test5124() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test5125() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test5126() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.enqueue(774977527);
		assertFalse(z.isFull());
		z.dequeue();
		z.enqueue(-2006506717);
		z.enqueue(-364918173);
    }
    @Test
    public void test5127() {
		Queue x = new Queue();
		x.enqueue(-1601954647);
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.isFull();
		x.enqueue(-1661704660);
		x.enqueue(-1113031905);
		assertFalse(x.isFull());
		x.dequeue();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test5128() {
		Queue Var = new Queue();
		Var.enqueue(-1314412982);
		Var.isFull();
		assertFalse(Var.isFull());
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test5129() {
		Queue Var = new Queue();
		Var.enqueue(1755584909);
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.isEmpty();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test5130() {
		Queue y = new Queue();
		y.enqueue(-736126315);
    }
    @Test
    public void test5131() {
		Queue y = new Queue();
		y.enqueue(1246022908);
		y.isFull();
		y.dequeue();
		y.isFull();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test5132() {
		Queue z = new Queue();
		z.enqueue(-1249785181);
		z.isEmpty();
		z.isFull();
		z.toString();
		z.enqueue(619777265);
		z.enqueue(1628672718);
		z.isFull();
		z.isFull();
		z.enqueue(-1805941408);
		z.isEmpty();
    }
    @Test
    public void test5133() {
		Queue y = new Queue();
		y.enqueue(-893375023);
		y.dequeue();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		y.toString();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.enqueue(722359555);
    }
    @Test
    public void test5134() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(-1419076687);
		assertTrue(variable.isEmpty());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(2056861331);
		variable.isEmpty();
    }
    @Test
    public void test5135() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(1289545164);
		x.isFull();
		x.dequeue();
		x.toString();
		assertFalse(x.isFull());
		x.isFull();
		x.isFull();
		x.toString();
    }
    @Test
    public void test5136() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1989273964);
		x.enqueue(-1619260333);
		x.isEmpty();
		assertFalse(x.isEmpty());
		x.dequeue();
		x.enqueue(1799212812);
		x.dequeue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test5137() {
		Queue y = new Queue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.toString();
		y.enqueue(-653357923);
    }
    @Test
    public void test5138() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.enqueue(405850195);
		assertFalse(x.isFull());
		x.isEmpty();
		x.isEmpty();
		x.enqueue(1691822239);
    }
    @Test
    public void test5139() {
		Queue y = new Queue();
		y.enqueue(-596294693);
		y.enqueue(-260985736);
		y.enqueue(-1385553852);
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.enqueue(-1934636725);
		y.enqueue(1703612996);
		y.isFull();
		assertEquals(1703612996, y.dequeue());
		y.enqueue(-573725723);
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test5140() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test5141() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(-34254294);
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1675356683);
		variable.enqueue(-2000350138);
    }
    @Test
    public void test5142() {
		Queue Var = new Queue();
		Var.enqueue(-143460760);
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isFull();
		Var.isFull();
		Var.enqueue(-1386633085);
		Var.dequeue();
    }
    @Test
    public void test5143() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.enqueue(-1412674734);
    }
    @Test
    public void test5144() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test5145() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.enqueue(-962709883);
		assertEquals(-1, x.dequeue());
		x.toString();
		x.dequeue();
		assertFalse(x.isFull());
		x.isFull();
		x.isEmpty();
		x.enqueue(-209764946);
    }
    @Test
    public void test5146() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-897891215);
		x.isEmpty();
		x.enqueue(682630328);
		x.enqueue(749671290);
    }
    @Test
    public void test5147() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-483445060);
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(-1354525738);
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.enqueue(1649715814);
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test5148() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.toString();
		z.isFull();
		z.toString();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test5149() {
		Queue y = new Queue();
		y.enqueue(-869894360);
		assertEquals("[]", y.toString());
		y.enqueue(-689240614);
		y.enqueue(-479745122);
		y.isEmpty();
		y.enqueue(-1174234782);
		y.dequeue();
    }
    @Test
    public void test5150() {
		Queue z = new Queue();
		z.enqueue(1887031284);
		z.enqueue(1980924149);
		z.isFull();
		z.toString();
		assertEquals(1887031284, z.dequeue());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(-1070956529);
		z.enqueue(632286679);
		z.toString();
		assertEquals(632286679, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test5151() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-1435904525);
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test5152() {
		Queue variable = new Queue();
		variable.enqueue(1785905314);
		assertFalse(variable.isFull());
		variable.enqueue(-1895301829);
		variable.dequeue();
		variable.enqueue(-145434701);
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(-2120354871);
    }
    @Test
    public void test5153() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.enqueue(-1038314608);
    }
    @Test
    public void test5154() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test5155() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.toString();
    }
    @Test
    public void test5156() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-159450485);
		y.isEmpty();
		y.enqueue(2089997321);
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.dequeue();
		y.toString();
		y.isEmpty();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test5157() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(343131518);
		Var.dequeue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test5158() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1047824520);
    }
    @Test
    public void test5159() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(672947977);
		variable.enqueue(-1505501170);
		assertEquals(672947977, variable.dequeue());
		variable.isFull();
		variable.enqueue(-1944587240);
		variable.toString();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.enqueue(1613124407);
    }
    @Test
    public void test5160() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test5161() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test5162() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.toString();
    }
    @Test
    public void test5163() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test5164() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(1093075943);
		Var.enqueue(1860189884);
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test5165() {
		Queue Var = new Queue();
		Var.enqueue(-472389360);
		Var.isEmpty();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.enqueue(1372617050);
		assertEquals("[1372617050]", Var.toString());
		assertEquals("[1372617050]", Var.toString());
		Var.enqueue(1384494631);
		assertFalse(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test5166() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test5167() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.toString();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test5168() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test5169() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test5170() {
		Queue x = new Queue();
		x.enqueue(71014326);
		assertEquals(71014326, x.dequeue());
		x.enqueue(824888477);
		assertEquals("[824888477]", x.toString());
		x.enqueue(1798374198);
		assertFalse(x.isEmpty());
		assertFalse(x.isFull());
		x.enqueue(331761997);
		assertEquals("[824888477, 1798374198, 331761997]", x.toString());
		x.isEmpty();
    }
    @Test
    public void test5171() {
		Queue y = new Queue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test5172() {
		Queue x = new Queue();
		x.enqueue(1019887292);
		x.dequeue();
    }
    @Test
    public void test5173() {
		Queue y = new Queue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.enqueue(-1440550169);
		y.isFull();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.enqueue(-1673167696);
		assertFalse(y.isFull());
		y.dequeue();
		y.isFull();
		y.toString();
		y.toString();
		y.isFull();
		y.enqueue(-859929484);
    }
    @Test
    public void test5174() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(1190885935);
		y.isEmpty();
		y.isEmpty();
		assertEquals("[1190885935]", y.toString());
		y.enqueue(2046547406);
		y.enqueue(-656326432);
    }
    @Test
    public void test5175() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.toString();
		Var.isEmpty();
		Var.enqueue(-816409528);
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-994718238);
		assertTrue(Var.isEmpty());
		Var.enqueue(-2093131934);
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.enqueue(1830462423);
    }
    @Test
    public void test5176() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.enqueue(-2081432813);
		z.isEmpty();
		z.isFull();
		z.enqueue(120506884);
		z.enqueue(350197520);
		z.toString();
    }
    @Test
    public void test5177() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test5178() {
		Queue y = new Queue();
		y.enqueue(-1031776562);
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isFull();
		y.enqueue(1490926345);
		y.toString();
		y.toString();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test5179() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(366786595);
		assertFalse(x.isFull());
		x.isFull();
		x.isEmpty();
		assertFalse(x.isFull());
		x.dequeue();
		x.isEmpty();
		x.enqueue(-1721847363);
		x.dequeue();
		assertFalse(x.isFull());
		x.toString();
		x.toString();
    }
    @Test
    public void test5180() {
		Queue Var = new Queue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
		Var.toString();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.enqueue(1767998764);
		assertEquals(1767998764, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test5181() {
		Queue variable = new Queue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test5182() {
		Queue z = new Queue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.enqueue(624755481);
    }
    @Test
    public void test5183() {
		Queue Var = new Queue();
		Var.enqueue(781474245);
		Var.toString();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(1448238403);
		assertEquals(1448238403, Var.dequeue());
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test5184() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.toString();
		y.isEmpty();
		y.enqueue(-153762190);
    }
    @Test
    public void test5185() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test5186() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test5187() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test5188() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		assertFalse(y.isFull());
		y.dequeue();
		y.isFull();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.toString();
		y.dequeue();
		y.enqueue(872598433);
		y.enqueue(1458933947);
    }
    @Test
    public void test5189() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		Var.toString();
		Var.enqueue(1763404613);
		Var.dequeue();
    }
    @Test
    public void test5190() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-275427379);
		Var.isFull();
		Var.enqueue(334024884);
    }
    @Test
    public void test5191() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test5192() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test5193() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.isFull();
		x.toString();
		x.isFull();
		x.enqueue(-1367352447);
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.enqueue(-1530396156);
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.isFull();
    }
    @Test
    public void test5194() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		variable.enqueue(294522802);
    }
    @Test
    public void test5195() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test5196() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test5197() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1264800534);
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(-689792074);
		Var.dequeue();
		Var.enqueue(-1369895131);
    }
    @Test
    public void test5198() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-991709780);
		x.enqueue(-1267119454);
		x.dequeue();
		x.enqueue(-820600900);
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(613430226);
		x.dequeue();
		x.enqueue(1542895445);
    }
    @Test
    public void test5199() {
		Queue z = new Queue();
		z.enqueue(-1870198962);
		z.isEmpty();
		z.enqueue(1290318422);
		z.isFull();
		z.toString();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test5200() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(-912280088);
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.enqueue(592555437);
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test5201() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1820377958);
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test5202() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.toString();
		x.toString();
		x.isFull();
    }
    @Test
    public void test5203() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test5204() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test5205() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(1072236031);
		Var.enqueue(1824258760);
		Var.enqueue(-146995259);
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(-1778304121);
		Var.toString();
    }
    @Test
    public void test5206() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.toString();
		variable.isFull();
		variable.enqueue(1637830330);
		variable.isFull();
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(1002136493);
    }
    @Test
    public void test5207() {
		Queue z = new Queue();
		z.enqueue(1210190903);
		z.isEmpty();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
    }
    @Test
    public void test5208() {
		Queue variable = new Queue();
		variable.enqueue(896060399);
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(-1010551099);
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(1194821880);
    }
    @Test
    public void test5209() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(703629334);
    }
    @Test
    public void test5210() {
		Queue z = new Queue();
		z.enqueue(560769582);
		z.isEmpty();
		z.toString();
		z.isFull();
		z.dequeue();
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(986572034);
    }
    @Test
    public void test5211() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test5212() {
		Queue Var = new Queue();
		Var.enqueue(-1973423500);
		assertTrue(Var.isEmpty());
		Var.enqueue(1906234807);
		Var.isFull();
		Var.enqueue(-1905445476);
		assertEquals(1906234807, Var.dequeue());
		Var.enqueue(-1558966171);
		Var.isEmpty();
    }
    @Test
    public void test5213() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-278859378);
		variable.isEmpty();
    }
    @Test
    public void test5214() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test5215() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.enqueue(477786071);
		z.isFull();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(-2079696975);
    }
    @Test
    public void test5216() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(545664845);
		assertFalse(x.isFull());
		x.isEmpty();
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test5217() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.toString();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.enqueue(1257451646);
    }
    @Test
    public void test5218() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test5219() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test5220() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-88601994);
		variable.dequeue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test5221() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test5222() {
		Queue variable = new Queue();
		variable.enqueue(860490717);
		variable.isEmpty();
		variable.enqueue(321931575);
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isEmpty();
		assertEquals("[321931575]", variable.toString());
		assertFalse(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test5223() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.isFull();
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(-259687519);
    }
    @Test
    public void test5224() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test5225() {
		Queue z = new Queue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.enqueue(-694118173);
		z.isEmpty();
		z.enqueue(-1612551754);
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(-425352609);
    }
    @Test
    public void test5226() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(-1304409918);
		y.enqueue(1145890827);
		y.isEmpty();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test5227() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-628290300);
		x.enqueue(-2042557523);
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		x.toString();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test5228() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test5229() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.toString();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(402583913);
    }
    @Test
    public void test5230() {
		Queue y = new Queue();
		y.enqueue(140379494);
		y.enqueue(-702757602);
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test5231() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test5232() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.toString();
		z.dequeue();
		z.isFull();
		z.dequeue();
		z.enqueue(1559300394);
    }
    @Test
    public void test5233() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-660207660);
		z.isFull();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(1810234559);
		z.dequeue();
		z.toString();
    }
    @Test
    public void test5234() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(2024231673);
		variable.toString();
		variable.dequeue();
		variable.enqueue(691400487);
		assertFalse(variable.isEmpty());
		variable.enqueue(-919930325);
		assertFalse(variable.isFull());
		assertEquals("[691400487]", variable.toString());
		variable.enqueue(190294593);
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals(190294593, variable.dequeue());
		variable.enqueue(-2114903415);
		variable.isFull();
    }
    @Test
    public void test5235() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-622348772);
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-1310845623);
    }
    @Test
    public void test5236() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test5237() {
		Queue x = new Queue();
		x.enqueue(-1943882248);
		x.dequeue();
		x.isFull();
		x.enqueue(-57979533);
    }
    @Test
    public void test5238() {
		Queue z = new Queue();
		z.enqueue(-414753614);
		z.enqueue(-738069034);
		z.isFull();
    }
    @Test
    public void test5239() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1941083177);
		variable.isFull();
    }
    @Test
    public void test5240() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(-860321391);
		y.enqueue(691605103);
		assertEquals(691605103, y.dequeue());
		y.isFull();
		y.isFull();
		y.enqueue(-2050381825);
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.enqueue(-230361568);
    }
    @Test
    public void test5241() {
		Queue y = new Queue();
		y.enqueue(1452413984);
		y.dequeue();
		y.enqueue(1957235807);
		y.enqueue(2046830584);
    }
    @Test
    public void test5242() {
		Queue x = new Queue();
		x.enqueue(-1147602578);
		x.toString();
		x.isEmpty();
		x.dequeue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.enqueue(-239837916);
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test5243() {
		Queue y = new Queue();
		y.enqueue(1610617966);
		assertEquals(1610617966, y.dequeue());
		y.dequeue();
		y.enqueue(-1483534531);
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test5244() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-771006320);
		y.dequeue();
		y.enqueue(-1781634283);
    }
    @Test
    public void test5245() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.toString();
		z.toString();
    }
    @Test
    public void test5246() {
		Queue y = new Queue();
		y.toString();
		assertTrue(y.isEmpty());
		y.enqueue(911297691);
		y.isFull();
    }
    @Test
    public void test5247() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(80961690);
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(-384403293);
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test5248() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.toString();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test5249() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test5250() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test5251() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.enqueue(120764898);
		variable.dequeue();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test5252() {
		Queue x = new Queue();
		x.enqueue(-1098941699);
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.toString();
    }
    @Test
    public void test5253() {
		Queue z = new Queue();
		z.enqueue(-636995896);
		z.enqueue(107182350);
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.enqueue(-995239115);
    }
    @Test
    public void test5254() {
		Queue y = new Queue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(-1719152418);
		y.toString();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test5255() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.enqueue(587595795);
		x.isEmpty();
    }
    @Test
    public void test5256() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-1661073095);
		z.toString();
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(-445776081);
		z.isEmpty();
    }
    @Test
    public void test5257() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.enqueue(-871150893);
		x.isFull();
		x.enqueue(-524021803);
		x.toString();
    }
    @Test
    public void test5258() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		z.enqueue(-776508822);
		assertFalse(z.isFull());
		z.enqueue(-2079201989);
		assertEquals(-1, z.dequeue());
		z.isFull();
		assertFalse(z.isFull());
		z.enqueue(-852241492);
		z.toString();
		assertTrue(z.isEmpty());
		z.toString();
    }
    @Test
    public void test5259() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test5260() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(-457531388);
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test5261() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		variable.toString();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.toString();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(694225625);
    }
    @Test
    public void test5262() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.enqueue(924814352);
		y.dequeue();
    }
    @Test
    public void test5263() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.enqueue(1512233664);
		y.dequeue();
		y.enqueue(1169505044);
    }
    @Test
    public void test5264() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(1595149266);
		assertFalse(z.isFull());
		z.isFull();
		z.dequeue();
		z.isFull();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isFull();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test5265() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.toString();
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test5266() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test5267() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.enqueue(-1556252024);
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.enqueue(-315385153);
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test5268() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.dequeue();
		x.enqueue(-1364342490);
		x.isFull();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.enqueue(1471034926);
		x.isEmpty();
    }
    @Test
    public void test5269() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test5270() {
		Queue variable = new Queue();
		variable.enqueue(-441161545);
		variable.isEmpty();
		variable.enqueue(-558743792);
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test5271() {
		Queue y = new Queue();
		y.enqueue(68369267);
		y.toString();
		assertFalse(y.isFull());
		assertEquals(68369267, y.dequeue());
		y.toString();
		y.isEmpty();
		y.dequeue();
		y.enqueue(1250438011);
		assertEquals(1250438011, y.dequeue());
		y.isFull();
		y.toString();
    }
    @Test
    public void test5272() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test5273() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-7790652);
		y.enqueue(796172666);
		y.enqueue(-519177023);
		assertFalse(y.isFull());
		y.enqueue(934086468);
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test5274() {
		Queue z = new Queue();
		z.enqueue(180226695);
    }
    @Test
    public void test5275() {
		Queue Var = new Queue();
		Var.enqueue(-2092614587);
		Var.enqueue(1900234457);
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test5276() {
		Queue Var = new Queue();
		Var.enqueue(-1700254907);
		Var.enqueue(1101816397);
		assertFalse(Var.isEmpty());
		Var.isFull();
		assertEquals(1101816397, Var.dequeue());
		Var.enqueue(631080350);
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
		Var.enqueue(-713999388);
		Var.isEmpty();
		Var.enqueue(-906944632);
    }
    @Test
    public void test5277() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test5278() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(802318873);
    }
    @Test
    public void test5279() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(-1936995197);
		assertFalse(x.isFull());
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test5280() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.isFull();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test5281() {
		Queue variable = new Queue();
		variable.enqueue(-936164788);
		variable.toString();
    }
    @Test
    public void test5282() {
		Queue variable = new Queue();
		variable.enqueue(-779346770);
		assertFalse(variable.isFull());
		variable.enqueue(207700834);
		variable.toString();
		variable.enqueue(277129017);
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test5283() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.enqueue(-1196873762);
		variable.toString();
		variable.enqueue(625419923);
		variable.toString();
		assertEquals(625419923, variable.dequeue());
		variable.toString();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(1622110591);
    }
    @Test
    public void test5284() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test5285() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(648376232);
		x.toString();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test5286() {
		Queue Var = new Queue();
		Var.enqueue(76666215);
		Var.dequeue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test5287() {
		Queue variable = new Queue();
		variable.enqueue(-2090699366);
    }
    @Test
    public void test5288() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(908516708);
    }
    @Test
    public void test5289() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(583699799);
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.enqueue(1216940663);
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-971619194);
    }
    @Test
    public void test5290() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.enqueue(140640083);
		x.enqueue(-1009410891);
		x.isEmpty();
		x.toString();
		x.enqueue(-472730648);
    }
    @Test
    public void test5291() {
		Queue y = new Queue();
		y.enqueue(-106909624);
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.enqueue(-1819560035);
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.toString();
		y.enqueue(1838674401);
		y.isEmpty();
		y.toString();
		y.isEmpty();
		y.enqueue(499867590);
    }
    @Test
    public void test5292() {
		Queue x = new Queue();
		x.enqueue(-539874752);
		x.toString();
		x.toString();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.enqueue(-1095251697);
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(729755991);
		assertEquals("[729755991]", x.toString());
		x.enqueue(1002994295);
		x.toString();
    }
    @Test
    public void test5293() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.toString();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test5294() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.dequeue();
		variable.toString();
		variable.toString();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(1854051050);
    }
    @Test
    public void test5295() {
		Queue x = new Queue();
		x.enqueue(-880613123);
		x.toString();
		x.dequeue();
		x.isFull();
		x.isFull();
		x.enqueue(-1140479907);
		assertFalse(x.isFull());
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test5296() {
		Queue x = new Queue();
		x.enqueue(1750553983);
    }
    @Test
    public void test5297() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test5298() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test5299() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-57875648);
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(975261947);
		Var.toString();
    }
    @Test
    public void test5300() {
		Queue y = new Queue();
		y.enqueue(-176531161);
		y.isFull();
		y.dequeue();
		y.isEmpty();
		y.isFull();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.toString();
		assertFalse(y.isFull());
		y.isFull();
		y.dequeue();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test5301() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(810745839);
		Var.isEmpty();
		assertEquals("[810745839]", Var.toString());
		assertEquals(810745839, Var.dequeue());
		Var.enqueue(1943321937);
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(669061561);
    }
    @Test
    public void test5302() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(-1565356606);
		variable.enqueue(480711521);
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test5303() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-1187116813);
		z.isEmpty();
		z.enqueue(1781139290);
		z.toString();
    }
    @Test
    public void test5304() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-688426396);
		variable.toString();
		variable.isEmpty();
		variable.enqueue(450019519);
		assertFalse(variable.isFull());
		variable.enqueue(-844775186);
    }
    @Test
    public void test5305() {
		Queue Var = new Queue();
		Var.enqueue(-1950805708);
		Var.toString();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.enqueue(778941365);
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test5306() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isEmpty();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(1157329869);
		assertFalse(Var.isEmpty());
		assertFalse(Var.isFull());
		assertEquals(1157329869, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test5307() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test5308() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test5309() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test5310() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.dequeue();
		y.enqueue(-339780516);
		y.enqueue(-1318899448);
    }
    @Test
    public void test5311() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-1074102279);
		Var.enqueue(1095207598);
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.isEmpty();
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		assertFalse(Var.isFull());
		assertEquals(1095207598, Var.dequeue());
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test5312() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-2080397736);
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(981047891);
    }
    @Test
    public void test5313() {
		Queue z = new Queue();
		z.toString();
		assertTrue(z.isEmpty());
		z.toString();
		z.isEmpty();
		z.isFull();
		z.enqueue(1592495632);
		assertEquals("[1592495632]", z.toString());
		z.dequeue();
    }
    @Test
    public void test5314() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.enqueue(-12908765);
		x.enqueue(755967246);
		assertFalse(x.isFull());
		x.toString();
		x.toString();
		assertEquals("[755967246]", x.toString());
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test5315() {
		Queue y = new Queue();
		y.toString();
		assertEquals("[]", y.toString());
		y.toString();
		y.toString();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isFull();
    }
    @Test
    public void test5316() {
		Queue Var = new Queue();
		Var.enqueue(698332668);
		Var.enqueue(976357852);
		Var.toString();
    }
    @Test
    public void test5317() {
		Queue x = new Queue();
		x.enqueue(-1741649248);
		x.enqueue(258724104);
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test5318() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		assertFalse(x.isFull());
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.enqueue(696571793);
		x.isEmpty();
    }
    @Test
    public void test5319() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1948084016);
		variable.enqueue(-983721860);
		variable.enqueue(-1212159693);
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1064956263);
    }
    @Test
    public void test5320() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.isFull();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.enqueue(500242566);
		y.toString();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test5321() {
		Queue z = new Queue();
		z.enqueue(448056644);
		assertFalse(z.isEmpty());
		z.isEmpty();
		z.isFull();
		z.isFull();
		assertEquals("[448056644]", z.toString());
		z.dequeue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isFull();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test5322() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test5323() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		z.isEmpty();
		z.toString();
		z.toString();
		assertTrue(z.isEmpty());
		z.toString();
    }
    @Test
    public void test5324() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(-1913510694);
    }
    @Test
    public void test5325() {
		Queue z = new Queue();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.dequeue();
		z.enqueue(747599154);
		assertEquals(747599154, z.dequeue());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.enqueue(1956454259);
		assertFalse(z.isEmpty());
		z.isFull();
		assertEquals(1956454259, z.dequeue());
		z.isFull();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test5326() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-16827337);
		Var.toString();
    }
    @Test
    public void test5327() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.enqueue(959288043);
		x.isFull();
		assertEquals("[959288043]", x.toString());
		x.toString();
		x.isFull();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test5328() {
		Queue variable = new Queue();
		variable.enqueue(552460807);
    }
    @Test
    public void test5329() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-1853349501);
		variable.enqueue(1466210638);
		assertEquals(1466210638, variable.dequeue());
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test5330() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.enqueue(-1682254669);
		variable.toString();
    }
    @Test
    public void test5331() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test5332() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test5333() {
		Queue variable = new Queue();
		variable.enqueue(1571025951);
		variable.isEmpty();
		variable.enqueue(-424247719);
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test5334() {
		Queue y = new Queue();
		y.enqueue(-2115712274);
		y.isFull();
		assertTrue(y.isEmpty());
		y.enqueue(1290927928);
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(759780663);
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test5335() {
		Queue y = new Queue();
		y.enqueue(-776015322);
		y.dequeue();
		y.toString();
		y.enqueue(732555400);
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(1757563593);
    }
    @Test
    public void test5336() {
		Queue variable = new Queue();
		variable.enqueue(-527342867);
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(278089935);
		variable.toString();
		assertEquals("[278089935]", variable.toString());
		variable.toString();
		variable.dequeue();
		variable.enqueue(-454958378);
		variable.enqueue(426639527);
		variable.isFull();
    }
    @Test
    public void test5337() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.toString();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-1981504038);
		Var.enqueue(-2082473820);
		Var.toString();
    }
    @Test
    public void test5338() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.enqueue(-740981148);
    }
    @Test
    public void test5339() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.enqueue(-380293633);
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test5340() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.toString();
		z.toString();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.enqueue(1063126524);
		assertEquals("[1063126524]", z.toString());
		z.toString();
		assertFalse(z.isFull());
		z.toString();
		z.isEmpty();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test5341() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(1819355538);
		assertFalse(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test5342() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.enqueue(1606971004);
		assertEquals("[1606971004]", x.toString());
		assertEquals(1606971004, x.dequeue());
		assertFalse(x.isFull());
		x.toString();
		x.toString();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test5343() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.isFull();
		variable.enqueue(361782634);
		variable.enqueue(-1199389913);
		assertEquals("[361782634]", variable.toString());
		assertEquals("[361782634]", variable.toString());
		variable.enqueue(-574348647);
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test5344() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test5345() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1218608876);
		variable.enqueue(331226684);
		variable.isFull();
		variable.enqueue(2098123337);
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(1647706251);
		variable.dequeue();
		assertEquals("[1647706251]", variable.toString());
		variable.toString();
    }
    @Test
    public void test5346() {
		Queue x = new Queue();
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(788171546);
		x.toString();
		x.isFull();
    }
    @Test
    public void test5347() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-1272972516);
    }
    @Test
    public void test5348() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test5349() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(1367664025);
		z.enqueue(-1622265234);
		assertFalse(z.isFull());
		z.isFull();
		z.isEmpty();
		z.enqueue(1278525026);
		z.enqueue(1952020413);
    }
    @Test
    public void test5350() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.isFull();
		x.isEmpty();
		x.dequeue();
		x.toString();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test5351() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(-1364619174);
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.enqueue(1742910091);
		x.dequeue();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test5352() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(2073177553);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test5353() {
		Queue variable = new Queue();
		variable.enqueue(1248871000);
		assertEquals("[1248871000]", variable.toString());
		variable.isEmpty();
		variable.enqueue(-1955314324);
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test5354() {
		Queue y = new Queue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isFull();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.toString();
		y.toString();
		y.isFull();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test5355() {
		Queue x = new Queue();
		x.enqueue(-125843588);
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.dequeue();
		x.enqueue(-439602538);
		x.dequeue();
		x.isFull();
		x.enqueue(718550960);
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(-1191408843);
    }
    @Test
    public void test5356() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(-261975185);
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.toString();
		Var.enqueue(1440860592);
    }
    @Test
    public void test5357() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test5358() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isEmpty();
		z.isFull();
		z.isFull();
		z.enqueue(-256727402);
		z.isEmpty();
		z.enqueue(-2026819555);
    }
    @Test
    public void test5359() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test5360() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-68005917);
		x.isEmpty();
		x.enqueue(-272019511);
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test5361() {
		Queue z = new Queue();
		z.enqueue(-239070711);
    }
    @Test
    public void test5362() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test5363() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-1789805536);
		variable.enqueue(318715131);
		assertFalse(variable.isFull());
		variable.toString();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test5364() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test5365() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.enqueue(-1567517692);
		assertEquals(-1, y.dequeue());
		y.dequeue();
    }
    @Test
    public void test5366() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test5367() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test5368() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(6922537);
		Var.enqueue(-1782701932);
		Var.isFull();
		Var.isFull();
		Var.isFull();
		assertEquals(6922537, Var.dequeue());
		Var.enqueue(-73581591);
		Var.toString();
		Var.enqueue(-344083311);
    }
    @Test
    public void test5369() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.enqueue(760550245);
		assertEquals("[760550245]", x.toString());
		x.isFull();
		x.enqueue(-1434842998);
		assertFalse(x.isEmpty());
		x.toString();
    }
    @Test
    public void test5370() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.toString();
		z.toString();
		z.isFull();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.toString();
		z.isFull();
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(-572084410);
		z.toString();
		z.dequeue();
    }
    @Test
    public void test5371() {
		Queue y = new Queue();
		y.enqueue(-479303505);
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.toString();
		y.toString();
		y.isEmpty();
		y.enqueue(653448968);
		assertFalse(y.isEmpty());
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test5372() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test5373() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(1808996429);
		variable.enqueue(-1631626826);
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test5374() {
		Queue x = new Queue();
		x.enqueue(616510943);
		x.isEmpty();
    }
    @Test
    public void test5375() {
		Queue y = new Queue();
		y.enqueue(1969725372);
		y.isFull();
		y.isFull();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(167457926);
		y.toString();
    }
    @Test
    public void test5376() {
		Queue y = new Queue();
		y.enqueue(-950494511);
    }
    @Test
    public void test5377() {
		Queue y = new Queue();
		y.enqueue(2079273430);
		y.toString();
		y.dequeue();
		y.enqueue(1886268320);
		assertFalse(y.isEmpty());
		y.isEmpty();
		y.enqueue(-1708579684);
    }
    @Test
    public void test5378() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(1584798889);
		assertEquals("[1584798889]", z.toString());
		z.isEmpty();
		z.isFull();
		z.toString();
		z.dequeue();
		z.isFull();
		z.enqueue(-1402668948);
    }
    @Test
    public void test5379() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test5380() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isFull();
		variable.toString();
		variable.enqueue(-1297292253);
		variable.dequeue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test5381() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isEmpty();
		y.toString();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.enqueue(1944901394);
		y.toString();
		assertEquals(1944901394, y.dequeue());
		y.isFull();
    }
    @Test
    public void test5382() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test5383() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test5384() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test5385() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.toString();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(-459673573);
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test5386() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(589625931);
		assertEquals("[589625931]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test5387() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.enqueue(2140796131);
		variable.isEmpty();
    }
    @Test
    public void test5388() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-1945224197);
		y.enqueue(-1404743349);
		y.isEmpty();
		y.isFull();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.toString();
		y.toString();
		y.isEmpty();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test5389() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1257854857);
		assertFalse(variable.isFull());
		variable.enqueue(57643536);
		variable.isFull();
		assertEquals("[57643536]", variable.toString());
		assertEquals("[57643536]", variable.toString());
		variable.enqueue(1125335354);
		variable.dequeue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isFull();
		assertEquals("[1125335354]", variable.toString());
		variable.toString();
    }
    @Test
    public void test5390() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(-706159140);
		variable.toString();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(311774429);
    }
    @Test
    public void test5391() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.isEmpty();
		x.dequeue();
		x.enqueue(2044582927);
    }
    @Test
    public void test5392() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(-856352310);
    }
    @Test
    public void test5393() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test5394() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(1717886294);
		assertEquals("[1717886294]", Var.toString());
		Var.enqueue(475235823);
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		Var.enqueue(1980329025);
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test5395() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test5396() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test5397() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test5398() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test5399() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.toString();
		y.enqueue(886084010);
		y.isEmpty();
		assertEquals(886084010, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test5400() {
		Queue x = new Queue();
		x.enqueue(1564859366);
		x.enqueue(1703201102);
		x.dequeue();
		x.isFull();
		assertEquals(1703201102, x.dequeue());
		x.dequeue();
		x.toString();
		x.toString();
		x.enqueue(128200417);
    }
    @Test
    public void test5401() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-294966688);
		z.enqueue(826623834);
		assertEquals("[826623834]", z.toString());
		z.dequeue();
		z.enqueue(-2074001467);
		z.dequeue();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.toString();
    }
    @Test
    public void test5402() {
		Queue Var = new Queue();
		Var.enqueue(-412767881);
		Var.toString();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.enqueue(-2137322991);
		Var.toString();
		Var.enqueue(-2050184019);
    }
    @Test
    public void test5403() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		assertFalse(x.isFull());
		x.isFull();
		x.toString();
		x.toString();
		x.dequeue();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.toString();
    }
    @Test
    public void test5404() {
		Queue z = new Queue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.enqueue(355235868);
		z.enqueue(-851670683);
		z.isFull();
		assertEquals(355235868, z.dequeue());
		z.enqueue(-1040222823);
		z.dequeue();
		z.isEmpty();
		z.toString();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test5405() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(-1242004496);
		x.enqueue(1515039219);
		x.isFull();
		assertEquals(1515039219, x.dequeue());
		x.enqueue(191194645);
    }
    @Test
    public void test5406() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test5407() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test5408() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(846419329);
		Var.isEmpty();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test5409() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(768060373);
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test5410() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isFull();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(183251988);
		x.toString();
		x.dequeue();
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test5411() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.dequeue();
		y.dequeue();
		y.dequeue();
		y.enqueue(-1693124859);
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test5412() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(-1565788383);
		z.dequeue();
		z.isFull();
		z.isFull();
		z.toString();
		z.toString();
    }
    @Test
    public void test5413() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(1486057336);
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.toString();
		assertFalse(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test5414() {
		Queue x = new Queue();
		x.enqueue(-1140818554);
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.enqueue(957306330);
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test5415() {
		Queue x = new Queue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.enqueue(-1764875060);
    }
    @Test
    public void test5416() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(440523899);
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.enqueue(-2050003623);
		Var.dequeue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test5417() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(705944759);
    }
    @Test
    public void test5418() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(870403302);
		x.toString();
		x.dequeue();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.enqueue(-1052649048);
    }
    @Test
    public void test5419() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test5420() {
		Queue z = new Queue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(1158355461);
		assertEquals(1158355461, z.dequeue());
		z.isEmpty();
		z.dequeue();
		z.isFull();
		z.toString();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test5421() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(835624487);
		x.isEmpty();
    }
    @Test
    public void test5422() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.isFull();
		x.enqueue(12956833);
		x.isFull();
    }
    @Test
    public void test5423() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isFull();
		z.isFull();
		z.dequeue();
		assertFalse(z.isFull());
		z.isFull();
		z.toString();
		assertFalse(z.isFull());
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1077686387);
		z.toString();
		z.toString();
    }
    @Test
    public void test5424() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(-1972941882);
    }
    @Test
    public void test5425() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(1829448365);
		Var.toString();
		Var.isFull();
		assertEquals("[1829448365]", Var.toString());
		Var.toString();
		Var.toString();
		Var.enqueue(956174656);
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test5426() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-498556601);
		x.dequeue();
		x.enqueue(1727302135);
    }
    @Test
    public void test5427() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-273973942);
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.isFull();
		x.toString();
		x.isFull();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(2088079208);
		x.enqueue(-951498582);
		x.dequeue();
    }
    @Test
    public void test5428() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(1481260330);
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test5429() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isEmpty();
		x.enqueue(1892487840);
    }
    @Test
    public void test5430() {
		Queue z = new Queue();
		z.toString();
		assertEquals("[]", z.toString());
		z.toString();
		z.dequeue();
		z.toString();
		z.enqueue(-71179393);
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.enqueue(1790360616);
    }
    @Test
    public void test5431() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test5432() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isFull();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test5433() {
		Queue z = new Queue();
		z.enqueue(168698655);
		z.dequeue();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(-1368040775);
    }
    @Test
    public void test5434() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.enqueue(1612576504);
		x.toString();
		x.toString();
		x.enqueue(1869811787);
		x.enqueue(487413790);
		x.toString();
    }
    @Test
    public void test5435() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test5436() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(482809132);
    }
    @Test
    public void test5437() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.isFull();
    }
    @Test
    public void test5438() {
		Queue variable = new Queue();
		variable.enqueue(1598511379);
		variable.enqueue(407844450);
		variable.enqueue(-1132892996);
		variable.toString();
		variable.isEmpty();
		assertEquals(1598511379, variable.dequeue());
		variable.toString();
		variable.isEmpty();
		assertEquals(407844450, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test5439() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.enqueue(81154101);
		assertEquals(81154101, Var.dequeue());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-426154997);
		Var.enqueue(-2024886195);
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test5440() {
		Queue x = new Queue();
		x.enqueue(1901877248);
		x.enqueue(-1184477029);
		x.enqueue(1809991731);
		assertEquals("[1901877248, 1809991731]", x.toString());
		x.dequeue();
		x.isFull();
		x.enqueue(1759708751);
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test5441() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.toString();
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(-414438401);
		assertEquals("[]", y.toString());
		y.toString();
		y.isFull();
    }
    @Test
    public void test5442() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.enqueue(40725065);
		x.isFull();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test5443() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(296601371);
		variable.toString();
		variable.isFull();
		assertEquals(296601371, variable.dequeue());
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(651587509);
    }
    @Test
    public void test5444() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test5445() {
		Queue z = new Queue();
		z.toString();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.enqueue(-801714184);
		z.isFull();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.toString();
    }
    @Test
    public void test5446() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.enqueue(-1230609316);
		assertFalse(variable.isFull());
		variable.enqueue(-1784527217);
		variable.enqueue(43065996);
		variable.isFull();
    }
    @Test
    public void test5447() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(730991969);
		x.enqueue(-1541246722);
    }
    @Test
    public void test5448() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
		x.isFull();
		x.dequeue();
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test5449() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(897905687);
		z.enqueue(285799788);
		z.dequeue();
		z.enqueue(977625593);
    }
    @Test
    public void test5450() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.enqueue(-20144316);
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.enqueue(1422795198);
		Var.isFull();
    }
    @Test
    public void test5451() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1306037295);
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test5452() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(777632154);
    }
    @Test
    public void test5453() {
		Queue variable = new Queue();
		variable.enqueue(-1434487706);
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test5454() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		y.isEmpty();
		y.toString();
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test5455() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(1436016238);
		Var.enqueue(1087439998);
		Var.isFull();
		Var.enqueue(-460173881);
		assertFalse(Var.isFull());
		assertEquals(1436016238, Var.dequeue());
		Var.enqueue(-1216218629);
		Var.enqueue(448758590);
		Var.isEmpty();
    }
    @Test
    public void test5456() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(-614649087);
		Var.enqueue(-1636080706);
		Var.toString();
		Var.enqueue(1307334276);
		assertEquals("[1307334276]", Var.toString());
		Var.enqueue(680567938);
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test5457() {
		Queue y = new Queue();
		y.toString();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.toString();
		assertEquals("[]", y.toString());
		y.isFull();
		y.toString();
		y.enqueue(-540867609);
    }
    @Test
    public void test5458() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.enqueue(317937050);
		x.isEmpty();
    }
    @Test
    public void test5459() {
		Queue y = new Queue();
		y.enqueue(250984046);
		assertFalse(y.isFull());
		assertFalse(y.isEmpty());
		y.toString();
    }
    @Test
    public void test5460() {
		Queue variable = new Queue();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(933961674);
		variable.dequeue();
		variable.isFull();
		variable.enqueue(1892566917);
    }
    @Test
    public void test5461() {
		Queue Var = new Queue();
		Var.enqueue(57453020);
    }
    @Test
    public void test5462() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1777065759);
		assertEquals("[]", y.toString());
		y.isFull();
    }
    @Test
    public void test5463() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isFull();
		x.toString();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.enqueue(513143125);
		x.isFull();
    }
    @Test
    public void test5464() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(560888974);
		x.toString();
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.enqueue(606786651);
		x.toString();
		assertEquals("[560888974, 606786651]", x.toString());
		assertEquals("[560888974, 606786651]", x.toString());
		x.enqueue(2121462496);
    }
    @Test
    public void test5465() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.enqueue(1587725063);
		z.isFull();
		z.isEmpty();
		assertEquals("[1587725063]", z.toString());
		z.isEmpty();
		assertEquals("[1587725063]", z.toString());
		z.toString();
    }
    @Test
    public void test5466() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		assertFalse(z.isFull());
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test5467() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.toString();
		assertFalse(y.isFull());
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test5468() {
		Queue x = new Queue();
		x.enqueue(1838647700);
		x.isEmpty();
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isFull();
		x.toString();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test5469() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test5470() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test5471() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1331985083);
		z.enqueue(2135812457);
		z.isEmpty();
		z.enqueue(-1421027271);
    }
    @Test
    public void test5472() {
		Queue Var = new Queue();
		Var.enqueue(-1601637192);
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test5473() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.isFull();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test5474() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isFull();
		y.enqueue(139174851);
		y.toString();
		y.enqueue(1617714675);
		y.enqueue(477816510);
		y.toString();
		y.toString();
		y.enqueue(-545513315);
    }
    @Test
    public void test5475() {
		Queue y = new Queue();
		y.enqueue(1678403408);
		assertFalse(y.isEmpty());
		y.isFull();
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
		y.toString();
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(-1839299355);
		assertFalse(y.isFull());
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test5476() {
		Queue x = new Queue();
		x.enqueue(-474689888);
		x.isEmpty();
		x.isFull();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test5477() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.enqueue(-2131933650);
		Var.toString();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test5478() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-1700703651);
		y.isEmpty();
		y.enqueue(1865136605);
		y.enqueue(-948080710);
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test5479() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-67910951);
		z.enqueue(379882933);
		z.isEmpty();
    }
    @Test
    public void test5480() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(1115280599);
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.isEmpty();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test5481() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test5482() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(1042265507);
		Var.enqueue(-1042621671);
    }
    @Test
    public void test5483() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-1600517739);
		z.dequeue();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test5484() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(356435741);
		Var.dequeue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test5485() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.enqueue(1524306062);
		x.isEmpty();
		assertEquals(1524306062, x.dequeue());
		x.enqueue(1672160696);
		x.isEmpty();
		assertEquals(1672160696, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test5486() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.enqueue(870303149);
		variable.toString();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(208661365);
		assertEquals("[208661365]", variable.toString());
		variable.enqueue(1728437328);
		variable.toString();
    }
    @Test
    public void test5487() {
		Queue y = new Queue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.enqueue(1025211298);
		y.isEmpty();
    }
    @Test
    public void test5488() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-2046179646);
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(1155323717);
		y.enqueue(1381224889);
		y.isEmpty();
    }
    @Test
    public void test5489() {
		Queue Var = new Queue();
		Var.enqueue(1609493556);
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.toString();
		Var.isFull();
		assertEquals(1609493556, Var.dequeue());
		Var.isFull();
		Var.enqueue(1777491664);
    }
    @Test
    public void test5490() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(-107714158);
		assertTrue(variable.isEmpty());
		variable.enqueue(2075540029);
		assertFalse(variable.isFull());
		variable.enqueue(224953674);
		variable.dequeue();
		assertFalse(variable.isEmpty());
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test5491() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isFull();
		assertEquals("[]", x.toString());
		x.enqueue(2051676167);
		x.isFull();
		assertEquals("[2051676167]", x.toString());
		assertEquals(2051676167, x.dequeue());
		x.isFull();
		x.isFull();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test5492() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.isFull();
		assertFalse(x.isFull());
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test5493() {
		Queue x = new Queue();
		x.enqueue(-1852626882);
		x.toString();
		x.enqueue(-1147935864);
    }
    @Test
    public void test5494() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-1582552098);
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		z.isFull();
		assertEquals("[]", z.toString());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.toString();
		z.toString();
		z.isFull();
    }
    @Test
    public void test5495() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(1966610406);
		Var.toString();
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.enqueue(-2105596140);
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test5496() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.enqueue(-1523042254);
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.isFull();
		x.isFull();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test5497() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(-1051179356);
    }
    @Test
    public void test5498() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(180817300);
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(-961170134);
		x.enqueue(1287339455);
    }
    @Test
    public void test5499() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test5500() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.dequeue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test5501() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.isFull();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test5502() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(427994421);
		x.isFull();
		assertFalse(x.isFull());
		assertEquals(427994421, x.dequeue());
		x.isEmpty();
		x.enqueue(-2024208924);
		assertFalse(x.isFull());
		x.toString();
		assertEquals(-1, x.dequeue());
		x.toString();
		assertTrue(x.isEmpty());
		x.toString();
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test5503() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		assertFalse(z.isFull());
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(-1801642145);
    }
    @Test
    public void test5504() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-1876409500);
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test5505() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.isFull();
		x.isFull();
		x.toString();
		x.enqueue(-1945972949);
		x.enqueue(-1553417675);
    }
    @Test
    public void test5506() {
		Queue z = new Queue();
		z.enqueue(1266009114);
		z.dequeue();
    }
    @Test
    public void test5507() {
		Queue y = new Queue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.enqueue(-67753610);
    }
    @Test
    public void test5508() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.enqueue(690707041);
		z.enqueue(-1936049552);
		z.enqueue(1512430256);
		assertEquals(690707041, z.dequeue());
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test5509() {
		Queue variable = new Queue();
		variable.enqueue(-1386465457);
		variable.enqueue(-1620056117);
		variable.enqueue(-1799653329);
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(2047199926);
		variable.toString();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(1033723975);
    }
    @Test
    public void test5510() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(968249592);
		assertFalse(y.isFull());
		assertEquals("[968249592]", y.toString());
		y.isEmpty();
		y.dequeue();
		y.enqueue(617142280);
		y.isEmpty();
		y.isFull();
		assertEquals("[617142280]", y.toString());
		y.enqueue(1042148585);
		y.toString();
		y.isFull();
    }
    @Test
    public void test5511() {
		Queue x = new Queue();
		x.enqueue(474606865);
		x.toString();
		x.dequeue();
		x.enqueue(1874100881);
		assertFalse(x.isEmpty());
		x.toString();
		x.toString();
		x.enqueue(1775515052);
    }
    @Test
    public void test5512() {
		Queue variable = new Queue();
		variable.enqueue(286348805);
		assertEquals("[286348805]", variable.toString());
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test5513() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.enqueue(-1447422612);
		x.toString();
    }
    @Test
    public void test5514() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(-628902535);
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test5515() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.dequeue();
		x.toString();
		x.isFull();
    }
    @Test
    public void test5516() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		y.isFull();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isFull();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.enqueue(-75754354);
		y.dequeue();
		y.enqueue(204384830);
		y.isEmpty();
    }
    @Test
    public void test5517() {
		Queue x = new Queue();
		x.isFull();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.dequeue();
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.enqueue(-203360674);
		x.isFull();
		x.isFull();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test5518() {
		Queue x = new Queue();
		x.enqueue(158770311);
		assertEquals("[158770311]", x.toString());
		assertFalse(x.isFull());
		assertEquals("[158770311]", x.toString());
		x.dequeue();
		x.dequeue();
		x.enqueue(-557819269);
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.toString();
		x.enqueue(982881205);
    }
    @Test
    public void test5519() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.dequeue();
		x.enqueue(-1164487451);
		x.toString();
		x.isEmpty();
		x.dequeue();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.toString();
		x.toString();
    }
    @Test
    public void test5520() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(2048860245);
		variable.dequeue();
		variable.enqueue(-53108950);
    }
    @Test
    public void test5521() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test5522() {
		Queue z = new Queue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test5523() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(1067520499);
		variable.dequeue();
		variable.toString();
		variable.toString();
		variable.isFull();
		variable.enqueue(82252006);
		variable.toString();
		variable.enqueue(-1783194166);
    }
    @Test
    public void test5524() {
		Queue Var = new Queue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test5525() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-412493951);
		y.isFull();
		y.toString();
		y.dequeue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.toString();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.enqueue(-1465804784);
		y.isFull();
    }
    @Test
    public void test5526() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.enqueue(-1845817043);
		x.enqueue(671436847);
		assertEquals(671436847, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test5527() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(84103999);
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test5528() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.dequeue();
		z.isFull();
		z.isEmpty();
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test5529() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-1695134976);
		y.toString();
		y.dequeue();
    }
    @Test
    public void test5530() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(838214079);
		x.enqueue(710194877);
		x.enqueue(-555431238);
		assertFalse(x.isEmpty());
		assertEquals(838214079, x.dequeue());
		x.enqueue(-939286487);
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test5531() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test5532() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test5533() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test5534() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(2069979759);
		variable.enqueue(1951942037);
		assertEquals("[2069979759, 1951942037]", variable.toString());
		assertFalse(variable.isEmpty());
		variable.enqueue(1259031984);
		variable.isEmpty();
		variable.dequeue();
		assertFalse(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test5535() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(995906502);
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-1638902124);
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test5536() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test5537() {
		Queue y = new Queue();
		y.toString();
		y.toString();
    }
    @Test
    public void test5538() {
		Queue y = new Queue();
		y.enqueue(-1678785937);
		y.isFull();
		y.enqueue(-1307736956);
		y.enqueue(1469908663);
		y.isEmpty();
		y.enqueue(580837525);
    }
    @Test
    public void test5539() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.dequeue();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test5540() {
		Queue y = new Queue();
		y.enqueue(229441929);
		y.dequeue();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test5541() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(-71982610);
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test5542() {
		Queue x = new Queue();
		x.toString();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test5543() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(140848746);
		variable.enqueue(825891663);
    }
    @Test
    public void test5544() {
		Queue y = new Queue();
		y.enqueue(1149595766);
		y.toString();
		y.toString();
		y.isEmpty();
		y.isFull();
		assertEquals("[1149595766]", y.toString());
		y.enqueue(1493808783);
    }
    @Test
    public void test5545() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(23159503);
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(447839047);
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test5546() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(1624853172);
		variable.dequeue();
		variable.toString();
		variable.enqueue(1045226519);
		variable.isFull();
		assertFalse(variable.isFull());
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(-819909333);
    }
    @Test
    public void test5547() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test5548() {
		Queue variable = new Queue();
		variable.enqueue(-796439574);
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(704550878);
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test5549() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(1426443673);
		z.isEmpty();
		z.toString();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test5550() {
		Queue y = new Queue();
		y.toString();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.toString();
		y.enqueue(-860409983);
		y.isEmpty();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test5551() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.toString();
		y.dequeue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(397914044);
		y.isFull();
    }
    @Test
    public void test5552() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.dequeue();
		variable.enqueue(52642509);
		variable.enqueue(1897881784);
    }
    @Test
    public void test5553() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test5554() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test5555() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test5556() {
		Queue y = new Queue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.isFull();
		y.dequeue();
		y.isFull();
		y.isFull();
		y.toString();
    }
    @Test
    public void test5557() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-913076646);
    }
    @Test
    public void test5558() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(1966891852);
		Var.isFull();
    }
    @Test
    public void test5559() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.enqueue(1440374847);
		Var.enqueue(-1845419110);
		Var.toString();
		Var.isFull();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test5560() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test5561() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(1382489849);
		assertEquals("[1382489849]", variable.toString());
		assertEquals(1382489849, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(82874656);
		assertEquals(82874656, variable.dequeue());
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test5562() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
		assertEquals("[]", y.toString());
		y.enqueue(-864776578);
		assertEquals("[]", y.toString());
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(1317588260);
		assertEquals("[1317588260]", y.toString());
		y.enqueue(-285274295);
		y.isFull();
    }
    @Test
    public void test5563() {
		Queue Var = new Queue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.enqueue(-2049880826);
		assertFalse(Var.isFull());
		Var.enqueue(-528900358);
		Var.isEmpty();
		Var.enqueue(-667387904);
		Var.toString();
    }
    @Test
    public void test5564() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.isFull();
		z.isFull();
		z.isFull();
		z.enqueue(1197148520);
    }
    @Test
    public void test5565() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(-638109032);
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.enqueue(327998502);
		variable.isFull();
    }
    @Test
    public void test5566() {
		Queue x = new Queue();
		x.enqueue(-966047306);
		x.isFull();
		x.isEmpty();
		x.isFull();
		assertFalse(x.isFull());
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.toString();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test5567() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(-1364549353);
		y.dequeue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.toString();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.enqueue(-347093102);
    }
    @Test
    public void test5568() {
		Queue z = new Queue();
		z.dequeue();
		assertFalse(z.isFull());
		z.isFull();
		z.toString();
    }
    @Test
    public void test5569() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.toString();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-341389016);
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test5570() {
		Queue Var = new Queue();
		Var.enqueue(1637958532);
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(511014413);
		assertEquals("[511014413]", Var.toString());
		Var.enqueue(284946788);
    }
    @Test
    public void test5571() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(783548337);
		assertEquals(783548337, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(2070227109);
    }
    @Test
    public void test5572() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.toString();
		variable.enqueue(-1013104943);
		variable.toString();
    }
    @Test
    public void test5573() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(1334864006);
		z.dequeue();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test5574() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.dequeue();
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(-1334039909);
    }
    @Test
    public void test5575() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test5576() {
		Queue Var = new Queue();
		Var.enqueue(-1676311173);
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isFull();
		Var.enqueue(477621232);
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		assertEquals(477621232, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test5577() {
		Queue y = new Queue();
		y.toString();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test5578() {
		Queue y = new Queue();
		y.enqueue(-987146090);
		y.dequeue();
		y.toString();
		y.isFull();
		y.toString();
    }
    @Test
    public void test5579() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.enqueue(-1461341675);
		x.dequeue();
		assertTrue(x.isEmpty());
		x.enqueue(-1082571301);
    }
    @Test
    public void test5580() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.dequeue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(1260526297);
		z.isFull();
		z.enqueue(1017691839);
		z.isEmpty();
		z.enqueue(-143543717);
		assertFalse(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test5581() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.enqueue(-1137475089);
		z.enqueue(-1955722762);
		z.isEmpty();
		z.enqueue(1417859293);
    }
    @Test
    public void test5582() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-800660559);
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1277295936);
    }
    @Test
    public void test5583() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test5584() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.enqueue(1980198921);
		assertEquals(1980198921, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test5585() {
		Queue variable = new Queue();
		variable.enqueue(-183713946);
		assertFalse(variable.isFull());
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.enqueue(-1700999515);
		variable.enqueue(-1760530626);
		variable.dequeue();
    }
    @Test
    public void test5586() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-1306025995);
    }
    @Test
    public void test5587() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-80640382);
		variable.enqueue(-1184284663);
		variable.toString();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(1938204540);
		assertEquals(1938204540, variable.dequeue());
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test5588() {
		Queue y = new Queue();
		y.enqueue(-1375510589);
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test5589() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test5590() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isFull();
		y.isFull();
		y.dequeue();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test5591() {
		Queue x = new Queue();
		x.enqueue(-1019092079);
		x.toString();
		x.isEmpty();
		x.isFull();
		assertFalse(x.isFull());
		x.isFull();
		assertEquals("[]", x.toString());
		x.isEmpty();
    }
    @Test
    public void test5592() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test5593() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test5594() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test5595() {
		Queue Var = new Queue();
		Var.enqueue(-1123399448);
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(1407880543);
		assertEquals("[1407880543]", Var.toString());
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.enqueue(2018747093);
		Var.dequeue();
		assertFalse(Var.isEmpty());
		Var.isFull();
		assertEquals(2018747093, Var.dequeue());
		Var.enqueue(337929832);
    }
    @Test
    public void test5596() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.enqueue(-854755914);
		variable.isFull();
		variable.toString();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test5597() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.toString();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.toString();
    }
    @Test
    public void test5598() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test5599() {
		Queue x = new Queue();
		x.enqueue(253212654);
		assertEquals(253212654, x.dequeue());
		x.isEmpty();
		x.enqueue(1543386699);
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test5600() {
		Queue y = new Queue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isFull();
    }
    @Test
    public void test5601() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.isFull();
		y.toString();
		y.toString();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-1306821094);
		assertTrue(y.isEmpty());
		y.dequeue();
		assertTrue(y.isEmpty());
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(1252680453);
		y.toString();
    }
    @Test
    public void test5602() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.dequeue();
		x.enqueue(-1227351212);
		x.isEmpty();
		x.enqueue(1584084174);
		x.isFull();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test5603() {
		Queue z = new Queue();
		z.enqueue(1772607185);
		z.enqueue(624306604);
		assertEquals(1772607185, z.dequeue());
		z.enqueue(-1299101042);
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(-874037665);
		assertFalse(z.isFull());
		z.enqueue(-1752351887);
		z.isFull();
    }
    @Test
    public void test5604() {
		Queue y = new Queue();
		y.enqueue(1851678080);
		y.enqueue(722071990);
		y.enqueue(909658848);
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
    }
    @Test
    public void test5605() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		assertFalse(z.isFull());
		z.isFull();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.enqueue(-1348144952);
		z.isEmpty();
    }
    @Test
    public void test5606() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.toString();
		z.toString();
		z.dequeue();
		z.enqueue(2074787155);
    }
    @Test
    public void test5607() {
		Queue variable = new Queue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.enqueue(-1133866765);
		assertEquals("[]", variable.toString());
		variable.enqueue(1407882370);
		variable.enqueue(-1942542851);
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(273925414);
		variable.toString();
		variable.toString();
		variable.enqueue(1683211632);
    }
    @Test
    public void test5608() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test5609() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(1227224745);
		z.enqueue(132279262);
		z.enqueue(-1124421401);
    }
    @Test
    public void test5610() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		assertEquals("[]", y.toString());
		y.toString();
		y.isEmpty();
		y.enqueue(1384533420);
		assertFalse(y.isFull());
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.enqueue(-877018620);
    }
    @Test
    public void test5611() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(795297977);
		variable.enqueue(-183613511);
		assertEquals(795297977, variable.dequeue());
		variable.enqueue(1730976856);
		variable.isFull();
		variable.enqueue(-2002595499);
    }
    @Test
    public void test5612() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(1152635785);
    }
    @Test
    public void test5613() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		variable.enqueue(879807576);
		variable.isFull();
		variable.enqueue(-1575131478);
		variable.enqueue(-932317927);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test5614() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
		y.enqueue(1971132743);
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test5615() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		assertTrue(z.isEmpty());
		z.dequeue();
		assertFalse(z.isFull());
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.enqueue(-999822299);
		assertTrue(z.isEmpty());
		z.enqueue(-2109732103);
		z.isFull();
		z.enqueue(2117608806);
		z.enqueue(1531574590);
		z.isEmpty();
    }
    @Test
    public void test5616() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1330889503);
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.enqueue(1831767599);
		Var.isFull();
		Var.isFull();
		Var.enqueue(1583486592);
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test5617() {
		Queue x = new Queue();
		x.enqueue(1860834622);
		x.dequeue();
		x.enqueue(-1351971460);
		x.isFull();
		x.enqueue(-277166086);
		x.enqueue(1929448369);
		x.isFull();
		x.toString();
    }
    @Test
    public void test5618() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.enqueue(-2112202179);
		Var.isFull();
    }
    @Test
    public void test5619() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(362273692);
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test5620() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(-470830209);
    }
    @Test
    public void test5621() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1610689260);
		variable.enqueue(-78057300);
		assertEquals(1610689260, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test5622() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test5623() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test5624() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.toString();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test5625() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-987019969);
		x.enqueue(90672453);
		assertEquals(90672453, x.dequeue());
		x.isEmpty();
		x.isEmpty();
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(866752577);
		x.isFull();
		x.isFull();
    }
    @Test
    public void test5626() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.enqueue(-75452908);
		variable.isFull();
		variable.enqueue(-1764943830);
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test5627() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.dequeue();
		variable.enqueue(-429408093);
		variable.isEmpty();
		variable.toString();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(186905965);
		variable.enqueue(-748018003);
    }
    @Test
    public void test5628() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test5629() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test5630() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.toString();
		z.isFull();
		z.toString();
    }
    @Test
    public void test5631() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(195668048);
		assertFalse(z.isEmpty());
		z.toString();
		assertEquals("[195668048]", z.toString());
		z.toString();
    }
    @Test
    public void test5632() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.isFull();
		z.isFull();
		z.toString();
		z.dequeue();
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test5633() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.enqueue(1286742255);
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test5634() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(2031176657);
		variable.isFull();
		variable.enqueue(527300525);
		assertFalse(variable.isFull());
		variable.isFull();
		assertEquals(2031176657, variable.dequeue());
		variable.enqueue(2111536631);
		variable.isEmpty();
		assertEquals(527300525, variable.dequeue());
		assertEquals(2111536631, variable.dequeue());
		variable.toString();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test5635() {
		Queue z = new Queue();
		z.isFull();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.toString();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test5636() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test5637() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertFalse(z.isFull());
		z.toString();
		z.toString();
		z.toString();
		z.dequeue();
		z.toString();
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test5638() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(-993050184);
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(615810369);
    }
    @Test
    public void test5639() {
		Queue variable = new Queue();
		variable.enqueue(547585200);
		variable.toString();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(-253998981);
		variable.isFull();
    }
    @Test
    public void test5640() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test5641() {
		Queue y = new Queue();
		y.enqueue(-1094351881);
		y.toString();
    }
    @Test
    public void test5642() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test5643() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test5644() {
		Queue z = new Queue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.enqueue(-233292320);
		z.dequeue();
		z.dequeue();
		z.isFull();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test5645() {
		Queue y = new Queue();
		y.enqueue(-82374849);
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.toString();
		y.isFull();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test5646() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.enqueue(1821343060);
    }
    @Test
    public void test5647() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.toString();
		y.enqueue(-1360250020);
		y.enqueue(-1686568640);
		y.enqueue(-755818755);
    }
    @Test
    public void test5648() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.enqueue(943154751);
		y.toString();
		y.isFull();
		assertEquals(943154751, y.dequeue());
		y.isFull();
		y.isFull();
    }
    @Test
    public void test5649() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test5650() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.isFull();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test5651() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-495022097);
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test5652() {
		Queue y = new Queue();
		y.enqueue(1097915504);
		y.isEmpty();
		y.enqueue(580215131);
		y.enqueue(-575531156);
		y.isFull();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test5653() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(1553971137);
		Var.isFull();
    }
    @Test
    public void test5654() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test5655() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(93441791);
		z.isEmpty();
		z.enqueue(501954716);
		assertFalse(z.isEmpty());
		z.enqueue(1912220867);
		assertEquals(93441791, z.dequeue());
		assertEquals(501954716, z.dequeue());
		z.enqueue(-1711757544);
		assertEquals(1912220867, z.dequeue());
		z.enqueue(725893401);
		z.isEmpty();
    }
    @Test
    public void test5656() {
		Queue x = new Queue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(2128668715);
    }
    @Test
    public void test5657() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(-774328169);
		x.dequeue();
    }
    @Test
    public void test5658() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test5659() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isFull();
		Var.enqueue(-208207020);
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(738551328);
    }
    @Test
    public void test5660() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.enqueue(1756201377);
		y.enqueue(-1335347618);
    }
    @Test
    public void test5661() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(-1037941016);
    }
    @Test
    public void test5662() {
		Queue Var = new Queue();
		Var.enqueue(-1922145293);
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-744763690);
		Var.isFull();
    }
    @Test
    public void test5663() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(101645262);
		Var.enqueue(-702881360);
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test5664() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(-610789217);
		y.enqueue(1903282873);
		assertEquals(1903282873, y.dequeue());
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test5665() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test5666() {
		Queue Var = new Queue();
		Var.enqueue(-216809777);
		Var.enqueue(-1384392861);
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test5667() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test5668() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-817538725);
		assertFalse(Var.isFull());
		Var.enqueue(530428685);
		assertEquals("[530428685]", Var.toString());
		Var.isFull();
		Var.isFull();
		Var.enqueue(700311117);
		assertEquals("[530428685, 700311117]", Var.toString());
		Var.toString();
		assertEquals(530428685, Var.dequeue());
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test5669() {
		Queue y = new Queue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(-1837905855);
		y.toString();
    }
    @Test
    public void test5670() {
		Queue z = new Queue();
		z.enqueue(-1747066280);
		z.isEmpty();
		z.enqueue(1459072935);
		z.isFull();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test5671() {
		Queue x = new Queue();
		x.enqueue(-489265178);
		assertFalse(x.isFull());
		x.isFull();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isFull();
		x.toString();
    }
    @Test
    public void test5672() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.enqueue(-468912939);
    }
    @Test
    public void test5673() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.dequeue();
		z.dequeue();
		z.enqueue(1069662838);
		z.isFull();
		assertEquals(1069662838, z.dequeue());
		z.dequeue();
		z.isFull();
		z.toString();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test5674() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.toString();
		z.isEmpty();
		z.enqueue(1338824830);
    }
    @Test
    public void test5675() {
		Queue Var = new Queue();
		Var.enqueue(-123299798);
		Var.dequeue();
		Var.enqueue(1491113470);
		Var.enqueue(-1111755503);
		Var.toString();
		Var.enqueue(-2049286729);
		assertEquals(1491113470, Var.dequeue());
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test5676() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isEmpty();
		z.toString();
		z.toString();
		z.toString();
		z.dequeue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isFull();
    }
    @Test
    public void test5677() {
		Queue x = new Queue();
		x.enqueue(1089049914);
		x.dequeue();
		assertTrue(x.isEmpty());
		x.enqueue(-798267166);
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.toString();
		x.enqueue(-174093324);
    }
    @Test
    public void test5678() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-1408606016);
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test5679() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test5680() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.isFull();
		y.isFull();
		y.enqueue(1835952159);
		y.toString();
    }
    @Test
    public void test5681() {
		Queue y = new Queue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(1966359317);
		assertEquals("[1966359317]", y.toString());
		assertFalse(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test5682() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1283538598);
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
		x.isEmpty();
		assertFalse(x.isEmpty());
		assertFalse(x.isEmpty());
		x.toString();
		x.isFull();
		x.isEmpty();
		assertEquals(1283538598, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test5683() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test5684() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test5685() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.toString();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(-2101386676);
    }
    @Test
    public void test5686() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(-814603799);
		variable.toString();
		variable.enqueue(143415272);
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test5687() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.enqueue(1211064311);
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test5688() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.dequeue();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-778063680);
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test5689() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.enqueue(-1986781537);
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test5690() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test5691() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(2026406121);
		assertEquals(2026406121, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test5692() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(1215597675);
		x.toString();
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(-166602935);
		x.isEmpty();
		assertEquals("[1215597675]", x.toString());
		x.toString();
    }
    @Test
    public void test5693() {
		Queue Var = new Queue();
		Var.enqueue(1889724905);
		assertEquals(1889724905, Var.dequeue());
		Var.isFull();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test5694() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.enqueue(1797673141);
		x.isEmpty();
		assertEquals("[1797673141]", x.toString());
		assertFalse(x.isFull());
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(1512968954);
		assertFalse(x.isFull());
		x.dequeue();
		x.enqueue(-1768700438);
    }
    @Test
    public void test5695() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(1833734707);
		y.enqueue(502499787);
		y.isEmpty();
		assertFalse(y.isFull());
		y.dequeue();
		assertEquals(502499787, y.dequeue());
		y.isFull();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.enqueue(1554577382);
		y.toString();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test5696() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.enqueue(506853729);
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.isFull();
    }
    @Test
    public void test5697() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1996884099);
		z.enqueue(379507255);
		z.enqueue(-1072298360);
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test5698() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.enqueue(-376339126);
		z.isFull();
    }
    @Test
    public void test5699() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.isFull();
		assertTrue(x.isEmpty());
		x.enqueue(1250452795);
		x.isFull();
		x.toString();
		assertFalse(x.isEmpty());
		assertEquals("[1250452795]", x.toString());
		x.toString();
		x.enqueue(1155386119);
		assertFalse(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test5700() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test5701() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-935577529);
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.enqueue(394255997);
    }
    @Test
    public void test5702() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test5703() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.isFull();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(-725092406);
		z.toString();
    }
    @Test
    public void test5704() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.enqueue(-408122592);
		z.dequeue();
    }
    @Test
    public void test5705() {
		Queue y = new Queue();
		y.enqueue(657584454);
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(109312453);
		y.toString();
		y.toString();
		assertEquals("[109312453]", y.toString());
		y.isEmpty();
		assertEquals("[109312453]", y.toString());
		y.enqueue(-1304402318);
    }
    @Test
    public void test5706() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-330121109);
		variable.toString();
    }
    @Test
    public void test5707() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-671206052);
		Var.enqueue(-989616227);
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(1369438235);
		Var.isFull();
		Var.isFull();
		assertEquals(1369438235, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test5708() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test5709() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-255788231);
    }
    @Test
    public void test5710() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test5711() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test5712() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-315544881);
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.toString();
    }
    @Test
    public void test5713() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(-752580237);
		variable.dequeue();
		variable.enqueue(-1526203225);
		variable.toString();
    }
    @Test
    public void test5714() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(302148515);
    }
    @Test
    public void test5715() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test5716() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.dequeue();
		variable.toString();
		variable.enqueue(751884521);
		variable.dequeue();
    }
    @Test
    public void test5717() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.toString();
		x.toString();
		x.enqueue(1871106414);
		x.toString();
    }
    @Test
    public void test5718() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.toString();
		y.dequeue();
		y.isFull();
		y.toString();
		y.enqueue(1187567631);
		y.enqueue(1021160780);
		assertEquals(1187567631, y.dequeue());
		y.toString();
    }
    @Test
    public void test5719() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
    }
    @Test
    public void test5720() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.enqueue(-1650229216);
		assertTrue(z.isEmpty());
		z.enqueue(1321917803);
		z.isEmpty();
		z.enqueue(22297161);
		z.toString();
		z.toString();
    }
    @Test
    public void test5721() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.enqueue(1574407270);
		z.enqueue(1323624365);
		z.isFull();
		z.isFull();
		assertEquals(1574407270, z.dequeue());
		assertFalse(z.isEmpty());
		z.dequeue();
		z.toString();
		z.isFull();
		z.enqueue(1436164197);
    }
    @Test
    public void test5722() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(728258026);
		Var.enqueue(1413138077);
		Var.enqueue(325355334);
		assertFalse(Var.isEmpty());
		Var.isFull();
		Var.dequeue();
		Var.enqueue(688479849);
		Var.isFull();
    }
    @Test
    public void test5723() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-465174742);
		assertEquals("[]", z.toString());
		z.toString();
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(59236495);
    }
    @Test
    public void test5724() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test5725() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(879007933);
		z.dequeue();
    }
    @Test
    public void test5726() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test5727() {
		Queue z = new Queue();
		z.enqueue(-1755198133);
		z.isFull();
    }
    @Test
    public void test5728() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(412681859);
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.isFull();
		Var.isFull();
		Var.enqueue(-692613122);
		Var.isFull();
		Var.toString();
		Var.enqueue(-103268889);
		Var.enqueue(1448990194);
		Var.toString();
    }
    @Test
    public void test5729() {
		Queue x = new Queue();
		x.toString();
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(1974743666);
		x.isEmpty();
    }
    @Test
    public void test5730() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
		y.toString();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test5731() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test5732() {
		Queue z = new Queue();
		z.isFull();
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(1393538640);
		z.dequeue();
		z.enqueue(-858185248);
		z.toString();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test5733() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.enqueue(-107751268);
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test5734() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.enqueue(754967345);
		assertEquals(754967345, y.dequeue());
		y.toString();
		y.enqueue(640525650);
		y.isFull();
		y.isEmpty();
		assertEquals(640525650, y.dequeue());
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test5735() {
		Queue Var = new Queue();
		Var.enqueue(-2091859768);
		assertEquals("[]", Var.toString());
		Var.enqueue(-1794541037);
		Var.toString();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test5736() {
		Queue z = new Queue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.isFull();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.dequeue();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test5737() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.enqueue(815100412);
		y.enqueue(-1585564496);
    }
    @Test
    public void test5738() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test5739() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-916703166);
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test5740() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-1058124848);
		assertEquals(-1, variable.dequeue());
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.enqueue(422130061);
    }
    @Test
    public void test5741() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-1981025364);
		y.enqueue(-1332300019);
		y.toString();
		y.enqueue(823238962);
    }
    @Test
    public void test5742() {
		Queue Var = new Queue();
		Var.enqueue(-1238765688);
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(-372422432);
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(-1481273765);
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(1371694602);
		assertEquals("[1371694602]", Var.toString());
		assertFalse(Var.isEmpty());
		Var.enqueue(1847467356);
		assertEquals(1371694602, Var.dequeue());
		assertFalse(Var.isEmpty());
		assertEquals("[1847467356]", Var.toString());
		Var.toString();
    }
    @Test
    public void test5743() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(237696784);
		x.enqueue(720841260);
		x.enqueue(1646959614);
		x.toString();
		x.toString();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test5744() {
		Queue z = new Queue();
		z.toString();
		assertFalse(z.isFull());
		z.isEmpty();
		z.toString();
		z.toString();
		z.dequeue();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test5745() {
		Queue x = new Queue();
		x.enqueue(943731388);
		x.isFull();
    }
    @Test
    public void test5746() {
		Queue Var = new Queue();
		Var.enqueue(1990402202);
		Var.isFull();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.enqueue(1225761083);
		Var.enqueue(-1680665662);
		Var.isFull();
    }
    @Test
    public void test5747() {
		Queue y = new Queue();
		y.enqueue(1055497082);
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test5748() {
		Queue Var = new Queue();
		Var.enqueue(275687085);
		Var.toString();
		Var.isFull();
		Var.isFull();
		assertEquals(275687085, Var.dequeue());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(2065629831);
    }
    @Test
    public void test5749() {
		Queue y = new Queue();
		y.enqueue(-1103131769);
    }
    @Test
    public void test5750() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test5751() {
		Queue Var = new Queue();
		Var.enqueue(-950662214);
		Var.enqueue(-1330129921);
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test5752() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test5753() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.enqueue(1242372946);
		Var.isEmpty();
		assertEquals(1242372946, Var.dequeue());
		Var.enqueue(-1344342874);
    }
    @Test
    public void test5754() {
		Queue x = new Queue();
		x.enqueue(-196360517);
		x.enqueue(897564130);
		x.dequeue();
		x.toString();
		x.isFull();
		x.enqueue(168407051);
		x.toString();
    }
    @Test
    public void test5755() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.enqueue(-454383849);
		variable.isFull();
		variable.enqueue(1860314840);
		variable.toString();
		variable.enqueue(-1156467982);
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.toString();
    }
    @Test
    public void test5756() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test5757() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.enqueue(-1806266881);
		z.dequeue();
		z.isEmpty();
		z.enqueue(-1785412931);
    }
    @Test
    public void test5758() {
		Queue z = new Queue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.enqueue(1834000501);
		z.dequeue();
		z.enqueue(-1843489123);
		z.dequeue();
		z.isEmpty();
		z.enqueue(1365303919);
		z.enqueue(1418542841);
    }
    @Test
    public void test5759() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test5760() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test5761() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test5762() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test5763() {
		Queue variable = new Queue();
		variable.enqueue(-977392674);
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1646624836);
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test5764() {
		Queue Var = new Queue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.enqueue(57937347);
    }
    @Test
    public void test5765() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isFull();
    }
    @Test
    public void test5766() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test5767() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.dequeue();
		z.enqueue(-2138110300);
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.enqueue(-131717877);
		z.enqueue(-1294085148);
    }
    @Test
    public void test5768() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-1662234287);
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.enqueue(-675811112);
		variable.dequeue();
    }
    @Test
    public void test5769() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(-470852201);
		x.toString();
		x.dequeue();
		x.isFull();
		x.toString();
		x.dequeue();
		x.toString();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test5770() {
		Queue y = new Queue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(52654041);
		assertEquals(52654041, y.dequeue());
		assertEquals("[]", y.toString());
		y.isFull();
    }
    @Test
    public void test5771() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(245670450);
		variable.enqueue(-137371987);
		variable.isFull();
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(-1149309183);
		variable.isFull();
		variable.isFull();
		variable.enqueue(-201740239);
		variable.isFull();
    }
    @Test
    public void test5772() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test5773() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-1386100607);
		z.enqueue(-1361008479);
		z.dequeue();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.dequeue();
    }
    @Test
    public void test5774() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(221273623);
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(-162120602);
		x.isFull();
		x.enqueue(-990657673);
    }
    @Test
    public void test5775() {
		Queue x = new Queue();
		x.enqueue(1184685759);
		x.toString();
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(935579703);
    }
    @Test
    public void test5776() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test5777() {
		Queue x = new Queue();
		x.enqueue(889446531);
		x.toString();
		x.toString();
		assertFalse(x.isFull());
		x.isFull();
		x.toString();
		assertFalse(x.isFull());
		assertFalse(x.isEmpty());
		x.enqueue(1377813726);
		x.toString();
		assertFalse(x.isEmpty());
		x.enqueue(-901540092);
		x.dequeue();
		x.toString();
    }
    @Test
    public void test5778() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.toString();
		assertFalse(y.isFull());
		y.dequeue();
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(484509687);
		y.isEmpty();
    }
    @Test
    public void test5779() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isFull();
		x.toString();
		x.toString();
    }
    @Test
    public void test5780() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(1458380550);
		x.enqueue(-621667740);
		assertEquals(1458380550, x.dequeue());
		x.enqueue(1294648260);
    }
    @Test
    public void test5781() {
		Queue y = new Queue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test5782() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-1307074233);
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
		x.enqueue(1626276597);
		x.dequeue();
		x.isFull();
		x.isFull();
		assertEquals("[]", x.toString());
		x.enqueue(342892218);
		x.isFull();
    }
    @Test
    public void test5783() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(-1316625383);
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.toString();
		z.enqueue(998114998);
    }
    @Test
    public void test5784() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test5785() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(-625212285);
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test5786() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(160050979);
		Var.isEmpty();
    }
    @Test
    public void test5787() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test5788() {
		Queue variable = new Queue();
		variable.enqueue(313350619);
		assertFalse(variable.isFull());
		variable.toString();
		assertFalse(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(-388938553);
		variable.isFull();
		assertFalse(variable.isEmpty());
		variable.isFull();
		variable.enqueue(2005013396);
		variable.dequeue();
		assertFalse(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test5789() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(155350279);
		Var.isEmpty();
		Var.toString();
		assertFalse(Var.isFull());
		Var.toString();
		Var.toString();
		Var.toString();
		Var.enqueue(-825980617);
		Var.toString();
		Var.enqueue(-2141057713);
    }
    @Test
    public void test5790() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test5791() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-427531276);
		z.isFull();
		z.enqueue(642171475);
    }
    @Test
    public void test5792() {
		Queue variable = new Queue();
		variable.enqueue(1668841982);
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test5793() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test5794() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test5795() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test5796() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(-474144236);
    }
    @Test
    public void test5797() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test5798() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.enqueue(1543189701);
		x.isEmpty();
		x.toString();
		x.isFull();
		x.enqueue(-1489051617);
		x.isEmpty();
		x.enqueue(-2036480768);
    }
    @Test
    public void test5799() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1994727854);
		y.enqueue(-667553209);
		y.enqueue(1219673589);
		y.toString();
		y.dequeue();
		y.toString();
		y.enqueue(-281804508);
    }
    @Test
    public void test5800() {
		Queue z = new Queue();
		z.enqueue(-204864994);
		z.enqueue(1678368061);
		z.isFull();
		z.toString();
		assertFalse(z.isEmpty());
		z.isEmpty();
		assertFalse(z.isFull());
		z.isEmpty();
		z.toString();
		assertFalse(z.isFull());
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(-60823055);
		z.dequeue();
    }
    @Test
    public void test5801() {
		Queue variable = new Queue();
		variable.enqueue(176962155);
		assertFalse(variable.isEmpty());
		assertEquals("[176962155]", variable.toString());
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-1022873659);
		assertFalse(variable.isEmpty());
		variable.enqueue(893066835);
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test5802() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.enqueue(533154001);
		assertEquals(533154001, y.dequeue());
		y.toString();
		y.enqueue(577284507);
		y.toString();
    }
    @Test
    public void test5803() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(2129564440);
		Var.toString();
		assertFalse(Var.isFull());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test5804() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(-1580207484);
		z.isFull();
		z.toString();
		z.enqueue(-1459220351);
		z.enqueue(1112075024);
		z.isFull();
    }
    @Test
    public void test5805() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test5806() {
		Queue Var = new Queue();
		Var.enqueue(417263695);
		Var.dequeue();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.enqueue(-1981776514);
		Var.enqueue(-2044097383);
		Var.dequeue();
		Var.enqueue(581392112);
		assertFalse(Var.isFull());
		Var.enqueue(-2059496630);
    }
    @Test
    public void test5807() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.enqueue(1154017428);
		y.enqueue(491900093);
		assertEquals("[1154017428, 491900093]", y.toString());
		y.enqueue(-478869072);
    }
    @Test
    public void test5808() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(37394052);
		assertFalse(variable.isEmpty());
		variable.toString();
		variable.toString();
    }
    @Test
    public void test5809() {
		Queue Var = new Queue();
		Var.enqueue(1517868936);
		Var.enqueue(-2062752271);
		assertEquals(1517868936, Var.dequeue());
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		Var.enqueue(-949473085);
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test5810() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		Var.enqueue(-467252013);
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.enqueue(-113601625);
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(-1552129618);
    }
    @Test
    public void test5811() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test5812() {
		Queue y = new Queue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.toString();
		y.isFull();
		y.enqueue(100966037);
		y.isFull();
		y.enqueue(-2045577479);
		y.enqueue(159658315);
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test5813() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		x.toString();
		x.isEmpty();
		x.toString();
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(1354427691);
		x.dequeue();
    }
    @Test
    public void test5814() {
		Queue x = new Queue();
		x.enqueue(-339453860);
		x.isEmpty();
		x.enqueue(856600403);
		assertEquals(856600403, x.dequeue());
		x.enqueue(-1058098470);
		x.isEmpty();
		x.toString();
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test5815() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.enqueue(-233884549);
		Var.enqueue(-934984921);
    }
    @Test
    public void test5816() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test5817() {
		Queue z = new Queue();
		z.enqueue(-1230050557);
		z.isEmpty();
		z.isFull();
		z.enqueue(-69158186);
		z.dequeue();
    }
    @Test
    public void test5818() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1094147632);
		variable.dequeue();
		variable.toString();
		variable.toString();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test5819() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
		y.dequeue();
		y.enqueue(-262121361);
		y.dequeue();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test5820() {
		Queue Var = new Queue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1001809075);
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.toString();
    }
    @Test
    public void test5821() {
		Queue y = new Queue();
		y.toString();
		assertTrue(y.isEmpty());
		y.toString();
		y.enqueue(-1653637240);
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test5822() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.enqueue(1622633565);
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test5823() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-1894901639);
		Var.enqueue(54615177);
		Var.enqueue(1520108262);
		Var.enqueue(794699595);
		Var.enqueue(1349222114);
		assertEquals(54615177, Var.dequeue());
		Var.toString();
		assertEquals("[1520108262, 794699595, 1349222114]", Var.toString());
		assertEquals(1520108262, Var.dequeue());
		assertEquals("[794699595, 1349222114]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-1839996974);
    }
    @Test
    public void test5824() {
		Queue Var = new Queue();
		Var.enqueue(838880379);
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test5825() {
		Queue z = new Queue();
		z.enqueue(-1693960172);
		z.isFull();
    }
    @Test
    public void test5826() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(231245086);
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(1276566964);
		variable.dequeue();
    }
    @Test
    public void test5827() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test5828() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test5829() {
		Queue z = new Queue();
		z.enqueue(-458260461);
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		z.enqueue(1520940228);
    }
    @Test
    public void test5830() {
		Queue Var = new Queue();
		Var.enqueue(-640995435);
    }
    @Test
    public void test5831() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-897988330);
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-1940539498);
		variable.isFull();
    }
    @Test
    public void test5832() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-34416875);
		variable.enqueue(-1138504975);
    }
    @Test
    public void test5833() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(1337402111);
		y.enqueue(851600704);
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-157619431);
    }
    @Test
    public void test5834() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test5835() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test5836() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.enqueue(-214064109);
		z.toString();
		z.dequeue();
    }
    @Test
    public void test5837() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test5838() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.dequeue();
		variable.enqueue(320585356);
		variable.dequeue();
		variable.isFull();
		variable.toString();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.enqueue(-1587345703);
		variable.enqueue(828868564);
    }
    @Test
    public void test5839() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1307506791);
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(-597483878);
		Var.enqueue(1059426039);
		assertFalse(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test5840() {
		Queue y = new Queue();
		y.enqueue(1945839165);
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		assertEquals(1945839165, y.dequeue());
		y.dequeue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(-25552020);
		assertFalse(y.isFull());
		y.isFull();
		y.isFull();
		y.enqueue(-1175120434);
    }
    @Test
    public void test5841() {
		Queue x = new Queue();
		x.enqueue(71504764);
		x.isEmpty();
		x.toString();
		assertFalse(x.isFull());
		x.isFull();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test5842() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test5843() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.toString();
		z.isFull();
		z.isFull();
		z.enqueue(-1036476813);
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(286172006);
		assertEquals("[286172006]", z.toString());
		z.isFull();
    }
    @Test
    public void test5844() {
		Queue x = new Queue();
		x.enqueue(-1122905400);
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.toString();
		x.toString();
		x.enqueue(-1974973388);
		x.dequeue();
    }
    @Test
    public void test5845() {
		Queue y = new Queue();
		y.enqueue(1540010338);
		y.dequeue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.enqueue(1836273813);
		y.isFull();
		y.toString();
		y.isFull();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test5846() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.isFull();
		Var.enqueue(-1925184931);
    }
    @Test
    public void test5847() {
		Queue x = new Queue();
		x.enqueue(-1754278940);
		x.isEmpty();
		x.isEmpty();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isEmpty();
		x.isFull();
		assertEquals("[]", x.toString());
		x.enqueue(371017349);
    }
    @Test
    public void test5848() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(185081025);
    }
    @Test
    public void test5849() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.toString();
		y.toString();
		assertTrue(y.isEmpty());
		y.toString();
		y.enqueue(-1404223440);
    }
    @Test
    public void test5850() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test5851() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.dequeue();
		z.enqueue(-1378314041);
		z.enqueue(-528991153);
		z.dequeue();
		z.isFull();
		z.enqueue(1684165211);
    }
    @Test
    public void test5852() {
		Queue Var = new Queue();
		Var.enqueue(829918557);
		Var.isFull();
    }
    @Test
    public void test5853() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.toString();
		z.dequeue();
		z.toString();
		z.dequeue();
		z.dequeue();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.isFull();
		z.isFull();
    }
    @Test
    public void test5854() {
		Queue y = new Queue();
		y.enqueue(-229722218);
		y.toString();
		y.toString();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test5855() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.toString();
		assertEquals("[]", x.toString());
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test5856() {
		Queue z = new Queue();
		z.enqueue(-1920476110);
		z.toString();
		z.isFull();
		z.enqueue(-1124226749);
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test5857() {
		Queue x = new Queue();
		x.enqueue(-1146789754);
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.toString();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isFull();
    }
    @Test
    public void test5858() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.enqueue(-803512320);
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test5859() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(997660619);
		variable.toString();
		variable.enqueue(1093332091);
    }
    @Test
    public void test5860() {
		Queue x = new Queue();
		x.enqueue(-1706666382);
		x.enqueue(-157288371);
		x.dequeue();
    }
    @Test
    public void test5861() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test5862() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-363360407);
		x.enqueue(2114165539);
		x.enqueue(1895449140);
		assertFalse(x.isFull());
		assertEquals("[2114165539, 1895449140]", x.toString());
		x.enqueue(1068766841);
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test5863() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-619047168);
		variable.enqueue(753723137);
    }
    @Test
    public void test5864() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test5865() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.enqueue(1904876848);
		assertFalse(Var.isEmpty());
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-1008372559);
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test5866() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test5867() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test5868() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test5869() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test5870() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test5871() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(1901620970);
		variable.dequeue();
		variable.enqueue(632366586);
		assertEquals(632366586, variable.dequeue());
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.enqueue(-1496334744);
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test5872() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-770011982);
		assertFalse(variable.isFull());
		variable.toString();
		variable.toString();
		variable.isFull();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(2062811555);
    }
    @Test
    public void test5873() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.enqueue(1880959462);
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1031219980);
		variable.isFull();
		variable.enqueue(-797322839);
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.enqueue(-1584728953);
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test5874() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test5875() {
		Queue x = new Queue();
		x.enqueue(460050192);
    }
    @Test
    public void test5876() {
		Queue z = new Queue();
		z.enqueue(-441843712);
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isFull();
		z.dequeue();
		assertFalse(z.isFull());
		z.isEmpty();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test5877() {
		Queue variable = new Queue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(421306478);
    }
    @Test
    public void test5878() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.toString();
		x.enqueue(894027851);
    }
    @Test
    public void test5879() {
		Queue x = new Queue();
		x.toString();
		x.toString();
    }
    @Test
    public void test5880() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.isFull();
		z.enqueue(-1891844181);
    }
    @Test
    public void test5881() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(1179198069);
		variable.enqueue(-317464240);
		variable.enqueue(-1962402246);
		assertFalse(variable.isEmpty());
		variable.toString();
		variable.enqueue(-884512812);
		variable.toString();
    }
    @Test
    public void test5882() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-1343760697);
		variable.enqueue(798709759);
    }
    @Test
    public void test5883() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
    }
    @Test
    public void test5884() {
		Queue Var = new Queue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(678518948);
		assertFalse(Var.isFull());
		assertEquals("[678518948]", Var.toString());
		assertEquals(678518948, Var.dequeue());
		Var.enqueue(-883326226);
		Var.isEmpty();
		Var.enqueue(-995503621);
		Var.dequeue();
    }
    @Test
    public void test5885() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-1993496407);
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test5886() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.toString();
		y.enqueue(-1247272371);
		y.toString();
		y.isFull();
		y.dequeue();
		y.enqueue(-438474718);
    }
    @Test
    public void test5887() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-957328107);
		variable.enqueue(-1082980077);
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test5888() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(612009353);
		variable.enqueue(-988262045);
		assertFalse(variable.isFull());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(1221674518);
		assertFalse(variable.isEmpty());
		variable.toString();
		variable.enqueue(-234514867);
    }
    @Test
    public void test5889() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.toString();
		variable.enqueue(223947936);
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(1199799343);
		variable.dequeue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test5890() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test5891() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1372873138);
		Var.isFull();
		Var.enqueue(1586965958);
		Var.toString();
		Var.enqueue(-918454011);
		assertFalse(Var.isFull());
		Var.enqueue(649743578);
		Var.dequeue();
    }
    @Test
    public void test5892() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(-1683251113);
		assertTrue(z.isEmpty());
		z.enqueue(-798392027);
		assertFalse(z.isFull());
		z.toString();
		z.toString();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.enqueue(1989740955);
    }
    @Test
    public void test5893() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(-252931672);
		z.isFull();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.enqueue(2104173163);
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test5894() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.isFull();
		z.dequeue();
		assertFalse(z.isFull());
		z.dequeue();
		z.enqueue(814430647);
		z.enqueue(902335782);
    }
    @Test
    public void test5895() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test5896() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-511323361);
		Var.toString();
		Var.enqueue(24683861);
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.dequeue();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.enqueue(-2118902085);
		Var.toString();
		Var.enqueue(-436189041);
		Var.isFull();
		Var.enqueue(-1960504049);
    }
    @Test
    public void test5897() {
		Queue Var = new Queue();
		Var.enqueue(481725678);
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.enqueue(-1023153640);
		assertFalse(Var.isFull());
		Var.enqueue(-79436197);
		Var.dequeue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(117401917);
		Var.enqueue(454528307);
    }
    @Test
    public void test5898() {
		Queue y = new Queue();
		y.isFull();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.dequeue();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test5899() {
		Queue Var = new Queue();
		Var.enqueue(1489767559);
		Var.enqueue(2005416687);
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(760039032);
		assertFalse(Var.isFull());
		Var.enqueue(-1679712132);
		Var.isEmpty();
    }
    @Test
    public void test5900() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.toString();
		y.toString();
		y.toString();
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		y.enqueue(-18771440);
		y.toString();
		y.dequeue();
    }
    @Test
    public void test5901() {
		Queue Var = new Queue();
		Var.enqueue(1341848236);
		Var.isEmpty();
		Var.enqueue(-289134057);
    }
    @Test
    public void test5902() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test5903() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(1890899632);
    }
    @Test
    public void test5904() {
		Queue variable = new Queue();
		variable.enqueue(-1918466645);
		variable.isFull();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(2020536390);
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		variable.enqueue(-1060474044);
		variable.isFull();
		variable.toString();
		variable.enqueue(-396845540);
    }
    @Test
    public void test5905() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(-519888290);
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test5906() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test5907() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1436871413);
		variable.isEmpty();
		variable.isFull();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(509584875);
		variable.enqueue(-384134965);
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(-349758667);
    }
    @Test
    public void test5908() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(-1019015886);
    }
    @Test
    public void test5909() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(682501906);
		y.isFull();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test5910() {
		Queue Var = new Queue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test5911() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test5912() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.enqueue(1188325041);
		z.isEmpty();
		z.enqueue(-1201932046);
		z.dequeue();
    }
    @Test
    public void test5913() {
		Queue y = new Queue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(-2136478250);
		y.enqueue(1283543881);
    }
    @Test
    public void test5914() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-638427321);
		variable.enqueue(-99912696);
		variable.isFull();
		variable.enqueue(-1941740384);
		variable.enqueue(269687265);
		assertEquals("[269687265]", variable.toString());
		variable.toString();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(2127533696);
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test5915() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test5916() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(1268033260);
		x.isFull();
		x.enqueue(-992940958);
		assertFalse(x.isEmpty());
		x.isEmpty();
		x.isFull();
		x.toString();
    }
    @Test
    public void test5917() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.toString();
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.enqueue(-1687468514);
		x.enqueue(311760696);
		x.enqueue(-1063951628);
    }
    @Test
    public void test5918() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(222057161);
		assertEquals(222057161, z.dequeue());
		assertTrue(z.isEmpty());
		z.enqueue(1296127521);
		z.enqueue(1117635045);
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test5919() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.dequeue();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(-2096537143);
    }
    @Test
    public void test5920() {
		Queue y = new Queue();
		y.enqueue(719276853);
		y.isFull();
		y.toString();
		assertEquals(719276853, y.dequeue());
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.toString();
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.toString();
		y.enqueue(1431812729);
    }
    @Test
    public void test5921() {
		Queue z = new Queue();
		z.enqueue(-1276979574);
		z.dequeue();
		z.dequeue();
		z.dequeue();
		z.isFull();
		z.enqueue(946600097);
		z.toString();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test5922() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test5923() {
		Queue z = new Queue();
		z.isFull();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.dequeue();
		z.toString();
		z.dequeue();
		z.toString();
		z.dequeue();
		z.dequeue();
		z.dequeue();
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test5924() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.dequeue();
		assertFalse(x.isFull());
		x.toString();
		x.toString();
		x.enqueue(816986368);
    }
    @Test
    public void test5925() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test5926() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(1981458036);
		z.enqueue(1652213672);
		z.enqueue(2011255819);
		assertFalse(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test5927() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(-269914134);
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test5928() {
		Queue x = new Queue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.enqueue(2096371397);
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test5929() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test5930() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(-363956183);
		z.enqueue(149879588);
		assertFalse(z.isEmpty());
		z.isEmpty();
		assertEquals(149879588, z.dequeue());
		z.toString();
		z.isFull();
    }
    @Test
    public void test5931() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(1188931050);
		x.enqueue(-819526258);
    }
    @Test
    public void test5932() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.enqueue(1330571580);
		assertEquals(1330571580, Var.dequeue());
		Var.isFull();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test5933() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.toString();
		z.isEmpty();
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test5934() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.enqueue(-38931901);
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.toString();
    }
    @Test
    public void test5935() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.dequeue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test5936() {
		Queue y = new Queue();
		y.enqueue(836151329);
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test5937() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test5938() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(382838801);
		assertEquals(382838801, y.dequeue());
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.enqueue(807361414);
		y.enqueue(1248927132);
    }
    @Test
    public void test5939() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test5940() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test5941() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(-81410727);
		y.toString();
		y.isFull();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test5942() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(2126142974);
		Var.toString();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test5943() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.dequeue();
		z.toString();
		z.dequeue();
		z.enqueue(1261616635);
		assertFalse(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test5944() {
		Queue y = new Queue();
		y.enqueue(-1004649794);
		y.enqueue(1306298217);
		assertFalse(y.isFull());
		y.enqueue(1946049707);
		assertEquals(1306298217, y.dequeue());
		assertEquals("[1946049707]", y.toString());
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.enqueue(-300357949);
		y.toString();
    }
    @Test
    public void test5945() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.enqueue(101786461);
		z.dequeue();
		z.isEmpty();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isFull();
    }
    @Test
    public void test5946() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test5947() {
		Queue y = new Queue();
		y.enqueue(-1021458832);
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.isFull();
    }
    @Test
    public void test5948() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.enqueue(-2084316565);
    }
    @Test
    public void test5949() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.isFull();
		y.dequeue();
		y.enqueue(-1296604398);
		y.enqueue(-2030913301);
		y.enqueue(709537166);
    }
    @Test
    public void test5950() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(490894774);
    }
    @Test
    public void test5951() {
		Queue x = new Queue();
		x.enqueue(1052394594);
		assertEquals("[1052394594]", x.toString());
		x.isFull();
		x.enqueue(-966251696);
		x.enqueue(-2034052333);
		x.enqueue(-346411643);
		x.enqueue(-717517039);
		x.isEmpty();
		x.enqueue(45997541);
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test5952() {
		Queue variable = new Queue();
		variable.enqueue(1370621345);
		variable.toString();
		assertEquals("[1370621345]", variable.toString());
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isFull();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test5953() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test5954() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(-1285294585);
    }
    @Test
    public void test5955() {
		Queue y = new Queue();
		y.toString();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test5956() {
		Queue x = new Queue();
		x.enqueue(1387354913);
		x.isEmpty();
		x.enqueue(1284638819);
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.enqueue(606494297);
		x.enqueue(-823742323);
    }
    @Test
    public void test5957() {
		Queue Var = new Queue();
		Var.toString();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test5958() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(66023417);
    }
    @Test
    public void test5959() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
		assertFalse(y.isFull());
		y.isFull();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.toString();
		y.isFull();
		y.enqueue(-11648649);
    }
    @Test
    public void test5960() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(-1386709431);
		variable.isFull();
    }
    @Test
    public void test5961() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isFull();
		x.toString();
		x.isFull();
    }
    @Test
    public void test5962() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.toString();
		y.isFull();
		y.enqueue(1026666686);
		y.toString();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test5963() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(583507862);
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.isEmpty();
		y.enqueue(1087761654);
    }
    @Test
    public void test5964() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		assertFalse(z.isFull());
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1740210389);
		assertTrue(z.isEmpty());
		z.dequeue();
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.toString();
		z.dequeue();
		z.enqueue(831009350);
		assertFalse(z.isFull());
		assertFalse(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test5965() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.toString();
		y.enqueue(449168172);
		y.isEmpty();
    }
    @Test
    public void test5966() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1692049906);
		z.isFull();
		z.enqueue(-1948195080);
		z.dequeue();
		z.isEmpty();
		z.enqueue(1006234507);
		z.isEmpty();
		z.isEmpty();
		z.enqueue(69489458);
    }
    @Test
    public void test5967() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(1178523026);
    }
    @Test
    public void test5968() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.enqueue(-608593906);
		z.enqueue(732572621);
    }
    @Test
    public void test5969() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test5970() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isFull();
		x.isEmpty();
		x.toString();
		x.enqueue(-851165725);
    }
    @Test
    public void test5971() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test5972() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(-1525789253);
		x.isEmpty();
		x.toString();
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-393613412);
		x.enqueue(-1151812666);
		x.enqueue(172375405);
    }
    @Test
    public void test5973() {
		Queue z = new Queue();
		z.enqueue(-445573273);
		assertEquals("[]", z.toString());
		z.isFull();
		assertEquals("[]", z.toString());
		z.enqueue(-2121675788);
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(1495062463);
		z.toString();
		z.dequeue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isFull();
    }
    @Test
    public void test5974() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test5975() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.toString();
		x.dequeue();
    }
    @Test
    public void test5976() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.enqueue(-101886431);
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(2137935533);
		x.toString();
		x.isFull();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test5977() {
		Queue y = new Queue();
		y.enqueue(-691232035);
		y.dequeue();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.enqueue(-578543745);
    }
    @Test
    public void test5978() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test5979() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test5980() {
		Queue z = new Queue();
		z.enqueue(1249116042);
		z.dequeue();
		z.toString();
		z.isEmpty();
		z.enqueue(-1259348465);
		z.isFull();
    }
    @Test
    public void test5981() {
		Queue y = new Queue();
		y.enqueue(-13194582);
		y.enqueue(-362345833);
		y.isFull();
		assertTrue(y.isEmpty());
		y.enqueue(1865250873);
		assertFalse(y.isFull());
		y.enqueue(1426379536);
		assertFalse(y.isFull());
		y.enqueue(-873418563);
		assertFalse(y.isFull());
		y.toString();
		assertEquals("[1865250873, 1426379536]", y.toString());
		y.enqueue(654491153);
		y.isEmpty();
		assertEquals(1865250873, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test5982() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.toString();
		assertFalse(y.isFull());
		y.isEmpty();
		y.enqueue(1611294115);
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.toString();
		y.dequeue();
    }
    @Test
    public void test5983() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test5984() {
		Queue variable = new Queue();
		variable.enqueue(460851477);
    }
    @Test
    public void test5985() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(-2117269077);
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(1718592694);
    }
    @Test
    public void test5986() {
		Queue x = new Queue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.dequeue();
    }
    @Test
    public void test5987() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-1828021135);
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test5988() {
		Queue variable = new Queue();
		variable.enqueue(-1337992554);
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(1845691485);
		assertFalse(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test5989() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-970295909);
		z.isFull();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test5990() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-969623652);
		assertFalse(y.isFull());
		y.dequeue();
		y.dequeue();
		y.enqueue(-1491838006);
		assertEquals(-1, y.dequeue());
		y.toString();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isFull();
    }
    @Test
    public void test5991() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test5992() {
		Queue x = new Queue();
		x.enqueue(1388636727);
		assertEquals(1388636727, x.dequeue());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.toString();
		x.isEmpty();
		x.enqueue(-2101341924);
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.toString();
		x.isFull();
		x.enqueue(-1219568122);
    }
    @Test
    public void test5993() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.enqueue(-1563672829);
		z.dequeue();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test5994() {
		Queue variable = new Queue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(509921742);
		variable.enqueue(938128716);
		assertEquals("[509921742, 938128716]", variable.toString());
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		assertEquals("[938128716]", variable.toString());
		variable.toString();
		variable.enqueue(-544080548);
		assertEquals(938128716, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.toString();
    }
    @Test
    public void test5995() {
		Queue Var = new Queue();
		Var.enqueue(1858110302);
		assertEquals(1858110302, Var.dequeue());
		Var.dequeue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test5996() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.isEmpty();
		x.toString();
		x.toString();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test5997() {
		Queue z = new Queue();
		z.toString();
		assertFalse(z.isFull());
		z.toString();
		z.dequeue();
		z.enqueue(482054710);
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test5998() {
		Queue Var = new Queue();
		Var.enqueue(1545928472);
    }
    @Test
    public void test5999() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test6000() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.dequeue();
		y.toString();
		y.toString();
		y.enqueue(1904473402);
    }
    @Test
    public void test6001() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test6002() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test6003() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test6004() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.enqueue(181563786);
		x.isFull();
		x.isEmpty();
		x.isFull();
		x.isFull();
		assertEquals(181563786, x.dequeue());
		x.enqueue(-1435134017);
    }
    @Test
    public void test6005() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.toString();
		Var.dequeue();
		Var.isFull();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test6006() {
		Queue z = new Queue();
		z.enqueue(890224160);
		z.isEmpty();
		z.enqueue(-2099132496);
		assertFalse(z.isEmpty());
		z.toString();
		z.toString();
		z.dequeue();
		z.enqueue(1593173099);
    }
    @Test
    public void test6007() {
		Queue Var = new Queue();
		Var.enqueue(657390332);
		Var.isFull();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test6008() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(2105107460);
		variable.enqueue(1483197822);
		variable.toString();
		variable.enqueue(-1279978912);
		variable.enqueue(-1852690414);
		variable.isEmpty();
		assertEquals(2105107460, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test6009() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test6010() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-1610490925);
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(1152984616);
		Var.enqueue(-618398965);
		Var.isFull();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test6011() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(998528609);
		Var.enqueue(1326397560);
    }
    @Test
    public void test6012() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-64706629);
		variable.isFull();
		variable.toString();
		variable.enqueue(-1705836201);
    }
    @Test
    public void test6013() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.enqueue(-754648650);
		variable.toString();
    }
    @Test
    public void test6014() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(1499023375);
    }
    @Test
    public void test6015() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-1242684057);
		Var.isEmpty();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test6016() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.toString();
		z.toString();
		z.toString();
		z.dequeue();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test6017() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-1059084106);
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.toString();
    }
    @Test
    public void test6018() {
		Queue y = new Queue();
		y.enqueue(-32922415);
		y.isFull();
    }
    @Test
    public void test6019() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.enqueue(-1800432919);
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test6020() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.dequeue();
		y.dequeue();
		y.enqueue(-2009110177);
		y.isFull();
		y.toString();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
		y.toString();
    }
    @Test
    public void test6021() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.enqueue(-1339931932);
		Var.enqueue(-104218384);
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test6022() {
		Queue y = new Queue();
		y.enqueue(320603469);
		y.enqueue(-128477557);
		assertEquals("[320603469]", y.toString());
		y.isFull();
		y.isEmpty();
		y.enqueue(-1700961780);
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test6023() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		x.toString();
    }
    @Test
    public void test6024() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(82449008);
		y.dequeue();
		y.toString();
    }
    @Test
    public void test6025() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.toString();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test6026() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.enqueue(-970928605);
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test6027() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test6028() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(-562432391);
		Var.enqueue(-214549835);
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.enqueue(-1171187412);
		Var.enqueue(1364683927);
    }
    @Test
    public void test6029() {
		Queue z = new Queue();
		z.enqueue(-430014877);
		assertTrue(z.isEmpty());
		z.isFull();
		z.toString();
		z.toString();
		z.toString();
		z.enqueue(343021750);
		z.isFull();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(830365106);
		z.enqueue(-203317624);
    }
    @Test
    public void test6030() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-374329279);
		y.isEmpty();
		assertFalse(y.isFull());
		y.dequeue();
		y.dequeue();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test6031() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(984838920);
    }
    @Test
    public void test6032() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(1471742825);
		variable.enqueue(303323177);
		variable.isFull();
		variable.enqueue(1601559191);
    }
    @Test
    public void test6033() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.isFull();
    }
    @Test
    public void test6034() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(2006341522);
		Var.isFull();
		Var.enqueue(-423288874);
		assertFalse(Var.isEmpty());
		assertEquals(2006341522, Var.dequeue());
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1055814739);
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test6035() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(2042995289);
		assertEquals("[2042995289]", Var.toString());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(179596332);
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.isEmpty();
		Var.enqueue(1116843571);
		assertFalse(Var.isEmpty());
		Var.isEmpty();
		Var.isFull();
		assertEquals("[179596332, 1116843571]", Var.toString());
		assertEquals(179596332, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test6036() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-1378822407);
		z.dequeue();
		z.dequeue();
		z.enqueue(494520677);
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test6037() {
		Queue z = new Queue();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(1851474682);
		assertFalse(z.isEmpty());
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test6038() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test6039() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(-951189788);
		Var.isFull();
    }
    @Test
    public void test6040() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1111473244);
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.isEmpty();
		assertEquals(1111473244, variable.dequeue());
		variable.enqueue(-1196852955);
		variable.toString();
		variable.toString();
		variable.enqueue(-894264852);
		variable.dequeue();
    }
    @Test
    public void test6041() {
		Queue variable = new Queue();
		variable.enqueue(-776329378);
		variable.enqueue(-2025982321);
    }
    @Test
    public void test6042() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(-893695893);
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test6043() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.enqueue(1483451037);
		Var.enqueue(175113739);
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertEquals("[1483451037, 175113739]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test6044() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test6045() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test6046() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test6047() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(-1780299019);
		x.dequeue();
		x.toString();
		x.isFull();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isEmpty();
		x.enqueue(-1066424702);
		assertEquals("[]", x.toString());
		x.toString();
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test6048() {
		Queue y = new Queue();
		y.enqueue(-149553200);
    }
    @Test
    public void test6049() {
		Queue y = new Queue();
		y.enqueue(-1135791973);
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test6050() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(2093063283);
		assertEquals("[2093063283]", variable.toString());
		assertFalse(variable.isEmpty());
		variable.enqueue(2010782501);
		variable.isFull();
    }
    @Test
    public void test6051() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-902507685);
    }
    @Test
    public void test6052() {
		Queue Var = new Queue();
		Var.enqueue(-1462918732);
		assertFalse(Var.isFull());
		Var.enqueue(-1948000892);
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1322668460);
		Var.isEmpty();
		Var.toString();
		Var.enqueue(1081929440);
    }
    @Test
    public void test6053() {
		Queue z = new Queue();
		z.enqueue(-480514220);
		z.isEmpty();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test6054() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test6055() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isFull();
		assertFalse(x.isFull());
		x.isEmpty();
		x.enqueue(-913160421);
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test6056() {
		Queue x = new Queue();
		x.enqueue(146282796);
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		x.enqueue(1398468197);
		x.enqueue(-757849649);
		x.isFull();
		x.enqueue(1565899752);
		x.enqueue(1348447348);
		x.dequeue();
    }
    @Test
    public void test6057() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-500376506);
		assertEquals("[]", z.toString());
		z.toString();
		z.isFull();
		z.isEmpty();
		z.toString();
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(-1153611042);
		z.enqueue(-1877647012);
		z.isEmpty();
    }
    @Test
    public void test6058() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(-279411561);
		x.dequeue();
		x.toString();
		x.toString();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test6059() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.isFull();
		z.isFull();
		z.isFull();
		z.enqueue(-1297549564);
		z.isEmpty();
		z.isFull();
		assertEquals("[]", z.toString());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test6060() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(230812709);
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test6061() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1952161254);
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test6062() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(53772978);
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test6063() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		variable.toString();
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test6064() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-1096075751);
		y.enqueue(1437597816);
    }
    @Test
    public void test6065() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.enqueue(275391647);
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
		y.enqueue(1351919410);
		y.toString();
		assertFalse(y.isFull());
		assertEquals(275391647, y.dequeue());
		y.isEmpty();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test6066() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.toString();
		assertEquals("[]", x.toString());
		x.dequeue();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.enqueue(-624409978);
		x.enqueue(1723835838);
		assertFalse(x.isFull());
		x.enqueue(496164515);
		x.isFull();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test6067() {
		Queue x = new Queue();
		x.enqueue(-1323462941);
		x.isFull();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.isEmpty();
		x.dequeue();
		x.enqueue(1423629486);
		x.enqueue(159247489);
		x.dequeue();
		x.isFull();
		x.isEmpty();
		assertEquals(159247489, x.dequeue());
		x.isFull();
    }
    @Test
    public void test6068() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test6069() {
		Queue Var = new Queue();
		Var.enqueue(-1782730338);
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test6070() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.enqueue(-1306894123);
		x.toString();
		x.toString();
		x.isFull();
		x.enqueue(158994031);
    }
    @Test
    public void test6071() {
		Queue y = new Queue();
		y.enqueue(1233602588);
		y.dequeue();
    }
    @Test
    public void test6072() {
		Queue x = new Queue();
		x.enqueue(-908779384);
		x.toString();
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.enqueue(1739792314);
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test6073() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-1975721051);
    }
    @Test
    public void test6074() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(1064246176);
		variable.dequeue();
    }
    @Test
    public void test6075() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(260020871);
		z.dequeue();
		z.enqueue(1982394399);
		z.isFull();
		z.isFull();
		z.toString();
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test6076() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isFull();
		x.enqueue(-612598553);
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.dequeue();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.enqueue(-778704558);
		x.enqueue(-1503135476);
    }
    @Test
    public void test6077() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.enqueue(-2021662203);
		variable.enqueue(-893556140);
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.enqueue(1451168396);
		variable.enqueue(-418533578);
		variable.isEmpty();
		assertEquals(1451168396, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test6078() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.enqueue(277734442);
		Var.dequeue();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test6079() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(241288766);
		y.enqueue(-964742095);
		y.enqueue(-1344736270);
		y.enqueue(430022229);
		y.isFull();
		assertFalse(y.isFull());
		assertEquals(241288766, y.dequeue());
		assertFalse(y.isFull());
		y.isFull();
		assertEquals(430022229, y.dequeue());
		y.dequeue();
    }
    @Test
    public void test6080() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test6081() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.isEmpty();
		x.isFull();
		x.enqueue(-137482125);
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test6082() {
		Queue y = new Queue();
		y.enqueue(290399498);
		y.dequeue();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.isFull();
		y.toString();
		y.enqueue(1426759903);
    }
    @Test
    public void test6083() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.dequeue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.toString();
		y.isEmpty();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isFull();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test6084() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(967318084);
		z.enqueue(-1621931711);
    }
    @Test
    public void test6085() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(-584873316);
    }
    @Test
    public void test6086() {
		Queue variable = new Queue();
		variable.enqueue(-1993710000);
		variable.isEmpty();
    }
    @Test
    public void test6087() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test6088() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-1716692871);
		Var.enqueue(223225087);
		Var.toString();
    }
    @Test
    public void test6089() {
		Queue y = new Queue();
		y.enqueue(-625400478);
		y.toString();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test6090() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.dequeue();
		z.enqueue(1864203636);
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test6091() {
		Queue x = new Queue();
		x.enqueue(1906001868);
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.enqueue(1281889582);
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test6092() {
		Queue z = new Queue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isFull();
		z.enqueue(613295384);
		assertEquals("[613295384]", z.toString());
		assertFalse(z.isFull());
		z.enqueue(539643573);
		z.toString();
		assertEquals(613295384, z.dequeue());
		assertEquals("[539643573]", z.toString());
		z.enqueue(109327318);
		z.dequeue();
		z.toString();
		z.isFull();
    }
    @Test
    public void test6093() {
		Queue y = new Queue();
		y.enqueue(-245280609);
		y.isFull();
		y.dequeue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.dequeue();
		y.isEmpty();
		y.enqueue(-76947461);
    }
    @Test
    public void test6094() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1907586072);
		x.toString();
		x.enqueue(507252551);
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-418994594);
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test6095() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.toString();
		z.enqueue(-1776103813);
		z.dequeue();
		assertEquals("[]", z.toString());
		z.toString();
		z.isEmpty();
		z.enqueue(-1968703159);
    }
    @Test
    public void test6096() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.enqueue(-1191238102);
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(1533994727);
		y.isFull();
		assertEquals(1533994727, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test6097() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-1316460035);
		z.isEmpty();
		z.isFull();
		z.isFull();
		z.enqueue(-1482304564);
		z.dequeue();
		z.enqueue(-1527777356);
    }
    @Test
    public void test6098() {
		Queue z = new Queue();
		z.enqueue(-713762084);
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(-457959809);
		z.isEmpty();
		z.enqueue(-1704978960);
		z.isEmpty();
    }
    @Test
    public void test6099() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-768841145);
		x.isFull();
		x.isEmpty();
		x.enqueue(2054958269);
		x.dequeue();
    }
    @Test
    public void test6100() {
		Queue y = new Queue();
		y.enqueue(1872834847);
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(304791373);
		assertEquals(304791373, y.dequeue());
		y.enqueue(-123458857);
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test6101() {
		Queue variable = new Queue();
		variable.enqueue(-1539708709);
		variable.enqueue(-955280566);
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
    }
    @Test
    public void test6102() {
		Queue x = new Queue();
		x.enqueue(-469926086);
		assertTrue(x.isEmpty());
		x.dequeue();
		assertFalse(x.isFull());
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.enqueue(2037695908);
    }
    @Test
    public void test6103() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(1521599699);
		variable.toString();
		assertEquals(1521599699, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test6104() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.isFull();
    }
    @Test
    public void test6105() {
		Queue z = new Queue();
		z.dequeue();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.enqueue(-1621323546);
		z.enqueue(-753651689);
		assertFalse(z.isFull());
		z.dequeue();
		z.dequeue();
		z.toString();
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test6106() {
		Queue Var = new Queue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test6107() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.dequeue();
		Var.isFull();
		Var.isFull();
		Var.enqueue(845456554);
		Var.isEmpty();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test6108() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
		assertEquals("[]", x.toString());
		x.isEmpty();
    }
    @Test
    public void test6109() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test6110() {
		Queue x = new Queue();
		x.enqueue(-1579434402);
		x.isFull();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(-2096661776);
		x.toString();
		x.dequeue();
    }
    @Test
    public void test6111() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test6112() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test6113() {
		Queue Var = new Queue();
		Var.enqueue(-1763384473);
		Var.isFull();
		Var.dequeue();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.enqueue(1744072909);
		assertEquals(1744072909, Var.dequeue());
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-784107653);
    }
    @Test
    public void test6114() {
		Queue z = new Queue();
		z.enqueue(-2070734679);
		z.isFull();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test6115() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-689639973);
		variable.toString();
    }
    @Test
    public void test6116() {
		Queue y = new Queue();
		y.enqueue(1053851113);
		y.toString();
		y.toString();
		y.isEmpty();
		y.dequeue();
		y.isFull();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test6117() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.isFull();
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test6118() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(1828591254);
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(-1198028197);
		variable.toString();
    }
    @Test
    public void test6119() {
		Queue Var = new Queue();
		Var.enqueue(416737576);
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.enqueue(-1512669293);
		assertFalse(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(24323126);
		Var.dequeue();
    }
    @Test
    public void test6120() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.isFull();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.isFull();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(92583756);
		assertEquals("[92583756]", z.toString());
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test6121() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(675255810);
		x.dequeue();
		x.toString();
		x.enqueue(-1808958253);
		x.toString();
		assertTrue(x.isEmpty());
		x.isFull();
		x.toString();
		x.toString();
		assertTrue(x.isEmpty());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test6122() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test6123() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test6124() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(476145704);
		variable.enqueue(1045675957);
		assertEquals("[476145704, 1045675957]", variable.toString());
		assertEquals(476145704, variable.dequeue());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test6125() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.toString();
		y.enqueue(1533671973);
		y.enqueue(791227455);
		assertFalse(y.isEmpty());
		y.isEmpty();
		assertEquals(1533671973, y.dequeue());
		assertFalse(y.isFull());
		y.enqueue(1559569764);
		y.isFull();
		y.dequeue();
		y.enqueue(-1065535523);
    }
    @Test
    public void test6126() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isEmpty();
		z.toString();
		z.toString();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test6127() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(-390996083);
		z.dequeue();
		z.isFull();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(-1481146897);
		z.enqueue(-104353068);
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.enqueue(446433282);
		z.toString();
		assertFalse(z.isFull());
		assertEquals("[446433282]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test6128() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.toString();
    }
    @Test
    public void test6129() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-623903816);
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test6130() {
		Queue z = new Queue();
		z.enqueue(169208344);
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		z.enqueue(-1036946440);
    }
    @Test
    public void test6131() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.dequeue();
		y.enqueue(350474071);
    }
    @Test
    public void test6132() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(810399484);
		x.enqueue(-875365397);
		x.isFull();
		x.isFull();
		x.enqueue(139396989);
    }
    @Test
    public void test6133() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-307180201);
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test6134() {
		Queue variable = new Queue();
		variable.enqueue(1809729876);
		variable.dequeue();
		variable.enqueue(-1259964750);
    }
    @Test
    public void test6135() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isEmpty();
		y.toString();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test6136() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.toString();
		x.isEmpty();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.dequeue();
		x.enqueue(-331337635);
    }
    @Test
    public void test6137() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(956213376);
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(1733407237);
    }
    @Test
    public void test6138() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(1885478994);
    }
    @Test
    public void test6139() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(148293417);
		assertEquals("[148293417]", variable.toString());
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test6140() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.enqueue(-1698777741);
		y.isFull();
		y.dequeue();
		y.enqueue(-1557457660);
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test6141() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(1951861190);
		Var.toString();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test6142() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(1018226145);
		x.isFull();
		assertFalse(x.isEmpty());
		x.isFull();
		x.isFull();
    }
    @Test
    public void test6143() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.toString();
		Var.isFull();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-642557619);
    }
    @Test
    public void test6144() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(605842842);
		assertEquals(605842842, z.dequeue());
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test6145() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test6146() {
		Queue variable = new Queue();
		variable.enqueue(-1204453038);
		variable.enqueue(143988529);
		variable.toString();
		variable.isFull();
		assertEquals("[143988529]", variable.toString());
		variable.isFull();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test6147() {
		Queue z = new Queue();
		z.enqueue(-167884848);
		z.enqueue(-372627013);
		z.isEmpty();
		z.enqueue(1190433651);
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		assertFalse(z.isEmpty());
		assertFalse(z.isFull());
		assertEquals("[1190433651]", z.toString());
		z.dequeue();
		z.toString();
		z.enqueue(722149529);
    }
    @Test
    public void test6148() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-2071445698);
		x.isFull();
		x.toString();
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test6149() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test6150() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.isFull();
    }
    @Test
    public void test6151() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(1454702686);
    }
    @Test
    public void test6152() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.enqueue(1894804029);
		variable.enqueue(-1588724336);
    }
    @Test
    public void test6153() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(337690344);
		variable.toString();
		variable.isFull();
		variable.enqueue(1977573180);
    }
    @Test
    public void test6154() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		variable.toString();
		variable.enqueue(397268523);
		variable.toString();
		variable.enqueue(-616976258);
		assertEquals(397268523, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.enqueue(1391238454);
		variable.enqueue(1286429856);
		variable.toString();
    }
    @Test
    public void test6155() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.enqueue(971393243);
		y.isEmpty();
		y.dequeue();
		y.enqueue(-1699200568);
    }
    @Test
    public void test6156() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.toString();
		variable.toString();
		variable.enqueue(-1522816839);
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(767189331);
    }
    @Test
    public void test6157() {
		Queue z = new Queue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-2131766994);
    }
    @Test
    public void test6158() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.enqueue(-819461812);
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test6159() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(580117014);
		z.enqueue(-256238785);
		z.isEmpty();
		z.isFull();
		z.toString();
    }
    @Test
    public void test6160() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test6161() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test6162() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(152990458);
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		Var.enqueue(1598581323);
		Var.isEmpty();
    }
    @Test
    public void test6163() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test6164() {
		Queue x = new Queue();
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
		x.toString();
		x.enqueue(-1613147907);
		x.isEmpty();
		x.enqueue(-2103304181);
		x.isEmpty();
		x.toString();
		x.enqueue(1943432137);
		assertFalse(x.isFull());
		x.enqueue(1407511005);
    }
    @Test
    public void test6165() {
		Queue z = new Queue();
		z.enqueue(-1544174731);
		assertEquals(-1, z.dequeue());
		z.enqueue(-1293658333);
		z.toString();
		z.dequeue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.toString();
    }
    @Test
    public void test6166() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(-522072173);
		x.isFull();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(-558909022);
    }
    @Test
    public void test6167() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.toString();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.enqueue(-824120923);
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.enqueue(2090196256);
		y.isFull();
		assertEquals("[2090196256]", y.toString());
		assertFalse(y.isEmpty());
		y.isFull();
		assertEquals(2090196256, y.dequeue());
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.isFull();
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test6168() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.toString();
		z.enqueue(567898081);
    }
    @Test
    public void test6169() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.enqueue(1856610089);
    }
    @Test
    public void test6170() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-428528887);
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test6171() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.enqueue(2088252349);
		assertEquals("[2088252349]", variable.toString());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(43391730);
		variable.isFull();
    }
    @Test
    public void test6172() {
		Queue y = new Queue();
		y.enqueue(155496176);
		y.toString();
    }
    @Test
    public void test6173() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		variable.toString();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test6174() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test6175() {
		Queue y = new Queue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isFull();
		y.toString();
		y.enqueue(1222190238);
    }
    @Test
    public void test6176() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-142862662);
    }
    @Test
    public void test6177() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(1301237277);
		x.isFull();
		assertEquals("[1301237277]", x.toString());
		x.isFull();
		x.enqueue(-1914363629);
		x.enqueue(-1024875071);
		x.dequeue();
    }
    @Test
    public void test6178() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.enqueue(-1007267634);
    }
    @Test
    public void test6179() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.toString();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		x.isFull();
		x.enqueue(1194647826);
		x.isEmpty();
    }
    @Test
    public void test6180() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(1700780563);
		x.isFull();
		x.enqueue(340989731);
		x.enqueue(-819234696);
    }
    @Test
    public void test6181() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(965325636);
		z.enqueue(16776292);
		z.dequeue();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test6182() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test6183() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1130166698);
		x.toString();
		x.isEmpty();
		x.isEmpty();
		assertEquals("[1130166698]", x.toString());
		x.isEmpty();
		x.enqueue(-942150403);
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test6184() {
		Queue z = new Queue();
		z.enqueue(-1053946733);
		z.toString();
		z.isFull();
		z.enqueue(-751306038);
    }
    @Test
    public void test6185() {
		Queue Var = new Queue();
		Var.enqueue(-166994701);
		Var.isEmpty();
    }
    @Test
    public void test6186() {
		Queue z = new Queue();
		z.enqueue(1260533462);
		z.dequeue();
		z.isFull();
		assertFalse(z.isFull());
		z.enqueue(622436972);
		z.isFull();
    }
    @Test
    public void test6187() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(690573612);
		Var.isFull();
    }
    @Test
    public void test6188() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		z.toString();
		z.toString();
		z.enqueue(-1907863626);
		assertTrue(z.isEmpty());
		z.enqueue(-2031020246);
		z.toString();
		z.toString();
		assertTrue(z.isEmpty());
		z.toString();
		z.isFull();
    }
    @Test
    public void test6189() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(-1573011575);
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test6190() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.toString();
		x.dequeue();
		x.isFull();
		x.isFull();
		x.dequeue();
		x.toString();
		x.enqueue(143778264);
    }
    @Test
    public void test6191() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test6192() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-1141944058);
		y.dequeue();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test6193() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.enqueue(-983173096);
		x.enqueue(-608838874);
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test6194() {
		Queue z = new Queue();
		z.enqueue(-534219408);
		z.enqueue(266457421);
		z.isFull();
		z.isFull();
		z.isEmpty();
		z.dequeue();
		z.toString();
		z.isFull();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test6195() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-1853095919);
		z.isEmpty();
		z.toString();
		z.dequeue();
		assertFalse(z.isFull());
		z.dequeue();
		z.enqueue(-1818009264);
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test6196() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-1021921612);
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isFull();
		z.enqueue(-1362867664);
		z.isFull();
    }
    @Test
    public void test6197() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(-753515808);
		y.enqueue(724895439);
		y.toString();
    }
    @Test
    public void test6198() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(-949711011);
    }
    @Test
    public void test6199() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.enqueue(-1105089737);
		y.enqueue(-2111810489);
		assertEquals(-1, y.dequeue());
		y.enqueue(870035143);
		assertEquals(870035143, y.dequeue());
		y.enqueue(205213244);
		assertFalse(y.isFull());
		y.enqueue(-1146416078);
		y.dequeue();
		y.enqueue(-539352688);
		y.toString();
		y.enqueue(-1441805674);
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test6200() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(-331565543);
		variable.enqueue(-693648430);
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-2069607978);
		variable.dequeue();
    }
    @Test
    public void test6201() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(1214473500);
    }
    @Test
    public void test6202() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.enqueue(762331548);
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(491521741);
    }
    @Test
    public void test6203() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(-1980669645);
    }
    @Test
    public void test6204() {
		Queue y = new Queue();
		y.enqueue(-1653868022);
		y.toString();
		y.isFull();
    }
    @Test
    public void test6205() {
		Queue x = new Queue();
		x.enqueue(1237292230);
		x.isEmpty();
		assertEquals(1237292230, x.dequeue());
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.toString();
    }
    @Test
    public void test6206() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.isFull();
		variable.enqueue(564257675);
		assertEquals(564257675, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test6207() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-602840222);
		x.dequeue();
		x.enqueue(-272194830);
		x.dequeue();
		x.toString();
		x.dequeue();
		x.dequeue();
		x.enqueue(2036852657);
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		assertFalse(x.isEmpty());
		x.enqueue(-1968724806);
    }
    @Test
    public void test6208() {
		Queue y = new Queue();
		y.enqueue(-210145825);
		y.isEmpty();
		y.enqueue(-470249559);
		y.enqueue(1308797773);
		y.isFull();
		y.isFull();
    }
    @Test
    public void test6209() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test6210() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-1586959038);
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test6211() {
		Queue y = new Queue();
		y.enqueue(-2129169187);
    }
    @Test
    public void test6212() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-994772655);
    }
    @Test
    public void test6213() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-2112849647);
		variable.enqueue(-1458423646);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-722919268);
    }
    @Test
    public void test6214() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.enqueue(2006170419);
		y.toString();
    }
    @Test
    public void test6215() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		assertTrue(z.isEmpty());
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(57504171);
		assertEquals("[57504171]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test6216() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(1337021228);
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(915994399);
		assertFalse(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test6217() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-475479611);
		Var.enqueue(-1580145109);
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test6218() {
		Queue Var = new Queue();
		Var.enqueue(-1455884898);
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(-1665703158);
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test6219() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.dequeue();
		y.enqueue(-1051707569);
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		y.isFull();
		assertTrue(y.isEmpty());
		y.toString();
		y.dequeue();
    }
    @Test
    public void test6220() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(-1031921064);
    }
    @Test
    public void test6221() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(-210344174);
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-1261290590);
		variable.isEmpty();
		variable.enqueue(552072001);
		variable.dequeue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test6222() {
		Queue Var = new Queue();
		Var.enqueue(1910341474);
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test6223() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test6224() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.enqueue(877953116);
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.isFull();
		x.toString();
		x.enqueue(2113802005);
    }
    @Test
    public void test6225() {
		Queue z = new Queue();
		z.enqueue(413991454);
		assertEquals(413991454, z.dequeue());
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(-418062238);
		z.isEmpty();
		z.toString();
		z.enqueue(-1404727356);
		z.toString();
    }
    @Test
    public void test6226() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test6227() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isFull();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
		x.toString();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isFull();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test6228() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.toString();
    }
    @Test
    public void test6229() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.toString();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1488827116);
		variable.dequeue();
    }
    @Test
    public void test6230() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test6231() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(863307105);
		assertEquals(863307105, x.dequeue());
		x.isFull();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.enqueue(515523978);
		x.dequeue();
		x.isFull();
		x.toString();
		x.toString();
    }
    @Test
    public void test6232() {
		Queue y = new Queue();
		y.enqueue(1919617979);
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isFull();
    }
    @Test
    public void test6233() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.enqueue(-709772283);
		z.toString();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test6234() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.enqueue(132748267);
		x.isEmpty();
		x.enqueue(355932256);
		x.enqueue(928349463);
		x.isFull();
		x.toString();
    }
    @Test
    public void test6235() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(-945372737);
		z.toString();
		assertTrue(z.isEmpty());
		z.toString();
		assertFalse(z.isFull());
		z.isFull();
		z.dequeue();
		z.enqueue(-1478736093);
    }
    @Test
    public void test6236() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.enqueue(606938078);
		z.toString();
		z.isEmpty();
		z.isFull();
		assertFalse(z.isEmpty());
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test6237() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.toString();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isFull();
		x.enqueue(-1185694570);
		x.isEmpty();
		x.enqueue(-1352288125);
		assertFalse(x.isFull());
		x.enqueue(574129103);
    }
    @Test
    public void test6238() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.toString();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.enqueue(1169719644);
		z.enqueue(1802626963);
		z.enqueue(1196813787);
		z.toString();
    }
    @Test
    public void test6239() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(2074615413);
		y.isFull();
		assertFalse(y.isEmpty());
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test6240() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.toString();
		z.isEmpty();
		z.dequeue();
		z.enqueue(-1063680659);
		z.isFull();
		z.toString();
		z.enqueue(-1511276551);
    }
    @Test
    public void test6241() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
		variable.enqueue(-1220416616);
		variable.isEmpty();
		variable.enqueue(637474877);
		variable.toString();
		variable.enqueue(205956736);
    }
    @Test
    public void test6242() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(-478797668);
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test6243() {
		Queue variable = new Queue();
		variable.enqueue(806904426);
		variable.isFull();
		variable.isFull();
		assertEquals(806904426, variable.dequeue());
		variable.isFull();
		variable.enqueue(1997166239);
		variable.enqueue(262591011);
    }
    @Test
    public void test6244() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-1585330419);
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(-1905403967);
		y.isFull();
    }
    @Test
    public void test6245() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(481247904);
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertEquals("[481247904]", variable.toString());
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.toString();
		variable.enqueue(666384301);
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(2030680540);
    }
    @Test
    public void test6246() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test6247() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.enqueue(-1522763693);
		assertTrue(Var.isEmpty());
		Var.enqueue(50187160);
		Var.enqueue(2035567092);
		Var.toString();
    }
    @Test
    public void test6248() {
		Queue z = new Queue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(1686494794);
		z.toString();
		z.isFull();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test6249() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(660673724);
		Var.dequeue();
    }
    @Test
    public void test6250() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test6251() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test6252() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test6253() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-421803093);
		y.enqueue(1680292909);
    }
    @Test
    public void test6254() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.enqueue(-442849855);
		y.isEmpty();
    }
    @Test
    public void test6255() {
		Queue x = new Queue();
		x.enqueue(-508975975);
		x.enqueue(220268881);
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test6256() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test6257() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.enqueue(1938254350);
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test6258() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(1030840227);
		z.enqueue(1685401430);
		assertEquals("[1030840227, 1685401430]", z.toString());
		assertFalse(z.isFull());
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test6259() {
		Queue Var = new Queue();
		Var.enqueue(-1066490914);
    }
    @Test
    public void test6260() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.enqueue(198866632);
		variable.isEmpty();
		variable.enqueue(-502609886);
    }
    @Test
    public void test6261() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(904224214);
		Var.toString();
    }
    @Test
    public void test6262() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-2073781755);
    }
    @Test
    public void test6263() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test6264() {
		Queue y = new Queue();
		y.enqueue(-1430046211);
		assertEquals("[]", y.toString());
		y.isFull();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.enqueue(734017738);
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(-1836795755);
		y.dequeue();
    }
    @Test
    public void test6265() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		x.enqueue(990658761);
		x.isEmpty();
		x.enqueue(636884033);
		assertEquals("[990658761, 636884033]", x.toString());
		assertEquals("[990658761, 636884033]", x.toString());
		x.isEmpty();
    }
    @Test
    public void test6266() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(1600346725);
		x.isEmpty();
		x.toString();
		x.isEmpty();
		x.enqueue(-1496642440);
		x.enqueue(-1597605361);
		x.enqueue(-1759763771);
    }
    @Test
    public void test6267() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.toString();
		x.toString();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test6268() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(754019754);
		assertEquals(754019754, Var.dequeue());
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test6269() {
		Queue y = new Queue();
		y.enqueue(1768107800);
		assertEquals(1768107800, y.dequeue());
		y.isEmpty();
		y.enqueue(594559995);
		assertFalse(y.isEmpty());
		y.enqueue(1169305181);
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test6270() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.toString();
		y.dequeue();
    }
    @Test
    public void test6271() {
		Queue y = new Queue();
		y.enqueue(-660039532);
		y.isEmpty();
		y.enqueue(-2047437163);
		y.toString();
		y.enqueue(267955988);
		assertFalse(y.isFull());
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test6272() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(904841398);
		assertEquals("[904841398]", Var.toString());
		Var.dequeue();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test6273() {
		Queue y = new Queue();
		y.enqueue(1849532489);
		y.isFull();
		y.isFull();
		assertEquals(1849532489, y.dequeue());
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.isFull();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test6274() {
		Queue Var = new Queue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.enqueue(1768508109);
		Var.dequeue();
		Var.enqueue(1756271966);
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test6275() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test6276() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test6277() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.toString();
    }
    @Test
    public void test6278() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-791193235);
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test6279() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.toString();
		Var.enqueue(712443132);
		Var.enqueue(-704123719);
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.enqueue(-829646466);
		Var.enqueue(161273432);
		assertEquals("[712443132, 161273432]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test6280() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.enqueue(-1100160385);
		variable.enqueue(2005139248);
		assertEquals(2005139248, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(116841650);
		assertEquals(116841650, variable.dequeue());
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test6281() {
		Queue variable = new Queue();
		variable.enqueue(2066369266);
		variable.isFull();
		assertEquals("[2066369266]", variable.toString());
		assertEquals(2066369266, variable.dequeue());
		variable.enqueue(-280373188);
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(851084543);
		variable.isEmpty();
		assertEquals(851084543, variable.dequeue());
		variable.toString();
    }
    @Test
    public void test6282() {
		Queue x = new Queue();
		x.enqueue(954358584);
		x.enqueue(-1447038635);
		x.isFull();
		x.enqueue(1689218301);
		x.dequeue();
		x.toString();
    }
    @Test
    public void test6283() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test6284() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test6285() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.toString();
		y.dequeue();
		y.isEmpty();
		y.enqueue(1184933316);
    }
    @Test
    public void test6286() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test6287() {
		Queue Var = new Queue();
		Var.enqueue(2144927292);
		assertFalse(Var.isFull());
		assertEquals("[2144927292]", Var.toString());
		assertEquals("[2144927292]", Var.toString());
		Var.dequeue();
		Var.enqueue(-1205326559);
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-1311442642);
    }
    @Test
    public void test6288() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.isFull();
		assertFalse(z.isFull());
		z.enqueue(1098323876);
		z.toString();
    }
    @Test
    public void test6289() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(-1584463119);
		variable.enqueue(-69775258);
    }
    @Test
    public void test6290() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.isFull();
		z.isFull();
		z.isEmpty();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(-1583066212);
    }
    @Test
    public void test6291() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(1758331941);
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(387107576);
		variable.toString();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test6292() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.enqueue(-1661364038);
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(1042445646);
    }
    @Test
    public void test6293() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-1746643185);
		z.isFull();
		z.isFull();
		z.isFull();
		z.isEmpty();
		z.toString();
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test6294() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test6295() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-256188689);
		variable.dequeue();
		variable.enqueue(876824587);
		variable.toString();
		variable.enqueue(-1022538585);
    }
    @Test
    public void test6296() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.enqueue(-1900149765);
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(901769596);
		Var.dequeue();
    }
    @Test
    public void test6297() {
		Queue variable = new Queue();
		variable.enqueue(-1674301569);
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test6298() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(1176284772);
		y.enqueue(1294284163);
		y.enqueue(1954035473);
		assertFalse(y.isEmpty());
		y.isEmpty();
		assertEquals("[1176284772, 1294284163, 1954035473]", y.toString());
		y.dequeue();
    }
    @Test
    public void test6299() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1497039660);
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(-436077973);
    }
    @Test
    public void test6300() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.enqueue(984701597);
		Var.isFull();
    }
    @Test
    public void test6301() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.isFull();
		y.toString();
		y.isFull();
		y.enqueue(1007325050);
		assertFalse(y.isEmpty());
		y.toString();
		assertEquals("[1007325050]", y.toString());
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test6302() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.toString();
		Var.dequeue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.enqueue(-662268667);
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test6303() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.isFull();
		y.dequeue();
		y.enqueue(162452221);
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test6304() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1436262998);
		variable.enqueue(-685111955);
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1043776095);
    }
    @Test
    public void test6305() {
		Queue x = new Queue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(588389712);
		x.isFull();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test6306() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.dequeue();
		y.isEmpty();
		y.enqueue(990460588);
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test6307() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.dequeue();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test6308() {
		Queue variable = new Queue();
		variable.enqueue(235887783);
		assertEquals("[235887783]", variable.toString());
		assertEquals("[235887783]", variable.toString());
		assertEquals("[235887783]", variable.toString());
		variable.enqueue(-1630179584);
		variable.isFull();
    }
    @Test
    public void test6309() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(378549227);
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test6310() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-520825944);
		x.dequeue();
		x.enqueue(-1742658724);
		x.isFull();
    }
    @Test
    public void test6311() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(-1006362209);
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-1706541224);
		variable.isFull();
    }
    @Test
    public void test6312() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isFull();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test6313() {
		Queue y = new Queue();
		y.enqueue(1811932873);
		y.enqueue(714002014);
		assertFalse(y.isFull());
		assertEquals(1811932873, y.dequeue());
		assertEquals(714002014, y.dequeue());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test6314() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isFull();
		z.toString();
		z.dequeue();
		z.enqueue(133422560);
		z.enqueue(1681452944);
    }
    @Test
    public void test6315() {
		Queue y = new Queue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.toString();
		y.toString();
		y.toString();
    }
    @Test
    public void test6316() {
		Queue z = new Queue();
		z.enqueue(976580259);
		assertFalse(z.isEmpty());
		assertFalse(z.isEmpty());
		z.isEmpty();
		z.isFull();
		z.dequeue();
		z.isFull();
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(856959346);
		z.isFull();
		z.toString();
    }
    @Test
    public void test6317() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(412362306);
		y.isEmpty();
		y.enqueue(1185628077);
		assertEquals(412362306, y.dequeue());
		y.dequeue();
		y.toString();
		assertFalse(y.isFull());
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.enqueue(-799208990);
		y.toString();
		y.isFull();
    }
    @Test
    public void test6318() {
		Queue x = new Queue();
		x.enqueue(-1557584441);
		x.isEmpty();
		x.toString();
		x.enqueue(-1185923748);
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test6319() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isFull();
		z.isFull();
		z.dequeue();
		z.dequeue();
		z.enqueue(-2085421133);
		z.toString();
		z.isFull();
    }
    @Test
    public void test6320() {
		Queue Var = new Queue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.dequeue();
		Var.enqueue(623108421);
		Var.enqueue(415201944);
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test6321() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.enqueue(2043173681);
		assertEquals("[2043173681]", x.toString());
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test6322() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.enqueue(-1066279719);
    }
    @Test
    public void test6323() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test6324() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(65570286);
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		y.toString();
		assertEquals(65570286, y.dequeue());
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test6325() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.enqueue(-855397636);
		variable.toString();
		variable.enqueue(1012057275);
    }
    @Test
    public void test6326() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test6327() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test6328() {
		Queue z = new Queue();
		z.dequeue();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(1800864723);
    }
    @Test
    public void test6329() {
		Queue variable = new Queue();
		variable.enqueue(-637275623);
		variable.isEmpty();
		variable.enqueue(874926319);
		variable.enqueue(1877454074);
		variable.toString();
		assertEquals(874926319, variable.dequeue());
		variable.dequeue();
		variable.enqueue(1742981721);
		variable.enqueue(-1773930703);
		variable.toString();
		assertEquals("[1742981721]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test6330() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.enqueue(-1110266996);
		Var.dequeue();
		Var.enqueue(425455568);
		Var.enqueue(-760251999);
		Var.enqueue(1817668961);
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test6331() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.isFull();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.enqueue(-742526073);
		assertFalse(x.isFull());
		x.toString();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.enqueue(-1555163217);
		x.dequeue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test6332() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(-77712745);
		x.enqueue(1352824119);
		assertEquals(1352824119, x.dequeue());
		x.isFull();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test6333() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(1124707536);
		z.isFull();
		z.isFull();
		z.toString();
		z.isFull();
		z.isFull();
		z.isEmpty();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test6334() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(734151093);
		Var.enqueue(-1236158591);
		assertEquals(734151093, Var.dequeue());
		Var.isEmpty();
		Var.toString();
		Var.enqueue(-1040993210);
		assertEquals("[]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test6335() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.dequeue();
		z.toString();
		z.toString();
		z.isFull();
		z.enqueue(404602299);
    }
    @Test
    public void test6336() {
		Queue x = new Queue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.dequeue();
		x.enqueue(756472807);
    }
    @Test
    public void test6337() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.enqueue(-442746625);
		x.dequeue();
    }
    @Test
    public void test6338() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.enqueue(95498396);
		y.isEmpty();
		y.enqueue(100237456);
		y.isEmpty();
		y.isFull();
		y.isFull();
		assertEquals(95498396, y.dequeue());
		y.toString();
    }
    @Test
    public void test6339() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
    }
    @Test
    public void test6340() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(789275629);
		assertFalse(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test6341() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test6342() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test6343() {
		Queue x = new Queue();
		x.toString();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.enqueue(-309690218);
		x.toString();
		x.toString();
		x.dequeue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test6344() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test6345() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(-288133844);
		x.isEmpty();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.toString();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test6346() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-114539585);
		assertEquals("[]", z.toString());
		z.enqueue(889317499);
		z.enqueue(-1252324824);
		z.dequeue();
		z.isFull();
		z.toString();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.toString();
    }
    @Test
    public void test6347() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test6348() {
		Queue variable = new Queue();
		variable.enqueue(-666521088);
    }
    @Test
    public void test6349() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.enqueue(-1473086831);
		Var.enqueue(1743063446);
		Var.enqueue(1258828739);
		Var.isFull();
    }
    @Test
    public void test6350() {
		Queue x = new Queue();
		x.enqueue(-595645376);
		x.enqueue(-1953037472);
		x.isFull();
		x.enqueue(1025923377);
		x.enqueue(1731440273);
    }
    @Test
    public void test6351() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(395381678);
    }
    @Test
    public void test6352() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.isFull();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.enqueue(1008513160);
		assertFalse(x.isEmpty());
		x.toString();
		x.enqueue(-1303536457);
		assertFalse(x.isEmpty());
		x.isEmpty();
		x.isFull();
		assertEquals(1008513160, x.dequeue());
		x.enqueue(977535673);
    }
    @Test
    public void test6353() {
		Queue variable = new Queue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(2080010204);
		variable.enqueue(174179443);
		variable.isFull();
		assertFalse(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test6354() {
		Queue y = new Queue();
		y.enqueue(-346615782);
		y.enqueue(-1300821334);
		y.enqueue(67988386);
		y.enqueue(752420861);
		y.isEmpty();
    }
    @Test
    public void test6355() {
		Queue Var = new Queue();
		Var.enqueue(1618030456);
		Var.enqueue(-536142486);
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		Var.isFull();
		Var.dequeue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test6356() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test6357() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test6358() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(2096632285);
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(-1564035949);
		Var.enqueue(-1600706314);
    }
    @Test
    public void test6359() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-221291366);
		Var.dequeue();
		Var.enqueue(-551721998);
		Var.dequeue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test6360() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test6361() {
		Queue z = new Queue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(1382140910);
		z.enqueue(1047320694);
		assertFalse(z.isEmpty());
		z.toString();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test6362() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-983525808);
		Var.isFull();
		Var.toString();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(1466792070);
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test6363() {
		Queue y = new Queue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(1064168543);
		y.toString();
		y.enqueue(-951584861);
		y.enqueue(1021552821);
		assertFalse(y.isEmpty());
		y.dequeue();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test6364() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.enqueue(898932461);
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test6365() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test6366() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test6367() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(925350593);
		variable.isEmpty();
		assertEquals("[925350593]", variable.toString());
		variable.isFull();
		variable.enqueue(1137715642);
		assertFalse(variable.isEmpty());
		variable.isFull();
		variable.toString();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test6368() {
		Queue y = new Queue();
		y.enqueue(804085015);
		y.enqueue(457862617);
    }
    @Test
    public void test6369() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.isFull();
		y.toString();
		y.enqueue(-2110264555);
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test6370() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test6371() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test6372() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test6373() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test6374() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(716925692);
		y.toString();
		y.toString();
		y.isEmpty();
		y.enqueue(-1961168835);
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test6375() {
		Queue z = new Queue();
		z.enqueue(1709367645);
		z.toString();
		z.enqueue(-506013348);
    }
    @Test
    public void test6376() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.enqueue(1659743977);
    }
    @Test
    public void test6377() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.toString();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
		assertEquals("[]", y.toString());
		y.toString();
		y.enqueue(356016094);
    }
    @Test
    public void test6378() {
		Queue y = new Queue();
		y.enqueue(36331956);
		y.isEmpty();
		y.dequeue();
		y.toString();
		y.toString();
		assertEquals("[]", y.toString());
		y.toString();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test6379() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test6380() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test6381() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test6382() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(-26206719);
		variable.toString();
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1946977989);
		variable.enqueue(1891499402);
    }
    @Test
    public void test6383() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test6384() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test6385() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isEmpty();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test6386() {
		Queue y = new Queue();
		y.enqueue(2141367537);
		y.dequeue();
		y.enqueue(-1667815998);
		y.toString();
		y.toString();
		y.toString();
		y.isFull();
    }
    @Test
    public void test6387() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test6388() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.enqueue(-173212076);
		Var.isFull();
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(180856795);
    }
    @Test
    public void test6389() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.toString();
		y.enqueue(-1192966202);
    }
    @Test
    public void test6390() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isEmpty();
		y.toString();
		y.toString();
    }
    @Test
    public void test6391() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-77794898);
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test6392() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(-871168888);
		z.dequeue();
    }
    @Test
    public void test6393() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.enqueue(-843465918);
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test6394() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.enqueue(2105769274);
    }
    @Test
    public void test6395() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.enqueue(2062050432);
		assertFalse(x.isFull());
		x.enqueue(1910527581);
		x.dequeue();
		x.isEmpty();
		x.enqueue(-1296389907);
		x.isFull();
		x.enqueue(152441742);
		assertEquals("[1910527581, 152441742]", x.toString());
		x.isFull();
    }
    @Test
    public void test6396() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.enqueue(1662447742);
		Var.toString();
		Var.enqueue(610736709);
		Var.enqueue(-204484271);
		Var.toString();
		Var.toString();
		Var.isFull();
		Var.isFull();
		Var.enqueue(340488302);
    }
    @Test
    public void test6397() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test6398() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(1242027156);
		assertFalse(Var.isEmpty());
		Var.isFull();
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.dequeue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test6399() {
		Queue y = new Queue();
		y.enqueue(-936230310);
		assertTrue(y.isEmpty());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.enqueue(-999609418);
		y.isEmpty();
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test6400() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.toString();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test6401() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test6402() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		x.enqueue(-156704403);
		x.dequeue();
		x.dequeue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.toString();
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(-743075053);
    }
    @Test
    public void test6403() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.enqueue(-902620604);
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test6404() {
		Queue variable = new Queue();
		variable.enqueue(-645847088);
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(-209241616);
		variable.isFull();
		variable.enqueue(-1064080150);
		assertFalse(variable.isFull());
		variable.enqueue(124311121);
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test6405() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-1395021497);
		z.dequeue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(-272943972);
		z.toString();
		z.isFull();
		z.isFull();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test6406() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1737289768);
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(-1342317254);
		Var.isFull();
		Var.toString();
		Var.enqueue(-1965572165);
    }
    @Test
    public void test6407() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.isFull();
		x.toString();
		x.toString();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.toString();
    }
    @Test
    public void test6408() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.dequeue();
		y.toString();
		assertFalse(y.isFull());
		y.toString();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test6409() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.toString();
		y.isFull();
		y.enqueue(1148077986);
		y.isFull();
    }
    @Test
    public void test6410() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test6411() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.toString();
		y.toString();
		y.isFull();
		y.isEmpty();
		y.enqueue(-754007954);
		y.isFull();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.toString();
    }
    @Test
    public void test6412() {
		Queue variable = new Queue();
		variable.enqueue(-653555561);
		variable.enqueue(-428154896);
		variable.enqueue(-1215262648);
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(-1048105609);
    }
    @Test
    public void test6413() {
		Queue variable = new Queue();
		variable.enqueue(1455416591);
		assertEquals(1455416591, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.enqueue(954004119);
		assertFalse(variable.isEmpty());
		variable.isFull();
		variable.isFull();
		assertEquals("[954004119]", variable.toString());
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test6414() {
		Queue x = new Queue();
		x.enqueue(-1197905747);
		assertEquals(-1, x.dequeue());
		x.enqueue(-1593838236);
		x.enqueue(1148334936);
		x.toString();
		x.toString();
		x.toString();
		x.enqueue(1515968291);
		x.toString();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test6415() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(1558787255);
		x.toString();
		x.dequeue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.toString();
		x.enqueue(1502835192);
		x.dequeue();
    }
    @Test
    public void test6416() {
		Queue variable = new Queue();
		variable.enqueue(1794464753);
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(1963882898);
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test6417() {
		Queue z = new Queue();
		z.enqueue(1525032368);
		assertFalse(z.isEmpty());
		z.enqueue(-2074510517);
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.enqueue(-154510041);
		z.isFull();
		z.toString();
    }
    @Test
    public void test6418() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-2003108419);
		variable.enqueue(-1410286051);
    }
    @Test
    public void test6419() {
		Queue y = new Queue();
		y.enqueue(-204314451);
		y.dequeue();
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		y.dequeue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(-870229814);
    }
    @Test
    public void test6420() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(-468110895);
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test6421() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.enqueue(1191147293);
		x.isEmpty();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test6422() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.enqueue(-1123695311);
		x.isFull();
		x.toString();
		x.isFull();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.enqueue(-609655489);
		x.dequeue();
    }
    @Test
    public void test6423() {
		Queue x = new Queue();
		x.enqueue(-1981908319);
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.enqueue(497441989);
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(2044697051);
		x.isFull();
		x.dequeue();
		x.isFull();
		x.isFull();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test6424() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isFull();
		assertTrue(x.isEmpty());
		x.enqueue(-861481906);
		assertTrue(x.isEmpty());
		x.enqueue(-8556966);
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(-24752065);
		x.isEmpty();
		x.enqueue(-941436638);
    }
    @Test
    public void test6425() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1479025876);
		x.dequeue();
		assertEquals("[]", x.toString());
		x.toString();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test6426() {
		Queue Var = new Queue();
		Var.enqueue(-1548374288);
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-919756339);
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test6427() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		x.toString();
		x.dequeue();
    }
    @Test
    public void test6428() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-1995428737);
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test6429() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test6430() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.enqueue(1486427702);
		x.dequeue();
    }
    @Test
    public void test6431() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.dequeue();
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(-1958557217);
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.enqueue(-2125230544);
		x.enqueue(640384757);
		x.dequeue();
    }
    @Test
    public void test6432() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(974388692);
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertEquals(974388692, Var.dequeue());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1478628905);
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.enqueue(-1286713609);
    }
    @Test
    public void test6433() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.enqueue(-1822643773);
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		variable.toString();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test6434() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.toString();
		z.isEmpty();
		z.enqueue(1746167531);
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(-2082597845);
    }
    @Test
    public void test6435() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.enqueue(-675480458);
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.enqueue(1251989239);
		y.enqueue(-219168165);
		y.dequeue();
		y.toString();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test6436() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test6437() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
		assertFalse(Var.isFull());
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(-2120004679);
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test6438() {
		Queue Var = new Queue();
		Var.enqueue(1672863724);
		Var.toString();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.toString();
		Var.isFull();
		Var.isFull();
		Var.enqueue(-267425386);
    }
    @Test
    public void test6439() {
		Queue z = new Queue();
		z.enqueue(844394424);
		z.toString();
		z.dequeue();
		z.isFull();
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test6440() {
		Queue variable = new Queue();
		variable.enqueue(-438456461);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(-425439052);
		variable.isEmpty();
    }
    @Test
    public void test6441() {
		Queue Var = new Queue();
		Var.enqueue(156489338);
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(10913698);
    }
    @Test
    public void test6442() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.isFull();
		y.dequeue();
		y.toString();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test6443() {
		Queue z = new Queue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(236693698);
		z.enqueue(1001673342);
		z.toString();
		z.isFull();
    }
    @Test
    public void test6444() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
		y.enqueue(437022038);
		assertFalse(y.isEmpty());
		y.toString();
		y.dequeue();
		y.toString();
		y.enqueue(32336513);
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test6445() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(1081540974);
		assertEquals("[1081540974]", variable.toString());
		variable.isFull();
		variable.enqueue(-780998072);
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test6446() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.toString();
		Var.isFull();
		Var.toString();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test6447() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(-1630503463);
		Var.isEmpty();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(583370636);
		Var.isEmpty();
    }
    @Test
    public void test6448() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(141995511);
    }
    @Test
    public void test6449() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test6450() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.enqueue(1795588539);
		z.toString();
		assertFalse(z.isFull());
		z.isEmpty();
		z.dequeue();
		z.toString();
		z.enqueue(-532469603);
		z.toString();
    }
    @Test
    public void test6451() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.enqueue(-1429284387);
    }
    @Test
    public void test6452() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-2134861246);
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test6453() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isFull();
		x.isEmpty();
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test6454() {
		Queue variable = new Queue();
		variable.enqueue(-1930984075);
		variable.isEmpty();
		variable.enqueue(-225717401);
		variable.dequeue();
    }
    @Test
    public void test6455() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test6456() {
		Queue variable = new Queue();
		variable.enqueue(-1473358409);
    }
    @Test
    public void test6457() {
		Queue Var = new Queue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-1030815794);
		Var.dequeue();
    }
    @Test
    public void test6458() {
		Queue Var = new Queue();
		Var.enqueue(111890306);
		Var.toString();
		assertEquals(111890306, Var.dequeue());
		Var.enqueue(1819293822);
		assertFalse(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test6459() {
		Queue z = new Queue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isEmpty();
		z.isFull();
		z.enqueue(-1518739947);
		z.enqueue(-325350952);
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(2105216174);
    }
    @Test
    public void test6460() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(-1241879967);
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.enqueue(-710598235);
		x.toString();
		x.enqueue(1119664878);
		x.toString();
    }
    @Test
    public void test6461() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.enqueue(-1140354899);
		assertTrue(variable.isEmpty());
		variable.enqueue(-450418036);
    }
    @Test
    public void test6462() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		assertEquals("[]", z.toString());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(315318648);
		z.toString();
    }
    @Test
    public void test6463() {
		Queue z = new Queue();
		z.enqueue(362488622);
    }
    @Test
    public void test6464() {
		Queue y = new Queue();
		y.enqueue(-2126226321);
		y.enqueue(1779772145);
		assertEquals(1779772145, y.dequeue());
		y.toString();
		y.isFull();
		y.enqueue(-208458089);
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test6465() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.enqueue(-1801356585);
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(128281196);
		variable.enqueue(813452270);
		assertEquals(128281196, variable.dequeue());
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(794266850);
    }
    @Test
    public void test6466() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test6467() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test6468() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(975129216);
		variable.toString();
    }
    @Test
    public void test6469() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test6470() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.isFull();
		z.toString();
		z.isFull();
    }
    @Test
    public void test6471() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1455134488);
		variable.dequeue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(1379266189);
		variable.enqueue(571220086);
		variable.enqueue(1376283729);
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test6472() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(-784336338);
		z.isEmpty();
    }
    @Test
    public void test6473() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test6474() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.enqueue(-30621786);
		x.isFull();
    }
    @Test
    public void test6475() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test6476() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(972568070);
		Var.isFull();
		Var.enqueue(1707150603);
		Var.toString();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test6477() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isEmpty();
		y.dequeue();
		y.isFull();
		y.toString();
    }
    @Test
    public void test6478() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(1926794374);
		assertFalse(Var.isFull());
		assertEquals(1926794374, Var.dequeue());
		Var.isFull();
		Var.toString();
		Var.enqueue(593463662);
		Var.enqueue(1109011992);
		Var.enqueue(-414923622);
		Var.isFull();
		Var.enqueue(2029958521);
    }
    @Test
    public void test6479() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test6480() {
		Queue variable = new Queue();
		variable.enqueue(-2128511446);
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test6481() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-2078656908);
		assertEquals(-1, Var.dequeue());
		Var.enqueue(65236036);
		assertEquals("[65236036]", Var.toString());
		Var.toString();
		Var.enqueue(-1444046106);
		assertEquals(65236036, Var.dequeue());
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.enqueue(1598943043);
		Var.isFull();
		Var.enqueue(-600880292);
		assertEquals("[1598943043]", Var.toString());
		assertEquals(1598943043, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test6482() {
		Queue variable = new Queue();
		variable.enqueue(687822194);
		assertEquals("[687822194]", variable.toString());
		variable.toString();
		variable.enqueue(654466141);
		assertEquals(687822194, variable.dequeue());
		variable.enqueue(-148775954);
		assertEquals("[654466141]", variable.toString());
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test6483() {
		Queue Var = new Queue();
		Var.enqueue(2048092842);
		Var.dequeue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.enqueue(1529846702);
    }
    @Test
    public void test6484() {
		Queue z = new Queue();
		z.enqueue(-2056621008);
		z.toString();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.enqueue(206162074);
    }
    @Test
    public void test6485() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(484026125);
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.isFull();
		assertFalse(variable.isEmpty());
		assertEquals(484026125, variable.dequeue());
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(-2942052);
    }
    @Test
    public void test6486() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.enqueue(-990791357);
		assertFalse(z.isFull());
		z.enqueue(647964933);
		assertFalse(z.isEmpty());
		z.toString();
		assertFalse(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test6487() {
		Queue z = new Queue();
		z.isFull();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isFull();
		z.toString();
		z.toString();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.dequeue();
		z.enqueue(1389495152);
    }
    @Test
    public void test6488() {
		Queue z = new Queue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.toString();
		z.toString();
		assertTrue(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test6489() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(1230743203);
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-1489733337);
		x.isEmpty();
		assertFalse(x.isEmpty());
		x.toString();
		x.enqueue(1411168721);
    }
    @Test
    public void test6490() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(1882439454);
		assertEquals("[1882439454]", variable.toString());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(703408740);
		variable.dequeue();
		variable.toString();
		variable.isFull();
		variable.enqueue(84942056);
    }
    @Test
    public void test6491() {
		Queue x = new Queue();
		x.enqueue(-651041190);
    }
    @Test
    public void test6492() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.enqueue(630190452);
		assertFalse(variable.isEmpty());
		variable.enqueue(1455448765);
		variable.dequeue();
    }
    @Test
    public void test6493() {
		Queue y = new Queue();
		y.enqueue(1500770669);
		y.isEmpty();
		assertFalse(y.isEmpty());
		y.toString();
		y.enqueue(1327246345);
		y.toString();
		assertEquals(1500770669, y.dequeue());
		y.isEmpty();
		y.isFull();
		assertEquals(1327246345, y.dequeue());
		y.toString();
		y.enqueue(-2095028781);
    }
    @Test
    public void test6494() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-693079256);
		Var.toString();
    }
    @Test
    public void test6495() {
		Queue y = new Queue();
		y.enqueue(596916776);
		assertEquals(596916776, y.dequeue());
		y.enqueue(-1485254452);
		y.enqueue(-1138580727);
		y.toString();
		y.toString();
		y.toString();
    }
    @Test
    public void test6496() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.toString();
		z.toString();
		z.dequeue();
		z.dequeue();
		z.enqueue(-1599914443);
		z.enqueue(-62095366);
    }
    @Test
    public void test6497() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test6498() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(-1096596286);
		y.dequeue();
    }
    @Test
    public void test6499() {
		Queue y = new Queue();
		y.enqueue(387793480);
		y.dequeue();
		y.enqueue(1903293891);
		y.dequeue();
		y.enqueue(1871811406);
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(-421652272);
    }
    @Test
    public void test6500() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-1186711917);
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test6501() {
		Queue y = new Queue();
		y.enqueue(1342123805);
		assertEquals(1342123805, y.dequeue());
		y.dequeue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.enqueue(284692332);
    }
    @Test
    public void test6502() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.enqueue(-59827132);
		Var.toString();
		Var.toString();
    }
    @Test
    public void test6503() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.dequeue();
		y.isFull();
		y.isFull();
		y.enqueue(1487212295);
    }
    @Test
    public void test6504() {
		Queue variable = new Queue();
		variable.enqueue(-390355851);
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.enqueue(-1415098758);
    }
    @Test
    public void test6505() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test6506() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test6507() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(1342666392);
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(1861626274);
		variable.enqueue(1355038421);
		variable.isFull();
		variable.toString();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test6508() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test6509() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.isFull();
		x.enqueue(-1668256238);
    }
    @Test
    public void test6510() {
		Queue Var = new Queue();
		Var.enqueue(772127874);
		Var.enqueue(2021352431);
    }
    @Test
    public void test6511() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(1691004961);
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test6512() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-1250028798);
		Var.enqueue(628253267);
		Var.toString();
		Var.dequeue();
		Var.enqueue(-1431455249);
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test6513() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test6514() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.enqueue(-184694437);
		x.dequeue();
		x.isEmpty();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.enqueue(280845238);
    }
    @Test
    public void test6515() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(-1160753687);
    }
    @Test
    public void test6516() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.enqueue(-321315953);
    }
    @Test
    public void test6517() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.enqueue(-1715890724);
		z.isEmpty();
		z.toString();
		z.enqueue(1923608488);
		z.enqueue(1198362308);
		z.dequeue();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test6518() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.enqueue(-1235349317);
    }
    @Test
    public void test6519() {
		Queue Var = new Queue();
		Var.enqueue(1734862307);
		assertEquals("[1734862307]", Var.toString());
		assertEquals("[1734862307]", Var.toString());
		assertEquals("[1734862307]", Var.toString());
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertEquals(1734862307, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test6520() {
		Queue Var = new Queue();
		Var.enqueue(-1316747383);
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test6521() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1150426171);
		assertEquals(1150426171, variable.dequeue());
		variable.toString();
		variable.enqueue(-448407402);
		variable.enqueue(2076513454);
		variable.isEmpty();
    }
    @Test
    public void test6522() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.isFull();
		z.isEmpty();
		z.enqueue(-1455471202);
		z.dequeue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(-546063480);
		z.isEmpty();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test6523() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.toString();
		x.toString();
		x.isFull();
		x.isFull();
		x.isFull();
		x.toString();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test6524() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1087875300);
    }
    @Test
    public void test6525() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test6526() {
		Queue x = new Queue();
		x.enqueue(-486923278);
    }
    @Test
    public void test6527() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.enqueue(-1229124520);
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.toString();
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test6528() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.toString();
		y.enqueue(-927671680);
		y.dequeue();
		y.enqueue(2079357911);
		assertEquals("[2079357911]", y.toString());
		y.dequeue();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test6529() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test6530() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.enqueue(285768958);
		Var.isFull();
		Var.enqueue(1173083701);
		Var.isFull();
		Var.enqueue(1415424452);
		Var.isEmpty();
    }
    @Test
    public void test6531() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test6532() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(202053201);
		variable.isFull();
    }
    @Test
    public void test6533() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		variable.enqueue(-251252926);
		variable.enqueue(959838846);
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		assertEquals("[959838846]", variable.toString());
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test6534() {
		Queue x = new Queue();
		x.enqueue(-492406014);
    }
    @Test
    public void test6535() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isFull();
		assertFalse(Var.isFull());
		Var.toString();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test6536() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(717828253);
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-1486901254);
		assertEquals(717828253, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(1124016044);
		variable.dequeue();
    }
    @Test
    public void test6537() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test6538() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.enqueue(1846060803);
		Var.isFull();
		Var.enqueue(1011466342);
		assertEquals("[1846060803, 1011466342]", Var.toString());
		Var.isEmpty();
		Var.enqueue(1797454441);
		assertFalse(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test6539() {
		Queue y = new Queue();
		y.enqueue(1684986225);
		assertEquals(1684986225, y.dequeue());
		y.enqueue(851254976);
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test6540() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.isEmpty();
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test6541() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.enqueue(1518952974);
		x.dequeue();
		x.dequeue();
		x.enqueue(-2040691892);
		x.dequeue();
		x.isEmpty();
		x.enqueue(-1937978316);
		x.isEmpty();
		x.toString();
		x.toString();
    }
    @Test
    public void test6542() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(123301498);
		assertFalse(variable.isEmpty());
		assertEquals(123301498, variable.dequeue());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
    }
    @Test
    public void test6543() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-1909009547);
		y.dequeue();
		y.isFull();
		y.isEmpty();
		y.enqueue(-125740477);
		y.enqueue(114288069);
    }
    @Test
    public void test6544() {
		Queue variable = new Queue();
		variable.enqueue(158573706);
		variable.toString();
		assertFalse(variable.isFull());
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test6545() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.enqueue(-1067623786);
		variable.enqueue(-1919924801);
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(1745412084);
		variable.enqueue(-1837541528);
    }
    @Test
    public void test6546() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-64905018);
		variable.enqueue(1086746149);
		assertFalse(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test6547() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		z.isFull();
		z.toString();
    }
    @Test
    public void test6548() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(1883282302);
		y.dequeue();
		y.enqueue(-281753382);
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.toString();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test6549() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isFull();
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.toString();
    }
    @Test
    public void test6550() {
		Queue z = new Queue();
		z.enqueue(700297782);
		z.enqueue(-1403508669);
		z.isEmpty();
		assertEquals(700297782, z.dequeue());
		z.isEmpty();
		assertFalse(z.isFull());
		z.isFull();
		z.toString();
		z.isFull();
		z.toString();
		z.enqueue(-91474055);
    }
    @Test
    public void test6551() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.toString();
		x.isEmpty();
		x.enqueue(-162710759);
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test6552() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.dequeue();
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(-227173245);
		assertTrue(x.isEmpty());
		x.enqueue(2132754781);
		x.isFull();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test6553() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.isEmpty();
		z.toString();
		z.enqueue(-820069088);
		assertEquals(-1, z.dequeue());
		z.enqueue(446408708);
    }
    @Test
    public void test6554() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.dequeue();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.dequeue();
    }
    @Test
    public void test6555() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test6556() {
		Queue variable = new Queue();
		variable.enqueue(1959738446);
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(808247268);
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test6557() {
		Queue z = new Queue();
		z.enqueue(35485817);
		z.enqueue(-1995594936);
		z.toString();
		z.enqueue(-10508671);
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test6558() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test6559() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.toString();
		x.isFull();
    }
    @Test
    public void test6560() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(-976374093);
		x.toString();
		x.isFull();
		assertTrue(x.isEmpty());
		x.toString();
		x.toString();
		x.isEmpty();
		x.enqueue(-983603513);
		x.enqueue(-1883049192);
		x.isEmpty();
    }
    @Test
    public void test6561() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(1063291533);
    }
    @Test
    public void test6562() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test6563() {
		Queue y = new Queue();
		y.toString();
		assertEquals("[]", y.toString());
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.enqueue(489494730);
		y.isFull();
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.enqueue(-782192578);
    }
    @Test
    public void test6564() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test6565() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(1979017102);
		variable.enqueue(1852048573);
		variable.dequeue();
    }
    @Test
    public void test6566() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test6567() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test6568() {
		Queue Var = new Queue();
		Var.enqueue(-927576322);
		Var.toString();
		Var.toString();
		Var.enqueue(968478806);
		Var.enqueue(-1431898234);
		Var.enqueue(1299432844);
    }
    @Test
    public void test6569() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-292698129);
		variable.enqueue(2001827190);
		variable.enqueue(-197880359);
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test6570() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(1879386886);
    }
    @Test
    public void test6571() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.toString();
		z.isEmpty();
		z.toString();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isFull();
		z.enqueue(-1864586589);
		z.dequeue();
    }
    @Test
    public void test6572() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(455217819);
		z.isEmpty();
		z.dequeue();
		z.enqueue(70266971);
    }
    @Test
    public void test6573() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test6574() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		assertEquals("[]", x.toString());
		x.enqueue(300717089);
		x.toString();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test6575() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-1146939956);
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(-89493735);
		Var.enqueue(1291720268);
		assertEquals(1291720268, Var.dequeue());
		Var.toString();
		Var.enqueue(-1920199849);
		Var.enqueue(-82292438);
		Var.dequeue();
    }
    @Test
    public void test6576() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.enqueue(1749964119);
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test6577() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isFull();
		z.dequeue();
		z.enqueue(811602116);
		z.isFull();
		assertFalse(z.isEmpty());
		z.toString();
		z.dequeue();
    }
    @Test
    public void test6578() {
		Queue z = new Queue();
		z.isFull();
		assertFalse(z.isFull());
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(1101967696);
		z.isFull();
		z.toString();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1343157183);
		z.isFull();
    }
    @Test
    public void test6579() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(246752056);
		x.toString();
		x.isEmpty();
		x.toString();
		x.enqueue(1110524170);
		x.toString();
		assertEquals("[246752056, 1110524170]", x.toString());
		x.isEmpty();
    }
    @Test
    public void test6580() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test6581() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.enqueue(2034741083);
		x.isFull();
		x.isFull();
		assertFalse(x.isFull());
		x.isEmpty();
		x.dequeue();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test6582() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test6583() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.toString();
		y.isFull();
		assertTrue(y.isEmpty());
		y.enqueue(-1939793510);
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test6584() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isFull();
		x.enqueue(-493959632);
		assertTrue(x.isEmpty());
		x.enqueue(-1997364281);
		assertEquals(-1, x.dequeue());
		x.enqueue(1339805405);
		x.isEmpty();
		x.enqueue(482667777);
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test6585() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1050086208);
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test6586() {
		Queue x = new Queue();
		x.enqueue(-1981544794);
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.toString();
		x.enqueue(-1828180487);
		assertFalse(x.isFull());
		x.enqueue(-1825649151);
		x.isFull();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test6587() {
		Queue x = new Queue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.enqueue(-418086087);
		x.dequeue();
		x.dequeue();
		x.enqueue(1456386634);
		x.dequeue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.enqueue(-1270595431);
		x.dequeue();
		x.toString();
    }
    @Test
    public void test6588() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test6589() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.isFull();
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isFull();
		assertFalse(y.isFull());
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test6590() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test6591() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.toString();
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test6592() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.enqueue(748470938);
		x.dequeue();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test6593() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(1987315811);
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test6594() {
		Queue x = new Queue();
		x.enqueue(-1430455719);
		x.dequeue();
		x.enqueue(303270477);
		x.enqueue(991003339);
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(-1064522464);
		x.isFull();
    }
    @Test
    public void test6595() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test6596() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test6597() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1398101266);
		variable.enqueue(-1779723748);
		variable.enqueue(-364680981);
		variable.enqueue(-1125744802);
		variable.enqueue(-1353139821);
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(1608314982);
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test6598() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test6599() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.enqueue(1913583504);
		y.enqueue(288879800);
		y.dequeue();
		y.isFull();
		assertFalse(y.isEmpty());
		assertFalse(y.isFull());
		y.isEmpty();
		y.dequeue();
		y.enqueue(-653348241);
    }
    @Test
    public void test6600() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.toString();
		y.isEmpty();
		y.dequeue();
		y.isFull();
		y.isFull();
		y.enqueue(-1333856774);
		y.enqueue(-1558501999);
		assertEquals("[]", y.toString());
		y.isFull();
    }
    @Test
    public void test6601() {
		Queue Var = new Queue();
		Var.enqueue(966966473);
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.toString();
		Var.enqueue(1062404004);
    }
    @Test
    public void test6602() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isEmpty();
		y.enqueue(282260319);
		assertEquals(282260319, y.dequeue());
		y.toString();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test6603() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.enqueue(-830708905);
		assertTrue(y.isEmpty());
		y.isEmpty();
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(-1273186645);
		y.enqueue(512781727);
    }
    @Test
    public void test6604() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-2005363183);
		z.isEmpty();
		z.dequeue();
		z.enqueue(-1404471044);
		z.dequeue();
		z.enqueue(-2070955874);
		z.isFull();
		z.enqueue(1531867504);
		assertFalse(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test6605() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test6606() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(-1405581833);
		variable.toString();
		variable.enqueue(1370004767);
		assertFalse(variable.isEmpty());
		assertFalse(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test6607() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
		assertFalse(y.isFull());
		y.isFull();
		y.toString();
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test6608() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.enqueue(-283500229);
		assertFalse(z.isFull());
		z.isFull();
		z.toString();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.toString();
    }
    @Test
    public void test6609() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(190466643);
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test6610() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.enqueue(1510156930);
		y.enqueue(20377962);
		y.isEmpty();
		y.toString();
		y.isFull();
    }
    @Test
    public void test6611() {
		Queue x = new Queue();
		x.enqueue(1685880133);
		x.dequeue();
    }
    @Test
    public void test6612() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(523506726);
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test6613() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(900472769);
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test6614() {
		Queue z = new Queue();
		z.enqueue(-515330394);
		z.dequeue();
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(-1966472723);
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.enqueue(-113464707);
		z.dequeue();
		z.enqueue(-1728640397);
		z.isEmpty();
		z.enqueue(-1327535041);
    }
    @Test
    public void test6615() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.enqueue(901087894);
		variable.isEmpty();
		variable.enqueue(-2046104922);
    }
    @Test
    public void test6616() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test6617() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-1440037566);
    }
    @Test
    public void test6618() {
		Queue Var = new Queue();
		Var.enqueue(617107444);
		Var.isFull();
		Var.enqueue(687002731);
		assertFalse(Var.isEmpty());
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		assertEquals(617107444, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test6619() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-173825619);
		variable.toString();
		variable.isEmpty();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test6620() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-1143245068);
    }
    @Test
    public void test6621() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isFull();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isFull();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test6622() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(-755805184);
		variable.enqueue(1456189500);
    }
    @Test
    public void test6623() {
		Queue y = new Queue();
		y.enqueue(-421000800);
		y.toString();
		y.enqueue(1174696343);
		y.enqueue(5859268);
		y.isFull();
		y.enqueue(-1727517828);
		y.dequeue();
		y.toString();
		y.enqueue(-499627695);
		y.dequeue();
    }
    @Test
    public void test6624() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test6625() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(1592226989);
    }
    @Test
    public void test6626() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.enqueue(850084870);
		x.isEmpty();
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(1489333123);
		x.isFull();
    }
    @Test
    public void test6627() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test6628() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.enqueue(339582270);
    }
    @Test
    public void test6629() {
		Queue Var = new Queue();
		Var.enqueue(-477736783);
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.enqueue(587182907);
		Var.enqueue(857048338);
		Var.isEmpty();
    }
    @Test
    public void test6630() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(1561212777);
		y.isFull();
		y.toString();
    }
    @Test
    public void test6631() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.toString();
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		y.dequeue();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.toString();
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test6632() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test6633() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test6634() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.dequeue();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test6635() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test6636() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test6637() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.toString();
		variable.toString();
		variable.toString();
		variable.toString();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test6638() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-2038763331);
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(-1508831556);
		x.enqueue(-1120481196);
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(1746262465);
		x.isFull();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test6639() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test6640() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(1575812633);
		variable.enqueue(1829477780);
		assertFalse(variable.isEmpty());
		variable.toString();
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		assertFalse(variable.isEmpty());
		assertEquals("[1829477780]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test6641() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test6642() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.toString();
		x.isFull();
		x.enqueue(840039114);
		x.toString();
    }
    @Test
    public void test6643() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(1567654143);
		assertEquals("[1567654143]", x.toString());
		x.dequeue();
		x.enqueue(-1552056832);
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test6644() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.enqueue(-624763959);
		z.toString();
		z.isEmpty();
		z.toString();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test6645() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test6646() {
		Queue x = new Queue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.enqueue(-1019586924);
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test6647() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-2107591166);
		variable.isFull();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test6648() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		assertFalse(x.isFull());
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isEmpty();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.enqueue(-861331533);
		x.dequeue();
    }
    @Test
    public void test6649() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.enqueue(200941545);
		y.toString();
		y.isFull();
		y.toString();
		y.isEmpty();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isEmpty();
		y.enqueue(697942271);
    }
    @Test
    public void test6650() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(356836788);
		variable.isFull();
		assertFalse(variable.isEmpty());
		variable.enqueue(950282881);
		variable.isFull();
		assertEquals(356836788, variable.dequeue());
		assertEquals(950282881, variable.dequeue());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test6651() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.enqueue(796642834);
		assertEquals(796642834, x.dequeue());
		assertFalse(x.isFull());
		x.enqueue(-638839758);
		x.isEmpty();
		assertFalse(x.isFull());
		x.isEmpty();
		x.enqueue(-727087473);
		x.isEmpty();
    }
    @Test
    public void test6652() {
		Queue variable = new Queue();
		variable.enqueue(-1419297972);
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(1522684227);
    }
    @Test
    public void test6653() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isFull();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test6654() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isFull();
		Var.enqueue(-1985071766);
		Var.dequeue();
    }
    @Test
    public void test6655() {
		Queue z = new Queue();
		z.enqueue(1645851827);
		z.dequeue();
		z.enqueue(1675261778);
		z.enqueue(925323676);
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test6656() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test6657() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(220793144);
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test6658() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(599587522);
		variable.isFull();
    }
    @Test
    public void test6659() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-2069728132);
		variable.enqueue(-102336269);
		variable.enqueue(-2111498140);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test6660() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(2048022043);
		Var.enqueue(101441581);
		assertEquals(2048022043, Var.dequeue());
		assertEquals("[101441581]", Var.toString());
		Var.isFull();
		Var.isEmpty();
		assertEquals("[101441581]", Var.toString());
		assertFalse(Var.isEmpty());
		assertFalse(Var.isEmpty());
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test6661() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.enqueue(190638723);
    }
    @Test
    public void test6662() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.isFull();
		x.isFull();
		x.enqueue(1338336340);
		x.toString();
		assertFalse(x.isEmpty());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.toString();
    }
    @Test
    public void test6663() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-931852232);
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test6664() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.enqueue(1856963032);
    }
    @Test
    public void test6665() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test6666() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test6667() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.enqueue(-233215566);
		y.enqueue(-1622877836);
		y.enqueue(-429113543);
		y.isFull();
		y.toString();
		y.isFull();
		y.enqueue(-1932531918);
		y.toString();
    }
    @Test
    public void test6668() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(2016758924);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-1236861825);
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test6669() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test6670() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test6671() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isFull();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-708946530);
		assertFalse(x.isFull());
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test6672() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.isEmpty();
		z.isFull();
		z.dequeue();
		z.enqueue(-2006343574);
		z.enqueue(215278423);
    }
    @Test
    public void test6673() {
		Queue variable = new Queue();
		variable.isFull();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.enqueue(189959276);
		variable.isFull();
		variable.enqueue(1392559501);
		variable.enqueue(839964306);
		variable.toString();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test6674() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(655587586);
		Var.enqueue(-1155335717);
		Var.isFull();
    }
    @Test
    public void test6675() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.enqueue(426699842);
		x.isEmpty();
    }
    @Test
    public void test6676() {
		Queue variable = new Queue();
		variable.enqueue(-808568499);
		assertTrue(variable.isEmpty());
		variable.enqueue(1848573721);
		variable.isFull();
		variable.isFull();
		variable.toString();
		variable.enqueue(1836204779);
		variable.enqueue(-497621424);
		variable.toString();
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test6677() {
		Queue y = new Queue();
		y.toString();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isFull();
		y.enqueue(-1718356203);
		assertFalse(y.isFull());
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test6678() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.isFull();
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test6679() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1089792066);
		variable.toString();
		variable.toString();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test6680() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-369911277);
		y.enqueue(-145148767);
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test6681() {
		Queue variable = new Queue();
		variable.enqueue(-153328492);
		variable.enqueue(-916124983);
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-662601743);
    }
    @Test
    public void test6682() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.toString();
		y.isFull();
		y.isFull();
		y.enqueue(234798409);
		y.isFull();
		assertEquals("[234798409]", y.toString());
		y.isFull();
		y.dequeue();
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test6683() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test6684() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isEmpty();
		x.enqueue(1342726138);
		x.dequeue();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test6685() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(490151839);
		z.isEmpty();
		z.toString();
		z.isEmpty();
		assertEquals("[490151839]", z.toString());
		z.enqueue(-1518940825);
    }
    @Test
    public void test6686() {
		Queue y = new Queue();
		y.enqueue(-699017295);
		y.enqueue(1381932881);
		y.enqueue(-1932286362);
		assertEquals("[1381932881]", y.toString());
		y.dequeue();
		y.dequeue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.dequeue();
    }
    @Test
    public void test6687() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(1929044510);
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test6688() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test6689() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test6690() {
		Queue z = new Queue();
		z.enqueue(-901298687);
		z.enqueue(1262144551);
		z.toString();
		z.enqueue(-155891897);
		z.toString();
		assertFalse(z.isEmpty());
		z.isEmpty();
		z.isFull();
		z.toString();
    }
    @Test
    public void test6691() {
		Queue variable = new Queue();
		variable.enqueue(795766054);
		variable.enqueue(1554587664);
		variable.toString();
		assertEquals(795766054, variable.dequeue());
		variable.isFull();
		assertFalse(variable.isEmpty());
		assertEquals("[1554587664]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test6692() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.dequeue();
		assertTrue(y.isEmpty());
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test6693() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(1733437673);
		assertFalse(variable.isFull());
		assertEquals("[1733437673]", variable.toString());
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(-16769384);
		assertEquals(1733437673, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.toString();
    }
    @Test
    public void test6694() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(619912000);
		assertEquals(619912000, y.dequeue());
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test6695() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
		y.isEmpty();
		y.isFull();
		y.enqueue(681207465);
		y.isEmpty();
		y.enqueue(-1972218765);
    }
    @Test
    public void test6696() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(591424502);
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-1166485921);
		variable.dequeue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.toString();
    }
    @Test
    public void test6697() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isFull();
		variable.toString();
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test6698() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test6699() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(-451610868);
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isFull();
		z.enqueue(353421378);
		z.toString();
		assertFalse(z.isFull());
		z.isFull();
		assertEquals(353421378, z.dequeue());
		assertTrue(z.isEmpty());
		z.toString();
    }
    @Test
    public void test6700() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(172509456);
		Var.isFull();
    }
    @Test
    public void test6701() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test6702() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test6703() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.enqueue(-2033253536);
		y.isEmpty();
		y.isFull();
		y.enqueue(32127938);
		assertFalse(y.isEmpty());
		assertEquals(32127938, y.dequeue());
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isFull();
		assertFalse(y.isFull());
		y.isFull();
		assertEquals("[]", y.toString());
		y.isFull();
    }
    @Test
    public void test6704() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.isFull();
		y.toString();
		y.enqueue(1371947336);
		assertEquals("[1371947336]", y.toString());
		assertFalse(y.isEmpty());
		y.toString();
		y.toString();
		assertEquals("[1371947336]", y.toString());
		assertFalse(y.isFull());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test6705() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(-712694703);
		y.enqueue(-1968881032);
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test6706() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.isEmpty();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test6707() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(-38768045);
		x.isEmpty();
		x.enqueue(-648089030);
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test6708() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(1574135494);
    }
    @Test
    public void test6709() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(-1290083999);
		assertTrue(variable.isEmpty());
		variable.enqueue(-326545060);
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-636691284);
    }
    @Test
    public void test6710() {
		Queue y = new Queue();
		y.enqueue(1816599659);
		y.dequeue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.dequeue();
		y.dequeue();
		y.enqueue(-1339213206);
		y.toString();
    }
    @Test
    public void test6711() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(179338128);
    }
    @Test
    public void test6712() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.enqueue(209854618);
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.isFull();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.toString();
		x.dequeue();
    }
    @Test
    public void test6713() {
		Queue variable = new Queue();
		variable.enqueue(1949206469);
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(-1458937242);
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		variable.enqueue(-540997623);
    }
    @Test
    public void test6714() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(1041848266);
		x.enqueue(-1815038933);
		x.isFull();
		assertEquals("[1041848266]", x.toString());
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test6715() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isEmpty();
		z.isFull();
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.enqueue(-1883404272);
    }
    @Test
    public void test6716() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
    }
    @Test
    public void test6717() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.enqueue(-1611902054);
		y.isFull();
    }
    @Test
    public void test6718() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.enqueue(-618912494);
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1019931507);
		Var.enqueue(1551712529);
    }
    @Test
    public void test6719() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(-181521353);
		x.dequeue();
		x.enqueue(338225845);
		x.isEmpty();
    }
    @Test
    public void test6720() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test6721() {
		Queue z = new Queue();
		z.toString();
		assertFalse(z.isFull());
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test6722() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-1220260740);
		assertEquals(-1, Var.dequeue());
		Var.enqueue(802648514);
		assertFalse(Var.isFull());
		Var.enqueue(-1698038134);
		Var.enqueue(1123342085);
    }
    @Test
    public void test6723() {
		Queue variable = new Queue();
		variable.enqueue(1448730641);
		variable.enqueue(660690372);
    }
    @Test
    public void test6724() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isFull();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.enqueue(745234498);
		y.enqueue(1653619939);
		y.enqueue(-871855063);
		y.enqueue(-1368259620);
		y.dequeue();
		y.enqueue(-169924660);
    }
    @Test
    public void test6725() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		variable.toString();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test6726() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1952892109);
    }
    @Test
    public void test6727() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		assertEquals("[]", z.toString());
		z.enqueue(1072425389);
		z.dequeue();
		z.toString();
		z.enqueue(275239793);
		z.isEmpty();
    }
    @Test
    public void test6728() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.isFull();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.enqueue(2073948411);
    }
    @Test
    public void test6729() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
    }
    @Test
    public void test6730() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.toString();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.toString();
		x.enqueue(828118245);
		x.isEmpty();
		assertEquals("[828118245]", x.toString());
		assertEquals(828118245, x.dequeue());
		x.toString();
    }
    @Test
    public void test6731() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test6732() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test6733() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.enqueue(-869898216);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(1163931321);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test6734() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1177667495);
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test6735() {
		Queue x = new Queue();
		x.enqueue(94221171);
		x.dequeue();
    }
    @Test
    public void test6736() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test6737() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.toString();
		y.toString();
		y.enqueue(354952008);
		y.isEmpty();
    }
    @Test
    public void test6738() {
		Queue z = new Queue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(1925570938);
		z.toString();
		z.enqueue(1098194159);
		assertFalse(z.isEmpty());
		z.toString();
    }
    @Test
    public void test6739() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.enqueue(-717820194);
		y.toString();
		y.enqueue(1215817466);
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test6740() {
		Queue z = new Queue();
		z.enqueue(-1790770061);
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(-1527508232);
		z.enqueue(74762845);
		z.dequeue();
		z.toString();
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test6741() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test6742() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isFull();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test6743() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(1859563182);
		z.enqueue(397733394);
		assertFalse(z.isFull());
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test6744() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.isFull();
		assertFalse(z.isFull());
		z.enqueue(-1979865282);
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isFull();
    }
    @Test
    public void test6745() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isFull();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-470348687);
		variable.enqueue(1265840695);
    }
    @Test
    public void test6746() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		assertTrue(z.isEmpty());
		z.enqueue(74649438);
		assertFalse(z.isFull());
		z.enqueue(1722696123);
		z.toString();
		z.dequeue();
		assertEquals("[1722696123]", z.toString());
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test6747() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test6748() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.toString();
		assertFalse(x.isFull());
		x.isFull();
		x.toString();
		x.dequeue();
		x.isFull();
		x.enqueue(-1344194020);
		x.dequeue();
    }
    @Test
    public void test6749() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.isEmpty();
		z.isFull();
		z.toString();
		z.toString();
    }
    @Test
    public void test6750() {
		Queue y = new Queue();
		y.enqueue(1454583749);
		y.enqueue(1261177363);
    }
    @Test
    public void test6751() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(940224290);
		assertEquals(940224290, variable.dequeue());
		variable.isFull();
		variable.enqueue(60520708);
		assertFalse(variable.isFull());
		variable.toString();
		variable.dequeue();
		variable.enqueue(-323743403);
    }
    @Test
    public void test6752() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test6753() {
		Queue z = new Queue();
		z.enqueue(154543698);
		z.isEmpty();
		z.isFull();
		assertEquals("[154543698]", z.toString());
		z.enqueue(-1421668578);
    }
    @Test
    public void test6754() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.enqueue(854466996);
		y.enqueue(-521752492);
		y.isFull();
		y.toString();
		y.toString();
		y.enqueue(1457946804);
    }
    @Test
    public void test6755() {
		Queue Var = new Queue();
		Var.enqueue(403676170);
		assertFalse(Var.isEmpty());
		assertEquals(403676170, Var.dequeue());
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(-733839360);
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.enqueue(1211664206);
		assertFalse(Var.isFull());
		Var.enqueue(221748311);
    }
    @Test
    public void test6756() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-384731656);
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test6757() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(725945800);
		assertFalse(Var.isEmpty());
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test6758() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test6759() {
		Queue Var = new Queue();
		Var.enqueue(-230102606);
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test6760() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(583009826);
		assertFalse(Var.isFull());
		Var.isFull();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test6761() {
		Queue y = new Queue();
		y.enqueue(-2052480832);
		y.isEmpty();
    }
    @Test
    public void test6762() {
		Queue variable = new Queue();
		variable.enqueue(-2118912108);
		variable.isEmpty();
		variable.enqueue(-1357049853);
		variable.toString();
		variable.enqueue(1525275304);
		variable.isEmpty();
		variable.isFull();
		assertEquals(1525275304, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test6763() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.enqueue(852328322);
		y.isFull();
		y.toString();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test6764() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.enqueue(-962037245);
		x.isFull();
		x.toString();
    }
    @Test
    public void test6765() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(1074866789);
		assertEquals("[1074866789]", variable.toString());
		assertFalse(variable.isEmpty());
		assertEquals("[1074866789]", variable.toString());
		assertFalse(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test6766() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test6767() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test6768() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test6769() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test6770() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(-276689818);
		z.isFull();
    }
    @Test
    public void test6771() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(732388668);
		assertEquals(732388668, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.toString();
		z.enqueue(-1079498339);
		assertEquals("[]", z.toString());
		z.toString();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.enqueue(-983349550);
    }
    @Test
    public void test6772() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.toString();
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test6773() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test6774() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-378588688);
		Var.isFull();
		Var.dequeue();
		Var.enqueue(392492467);
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test6775() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.toString();
		z.toString();
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
		z.toString();
		assertFalse(z.isFull());
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test6776() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test6777() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1472473100);
    }
    @Test
    public void test6778() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isFull();
		y.enqueue(1785615877);
		assertFalse(y.isFull());
		assertFalse(y.isEmpty());
		y.enqueue(1311024166);
		y.enqueue(-1893624427);
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
		y.enqueue(1843100078);
    }
    @Test
    public void test6779() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.enqueue(1618280482);
		Var.enqueue(1997892049);
		Var.enqueue(-1928983301);
		Var.isEmpty();
		assertEquals(1618280482, Var.dequeue());
		Var.dequeue();
		Var.enqueue(-1246941071);
		Var.toString();
    }
    @Test
    public void test6780() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test6781() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.enqueue(-125269353);
		x.enqueue(1642887273);
		assertEquals("[1642887273]", x.toString());
		x.enqueue(-119707279);
		x.isEmpty();
		x.toString();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test6782() {
		Queue Var = new Queue();
		Var.enqueue(2008900125);
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test6783() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test6784() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(1646754162);
		assertEquals("[1646754162]", Var.toString());
		Var.enqueue(-607998013);
		Var.dequeue();
		Var.enqueue(-1854675757);
    }
    @Test
    public void test6785() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.enqueue(-481591604);
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(338643046);
		y.isFull();
		y.enqueue(53233271);
		y.dequeue();
		y.toString();
		y.enqueue(-1573431670);
    }
    @Test
    public void test6786() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test6787() {
		Queue variable = new Queue();
		variable.enqueue(-1086789554);
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(1322859757);
		assertEquals("[1322859757]", variable.toString());
		variable.isFull();
		variable.isFull();
		variable.enqueue(-1402599742);
		variable.dequeue();
    }
    @Test
    public void test6788() {
		Queue Var = new Queue();
		Var.enqueue(187815890);
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test6789() {
		Queue variable = new Queue();
		variable.enqueue(1499382607);
		variable.toString();
		variable.isFull();
		variable.isFull();
		variable.enqueue(202773483);
		variable.isEmpty();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test6790() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.toString();
		z.dequeue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test6791() {
		Queue z = new Queue();
		z.enqueue(-1322665412);
		z.dequeue();
    }
    @Test
    public void test6792() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.toString();
		assertFalse(y.isFull());
		y.isFull();
		y.isFull();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test6793() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(-1900320752);
		assertEquals(-1, z.dequeue());
		z.toString();
    }
    @Test
    public void test6794() {
		Queue y = new Queue();
		y.enqueue(-1997376993);
    }
    @Test
    public void test6795() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test6796() {
		Queue z = new Queue();
		z.enqueue(1989490069);
		z.isEmpty();
		z.isFull();
		assertFalse(z.isEmpty());
		z.toString();
    }
    @Test
    public void test6797() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
		variable.enqueue(-253803358);
    }
    @Test
    public void test6798() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(-1053051586);
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(901200442);
    }
    @Test
    public void test6799() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(629335327);
		z.dequeue();
		z.enqueue(196816146);
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test6800() {
		Queue x = new Queue();
		x.enqueue(1352952048);
		assertEquals(1352952048, x.dequeue());
		x.isEmpty();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test6801() {
		Queue variable = new Queue();
		variable.enqueue(-148817124);
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(856884759);
		variable.isEmpty();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test6802() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-1232230002);
		z.toString();
		z.dequeue();
    }
    @Test
    public void test6803() {
		Queue z = new Queue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.toString();
		z.dequeue();
		z.dequeue();
		z.toString();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test6804() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.enqueue(30969750);
		assertFalse(z.isFull());
		z.enqueue(-1431801739);
		z.enqueue(1042039627);
		z.enqueue(1643244929);
		z.toString();
    }
    @Test
    public void test6805() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test6806() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test6807() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-446270568);
		y.enqueue(2035675307);
		y.enqueue(-1889304383);
		assertFalse(y.isFull());
		assertFalse(y.isEmpty());
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test6808() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-161951901);
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.enqueue(-1166800097);
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test6809() {
		Queue variable = new Queue();
		variable.enqueue(-497917365);
		variable.dequeue();
    }
    @Test
    public void test6810() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.enqueue(878979296);
		assertEquals(878979296, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.enqueue(35484486);
    }
    @Test
    public void test6811() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-376750656);
		y.enqueue(1108208432);
		y.isFull();
		assertFalse(y.isFull());
		assertEquals("[1108208432]", y.toString());
		y.enqueue(-1071174089);
		assertFalse(y.isEmpty());
		assertEquals(1108208432, y.dequeue());
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test6812() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.toString();
		assertFalse(x.isFull());
		x.dequeue();
		x.enqueue(-1196440448);
		x.toString();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test6813() {
		Queue z = new Queue();
		z.enqueue(-1145685476);
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.enqueue(-1068683094);
		assertEquals(-1, z.dequeue());
		z.toString();
		z.toString();
		z.enqueue(1427441111);
		z.toString();
		assertEquals(1427441111, z.dequeue());
		z.toString();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test6814() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.enqueue(-1869726887);
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.enqueue(-1009531937);
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(1189776522);
    }
    @Test
    public void test6815() {
		Queue z = new Queue();
		z.dequeue();
		assertFalse(z.isFull());
		z.isFull();
		z.toString();
		z.toString();
		z.enqueue(-850018624);
		z.enqueue(-1835348451);
		z.isFull();
		z.toString();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test6816() {
		Queue Var = new Queue();
		Var.enqueue(-1159410652);
		Var.enqueue(-840808683);
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test6817() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(554103702);
		assertEquals(554103702, variable.dequeue());
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test6818() {
		Queue x = new Queue();
		x.enqueue(1764007287);
		x.enqueue(-1812769553);
    }
    @Test
    public void test6819() {
		Queue Var = new Queue();
		Var.enqueue(1343170591);
		assertFalse(Var.isEmpty());
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertEquals(1343170591, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isFull();
		Var.enqueue(-794375513);
		Var.isFull();
		Var.enqueue(878363207);
		Var.enqueue(-222320296);
    }
    @Test
    public void test6820() {
		Queue z = new Queue();
		z.toString();
		assertTrue(z.isEmpty());
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test6821() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test6822() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.enqueue(-139486911);
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isFull();
		y.dequeue();
		y.isFull();
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test6823() {
		Queue variable = new Queue();
		variable.enqueue(2003596699);
		variable.enqueue(-1812177402);
		variable.isFull();
    }
    @Test
    public void test6824() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(-1521872669);
		variable.toString();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(2135327347);
		assertFalse(variable.isEmpty());
		variable.enqueue(270516050);
		variable.dequeue();
    }
    @Test
    public void test6825() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(-996526927);
		y.enqueue(3248531);
    }
    @Test
    public void test6826() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.dequeue();
		z.enqueue(-1856878881);
		assertTrue(z.isEmpty());
		z.isFull();
		z.isFull();
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test6827() {
		Queue z = new Queue();
		z.enqueue(1875133769);
		z.toString();
		z.toString();
		z.dequeue();
		z.toString();
		z.dequeue();
		z.isEmpty();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test6828() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test6829() {
		Queue Var = new Queue();
		Var.enqueue(-508726266);
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(2060902980);
		assertEquals(2060902980, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test6830() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test6831() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1054768480);
		Var.enqueue(83849873);
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
		Var.enqueue(1938005858);
		Var.enqueue(360117949);
		Var.isEmpty();
		Var.enqueue(-1476009068);
		Var.enqueue(-10319461);
    }
    @Test
    public void test6832() {
		Queue Var = new Queue();
		Var.enqueue(-193679222);
		Var.enqueue(-1899537803);
		Var.isEmpty();
		Var.enqueue(-1445058506);
		Var.isEmpty();
    }
    @Test
    public void test6833() {
		Queue variable = new Queue();
		variable.enqueue(-1860224701);
    }
    @Test
    public void test6834() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-1322848891);
		x.isEmpty();
		x.enqueue(-1417259270);
		x.toString();
		x.dequeue();
    }
    @Test
    public void test6835() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-1310634691);
		y.enqueue(911888046);
    }
    @Test
    public void test6836() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.enqueue(2084652922);
		y.dequeue();
		y.dequeue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.isFull();
		y.dequeue();
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test6837() {
		Queue Var = new Queue();
		Var.enqueue(-418913221);
		Var.isEmpty();
		Var.enqueue(-858975340);
		Var.isFull();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(438605320);
		Var.isEmpty();
    }
    @Test
    public void test6838() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test6839() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(-147392954);
		z.dequeue();
    }
    @Test
    public void test6840() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test6841() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(2028461727);
		x.isFull();
		x.isEmpty();
		x.isFull();
		assertEquals("[2028461727]", x.toString());
		x.dequeue();
		x.isFull();
		x.enqueue(57814717);
		x.enqueue(-81861863);
		assertFalse(x.isEmpty());
		x.enqueue(-2031089827);
		assertFalse(x.isFull());
		assertEquals(57814717, x.dequeue());
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test6842() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test6843() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(895847709);
		x.toString();
		x.enqueue(-225555929);
    }
    @Test
    public void test6844() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-704373057);
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isEmpty();
		Var.enqueue(1071777354);
		assertFalse(Var.isFull());
		Var.toString();
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.enqueue(230379789);
		Var.isEmpty();
    }
    @Test
    public void test6845() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test6846() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(1218598325);
		Var.enqueue(-803718888);
		assertEquals("[1218598325]", Var.toString());
		assertEquals(1218598325, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test6847() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test6848() {
		Queue variable = new Queue();
		variable.enqueue(1387027449);
		variable.isFull();
		variable.toString();
		variable.enqueue(-757833490);
		variable.isEmpty();
		assertEquals(1387027449, variable.dequeue());
		variable.enqueue(-1295624889);
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1820599867);
		variable.enqueue(1810119291);
    }
    @Test
    public void test6849() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(-1717985602);
    }
    @Test
    public void test6850() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.enqueue(953344681);
    }
    @Test
    public void test6851() {
		Queue z = new Queue();
		z.enqueue(-1183350477);
		z.dequeue();
		z.isFull();
		z.enqueue(391847032);
		z.dequeue();
		z.toString();
    }
    @Test
    public void test6852() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test6853() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(299826993);
		Var.enqueue(2130461401);
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test6854() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.isFull();
		variable.toString();
		variable.enqueue(-1107556369);
		assertEquals(-1, variable.dequeue());
		variable.enqueue(333093898);
		assertFalse(variable.isEmpty());
		variable.isFull();
		variable.dequeue();
		variable.enqueue(1703901587);
    }
    @Test
    public void test6855() {
		Queue Var = new Queue();
		Var.enqueue(-1464973606);
		Var.enqueue(1236223403);
		assertFalse(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test6856() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(4728106);
		Var.isEmpty();
		Var.enqueue(593979658);
		Var.enqueue(-1794331258);
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test6857() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(2024699019);
		assertEquals("[2024699019]", y.toString());
		y.enqueue(-1152374959);
    }
    @Test
    public void test6858() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(1238050702);
    }
    @Test
    public void test6859() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1788678455);
		variable.toString();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(220357474);
    }
    @Test
    public void test6860() {
		Queue y = new Queue();
		y.enqueue(1040287677);
		assertFalse(y.isEmpty());
		y.toString();
		y.isEmpty();
		y.isEmpty();
		y.toString();
		assertFalse(y.isFull());
		assertEquals(1040287677, y.dequeue());
		y.isFull();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(2136431428);
    }
    @Test
    public void test6861() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-558038818);
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-495454512);
    }
    @Test
    public void test6862() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test6863() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(893062445);
		Var.isFull();
		Var.isFull();
		Var.toString();
		assertEquals("[893062445]", Var.toString());
		Var.enqueue(721509319);
		assertFalse(Var.isFull());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test6864() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(172959272);
		x.toString();
		x.enqueue(-1372269963);
		x.isFull();
		x.isEmpty();
		x.isFull();
		x.toString();
    }
    @Test
    public void test6865() {
		Queue Var = new Queue();
		Var.enqueue(964019999);
		assertEquals("[964019999]", Var.toString());
		Var.toString();
		assertEquals("[964019999]", Var.toString());
		Var.isFull();
		assertEquals(964019999, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test6866() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test6867() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-1708422629);
		variable.dequeue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test6868() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test6869() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.isFull();
		z.toString();
    }
    @Test
    public void test6870() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test6871() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.isEmpty();
		z.dequeue();
		z.enqueue(607215032);
		z.toString();
		z.enqueue(998895698);
    }
    @Test
    public void test6872() {
		Queue Var = new Queue();
		Var.enqueue(-215921715);
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test6873() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(-519945216);
		z.isFull();
		z.enqueue(-966120612);
		z.toString();
		z.dequeue();
    }
    @Test
    public void test6874() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test6875() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(1082824340);
		variable.toString();
    }
    @Test
    public void test6876() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.dequeue();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test6877() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.toString();
		x.enqueue(1821761642);
		x.isFull();
    }
    @Test
    public void test6878() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-819590425);
		Var.enqueue(-837142684);
		Var.isFull();
		Var.enqueue(-748044426);
		Var.enqueue(1139080652);
    }
    @Test
    public void test6879() {
		Queue x = new Queue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.enqueue(1694392286);
    }
    @Test
    public void test6880() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.enqueue(1731815070);
		y.toString();
		y.enqueue(-1626171209);
		y.toString();
		y.toString();
		y.toString();
		y.enqueue(-1886297327);
    }
    @Test
    public void test6881() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
    }
    @Test
    public void test6882() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(1823117244);
		y.toString();
		y.dequeue();
		y.toString();
		y.enqueue(-1532088241);
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.isFull();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test6883() {
		Queue variable = new Queue();
		variable.enqueue(1710667572);
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
		variable.toString();
		variable.enqueue(521724121);
		variable.toString();
		variable.toString();
    }
    @Test
    public void test6884() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test6885() {
		Queue y = new Queue();
		y.enqueue(1418923661);
		assertEquals(1418923661, y.dequeue());
		y.toString();
		assertTrue(y.isEmpty());
		y.toString();
		y.enqueue(320070069);
		y.toString();
    }
    @Test
    public void test6886() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(1455613122);
		x.enqueue(1821861158);
    }
    @Test
    public void test6887() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test6888() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.isFull();
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test6889() {
		Queue Var = new Queue();
		Var.enqueue(436878);
		Var.isFull();
		Var.enqueue(-124500239);
    }
    @Test
    public void test6890() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test6891() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.enqueue(1775413217);
    }
    @Test
    public void test6892() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.dequeue();
		y.isFull();
		y.isEmpty();
		y.isFull();
		y.enqueue(-609836952);
		y.toString();
		y.toString();
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(-98958122);
    }
    @Test
    public void test6893() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test6894() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test6895() {
		Queue z = new Queue();
		z.enqueue(1655060425);
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		z.enqueue(101282815);
		z.dequeue();
    }
    @Test
    public void test6896() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-1652539363);
		z.dequeue();
		z.enqueue(1868388476);
    }
    @Test
    public void test6897() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(1500517267);
		assertEquals("[1500517267]", Var.toString());
		assertFalse(Var.isFull());
		Var.enqueue(1615788382);
    }
    @Test
    public void test6898() {
		Queue y = new Queue();
		y.enqueue(-964708665);
		y.isFull();
		y.enqueue(-1978292666);
		y.enqueue(-749643351);
		y.isEmpty();
    }
    @Test
    public void test6899() {
		Queue y = new Queue();
		y.toString();
		assertEquals("[]", y.toString());
		y.isFull();
		y.toString();
		y.toString();
		y.dequeue();
		y.isFull();
		y.enqueue(-1486473233);
    }
    @Test
    public void test6900() {
		Queue x = new Queue();
		x.enqueue(1728994411);
		x.dequeue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.toString();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.enqueue(-341537518);
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test6901() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(1583709406);
		Var.isFull();
		Var.toString();
		Var.toString();
		assertEquals(1583709406, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test6902() {
		Queue x = new Queue();
		x.enqueue(446943189);
		x.dequeue();
		x.enqueue(-1067480425);
		assertEquals("[]", x.toString());
		x.dequeue();
		assertFalse(x.isFull());
		x.dequeue();
		x.enqueue(1029218575);
		x.enqueue(2075982535);
    }
    @Test
    public void test6903() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(497904544);
		variable.isEmpty();
    }
    @Test
    public void test6904() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test6905() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.toString();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test6906() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test6907() {
		Queue z = new Queue();
		z.enqueue(-1479238915);
		z.isEmpty();
		z.isEmpty();
		z.toString();
		z.toString();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.isEmpty();
		z.toString();
		z.enqueue(-324810077);
    }
    @Test
    public void test6908() {
		Queue variable = new Queue();
		variable.enqueue(-1058366760);
    }
    @Test
    public void test6909() {
		Queue z = new Queue();
		z.toString();
		assertFalse(z.isFull());
		z.isFull();
		assertTrue(z.isEmpty());
		z.enqueue(-1512058637);
		z.enqueue(1320569005);
		assertEquals("[1320569005]", z.toString());
		z.isFull();
    }
    @Test
    public void test6910() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-1574179366);
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test6911() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test6912() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test6913() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test6914() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(-2095932017);
    }
    @Test
    public void test6915() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test6916() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isFull();
		y.dequeue();
		y.enqueue(497827869);
		assertFalse(y.isEmpty());
		assertFalse(y.isEmpty());
		y.isEmpty();
		assertEquals(497827869, y.dequeue());
		assertFalse(y.isFull());
		y.isFull();
		y.isEmpty();
		y.toString();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test6917() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-617356149);
		variable.toString();
    }
    @Test
    public void test6918() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(-267342672);
		z.isFull();
		z.isFull();
		z.enqueue(-1513003719);
		assertEquals("[]", z.toString());
		z.enqueue(877328454);
    }
    @Test
    public void test6919() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(269632927);
		y.toString();
		y.dequeue();
		y.enqueue(945193958);
    }
    @Test
    public void test6920() {
		Queue variable = new Queue();
		variable.enqueue(-1868520928);
		variable.enqueue(1438730512);
		assertEquals(1438730512, variable.dequeue());
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test6921() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
		y.dequeue();
		y.isEmpty();
		y.enqueue(257450238);
		y.toString();
    }
    @Test
    public void test6922() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(-2096466733);
    }
    @Test
    public void test6923() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-349844657);
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test6924() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test6925() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-754487420);
		variable.enqueue(-228542202);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(-1436439478);
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test6926() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test6927() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(1959256105);
		assertFalse(Var.isEmpty());
		Var.enqueue(-1623445734);
		Var.dequeue();
		Var.enqueue(-1610481686);
		Var.enqueue(-619250494);
		Var.enqueue(-1554557121);
    }
    @Test
    public void test6928() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(444689444);
		Var.isFull();
		Var.enqueue(2076294165);
		Var.dequeue();
		assertEquals("[2076294165]", Var.toString());
		Var.toString();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		Var.enqueue(-347374439);
		Var.toString();
    }
    @Test
    public void test6929() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-351655711);
    }
    @Test
    public void test6930() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test6931() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		Var.enqueue(-186283338);
    }
    @Test
    public void test6932() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test6933() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test6934() {
		Queue z = new Queue();
		z.enqueue(1404400940);
		z.enqueue(2095097226);
		assertFalse(z.isEmpty());
		z.enqueue(1331796288);
		z.toString();
		z.dequeue();
		z.toString();
		assertEquals(2095097226, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test6935() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(2112230672);
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test6936() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		Var.enqueue(789130871);
		Var.isEmpty();
		assertEquals(789130871, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test6937() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.isEmpty();
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(514749077);
		assertEquals("[514749077]", y.toString());
		assertFalse(y.isEmpty());
		y.enqueue(1151025590);
		y.enqueue(652782644);
		y.dequeue();
    }
    @Test
    public void test6938() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.toString();
		y.enqueue(992395424);
    }
    @Test
    public void test6939() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test6940() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test6941() {
		Queue Var = new Queue();
		Var.enqueue(-149843193);
		Var.toString();
		assertFalse(Var.isFull());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test6942() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1616565480);
		Var.toString();
    }
    @Test
    public void test6943() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(963735182);
		z.toString();
    }
    @Test
    public void test6944() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.toString();
		y.dequeue();
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(-1988933106);
		y.isEmpty();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test6945() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.enqueue(-137237658);
    }
    @Test
    public void test6946() {
		Queue x = new Queue();
		x.toString();
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(-1158932484);
		x.toString();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isFull();
		x.toString();
		x.enqueue(-332870817);
    }
    @Test
    public void test6947() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test6948() {
		Queue z = new Queue();
		z.enqueue(1955686464);
		z.toString();
		z.toString();
		assertFalse(z.isFull());
		z.isEmpty();
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(2137359306);
		z.enqueue(-374741882);
		z.toString();
		z.enqueue(1724312640);
    }
    @Test
    public void test6949() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.toString();
		assertEquals("[]", y.toString());
		y.toString();
		y.enqueue(1778008869);
		y.isFull();
		y.isFull();
    }
    @Test
    public void test6950() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.enqueue(-747915468);
		y.toString();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test6951() {
		Queue Var = new Queue();
		Var.enqueue(1140091830);
		assertEquals("[1140091830]", Var.toString());
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-676197638);
		Var.isEmpty();
		assertEquals("[1140091830]", Var.toString());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test6952() {
		Queue Var = new Queue();
		Var.enqueue(-581756709);
		Var.isEmpty();
		Var.enqueue(1203166710);
		Var.toString();
		assertFalse(Var.isFull());
		assertEquals("[1203166710]", Var.toString());
		assertEquals("[1203166710]", Var.toString());
		Var.enqueue(1025900933);
    }
    @Test
    public void test6953() {
		Queue variable = new Queue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test6954() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test6955() {
		Queue y = new Queue();
		y.enqueue(74035176);
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.dequeue();
		y.enqueue(1142178277);
		y.enqueue(-2139882229);
    }
    @Test
    public void test6956() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.dequeue();
		z.isFull();
		z.isEmpty();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.enqueue(140024564);
		assertEquals(140024564, z.dequeue());
		z.toString();
    }
    @Test
    public void test6957() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.toString();
		z.toString();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isFull();
		assertTrue(z.isEmpty());
		z.toString();
		z.isFull();
		z.toString();
    }
    @Test
    public void test6958() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-864137346);
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(396641365);
    }
    @Test
    public void test6959() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.enqueue(-1828006948);
		Var.dequeue();
    }
    @Test
    public void test6960() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test6961() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.enqueue(847568797);
		Var.enqueue(2023125031);
		assertEquals("[847568797, 2023125031]", Var.toString());
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertFalse(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test6962() {
		Queue z = new Queue();
		z.enqueue(-733076613);
    }
    @Test
    public void test6963() {
		Queue z = new Queue();
		z.enqueue(-2094584283);
		z.enqueue(422015782);
		assertFalse(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test6964() {
		Queue Var = new Queue();
		Var.enqueue(-1533050952);
		Var.enqueue(1989566559);
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(2123233683);
		Var.isFull();
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.isEmpty();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test6965() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.enqueue(-1266368959);
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.isFull();
		z.toString();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test6966() {
		Queue y = new Queue();
		y.enqueue(-1079097446);
    }
    @Test
    public void test6967() {
		Queue variable = new Queue();
		variable.enqueue(-1630727094);
    }
    @Test
    public void test6968() {
		Queue x = new Queue();
		x.enqueue(-2072894794);
		x.toString();
		x.isEmpty();
		x.enqueue(1600616269);
    }
    @Test
    public void test6969() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test6970() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.toString();
		Var.enqueue(-992711695);
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test6971() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(-1025450171);
		Var.dequeue();
		Var.isFull();
		Var.isFull();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test6972() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(835982728);
		assertEquals("[835982728]", variable.toString());
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-602222256);
    }
    @Test
    public void test6973() {
		Queue x = new Queue();
		x.enqueue(-772603013);
		x.isFull();
		x.toString();
		x.dequeue();
		x.toString();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.enqueue(-1819540033);
    }
    @Test
    public void test6974() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test6975() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(924628297);
    }
    @Test
    public void test6976() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.toString();
		x.isFull();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.enqueue(1203262406);
		x.isEmpty();
		assertEquals("[1203262406]", x.toString());
		x.toString();
		x.isEmpty();
		x.enqueue(1378348356);
    }
    @Test
    public void test6977() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.enqueue(635316001);
    }
    @Test
    public void test6978() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(1761516342);
		variable.isEmpty();
    }
    @Test
    public void test6979() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1732755659);
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test6980() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-611918475);
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test6981() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test6982() {
		Queue y = new Queue();
		y.enqueue(-1239893127);
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.dequeue();
    }
    @Test
    public void test6983() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.enqueue(372717941);
		assertFalse(variable.isEmpty());
		assertEquals("[372717941]", variable.toString());
		variable.isFull();
		assertEquals(372717941, variable.dequeue());
		variable.enqueue(695645590);
		assertEquals(695645590, variable.dequeue());
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-1132717175);
		variable.dequeue();
    }
    @Test
    public void test6984() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-1849744966);
		variable.enqueue(-607233602);
		variable.enqueue(47127268);
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(547447868);
    }
    @Test
    public void test6985() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.toString();
    }
    @Test
    public void test6986() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(-501736996);
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-1503758816);
		x.isFull();
		x.isFull();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test6987() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.enqueue(885867051);
		z.isEmpty();
    }
    @Test
    public void test6988() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
		variable.enqueue(288954339);
		variable.toString();
		variable.enqueue(954754549);
    }
    @Test
    public void test6989() {
		Queue z = new Queue();
		z.toString();
		assertFalse(z.isFull());
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test6990() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.isFull();
		assertFalse(z.isFull());
		z.dequeue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.isFull();
		z.isFull();
		z.toString();
    }
    @Test
    public void test6991() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.enqueue(1838628572);
		x.toString();
		x.toString();
		assertFalse(x.isFull());
		x.isFull();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test6992() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(1379540337);
		x.isEmpty();
		x.toString();
		assertEquals(1379540337, x.dequeue());
		x.isEmpty();
		x.enqueue(-1057159290);
		x.isEmpty();
    }
    @Test
    public void test6993() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.toString();
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test6994() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test6995() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.isFull();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
		y.enqueue(-1612077961);
		y.dequeue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
    }
    @Test
    public void test6996() {
		Queue variable = new Queue();
		variable.enqueue(-1536903781);
		variable.enqueue(1157527096);
		assertEquals("[1157527096]", variable.toString());
		variable.isFull();
		variable.enqueue(-723319759);
		variable.enqueue(-1829763151);
    }
    @Test
    public void test6997() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test6998() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test6999() {
		Queue z = new Queue();
		z.enqueue(233151967);
    }
    @Test
    public void test7000() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1818129647);
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test7001() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(698767654);
		variable.toString();
		variable.isFull();
		assertEquals(698767654, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(-1641799228);
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test7002() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-578363623);
		Var.toString();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test7003() {
		Queue y = new Queue();
		y.enqueue(-370111921);
		y.enqueue(-245877490);
    }
    @Test
    public void test7004() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(1540489421);
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test7005() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isFull();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.enqueue(1563345531);
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test7006() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.enqueue(143425710);
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test7007() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(1842164662);
		assertFalse(x.isEmpty());
		x.dequeue();
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.dequeue();
		x.enqueue(-1331803040);
		x.isFull();
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test7008() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(-1851332673);
		x.isFull();
		x.isFull();
		x.enqueue(281747811);
		x.isEmpty();
		x.toString();
		assertEquals(281747811, x.dequeue());
		x.isFull();
    }
    @Test
    public void test7009() {
		Queue x = new Queue();
		x.enqueue(-1661092318);
		x.toString();
		x.isEmpty();
		x.enqueue(434325535);
		x.toString();
    }
    @Test
    public void test7010() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.toString();
		assertEquals("[]", x.toString());
		x.dequeue();
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(-868459049);
    }
    @Test
    public void test7011() {
		Queue x = new Queue();
		x.enqueue(-352308304);
		x.enqueue(-1328638697);
		x.toString();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(708276941);
		assertEquals("[708276941]", x.toString());
		x.enqueue(-1230890546);
		x.toString();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test7012() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test7013() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.toString();
		y.enqueue(-1527246682);
		assertEquals("[]", y.toString());
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.dequeue();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test7014() {
		Queue Var = new Queue();
		Var.enqueue(561271524);
		Var.toString();
		assertEquals("[561271524]", Var.toString());
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.enqueue(1096811715);
		Var.isFull();
    }
    @Test
    public void test7015() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.enqueue(-478889711);
		y.toString();
		y.toString();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.enqueue(810203976);
    }
    @Test
    public void test7016() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(-145542557);
		z.enqueue(229253867);
		z.isFull();
		z.isEmpty();
		z.enqueue(-1539766389);
    }
    @Test
    public void test7017() {
		Queue variable = new Queue();
		variable.enqueue(-968661296);
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(-1601112044);
		variable.dequeue();
		variable.enqueue(-67494693);
		variable.enqueue(1406203056);
    }
    @Test
    public void test7018() {
		Queue y = new Queue();
		y.toString();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.enqueue(1998680077);
		y.isEmpty();
		assertFalse(y.isFull());
		assertFalse(y.isEmpty());
		y.dequeue();
    }
    @Test
    public void test7019() {
		Queue Var = new Queue();
		Var.enqueue(-1287671240);
		Var.toString();
    }
    @Test
    public void test7020() {
		Queue z = new Queue();
		z.enqueue(-1647552438);
		z.isEmpty();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.isEmpty();
		z.enqueue(2037247336);
		z.dequeue();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test7021() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.dequeue();
		x.dequeue();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test7022() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.toString();
    }
    @Test
    public void test7023() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.isFull();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test7024() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.enqueue(-1477093757);
		y.enqueue(-1902428787);
		assertEquals("[]", y.toString());
		y.isFull();
		y.enqueue(-297826850);
		y.enqueue(862234845);
    }
    @Test
    public void test7025() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(-1823399216);
    }
    @Test
    public void test7026() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isFull();
		Var.enqueue(377927406);
		Var.isFull();
		Var.dequeue();
		Var.enqueue(1854321668);
		Var.dequeue();
		Var.enqueue(1310333420);
		Var.toString();
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test7027() {
		Queue Var = new Queue();
		Var.enqueue(-1706546520);
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test7028() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test7029() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(279835267);
		z.isEmpty();
		z.enqueue(-1632527559);
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test7030() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(556491000);
		variable.isEmpty();
    }
    @Test
    public void test7031() {
		Queue variable = new Queue();
		variable.enqueue(1546827209);
		variable.enqueue(-338435662);
		variable.isFull();
		variable.isFull();
		variable.enqueue(696842182);
		assertFalse(variable.isEmpty());
		assertEquals(1546827209, variable.dequeue());
		assertFalse(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test7032() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
		y.dequeue();
		y.toString();
		y.isFull();
		y.dequeue();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.enqueue(-839152532);
    }
    @Test
    public void test7033() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.enqueue(-499935172);
		x.toString();
		x.dequeue();
    }
    @Test
    public void test7034() {
		Queue y = new Queue();
		y.toString();
		y.toString();
    }
    @Test
    public void test7035() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test7036() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-1003477512);
		variable.isFull();
		variable.enqueue(-1701179811);
		variable.toString();
		variable.enqueue(-771006708);
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test7037() {
		Queue x = new Queue();
		x.enqueue(-1342467351);
		assertEquals(-1, x.dequeue());
		x.enqueue(-1838200228);
		x.enqueue(1379222509);
    }
    @Test
    public void test7038() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test7039() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.toString();
		assertFalse(z.isFull());
		z.dequeue();
		assertFalse(z.isFull());
		z.toString();
		z.dequeue();
    }
    @Test
    public void test7040() {
		Queue x = new Queue();
		x.enqueue(-1734806472);
		x.enqueue(1371049810);
    }
    @Test
    public void test7041() {
		Queue variable = new Queue();
		variable.enqueue(1481725399);
		variable.enqueue(-1029769098);
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test7042() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test7043() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-1731949824);
		y.enqueue(771863963);
		y.toString();
		y.enqueue(-1014461209);
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(-1962199760);
		y.enqueue(-1709894454);
		y.enqueue(-46562864);
		y.enqueue(-1287739374);
    }
    @Test
    public void test7044() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		z.toString();
		z.dequeue();
		z.dequeue();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.isFull();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isFull();
		z.toString();
		assertEquals("[]", z.toString());
		z.isFull();
		assertTrue(z.isEmpty());
		z.enqueue(352727997);
    }
    @Test
    public void test7045() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test7046() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test7047() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(2000874915);
		x.dequeue();
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test7048() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.enqueue(-1251345850);
		x.toString();
		x.enqueue(352033122);
    }
    @Test
    public void test7049() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(1267812468);
		x.isEmpty();
		x.toString();
		assertEquals(1267812468, x.dequeue());
		x.isFull();
    }
    @Test
    public void test7050() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(791772734);
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(2132614728);
		variable.dequeue();
    }
    @Test
    public void test7051() {
		Queue x = new Queue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(-921952706);
		x.isFull();
		x.isFull();
    }
    @Test
    public void test7052() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-1724996909);
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test7053() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isEmpty();
		y.enqueue(1099940386);
		y.enqueue(-1999707444);
		y.dequeue();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test7054() {
		Queue Var = new Queue();
		Var.enqueue(-864775933);
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.isFull();
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(103017838);
    }
    @Test
    public void test7055() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.enqueue(-1812935383);
    }
    @Test
    public void test7056() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.enqueue(-402918582);
		x.isEmpty();
		x.toString();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.dequeue();
		assertFalse(x.isFull());
		x.isFull();
    }
    @Test
    public void test7057() {
		Queue Var = new Queue();
		Var.enqueue(611015142);
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.toString();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-450421079);
    }
    @Test
    public void test7058() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-983075326);
		Var.dequeue();
		Var.isFull();
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(429118435);
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test7059() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test7060() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.enqueue(-590815018);
    }
    @Test
    public void test7061() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test7062() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.toString();
    }
    @Test
    public void test7063() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1248927130);
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1022693277);
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test7064() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test7065() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test7066() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test7067() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test7068() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test7069() {
		Queue Var = new Queue();
		Var.enqueue(213651980);
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.enqueue(1761528487);
		Var.toString();
		assertEquals(213651980, Var.dequeue());
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(-182857956);
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test7070() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.enqueue(1229638574);
		x.toString();
		x.isFull();
		assertEquals("[1229638574]", x.toString());
		assertFalse(x.isEmpty());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.enqueue(-859147926);
		x.toString();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test7071() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.enqueue(228314146);
		variable.toString();
    }
    @Test
    public void test7072() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test7073() {
		Queue variable = new Queue();
		variable.enqueue(-1453821263);
    }
    @Test
    public void test7074() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.enqueue(1859634066);
		assertFalse(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test7075() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test7076() {
		Queue y = new Queue();
		y.enqueue(-1998933470);
		y.toString();
		y.isFull();
		y.toString();
		y.enqueue(-1199593227);
    }
    @Test
    public void test7077() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(1188303409);
		x.enqueue(-610167840);
    }
    @Test
    public void test7078() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.dequeue();
		x.enqueue(-1410280638);
		x.enqueue(-1236190732);
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test7079() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test7080() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(726449178);
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.enqueue(-403388708);
		assertEquals("[]", Var.toString());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test7081() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.toString();
		y.isFull();
    }
    @Test
    public void test7082() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.isFull();
    }
    @Test
    public void test7083() {
		Queue x = new Queue();
		x.enqueue(-967917941);
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(1835032293);
		x.dequeue();
		x.enqueue(1188272679);
		x.dequeue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test7084() {
		Queue z = new Queue();
		z.isFull();
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.toString();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.isFull();
    }
    @Test
    public void test7085() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(1647773230);
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.toString();
		x.enqueue(-1967199939);
		x.toString();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.enqueue(659243299);
		x.enqueue(1590173689);
		x.enqueue(-2127850725);
		x.enqueue(1680119786);
    }
    @Test
    public void test7086() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		z.toString();
		z.toString();
		z.isEmpty();
		z.enqueue(135285580);
    }
    @Test
    public void test7087() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-588945100);
		y.enqueue(1297556153);
		assertEquals("[1297556153]", y.toString());
		y.isFull();
		y.isEmpty();
		y.toString();
		y.enqueue(-813569734);
		y.isFull();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test7088() {
		Queue y = new Queue();
		y.enqueue(-92599092);
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test7089() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-502282260);
    }
    @Test
    public void test7090() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.dequeue();
		assertFalse(z.isFull());
		z.dequeue();
		z.enqueue(-1962405679);
		assertEquals("[]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test7091() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-2095878853);
		Var.toString();
    }
    @Test
    public void test7092() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.enqueue(-517091207);
		y.enqueue(-2004931498);
		assertEquals(-1, y.dequeue());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test7093() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.isFull();
		assertTrue(z.isEmpty());
		z.isFull();
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.toString();
		z.enqueue(1988451132);
    }
    @Test
    public void test7094() {
		Queue z = new Queue();
		z.enqueue(-73206703);
    }
    @Test
    public void test7095() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(-2105829081);
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(-1392858118);
		x.isEmpty();
		x.toString();
		x.enqueue(-1427514712);
		x.toString();
    }
    @Test
    public void test7096() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(696028649);
		Var.isEmpty();
		Var.isFull();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		Var.enqueue(-475654947);
    }
    @Test
    public void test7097() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.enqueue(-1228490756);
		y.enqueue(-1251258753);
		y.isEmpty();
		y.toString();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test7098() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(-1819265508);
		x.enqueue(-1771250310);
		x.enqueue(260923922);
		x.enqueue(-1577357652);
		x.enqueue(1183222182);
    }
    @Test
    public void test7099() {
		Queue variable = new Queue();
		variable.enqueue(-657134367);
    }
    @Test
    public void test7100() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test7101() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(-1296329413);
		z.isFull();
		assertTrue(z.isEmpty());
		z.toString();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.dequeue();
    }
    @Test
    public void test7102() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isFull();
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.isFull();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test7103() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.enqueue(869749846);
		variable.enqueue(-1394309979);
    }
    @Test
    public void test7104() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(-1791854855);
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test7105() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test7106() {
		Queue y = new Queue();
		y.toString();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.toString();
		assertFalse(y.isFull());
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(115290341);
		y.isEmpty();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test7107() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(1945694555);
		assertEquals("[1945694555]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test7108() {
		Queue variable = new Queue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(-969121023);
		variable.enqueue(-1237843298);
		variable.toString();
    }
    @Test
    public void test7109() {
		Queue y = new Queue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.enqueue(1480057409);
		y.isEmpty();
		y.enqueue(-1296125444);
		y.isFull();
    }
    @Test
    public void test7110() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-1733824883);
		Var.enqueue(1585774379);
		assertFalse(Var.isFull());
		Var.enqueue(-838586270);
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.isFull();
		assertFalse(Var.isEmpty());
		assertEquals(1585774379, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test7111() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.enqueue(1522051761);
		z.toString();
		assertFalse(z.isEmpty());
		z.dequeue();
		z.enqueue(-1063485734);
		z.isFull();
    }
    @Test
    public void test7112() {
		Queue variable = new Queue();
		variable.enqueue(-1133474255);
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-2088297992);
		variable.isFull();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(-74154411);
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test7113() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(1161374121);
		Var.isEmpty();
    }
    @Test
    public void test7114() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(2083729957);
		y.enqueue(-2122307275);
		y.enqueue(45576930);
    }
    @Test
    public void test7115() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		z.isFull();
		z.dequeue();
		z.dequeue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.enqueue(-984335867);
		z.isFull();
		z.isFull();
		z.enqueue(-733298287);
    }
    @Test
    public void test7116() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.dequeue();
		y.enqueue(-1586258991);
		y.isEmpty();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test7117() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.enqueue(2010398890);
		variable.enqueue(1175376159);
		assertEquals(2010398890, variable.dequeue());
		variable.isFull();
		variable.enqueue(-1770332922);
		variable.toString();
    }
    @Test
    public void test7118() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test7119() {
		Queue x = new Queue();
		x.enqueue(1077861475);
		x.isFull();
		x.toString();
		x.isFull();
		assertFalse(x.isEmpty());
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test7120() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.enqueue(335167240);
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test7121() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test7122() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test7123() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.enqueue(-561489427);
		x.isEmpty();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.dequeue();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.toString();
		x.isFull();
		x.toString();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test7124() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.enqueue(-48791405);
		assertEquals(-1, z.dequeue());
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(-737946830);
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.enqueue(1112498231);
		z.isFull();
    }
    @Test
    public void test7125() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(1506735946);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
		assertEquals("[1506735946]", variable.toString());
		variable.dequeue();
		variable.enqueue(-840934766);
    }
    @Test
    public void test7126() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(1680965039);
		z.dequeue();
		z.enqueue(-492165502);
		z.dequeue();
		z.isFull();
		z.enqueue(1764586607);
    }
    @Test
    public void test7127() {
		Queue Var = new Queue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(63423874);
    }
    @Test
    public void test7128() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-1004924191);
		Var.isFull();
		Var.enqueue(1925244369);
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(1851283752);
    }
    @Test
    public void test7129() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test7130() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-681276318);
    }
    @Test
    public void test7131() {
		Queue x = new Queue();
		x.enqueue(-824238082);
		x.enqueue(1628621110);
		x.dequeue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.dequeue();
		x.enqueue(498276620);
		x.toString();
    }
    @Test
    public void test7132() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test7133() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test7134() {
		Queue y = new Queue();
		y.enqueue(-82185987);
		assertEquals("[]", y.toString());
		y.isFull();
		y.isEmpty();
		y.enqueue(-1684976644);
		y.dequeue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.dequeue();
		y.enqueue(-1620854310);
    }
    @Test
    public void test7135() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test7136() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.isFull();
		z.enqueue(155236055);
		z.isFull();
		z.enqueue(-1362225815);
		assertFalse(z.isEmpty());
		z.enqueue(-1377515677);
		z.isEmpty();
		z.enqueue(-456298625);
		z.toString();
    }
    @Test
    public void test7137() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.isFull();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test7138() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test7139() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(208097557);
		Var.isEmpty();
		assertEquals(208097557, Var.dequeue());
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test7140() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test7141() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(-138155344);
		x.enqueue(-1733042942);
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test7142() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(1774303719);
		Var.toString();
		Var.toString();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test7143() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.isFull();
		x.enqueue(-1952655729);
    }
    @Test
    public void test7144() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.toString();
		y.enqueue(1598898820);
		y.isFull();
    }
    @Test
    public void test7145() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1488048804);
		y.isFull();
    }
    @Test
    public void test7146() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1932329134);
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-555215175);
    }
    @Test
    public void test7147() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.enqueue(1618936987);
		z.toString();
		z.toString();
		z.isEmpty();
		assertFalse(z.isEmpty());
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test7148() {
		Queue z = new Queue();
		z.enqueue(-1972125439);
		assertTrue(z.isEmpty());
		z.toString();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.enqueue(-1957915291);
		assertTrue(z.isEmpty());
		z.isFull();
		assertFalse(z.isFull());
		z.dequeue();
		z.enqueue(-1542255448);
    }
    @Test
    public void test7149() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1385966695);
    }
    @Test
    public void test7150() {
		Queue z = new Queue();
		z.isFull();
		assertFalse(z.isFull());
		z.enqueue(1945810192);
		z.isFull();
		assertFalse(z.isFull());
		z.toString();
		assertFalse(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test7151() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.enqueue(-1155821739);
		y.enqueue(1533534167);
		y.dequeue();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test7152() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1635454983);
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test7153() {
		Queue x = new Queue();
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(1567212494);
		assertFalse(x.isFull());
		assertEquals("[1567212494]", x.toString());
		assertFalse(x.isFull());
		assertEquals(1567212494, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test7154() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(1894615170);
		z.isEmpty();
		z.enqueue(2132453594);
		z.dequeue();
		z.isFull();
		z.isFull();
		z.isFull();
		z.enqueue(-1953868215);
		z.dequeue();
    }
    @Test
    public void test7155() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
    }
    @Test
    public void test7156() {
		Queue z = new Queue();
		z.enqueue(-1385218958);
		z.enqueue(-2059065348);
		z.isFull();
		z.isFull();
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test7157() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.enqueue(-470758518);
		y.enqueue(-203515670);
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.toString();
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
		y.toString();
		y.enqueue(-648722628);
    }
    @Test
    public void test7158() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test7159() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(1255433964);
    }
    @Test
    public void test7160() {
		Queue z = new Queue();
		z.enqueue(-279838392);
		z.isFull();
		z.enqueue(1982380744);
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isEmpty();
		z.enqueue(1619468994);
		z.toString();
		z.isEmpty();
		z.enqueue(107544458);
    }
    @Test
    public void test7161() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(541661630);
		assertFalse(z.isEmpty());
		z.isEmpty();
		z.enqueue(1587544498);
		z.isFull();
		assertFalse(z.isEmpty());
		z.isEmpty();
		assertEquals("[541661630, 1587544498]", z.toString());
		z.dequeue();
		z.dequeue();
		z.dequeue();
		z.enqueue(895369970);
    }
    @Test
    public void test7162() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test7163() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isFull();
		Var.enqueue(-826374413);
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test7164() {
		Queue x = new Queue();
		x.enqueue(77663976);
    }
    @Test
    public void test7165() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(463806587);
		Var.isEmpty();
		Var.enqueue(-593620506);
		assertFalse(Var.isFull());
		assertFalse(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test7166() {
		Queue y = new Queue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test7167() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.enqueue(1000473141);
		variable.dequeue();
    }
    @Test
    public void test7168() {
		Queue Var = new Queue();
		Var.enqueue(1487076498);
    }
    @Test
    public void test7169() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(907414231);
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.dequeue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.enqueue(180906684);
    }
    @Test
    public void test7170() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test7171() {
		Queue y = new Queue();
		y.enqueue(-131661492);
		y.isFull();
		y.isEmpty();
		y.enqueue(64007014);
		y.toString();
		assertEquals(64007014, y.dequeue());
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.toString();
		assertFalse(y.isFull());
		y.dequeue();
		y.isEmpty();
		y.enqueue(-877283746);
    }
    @Test
    public void test7172() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.enqueue(524169538);
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test7173() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
		y.toString();
		y.isEmpty();
		y.enqueue(1384940446);
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test7174() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.isFull();
		z.enqueue(-2092515813);
		z.toString();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.toString();
		z.toString();
    }
    @Test
    public void test7175() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(1365833559);
		variable.isFull();
		variable.enqueue(-1487054759);
		variable.isEmpty();
		variable.enqueue(1690775256);
		assertFalse(variable.isEmpty());
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test7176() {
		Queue y = new Queue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.toString();
		y.enqueue(-133165312);
    }
    @Test
    public void test7177() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(1049849607);
		assertEquals(1049849607, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.enqueue(1594259785);
    }
    @Test
    public void test7178() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.toString();
		assertFalse(y.isFull());
		y.toString();
		assertFalse(y.isFull());
		y.toString();
		assertEquals(-1, y.dequeue());
		y.enqueue(1350762287);
		y.toString();
		y.isEmpty();
		assertEquals("[1350762287]", y.toString());
		y.dequeue();
    }
    @Test
    public void test7179() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test7180() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.enqueue(-277751830);
		x.isFull();
    }
    @Test
    public void test7181() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-18813664);
    }
    @Test
    public void test7182() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.enqueue(-1127009249);
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.enqueue(1436517393);
    }
    @Test
    public void test7183() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(2078925793);
		assertFalse(y.isEmpty());
		y.enqueue(2011555073);
		assertEquals("[2078925793, 2011555073]", y.toString());
		assertEquals("[2078925793, 2011555073]", y.toString());
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isEmpty();
		assertFalse(y.isEmpty());
		y.dequeue();
		assertFalse(y.isEmpty());
		y.toString();
    }
    @Test
    public void test7184() {
		Queue y = new Queue();
		y.enqueue(-1797843228);
		assertEquals("[]", y.toString());
		y.toString();
		y.toString();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test7185() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(1995887793);
    }
    @Test
    public void test7186() {
		Queue x = new Queue();
		x.toString();
		assertTrue(x.isEmpty());
		x.toString();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test7187() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(599689077);
		variable.isFull();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.enqueue(-1229762137);
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.enqueue(-339752622);
		variable.dequeue();
    }
    @Test
    public void test7188() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-1554641114);
		Var.isFull();
		Var.dequeue();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test7189() {
		Queue z = new Queue();
		z.toString();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test7190() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test7191() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.toString();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.enqueue(-1586669961);
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test7192() {
		Queue z = new Queue();
		z.enqueue(-1233292954);
		z.toString();
    }
    @Test
    public void test7193() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test7194() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(-1532323722);
		x.isFull();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test7195() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test7196() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(1933275845);
		variable.isFull();
		variable.enqueue(-190859144);
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test7197() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(2069739077);
		assertEquals(2069739077, variable.dequeue());
		variable.isFull();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test7198() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test7199() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.dequeue();
		x.enqueue(1072581448);
		assertFalse(x.isFull());
		assertEquals(1072581448, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.enqueue(-2040733655);
		x.enqueue(32027202);
		assertFalse(x.isEmpty());
		x.toString();
		x.enqueue(-736641817);
		x.isEmpty();
    }
    @Test
    public void test7200() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test7201() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test7202() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.isFull();
		y.isFull();
		assertEquals("[]", y.toString());
		y.enqueue(-2074343924);
		y.dequeue();
    }
    @Test
    public void test7203() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(297869996);
		variable.dequeue();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test7204() {
		Queue Var = new Queue();
		Var.enqueue(1982330783);
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(998404700);
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test7205() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		z.enqueue(2042141273);
		z.isFull();
		z.isEmpty();
		assertFalse(z.isEmpty());
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test7206() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-1831264879);
		y.toString();
		y.enqueue(1189608261);
		assertFalse(y.isEmpty());
		y.enqueue(1704132000);
		y.toString();
		assertEquals("[1189608261, 1704132000]", y.toString());
		y.toString();
		y.enqueue(-618796247);
		y.enqueue(-1963574164);
    }
    @Test
    public void test7207() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isFull();
		x.toString();
		x.toString();
    }
    @Test
    public void test7208() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(-2095615283);
		variable.enqueue(1066802835);
		assertEquals(1066802835, variable.dequeue());
		variable.enqueue(690014199);
    }
    @Test
    public void test7209() {
		Queue y = new Queue();
		y.enqueue(1706262108);
		assertEquals(1706262108, y.dequeue());
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.enqueue(-469601184);
		y.enqueue(2011304085);
		y.toString();
		y.isFull();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test7210() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-1067095631);
		assertEquals("[]", variable.toString());
		variable.toString();
    }
    @Test
    public void test7211() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		variable.enqueue(551781420);
		variable.isFull();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		assertEquals(551781420, variable.dequeue());
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test7212() {
		Queue Var = new Queue();
		Var.enqueue(-1228313230);
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1132409380);
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test7213() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test7214() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.enqueue(1911942535);
		x.isFull();
		x.enqueue(500354578);
		x.toString();
		assertFalse(x.isEmpty());
		assertEquals("[1911942535, 500354578]", x.toString());
		assertEquals(1911942535, x.dequeue());
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test7215() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.toString();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-493119369);
		Var.isFull();
		Var.dequeue();
		Var.enqueue(1259256442);
		Var.toString();
    }
    @Test
    public void test7216() {
		Queue x = new Queue();
		x.enqueue(-130272150);
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test7217() {
		Queue Var = new Queue();
		Var.enqueue(-379577948);
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test7218() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.dequeue();
		x.enqueue(1522397550);
		assertEquals("[1522397550]", x.toString());
		x.toString();
		assertEquals(1522397550, x.dequeue());
		assertEquals("[]", x.toString());
		x.toString();
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test7219() {
		Queue variable = new Queue();
		variable.enqueue(1229609856);
		assertFalse(variable.isEmpty());
		variable.isFull();
		assertEquals(1229609856, variable.dequeue());
		variable.enqueue(-256776600);
		variable.isEmpty();
    }
    @Test
    public void test7220() {
		Queue z = new Queue();
		z.enqueue(-1476634812);
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test7221() {
		Queue x = new Queue();
		x.enqueue(-742754121);
    }
    @Test
    public void test7222() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(-589020157);
		x.dequeue();
		x.isFull();
		x.enqueue(-1757823364);
		assertTrue(x.isEmpty());
		x.isFull();
		x.isFull();
    }
    @Test
    public void test7223() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test7224() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.enqueue(1975317688);
		variable.enqueue(131751691);
		assertEquals(1975317688, variable.dequeue());
		assertEquals("[131751691]", variable.toString());
		variable.enqueue(1226847564);
		variable.enqueue(1966501079);
		variable.dequeue();
		assertEquals("[1226847564, 1966501079]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test7225() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(982120703);
    }
    @Test
    public void test7226() {
		Queue Var = new Queue();
		Var.enqueue(-1746223318);
		Var.dequeue();
		Var.enqueue(1206010775);
    }
    @Test
    public void test7227() {
		Queue Var = new Queue();
		Var.enqueue(-902194342);
		Var.isFull();
		Var.enqueue(858234662);
		Var.enqueue(-1501760886);
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test7228() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(-107145854);
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test7229() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test7230() {
		Queue x = new Queue();
		x.toString();
		assertTrue(x.isEmpty());
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test7231() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
		z.isFull();
		z.enqueue(438797183);
		z.enqueue(1801652859);
    }
    @Test
    public void test7232() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(1250044855);
		y.isEmpty();
    }
    @Test
    public void test7233() {
		Queue z = new Queue();
		z.enqueue(1927893933);
		assertFalse(z.isEmpty());
		z.isFull();
		z.toString();
		assertEquals(1927893933, z.dequeue());
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test7234() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.enqueue(1717029472);
		Var.toString();
		assertFalse(Var.isFull());
		Var.toString();
		Var.dequeue();
		Var.enqueue(-1165380726);
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.toString();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.enqueue(662313164);
    }
    @Test
    public void test7235() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.toString();
		y.enqueue(-282939932);
    }
    @Test
    public void test7236() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test7237() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.toString();
		y.dequeue();
		y.isFull();
		y.isFull();
		y.enqueue(-556494901);
		y.toString();
		y.enqueue(1350915388);
		y.enqueue(-1797670763);
		y.dequeue();
		y.toString();
    }
    @Test
    public void test7238() {
		Queue z = new Queue();
		z.enqueue(1634225272);
		z.toString();
		z.enqueue(1748348686);
    }
    @Test
    public void test7239() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-1563674095);
		variable.enqueue(2140565506);
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(1352733390);
    }
    @Test
    public void test7240() {
		Queue x = new Queue();
		x.enqueue(-771962475);
		x.toString();
		x.isEmpty();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(1813029914);
		x.dequeue();
    }
    @Test
    public void test7241() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test7242() {
		Queue z = new Queue();
		z.enqueue(1791649297);
		assertFalse(z.isFull());
		z.toString();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test7243() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(-1037483134);
		variable.isFull();
    }
    @Test
    public void test7244() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test7245() {
		Queue y = new Queue();
		y.enqueue(-1959228459);
		assertFalse(y.isFull());
		y.toString();
		y.enqueue(438988827);
		y.isEmpty();
		y.enqueue(-2116576985);
		y.dequeue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test7246() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test7247() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test7248() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(667222516);
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isFull();
		Var.isFull();
		Var.enqueue(1668772079);
		assertEquals("[1668772079]", Var.toString());
		assertEquals("[1668772079]", Var.toString());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test7249() {
		Queue Var = new Queue();
		Var.enqueue(-760351618);
		Var.toString();
		Var.enqueue(-1736833537);
    }
    @Test
    public void test7250() {
		Queue Var = new Queue();
		Var.enqueue(608343020);
		Var.enqueue(-1227746590);
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-107762373);
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-1765305629);
    }
    @Test
    public void test7251() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.toString();
    }
    @Test
    public void test7252() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test7253() {
		Queue variable = new Queue();
		variable.enqueue(-1719213096);
    }
    @Test
    public void test7254() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(-1327514970);
    }
    @Test
    public void test7255() {
		Queue variable = new Queue();
		variable.enqueue(-643007909);
		assertTrue(variable.isEmpty());
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(238942960);
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test7256() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test7257() {
		Queue z = new Queue();
		z.enqueue(-1083466589);
    }
    @Test
    public void test7258() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.isEmpty();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.toString();
		z.enqueue(-451995409);
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test7259() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.enqueue(560318092);
		assertEquals(560318092, x.dequeue());
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test7260() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test7261() {
		Queue Var = new Queue();
		Var.enqueue(678050835);
    }
    @Test
    public void test7262() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isFull();
		variable.enqueue(1538256546);
		variable.isEmpty();
    }
    @Test
    public void test7263() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test7264() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test7265() {
		Queue variable = new Queue();
		variable.enqueue(-967229838);
		variable.toString();
		variable.enqueue(1102009428);
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(1036873520);
		assertEquals(1102009428, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test7266() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test7267() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-1125644429);
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1383199039);
		y.toString();
		y.dequeue();
		y.dequeue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test7268() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test7269() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-614335662);
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test7270() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.toString();
		z.enqueue(1859145640);
    }
    @Test
    public void test7271() {
		Queue z = new Queue();
		z.toString();
		assertFalse(z.isFull());
		z.dequeue();
		z.dequeue();
		z.dequeue();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(-389996496);
		z.enqueue(707133905);
		z.isFull();
		z.isFull();
    }
    @Test
    public void test7272() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.enqueue(845821790);
		Var.toString();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.enqueue(1333910473);
		Var.dequeue();
    }
    @Test
    public void test7273() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
		assertFalse(y.isFull());
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.dequeue();
		y.toString();
		y.dequeue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(-1911138806);
		y.isFull();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test7274() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(1748311444);
		y.toString();
		assertFalse(y.isEmpty());
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-311495249);
		assertFalse(y.isFull());
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(286405118);
		y.toString();
    }
    @Test
    public void test7275() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test7276() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isFull();
		Var.enqueue(-1748192482);
		Var.isFull();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1911395177);
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test7277() {
		Queue y = new Queue();
		y.enqueue(-1855976273);
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.enqueue(1405727794);
		y.toString();
    }
    @Test
    public void test7278() {
		Queue variable = new Queue();
		variable.enqueue(-62308671);
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.enqueue(1635989393);
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		variable.enqueue(-16580961);
		variable.enqueue(-700563151);
    }
    @Test
    public void test7279() {
		Queue y = new Queue();
		y.enqueue(1590686817);
		y.enqueue(770859578);
		assertEquals("[1590686817, 770859578]", y.toString());
		assertEquals(1590686817, y.dequeue());
		y.toString();
		assertEquals(770859578, y.dequeue());
		assertEquals("[]", y.toString());
		y.enqueue(571505424);
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test7280() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(165761434);
		assertFalse(z.isEmpty());
		assertFalse(z.isEmpty());
		assertFalse(z.isEmpty());
		z.isFull();
		assertFalse(z.isFull());
		z.isFull();
		z.toString();
    }
    @Test
    public void test7281() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(1276569303);
		Var.enqueue(-1459984795);
		assertFalse(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test7282() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(332861415);
		y.isEmpty();
		y.toString();
		assertEquals("[332861415]", y.toString());
		assertEquals(332861415, y.dequeue());
		assertTrue(y.isEmpty());
		y.enqueue(-803848665);
		y.toString();
		y.enqueue(551702677);
    }
    @Test
    public void test7283() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.enqueue(-2045762795);
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.enqueue(-2051118814);
    }
    @Test
    public void test7284() {
		Queue y = new Queue();
		y.enqueue(2053311754);
		y.isEmpty();
		assertEquals("[2053311754]", y.toString());
		y.isEmpty();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test7285() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(1935657694);
    }
    @Test
    public void test7286() {
		Queue variable = new Queue();
		variable.enqueue(1197725524);
		variable.isFull();
		variable.toString();
		variable.enqueue(-2135279091);
    }
    @Test
    public void test7287() {
		Queue Var = new Queue();
		Var.enqueue(1258869548);
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test7288() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test7289() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(679195785);
		z.isFull();
		assertFalse(z.isEmpty());
		z.dequeue();
		z.toString();
		z.toString();
    }
    @Test
    public void test7290() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(172889214);
		Var.isFull();
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test7291() {
		Queue variable = new Queue();
		variable.enqueue(-907219880);
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(1087419584);
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test7292() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test7293() {
		Queue x = new Queue();
		x.isFull();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.enqueue(-73486362);
    }
    @Test
    public void test7294() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(572725006);
		variable.enqueue(-2132153202);
    }
    @Test
    public void test7295() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test7296() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-1500886807);
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.isEmpty();
		y.enqueue(1138744585);
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test7297() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-344929406);
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.dequeue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
		y.enqueue(1652794667);
    }
    @Test
    public void test7298() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isFull();
		assertEquals("[]", x.toString());
		x.enqueue(1086915878);
		x.enqueue(-729997442);
		x.toString();
		assertFalse(x.isEmpty());
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test7299() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.toString();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.toString();
		assertEquals("[]", x.toString());
		x.toString();
		x.toString();
		x.toString();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test7300() {
		Queue variable = new Queue();
		variable.enqueue(-2018667951);
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(64359261);
		variable.isEmpty();
		variable.enqueue(-867081938);
		variable.isFull();
    }
    @Test
    public void test7301() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(1015201328);
		Var.toString();
		Var.isFull();
		Var.isFull();
		Var.enqueue(391888052);
    }
    @Test
    public void test7302() {
		Queue y = new Queue();
		y.enqueue(-1654595312);
    }
    @Test
    public void test7303() {
		Queue variable = new Queue();
		variable.enqueue(-2042328503);
		variable.isFull();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1301773801);
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(1215480915);
		variable.dequeue();
    }
    @Test
    public void test7304() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(1193060313);
		assertEquals(1193060313, variable.dequeue());
		variable.isFull();
		variable.enqueue(-1751261461);
		variable.enqueue(-1133288863);
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(1274495032);
    }
    @Test
    public void test7305() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test7306() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1442413656);
		z.isEmpty();
		z.isFull();
		z.toString();
    }
    @Test
    public void test7307() {
		Queue z = new Queue();
		z.enqueue(56124000);
		z.isFull();
		z.toString();
		z.enqueue(184585962);
    }
    @Test
    public void test7308() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1261259324);
		variable.enqueue(1219391214);
		variable.toString();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test7309() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test7310() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test7311() {
		Queue Var = new Queue();
		Var.enqueue(2067360011);
		Var.enqueue(1294468924);
    }
    @Test
    public void test7312() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test7313() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.isFull();
		z.enqueue(519191098);
    }
    @Test
    public void test7314() {
		Queue z = new Queue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.enqueue(1114948616);
    }
    @Test
    public void test7315() {
		Queue y = new Queue();
		y.enqueue(-1529261720);
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
		y.enqueue(862441578);
		y.enqueue(-943173814);
		assertEquals("[862441578]", y.toString());
		assertFalse(y.isFull());
		y.enqueue(-1570361756);
		assertEquals(862441578, y.dequeue());
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test7316() {
		Queue z = new Queue();
		z.enqueue(-965619633);
		z.toString();
    }
    @Test
    public void test7317() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.isFull();
		z.enqueue(-47958178);
    }
    @Test
    public void test7318() {
		Queue z = new Queue();
		z.enqueue(-1951191819);
		z.enqueue(-541983800);
		z.dequeue();
		assertFalse(z.isFull());
		z.dequeue();
		assertFalse(z.isFull());
		z.toString();
		z.enqueue(-1705756546);
		z.enqueue(-1404949057);
    }
    @Test
    public void test7319() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.dequeue();
		y.isFull();
		y.toString();
		y.enqueue(120985183);
		y.isFull();
		assertFalse(y.isFull());
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test7320() {
		Queue z = new Queue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(1504582633);
    }
    @Test
    public void test7321() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.toString();
		y.isFull();
		assertEquals("[]", y.toString());
		y.enqueue(-1476004309);
		y.enqueue(302960315);
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test7322() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isEmpty();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.enqueue(-1599550909);
		y.isFull();
		y.enqueue(731135467);
		y.dequeue();
		y.enqueue(-1878472715);
		assertEquals(-1, y.dequeue());
		y.enqueue(-1056050669);
    }
    @Test
    public void test7323() {
		Queue variable = new Queue();
		variable.enqueue(777192999);
		assertFalse(variable.isEmpty());
		assertEquals("[777192999]", variable.toString());
		variable.isFull();
		assertEquals("[777192999]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test7324() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(499144889);
    }
    @Test
    public void test7325() {
		Queue z = new Queue();
		z.enqueue(-1794836980);
		z.enqueue(-7068804);
		z.isEmpty();
		z.dequeue();
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.toString();
		z.enqueue(-794257075);
    }
    @Test
    public void test7326() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test7327() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.isFull();
		x.toString();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test7328() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(73537832);
		x.enqueue(-317208908);
    }
    @Test
    public void test7329() {
		Queue Var = new Queue();
		Var.enqueue(-849056481);
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1865555761);
		assertEquals("[1865555761]", Var.toString());
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test7330() {
		Queue y = new Queue();
		y.toString();
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.enqueue(-1570072177);
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(-562109731);
		y.enqueue(1914480434);
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test7331() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(907952953);
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.toString();
    }
    @Test
    public void test7332() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(1805100838);
		y.dequeue();
		y.enqueue(1022072294);
		y.isEmpty();
		y.enqueue(1725705791);
    }
    @Test
    public void test7333() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(1044997453);
		assertEquals(1044997453, z.dequeue());
		z.dequeue();
		z.toString();
		z.isFull();
    }
    @Test
    public void test7334() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(2034829550);
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test7335() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test7336() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.isFull();
		y.isFull();
		y.isFull();
		y.toString();
		assertEquals("[]", y.toString());
		y.toString();
		y.toString();
		y.isFull();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.toString();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test7337() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(-1951976239);
		variable.dequeue();
		variable.toString();
		variable.enqueue(1672221908);
    }
    @Test
    public void test7338() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.enqueue(871154558);
		assertFalse(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(-51931767);
    }
    @Test
    public void test7339() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.enqueue(-746315235);
		z.toString();
		z.toString();
    }
    @Test
    public void test7340() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(-26214401);
		variable.toString();
		variable.enqueue(1763737698);
		variable.toString();
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-2032546801);
    }
    @Test
    public void test7341() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.enqueue(134089440);
		y.dequeue();
		y.enqueue(-862820990);
		assertFalse(y.isFull());
		y.isFull();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.enqueue(-257069454);
		y.dequeue();
    }
    @Test
    public void test7342() {
		Queue z = new Queue();
		z.enqueue(-2086969332);
		assertFalse(z.isFull());
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test7343() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test7344() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(1680399533);
		z.isEmpty();
		z.dequeue();
		z.enqueue(1501694825);
		z.isEmpty();
    }
    @Test
    public void test7345() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test7346() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test7347() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		assertEquals("[]", z.toString());
		z.enqueue(948709774);
    }
    @Test
    public void test7348() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test7349() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test7350() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.enqueue(-1430364400);
    }
    @Test
    public void test7351() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-1719454907);
		x.isEmpty();
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertFalse(x.isFull());
		x.dequeue();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test7352() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test7353() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.enqueue(-410758757);
    }
    @Test
    public void test7354() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(960425527);
		assertFalse(y.isFull());
		y.enqueue(327354961);
		y.dequeue();
		assertFalse(y.isFull());
		y.isFull();
		y.toString();
		y.isEmpty();
		y.enqueue(-1115580832);
		y.enqueue(-2105262724);
    }
    @Test
    public void test7355() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.enqueue(1108233131);
    }
    @Test
    public void test7356() {
		Queue y = new Queue();
		y.enqueue(1560548684);
    }
    @Test
    public void test7357() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.enqueue(625249048);
		x.isFull();
		assertFalse(x.isEmpty());
		x.isEmpty();
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(401116361);
    }
    @Test
    public void test7358() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.toString();
    }
    @Test
    public void test7359() {
		Queue x = new Queue();
		x.enqueue(1763135808);
		x.dequeue();
		x.enqueue(803830898);
    }
    @Test
    public void test7360() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test7361() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.isFull();
		z.dequeue();
		z.enqueue(363136755);
		z.isFull();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test7362() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test7363() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isFull();
		assertFalse(y.isFull());
		y.isFull();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test7364() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.enqueue(-53761105);
		assertEquals("[]", variable.toString());
		variable.toString();
    }
    @Test
    public void test7365() {
		Queue z = new Queue();
		z.enqueue(1705346510);
		z.isEmpty();
		z.enqueue(-1341315680);
		z.isFull();
		z.toString();
    }
    @Test
    public void test7366() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(-439030552);
    }
    @Test
    public void test7367() {
		Queue x = new Queue();
		x.enqueue(1824592160);
    }
    @Test
    public void test7368() {
		Queue x = new Queue();
		x.enqueue(1433059894);
		assertFalse(x.isFull());
		x.dequeue();
		x.toString();
		x.enqueue(593536060);
		x.isEmpty();
		assertEquals("[593536060]", x.toString());
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(1850513462);
		x.dequeue();
    }
    @Test
    public void test7369() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test7370() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(1388519504);
		assertEquals(1388519504, variable.dequeue());
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(1034521148);
		variable.toString();
    }
    @Test
    public void test7371() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(82924829);
    }
    @Test
    public void test7372() {
		Queue z = new Queue();
		z.enqueue(-1489704946);
		z.dequeue();
    }
    @Test
    public void test7373() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1124415297);
    }
    @Test
    public void test7374() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1630045498);
		variable.toString();
    }
    @Test
    public void test7375() {
		Queue y = new Queue();
		y.enqueue(-1415115447);
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(-557891664);
		y.toString();
		y.enqueue(-1431291401);
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
		y.toString();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test7376() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1504391083);
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test7377() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(607516066);
		Var.enqueue(651217794);
		assertFalse(Var.isFull());
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.enqueue(-1474965854);
    }
    @Test
    public void test7378() {
		Queue Var = new Queue();
		Var.enqueue(-93445510);
		Var.enqueue(897200129);
		Var.enqueue(-2003527109);
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test7379() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.toString();
		variable.enqueue(186367939);
		assertEquals("[186367939]", variable.toString());
		variable.isEmpty();
		assertEquals(186367939, variable.dequeue());
		assertFalse(variable.isFull());
		variable.enqueue(-683805869);
    }
    @Test
    public void test7380() {
		Queue z = new Queue();
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(-1448242041);
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.enqueue(-565769409);
		z.enqueue(-1757793986);
		z.enqueue(1848336875);
		z.toString();
		assertFalse(z.isEmpty());
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test7381() {
		Queue x = new Queue();
		x.enqueue(-260512290);
		x.toString();
		x.enqueue(349666698);
		x.toString();
    }
    @Test
    public void test7382() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-1894789439);
		assertEquals("[]", z.toString());
		z.enqueue(1053144865);
    }
    @Test
    public void test7383() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(1784652759);
    }
    @Test
    public void test7384() {
		Queue Var = new Queue();
		Var.enqueue(1163627247);
		assertEquals(1163627247, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-227569314);
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test7385() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-1346736779);
    }
    @Test
    public void test7386() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test7387() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test7388() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(1908153347);
    }
    @Test
    public void test7389() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test7390() {
		Queue Var = new Queue();
		Var.enqueue(-1523100557);
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-98000032);
    }
    @Test
    public void test7391() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-190711228);
		x.toString();
    }
    @Test
    public void test7392() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.enqueue(-1784174459);
		y.enqueue(1185788128);
		y.enqueue(837942923);
		y.isEmpty();
		y.enqueue(1929889663);
    }
    @Test
    public void test7393() {
		Queue z = new Queue();
		z.enqueue(1851228548);
		z.isFull();
		z.enqueue(-1605306567);
		z.dequeue();
		z.enqueue(833854893);
		z.dequeue();
    }
    @Test
    public void test7394() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
		y.dequeue();
		y.isFull();
		y.dequeue();
		y.enqueue(-1722587293);
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test7395() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test7396() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(423469466);
		y.enqueue(1662002797);
		y.enqueue(1460006228);
		y.isEmpty();
		assertFalse(y.isEmpty());
		y.isFull();
		y.isEmpty();
		assertEquals(423469466, y.dequeue());
		y.isEmpty();
		y.toString();
		y.dequeue();
		assertEquals("[1460006228]", y.toString());
		y.dequeue();
    }
    @Test
    public void test7397() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(1205858459);
		Var.enqueue(1784636270);
    }
    @Test
    public void test7398() {
		Queue z = new Queue();
		z.enqueue(528360982);
    }
    @Test
    public void test7399() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(1291898134);
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test7400() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-69724841);
		variable.isFull();
		variable.enqueue(531544641);
		assertEquals("[531544641]", variable.toString());
		variable.isFull();
		assertFalse(variable.isEmpty());
		variable.enqueue(1522629610);
		variable.enqueue(-1624149758);
		variable.isEmpty();
		variable.enqueue(-598431670);
    }
    @Test
    public void test7401() {
		Queue Var = new Queue();
		Var.enqueue(664988711);
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test7402() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.toString();
    }
    @Test
    public void test7403() {
		Queue variable = new Queue();
		variable.enqueue(1727336574);
		variable.enqueue(501774432);
		variable.isFull();
		variable.enqueue(-549552995);
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test7404() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		assertFalse(y.isFull());
		y.isFull();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.enqueue(-915196047);
    }
    @Test
    public void test7405() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.isFull();
		z.toString();
		z.toString();
    }
    @Test
    public void test7406() {
		Queue z = new Queue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isFull();
		z.isEmpty();
		z.enqueue(-1116077440);
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(1712297368);
		z.enqueue(391618599);
		z.dequeue();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test7407() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.toString();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(541575395);
    }
    @Test
    public void test7408() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(714587645);
		variable.toString();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test7409() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.dequeue();
		x.enqueue(497635084);
		x.isEmpty();
		x.dequeue();
		x.enqueue(-647528510);
		x.enqueue(-1537464009);
		x.enqueue(-1106400807);
    }
    @Test
    public void test7410() {
		Queue x = new Queue();
		x.enqueue(-1120744132);
		x.toString();
		x.dequeue();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(-2050468470);
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(-1501955804);
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test7411() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test7412() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-796166884);
		x.enqueue(1581354960);
    }
    @Test
    public void test7413() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.isFull();
		assertEquals("[]", z.toString());
		z.isFull();
		assertFalse(z.isFull());
		z.enqueue(-1866522749);
		z.dequeue();
    }
    @Test
    public void test7414() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.enqueue(1024959594);
		x.enqueue(1901821363);
		x.enqueue(-1518785644);
		x.dequeue();
		x.toString();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test7415() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.dequeue();
		z.toString();
		z.toString();
		z.toString();
		z.enqueue(1348423513);
		z.enqueue(1588882094);
    }
    @Test
    public void test7416() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.enqueue(-656543269);
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isFull();
    }
    @Test
    public void test7417() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.toString();
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.enqueue(-522179175);
		x.toString();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test7418() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test7419() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test7420() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-79418639);
		x.enqueue(-1310595499);
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.enqueue(-1198392590);
		x.enqueue(-736963191);
		x.toString();
		assertFalse(x.isFull());
		x.dequeue();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test7421() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-2000383270);
		variable.dequeue();
		variable.enqueue(-1966613337);
    }
    @Test
    public void test7422() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.enqueue(-1741225853);
		y.isFull();
    }
    @Test
    public void test7423() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1595126865);
		Var.toString();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test7424() {
		Queue Var = new Queue();
		Var.toString();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.dequeue();
		Var.enqueue(-2134355135);
		Var.toString();
		Var.isFull();
		Var.enqueue(-1151694267);
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test7425() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1146737435);
		Var.isFull();
		Var.enqueue(1062050520);
		Var.enqueue(2067184291);
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test7426() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.isFull();
		x.enqueue(1083423825);
		x.dequeue();
		x.enqueue(-1360349029);
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.toString();
		x.toString();
		x.toString();
    }
    @Test
    public void test7427() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(1944364542);
		z.isEmpty();
    }
    @Test
    public void test7428() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test7429() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test7430() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test7431() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.enqueue(-794099551);
		x.toString();
		x.toString();
		x.toString();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test7432() {
		Queue Var = new Queue();
		Var.enqueue(1058558393);
    }
    @Test
    public void test7433() {
		Queue y = new Queue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.isFull();
		y.isFull();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.enqueue(2154006);
		y.isFull();
		assertEquals(2154006, y.dequeue());
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.enqueue(225302516);
    }
    @Test
    public void test7434() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.enqueue(-2105940009);
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test7435() {
		Queue x = new Queue();
		x.enqueue(-1662024583);
		x.toString();
		x.enqueue(-10372324);
		assertFalse(x.isFull());
		x.isEmpty();
		assertFalse(x.isFull());
		x.dequeue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(1575348046);
		x.dequeue();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test7436() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(-1639593328);
		z.isEmpty();
    }
    @Test
    public void test7437() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1691355201);
		assertEquals("[]", variable.toString());
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test7438() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.isFull();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(1435331466);
		x.isFull();
		assertEquals(1435331466, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test7439() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(-192094323);
		Var.enqueue(294087628);
		Var.isEmpty();
		Var.enqueue(-859250303);
		assertEquals("[294087628]", Var.toString());
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-837718224);
    }
    @Test
    public void test7440() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1788167528);
		variable.enqueue(1488753884);
    }
    @Test
    public void test7441() {
		Queue x = new Queue();
		x.enqueue(-1643892662);
		x.enqueue(-411648310);
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.toString();
		x.isFull();
    }
    @Test
    public void test7442() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-360582792);
		assertFalse(x.isFull());
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.toString();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(-748834769);
		assertEquals(-1, x.dequeue());
		x.enqueue(-1659757666);
    }
    @Test
    public void test7443() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(-394629150);
		variable.enqueue(36742270);
		variable.isEmpty();
		variable.enqueue(-470839207);
		variable.toString();
		variable.toString();
    }
    @Test
    public void test7444() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(367696933);
		z.toString();
		z.enqueue(517893406);
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test7445() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-609190258);
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test7446() {
		Queue x = new Queue();
		x.enqueue(1255322589);
		x.toString();
		x.enqueue(279178759);
    }
    @Test
    public void test7447() {
		Queue Var = new Queue();
		Var.enqueue(171267452);
		Var.isEmpty();
    }
    @Test
    public void test7448() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(947444598);
		variable.enqueue(-105013864);
		assertFalse(variable.isFull());
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test7449() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(-1412281559);
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test7450() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(-1481996555);
    }
    @Test
    public void test7451() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isFull();
		variable.enqueue(1891566911);
		variable.isEmpty();
		variable.isEmpty();
		assertEquals(1891566911, variable.dequeue());
		variable.dequeue();
		variable.enqueue(-673297056);
		variable.enqueue(1232671469);
		variable.enqueue(-1448359176);
    }
    @Test
    public void test7452() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.toString();
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test7453() {
		Queue z = new Queue();
		z.enqueue(-618616635);
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(129871995);
		z.isEmpty();
		z.toString();
		z.isEmpty();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test7454() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(758518551);
		Var.toString();
		Var.toString();
		assertEquals("[758518551]", Var.toString());
		Var.enqueue(-1453833678);
		Var.dequeue();
		Var.enqueue(-2066685356);
		Var.dequeue();
    }
    @Test
    public void test7455() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-721997835);
		y.isFull();
    }
    @Test
    public void test7456() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.isEmpty();
		z.dequeue();
		z.toString();
		z.enqueue(1159299934);
		assertEquals(1159299934, z.dequeue());
		z.toString();
		assertFalse(z.isFull());
		z.dequeue();
		z.toString();
		z.enqueue(-777113240);
    }
    @Test
    public void test7457() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.dequeue();
		z.dequeue();
		z.enqueue(-998437472);
		z.isEmpty();
    }
    @Test
    public void test7458() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.enqueue(746149427);
    }
    @Test
    public void test7459() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(976267296);
		variable.isFull();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.enqueue(122349014);
    }
    @Test
    public void test7460() {
		Queue x = new Queue();
		x.toString();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.enqueue(-138811633);
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.toString();
		assertTrue(x.isEmpty());
		x.isFull();
		x.toString();
		x.toString();
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test7461() {
		Queue y = new Queue();
		y.enqueue(-774113975);
		assertEquals(-1, y.dequeue());
		y.enqueue(-1640928743);
		assertTrue(y.isEmpty());
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test7462() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.toString();
		assertEquals("[]", y.toString());
		y.isFull();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test7463() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1517719655);
		assertFalse(variable.isFull());
		assertFalse(variable.isEmpty());
		variable.enqueue(1369005105);
		assertEquals("[1517719655, 1369005105]", variable.toString());
		variable.enqueue(-679568717);
		variable.isEmpty();
    }
    @Test
    public void test7464() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
		y.toString();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.isFull();
		y.enqueue(-740176080);
		y.dequeue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test7465() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-1114490602);
    }
    @Test
    public void test7466() {
		Queue variable = new Queue();
		variable.enqueue(1242713177);
		variable.enqueue(1860205369);
		variable.enqueue(1044830641);
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(799925690);
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test7467() {
		Queue y = new Queue();
		y.enqueue(-705406986);
		y.toString();
		y.toString();
		y.enqueue(69917991);
    }
    @Test
    public void test7468() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.enqueue(-1527474476);
    }
    @Test
    public void test7469() {
		Queue x = new Queue();
		x.enqueue(-1520569508);
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.enqueue(1677092603);
    }
    @Test
    public void test7470() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.isFull();
		z.enqueue(636473692);
		z.isFull();
    }
    @Test
    public void test7471() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(537402742);
		assertEquals(537402742, x.dequeue());
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(-1273954595);
		x.enqueue(227119523);
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test7472() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.enqueue(-2097453232);
		y.dequeue();
		y.isEmpty();
		y.enqueue(2096968434);
		y.enqueue(-1400581133);
		assertFalse(y.isEmpty());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test7473() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(-5410456);
		assertTrue(x.isEmpty());
		x.isFull();
		x.toString();
		x.enqueue(-778109341);
		x.toString();
		x.enqueue(-1379472968);
		x.isEmpty();
    }
    @Test
    public void test7474() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(250400271);
		Var.enqueue(140980388);
		Var.isEmpty();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test7475() {
		Queue x = new Queue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.enqueue(-385629039);
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test7476() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.enqueue(373097732);
		x.toString();
    }
    @Test
    public void test7477() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.toString();
		x.enqueue(62600833);
		x.toString();
		x.dequeue();
		x.toString();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test7478() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(209851883);
		y.toString();
		y.dequeue();
    }
    @Test
    public void test7479() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(76482177);
    }
    @Test
    public void test7480() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.enqueue(-1500680764);
		x.enqueue(1862290953);
		x.isEmpty();
    }
    @Test
    public void test7481() {
		Queue z = new Queue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isFull();
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isFull();
		z.dequeue();
		z.toString();
		z.dequeue();
		z.enqueue(-1051791691);
    }
    @Test
    public void test7482() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.enqueue(-718155646);
		x.enqueue(-1781129194);
		x.toString();
		x.enqueue(1881976504);
		x.toString();
		x.isFull();
		x.enqueue(-943037712);
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.isFull();
    }
    @Test
    public void test7483() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.enqueue(-275360650);
		y.toString();
		y.enqueue(-1611875057);
		y.enqueue(1586423058);
		y.enqueue(467479885);
    }
    @Test
    public void test7484() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.isFull();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.enqueue(-1141076244);
		x.enqueue(-501773405);
		x.isFull();
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(1965916227);
		x.enqueue(-1994395101);
		x.isEmpty();
		x.enqueue(166805659);
    }
    @Test
    public void test7485() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test7486() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1793980377);
    }
    @Test
    public void test7487() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.isEmpty();
		z.toString();
		z.isFull();
		z.enqueue(529200231);
		z.toString();
		assertFalse(z.isEmpty());
		z.isFull();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test7488() {
		Queue variable = new Queue();
		variable.enqueue(827712263);
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(1660209667);
		variable.isFull();
		variable.isFull();
		variable.toString();
		variable.dequeue();
		variable.isFull();
		assertEquals("[1660209667]", variable.toString());
		assertFalse(variable.isFull());
		variable.enqueue(-1151329215);
    }
    @Test
    public void test7489() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.enqueue(1442775948);
    }
    @Test
    public void test7490() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1376402216);
		Var.dequeue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(900179197);
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test7491() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.enqueue(518711617);
		assertFalse(x.isEmpty());
		assertEquals("[518711617]", x.toString());
		x.enqueue(-170592968);
		assertFalse(x.isFull());
		x.toString();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test7492() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
    }
    @Test
    public void test7493() {
		Queue z = new Queue();
		z.enqueue(-1533275549);
		z.isEmpty();
		z.toString();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(659206073);
		z.isFull();
		z.enqueue(539597415);
    }
    @Test
    public void test7494() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(1616526478);
		Var.enqueue(542516719);
		Var.toString();
		Var.isFull();
		assertEquals(1616526478, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test7495() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.enqueue(-350197530);
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.enqueue(-1669795363);
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test7496() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-354390951);
		variable.enqueue(1061539738);
		variable.toString();
		variable.toString();
		variable.isFull();
		variable.toString();
		variable.enqueue(1183528286);
		variable.isFull();
    }
    @Test
    public void test7497() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.enqueue(-32088659);
		assertFalse(x.isFull());
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(-378881352);
		assertFalse(x.isFull());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isFull();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test7498() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(-574472835);
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-2058917750);
		Var.isFull();
		Var.enqueue(1564863332);
    }
    @Test
    public void test7499() {
		Queue Var = new Queue();
		Var.enqueue(-672025434);
		Var.enqueue(-240489997);
		Var.isEmpty();
    }
    @Test
    public void test7500() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test7501() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test7502() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test7503() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test7504() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(1145212306);
		variable.isEmpty();
    }
    @Test
    public void test7505() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(616455468);
		assertEquals(616455468, z.dequeue());
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.dequeue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test7506() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.enqueue(1124418264);
		Var.enqueue(-47574078);
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(-1647643827);
    }
    @Test
    public void test7507() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-1985506893);
		x.enqueue(-1711608108);
		x.enqueue(-1319484060);
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.enqueue(-344732181);
    }
    @Test
    public void test7508() {
		Queue Var = new Queue();
		Var.enqueue(-1357958896);
		Var.dequeue();
    }
    @Test
    public void test7509() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.enqueue(-1002517343);
    }
    @Test
    public void test7510() {
		Queue z = new Queue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1098997129);
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test7511() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.toString();
    }
    @Test
    public void test7512() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test7513() {
		Queue z = new Queue();
		z.enqueue(217538882);
		z.enqueue(-1848965267);
		z.isFull();
		z.toString();
		assertEquals("[217538882]", z.toString());
		z.toString();
		z.toString();
		z.toString();
		z.toString();
    }
    @Test
    public void test7514() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(1568653610);
		y.isEmpty();
    }
    @Test
    public void test7515() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.enqueue(-2000130481);
		Var.enqueue(-1676501396);
		assertTrue(Var.isEmpty());
		Var.enqueue(730069229);
		assertEquals("[730069229]", Var.toString());
		assertFalse(Var.isEmpty());
		Var.enqueue(1797939694);
    }
    @Test
    public void test7516() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test7517() {
		Queue x = new Queue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.enqueue(-1536081356);
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test7518() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.enqueue(1106297227);
		variable.isFull();
		assertEquals("[1106297227]", variable.toString());
		variable.toString();
		variable.toString();
		variable.enqueue(-296227602);
		variable.toString();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test7519() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test7520() {
		Queue x = new Queue();
		x.enqueue(1941870134);
		x.isEmpty();
		x.enqueue(1426942681);
		x.enqueue(1442519942);
		x.dequeue();
		x.toString();
		assertFalse(x.isEmpty());
		x.isFull();
		x.isEmpty();
		x.enqueue(191634742);
		x.dequeue();
    }
    @Test
    public void test7521() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(182383453);
		x.toString();
		x.isEmpty();
		assertEquals("[182383453]", x.toString());
		x.isEmpty();
		assertFalse(x.isFull());
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test7522() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test7523() {
		Queue z = new Queue();
		z.enqueue(1714815988);
		z.isFull();
		assertEquals(1714815988, z.dequeue());
		z.enqueue(-396088802);
		z.dequeue();
		z.dequeue();
		z.enqueue(-914293535);
		z.dequeue();
		z.enqueue(1673696581);
    }
    @Test
    public void test7524() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test7525() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isFull();
		variable.isFull();
		variable.enqueue(1928463451);
		variable.isFull();
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test7526() {
		Queue y = new Queue();
		y.enqueue(-837222610);
		assertEquals("[]", y.toString());
		y.toString();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test7527() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(313720354);
		variable.toString();
		variable.isFull();
		variable.enqueue(2116278510);
		variable.dequeue();
    }
    @Test
    public void test7528() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.toString();
		z.enqueue(-51448533);
		z.dequeue();
    }
    @Test
    public void test7529() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-457865320);
		variable.dequeue();
    }
    @Test
    public void test7530() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-460691700);
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.enqueue(1495209318);
		assertFalse(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test7531() {
		Queue Var = new Queue();
		Var.enqueue(668561443);
		Var.enqueue(-1566827383);
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test7532() {
		Queue y = new Queue();
		y.enqueue(-958409235);
		y.dequeue();
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(-450223696);
    }
    @Test
    public void test7533() {
		Queue z = new Queue();
		z.enqueue(-706792108);
		z.isEmpty();
		z.isEmpty();
		assertFalse(z.isFull());
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-522190243);
		z.enqueue(-1109388954);
    }
    @Test
    public void test7534() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test7535() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.enqueue(-813323743);
		z.enqueue(-1627323352);
		assertTrue(z.isEmpty());
		z.enqueue(2109198857);
		z.toString();
		z.isFull();
		z.enqueue(-902502800);
		z.enqueue(1060699867);
		assertFalse(z.isFull());
		assertEquals(2109198857, z.dequeue());
		z.isFull();
    }
    @Test
    public void test7536() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.enqueue(2123437672);
		x.isFull();
		x.enqueue(2018439558);
    }
    @Test
    public void test7537() {
		Queue Var = new Queue();
		Var.enqueue(1711509297);
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test7538() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.toString();
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test7539() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.enqueue(-1649321829);
    }
    @Test
    public void test7540() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.toString();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(-1434532634);
    }
    @Test
    public void test7541() {
		Queue y = new Queue();
		y.enqueue(-2073004859);
		assertFalse(y.isFull());
		y.enqueue(889682610);
		y.dequeue();
		assertFalse(y.isFull());
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.enqueue(-2142551925);
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.toString();
		y.dequeue();
    }
    @Test
    public void test7542() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-495839757);
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		variable.enqueue(181346215);
		variable.enqueue(-661022615);
		variable.isFull();
    }
    @Test
    public void test7543() {
		Queue y = new Queue();
		y.toString();
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test7544() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test7545() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(765520993);
		y.isEmpty();
    }
    @Test
    public void test7546() {
		Queue variable = new Queue();
		variable.enqueue(-1610929194);
		variable.enqueue(-663701524);
		variable.dequeue();
    }
    @Test
    public void test7547() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test7548() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.enqueue(-296077689);
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(712525566);
		y.dequeue();
    }
    @Test
    public void test7549() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test7550() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(1773756443);
		Var.enqueue(-574689687);
		Var.isEmpty();
		Var.isEmpty();
		assertEquals("[1773756443]", Var.toString());
		assertEquals("[1773756443]", Var.toString());
		Var.enqueue(723616830);
		Var.isEmpty();
    }
    @Test
    public void test7551() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.enqueue(-1530017801);
		y.enqueue(-364514416);
		y.toString();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.toString();
    }
    @Test
    public void test7552() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(608331054);
		z.isEmpty();
		z.toString();
		z.isFull();
		z.isEmpty();
		z.isFull();
		z.enqueue(2018630924);
    }
    @Test
    public void test7553() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-204388513);
		assertFalse(Var.isFull());
		Var.toString();
		Var.toString();
    }
    @Test
    public void test7554() {
		Queue y = new Queue();
		y.enqueue(166583453);
		y.enqueue(322210599);
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test7555() {
		Queue Var = new Queue();
		Var.enqueue(-435414820);
		Var.isFull();
    }
    @Test
    public void test7556() {
		Queue variable = new Queue();
		variable.enqueue(22491026);
		variable.enqueue(-1295066826);
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test7557() {
		Queue y = new Queue();
		y.enqueue(736389681);
		y.isFull();
		y.isFull();
    }
    @Test
    public void test7558() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.enqueue(1889965962);
		y.enqueue(-1635211810);
		y.isEmpty();
		y.dequeue();
		y.enqueue(1098205836);
		assertEquals("[1098205836]", y.toString());
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test7559() {
		Queue y = new Queue();
		y.enqueue(-1960948541);
		y.toString();
		y.toString();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(1297104220);
		y.toString();
		y.toString();
    }
    @Test
    public void test7560() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.enqueue(-942977397);
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test7561() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.enqueue(1471344333);
		assertEquals(1471344333, x.dequeue());
		x.enqueue(-326422711);
		x.isEmpty();
    }
    @Test
    public void test7562() {
		Queue variable = new Queue();
		variable.enqueue(-1072785238);
		variable.enqueue(1059454668);
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(-392483572);
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test7563() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test7564() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		y.enqueue(-1187324355);
		y.enqueue(1226532749);
    }
    @Test
    public void test7565() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.enqueue(-1648820569);
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.isFull();
		x.isFull();
		x.isEmpty();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.toString();
		assertFalse(x.isFull());
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(-1179668245);
    }
    @Test
    public void test7566() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.enqueue(1091164877);
		x.enqueue(-695425144);
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test7567() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(607797747);
		assertEquals(607797747, y.dequeue());
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
		y.toString();
		y.isEmpty();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test7568() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.enqueue(-890649926);
		y.toString();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test7569() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.toString();
		y.enqueue(-1438356241);
		y.toString();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.isEmpty();
		y.enqueue(169553212);
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
		assertEquals("[169553212]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test7570() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.toString();
		assertEquals("[]", z.toString());
		z.isFull();
		assertFalse(z.isFull());
		z.enqueue(2131422374);
    }
    @Test
    public void test7571() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test7572() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test7573() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.enqueue(333266664);
		x.enqueue(1434396895);
		assertFalse(x.isEmpty());
		assertEquals(333266664, x.dequeue());
		assertFalse(x.isEmpty());
		assertFalse(x.isEmpty());
		x.enqueue(-139751924);
    }
    @Test
    public void test7574() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.enqueue(-582322982);
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1409992673);
    }
    @Test
    public void test7575() {
		Queue variable = new Queue();
		variable.enqueue(-1269030456);
		assertEquals("[]", variable.toString());
		variable.enqueue(1939040744);
		variable.toString();
		assertEquals(1939040744, variable.dequeue());
		variable.enqueue(-1312268502);
		assertFalse(variable.isFull());
		variable.enqueue(771127889);
		variable.toString();
    }
    @Test
    public void test7576() {
		Queue y = new Queue();
		y.enqueue(-1119638561);
		y.isFull();
		y.toString();
		y.enqueue(-1043662028);
		y.dequeue();
    }
    @Test
    public void test7577() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.enqueue(-1599125084);
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test7578() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-1342734195);
		variable.isEmpty();
		variable.enqueue(85255070);
    }
    @Test
    public void test7579() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.enqueue(-331674903);
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test7580() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.enqueue(-320755365);
		assertEquals("[]", y.toString());
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(-1129364454);
		y.isEmpty();
		y.toString();
		y.isEmpty();
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test7581() {
		Queue Var = new Queue();
		Var.enqueue(-1619816300);
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test7582() {
		Queue z = new Queue();
		z.enqueue(-1001325624);
		z.toString();
		z.toString();
		z.isEmpty();
		z.enqueue(1390866882);
    }
    @Test
    public void test7583() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.enqueue(-1763175350);
		z.enqueue(1681961473);
		assertEquals("[1681961473]", z.toString());
		assertFalse(z.isEmpty());
		z.enqueue(1673439877);
		assertEquals("[1681961473, 1673439877]", z.toString());
		z.isFull();
		z.toString();
    }
    @Test
    public void test7584() {
		Queue variable = new Queue();
		variable.enqueue(-2064270107);
		variable.enqueue(-1206046500);
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.toString();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.enqueue(1674149452);
    }
    @Test
    public void test7585() {
		Queue z = new Queue();
		z.enqueue(-1717059293);
		z.toString();
		z.isFull();
		z.isFull();
		z.isEmpty();
		z.toString();
		z.enqueue(201695950);
		z.enqueue(1067993652);
		z.enqueue(-909519800);
		z.isEmpty();
    }
    @Test
    public void test7586() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.isFull();
		assertEquals("[]", z.toString());
		z.enqueue(-948304769);
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isFull();
		z.enqueue(2056027530);
		z.enqueue(1630375609);
		z.dequeue();
    }
    @Test
    public void test7587() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.toString();
		x.isFull();
		x.dequeue();
		x.enqueue(-218568133);
		x.dequeue();
		x.enqueue(59270617);
    }
    @Test
    public void test7588() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.enqueue(1685666013);
		x.dequeue();
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
		x.enqueue(-1246578527);
    }
    @Test
    public void test7589() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
    }
    @Test
    public void test7590() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test7591() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isEmpty();
		z.enqueue(740888668);
		z.enqueue(336811380);
    }
    @Test
    public void test7592() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(953285596);
		Var.isEmpty();
    }
    @Test
    public void test7593() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test7594() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(-503180809);
		z.enqueue(-1025291837);
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test7595() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(1498948508);
		x.toString();
		assertEquals("[1498948508]", x.toString());
		x.isFull();
		x.isFull();
		x.isFull();
		x.isFull();
		assertEquals(1498948508, x.dequeue());
		x.toString();
    }
    @Test
    public void test7596() {
		Queue z = new Queue();
		z.enqueue(1576625415);
		assertFalse(z.isEmpty());
		z.isEmpty();
		z.isEmpty();
		z.toString();
		assertFalse(z.isFull());
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test7597() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.toString();
		z.isEmpty();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(1910331164);
		z.isFull();
		assertFalse(z.isEmpty());
		assertFalse(z.isEmpty());
		z.toString();
		z.toString();
    }
    @Test
    public void test7598() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.enqueue(-2139937889);
    }
    @Test
    public void test7599() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test7600() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1919059475);
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-1371849956);
		variable.toString();
		variable.enqueue(-1089442421);
    }
    @Test
    public void test7601() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(-1914527175);
		z.dequeue();
		z.isFull();
		z.isEmpty();
		z.enqueue(-468726176);
		z.enqueue(763042130);
		z.enqueue(-1972569019);
		z.toString();
		z.isFull();
		z.enqueue(-872059687);
    }
    @Test
    public void test7602() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1992640023);
    }
    @Test
    public void test7603() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1964040303);
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.toString();
		z.isEmpty();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.isFull();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test7604() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.isFull();
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(623189683);
		z.isFull();
    }
    @Test
    public void test7605() {
		Queue y = new Queue();
		y.enqueue(1390547846);
		y.dequeue();
		y.isEmpty();
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(-627584305);
		y.isEmpty();
		y.isFull();
		y.enqueue(1760291379);
		y.dequeue();
    }
    @Test
    public void test7606() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.enqueue(103503636);
		y.isEmpty();
		y.toString();
		y.enqueue(-455035190);
		y.dequeue();
		y.toString();
    }
    @Test
    public void test7607() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(-36442024);
		z.dequeue();
    }
    @Test
    public void test7608() {
		Queue Var = new Queue();
		Var.enqueue(254690440);
		assertEquals("[254690440]", Var.toString());
		Var.isEmpty();
		Var.enqueue(1677876778);
    }
    @Test
    public void test7609() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test7610() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
		x.enqueue(1259563541);
		x.isEmpty();
    }
    @Test
    public void test7611() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test7612() {
		Queue x = new Queue();
		x.enqueue(-1876248022);
		x.toString();
		assertEquals("[]", x.toString());
		x.toString();
    }
    @Test
    public void test7613() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.toString();
		variable.enqueue(-576594974);
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.enqueue(1146191594);
		variable.toString();
		assertEquals("[1146191594]", variable.toString());
		variable.toString();
    }
    @Test
    public void test7614() {
		Queue y = new Queue();
		y.enqueue(-369797324);
		y.enqueue(-446754598);
		y.dequeue();
    }
    @Test
    public void test7615() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(1505854587);
		x.isEmpty();
		x.enqueue(1284092263);
		x.dequeue();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test7616() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test7617() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(407318165);
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
		variable.toString();
		assertEquals(407318165, variable.dequeue());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test7618() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(-2079396748);
		y.isFull();
    }
    @Test
    public void test7619() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test7620() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.enqueue(-144677176);
		Var.enqueue(-144423394);
		Var.isFull();
    }
    @Test
    public void test7621() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(-784533651);
		x.dequeue();
    }
    @Test
    public void test7622() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test7623() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.enqueue(758724049);
		Var.dequeue();
		Var.enqueue(1776648899);
    }
    @Test
    public void test7624() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
		y.enqueue(-1975304388);
		y.isFull();
		y.isFull();
		y.toString();
    }
    @Test
    public void test7625() {
		Queue variable = new Queue();
		variable.enqueue(1040216955);
		variable.enqueue(779291900);
		assertFalse(variable.isFull());
		assertFalse(variable.isEmpty());
		variable.enqueue(981230205);
		assertFalse(variable.isFull());
		variable.toString();
		assertEquals(1040216955, variable.dequeue());
		variable.isFull();
		variable.toString();
		variable.dequeue();
		variable.enqueue(693005632);
		variable.toString();
    }
    @Test
    public void test7626() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.enqueue(-852906209);
    }
    @Test
    public void test7627() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.enqueue(261584531);
		variable.enqueue(1158182029);
		variable.toString();
		assertEquals("[261584531, 1158182029]", variable.toString());
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test7628() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(1456955882);
		assertFalse(variable.isFull());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(153481547);
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test7629() {
		Queue Var = new Queue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.enqueue(1466279489);
		assertEquals(1466279489, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test7630() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(1593443017);
		assertEquals(1593443017, variable.dequeue());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test7631() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		z.isFull();
		z.enqueue(685339716);
		z.isEmpty();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test7632() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(751312828);
    }
    @Test
    public void test7633() {
		Queue x = new Queue();
		x.isFull();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.enqueue(339846884);
		x.enqueue(244621594);
		x.isEmpty();
		assertEquals("[339846884, 244621594]", x.toString());
		x.enqueue(1550918631);
    }
    @Test
    public void test7634() {
		Queue x = new Queue();
		x.toString();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		x.enqueue(-977886185);
		x.toString();
    }
    @Test
    public void test7635() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test7636() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test7637() {
		Queue variable = new Queue();
		variable.enqueue(-144554738);
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test7638() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.enqueue(-1576532558);
		x.dequeue();
    }
    @Test
    public void test7639() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(679749287);
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test7640() {
		Queue y = new Queue();
		y.enqueue(-1782449337);
		assertEquals("[]", y.toString());
		y.enqueue(-768582861);
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(-1086967255);
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test7641() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test7642() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(-1272123457);
		variable.enqueue(-1457188090);
    }
    @Test
    public void test7643() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test7644() {
		Queue y = new Queue();
		y.enqueue(-892432252);
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
		y.enqueue(-124824063);
		y.isEmpty();
		y.toString();
		y.enqueue(1585861734);
		y.dequeue();
    }
    @Test
    public void test7645() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		assertFalse(x.isFull());
		x.toString();
		x.toString();
		x.enqueue(1705802085);
		assertFalse(x.isFull());
		x.enqueue(-758283374);
		x.isEmpty();
    }
    @Test
    public void test7646() {
		Queue y = new Queue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.toString();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test7647() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1674480541);
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test7648() {
		Queue x = new Queue();
		x.enqueue(-314523164);
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test7649() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.toString();
		variable.toString();
		variable.isFull();
		variable.isFull();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.toString();
		variable.enqueue(1878477858);
    }
    @Test
    public void test7650() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-2001235654);
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(1986757317);
		Var.isEmpty();
    }
    @Test
    public void test7651() {
		Queue z = new Queue();
		z.enqueue(244267331);
		z.toString();
		z.toString();
		z.toString();
    }
    @Test
    public void test7652() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(1776949922);
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-75568258);
		variable.toString();
    }
    @Test
    public void test7653() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(-1349675567);
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test7654() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
		x.isEmpty();
		x.enqueue(1653815976);
    }
    @Test
    public void test7655() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(1418784815);
		x.isFull();
		assertEquals("[1418784815]", x.toString());
		x.toString();
    }
    @Test
    public void test7656() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test7657() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.enqueue(2048825149);
		assertFalse(z.isEmpty());
		z.isFull();
		assertFalse(z.isEmpty());
		assertEquals(2048825149, z.dequeue());
		z.toString();
    }
    @Test
    public void test7658() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.dequeue();
		x.enqueue(-1717906750);
    }
    @Test
    public void test7659() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
    }
    @Test
    public void test7660() {
		Queue z = new Queue();
		z.enqueue(-809392888);
		z.isFull();
		z.enqueue(1167853105);
    }
    @Test
    public void test7661() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.enqueue(-1290743934);
    }
    @Test
    public void test7662() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test7663() {
		Queue variable = new Queue();
		variable.enqueue(1246090647);
		variable.enqueue(1201547288);
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(709258102);
    }
    @Test
    public void test7664() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-1280339749);
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.enqueue(671916330);
		y.dequeue();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test7665() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.isFull();
		x.enqueue(-201073171);
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test7666() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		assertEquals("[]", x.toString());
		x.toString();
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(-1957244539);
    }
    @Test
    public void test7667() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.isEmpty();
		assertFalse(x.isFull());
		x.isEmpty();
		x.enqueue(1809546966);
    }
    @Test
    public void test7668() {
		Queue z = new Queue();
		z.enqueue(-755710221);
		z.isEmpty();
		z.enqueue(1351964470);
		z.isEmpty();
		z.isFull();
		assertFalse(z.isEmpty());
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isFull();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.enqueue(-861947407);
    }
    @Test
    public void test7669() {
		Queue Var = new Queue();
		Var.enqueue(-626901129);
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test7670() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-319300356);
		x.enqueue(1647459476);
		assertFalse(x.isEmpty());
		x.isEmpty();
		assertFalse(x.isFull());
		x.isEmpty();
		assertEquals(1647459476, x.dequeue());
		x.isFull();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test7671() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test7672() {
		Queue y = new Queue();
		y.enqueue(-1701101757);
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.dequeue();
    }
    @Test
    public void test7673() {
		Queue x = new Queue();
		x.enqueue(-1511018436);
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test7674() {
		Queue y = new Queue();
		y.enqueue(-110865372);
		y.toString();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test7675() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test7676() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(-38664659);
		assertEquals("[]", x.toString());
		x.toString();
    }
    @Test
    public void test7677() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(355882616);
		Var.toString();
		assertEquals("[355882616]", Var.toString());
		Var.isEmpty();
		assertEquals("[355882616]", Var.toString());
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-131190310);
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test7678() {
		Queue z = new Queue();
		z.enqueue(2104400551);
		z.isFull();
		z.isFull();
		z.isEmpty();
		z.toString();
		z.isFull();
		z.dequeue();
		z.isFull();
		z.isEmpty();
		z.enqueue(720615793);
    }
    @Test
    public void test7679() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(1441103434);
		z.toString();
		z.isEmpty();
		z.enqueue(-37641653);
		z.toString();
		assertFalse(z.isFull());
		z.dequeue();
		z.toString();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.enqueue(1076508566);
    }
    @Test
    public void test7680() {
		Queue x = new Queue();
		x.enqueue(-168450956);
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(-1234625929);
		assertEquals("[]", x.toString());
		x.enqueue(668486451);
		x.dequeue();
    }
    @Test
    public void test7681() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.enqueue(956345062);
		z.enqueue(-1872738265);
		z.enqueue(659854179);
		z.toString();
    }
    @Test
    public void test7682() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.enqueue(723889408);
		x.isFull();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test7683() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(-989694128);
		z.isFull();
    }
    @Test
    public void test7684() {
		Queue x = new Queue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.enqueue(1955034826);
		assertEquals(1955034826, x.dequeue());
		x.isEmpty();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test7685() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test7686() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.enqueue(1002083596);
		x.enqueue(660761718);
    }
    @Test
    public void test7687() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.isFull();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isFull();
		z.enqueue(-1942796419);
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.dequeue();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.enqueue(-1697571033);
    }
    @Test
    public void test7688() {
		Queue Var = new Queue();
		Var.enqueue(-1670940850);
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test7689() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-1548521728);
		variable.isFull();
		variable.toString();
		variable.enqueue(-543483684);
		variable.dequeue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test7690() {
		Queue y = new Queue();
		y.enqueue(1947548352);
		y.isFull();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isFull();
		y.enqueue(492901934);
		y.dequeue();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test7691() {
		Queue z = new Queue();
		z.enqueue(-1416514342);
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isFull();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test7692() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test7693() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test7694() {
		Queue y = new Queue();
		y.enqueue(581302644);
		assertEquals("[581302644]", y.toString());
		y.isFull();
		assertFalse(y.isEmpty());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isEmpty();
		y.toString();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.enqueue(594770111);
		y.enqueue(2093745757);
		y.isEmpty();
    }
    @Test
    public void test7695() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test7696() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		x.enqueue(-1698489400);
    }
    @Test
    public void test7697() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test7698() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(-826697735);
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isFull();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test7699() {
		Queue x = new Queue();
		x.enqueue(1721935567);
		x.enqueue(-1237785246);
		x.dequeue();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.enqueue(1511978376);
		x.enqueue(2120679527);
    }
    @Test
    public void test7700() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test7701() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		z.isEmpty();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test7702() {
		Queue y = new Queue();
		y.toString();
		assertTrue(y.isEmpty());
		y.enqueue(2528156);
		y.isFull();
		y.enqueue(-2000107841);
		y.dequeue();
    }
    @Test
    public void test7703() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.toString();
		variable.enqueue(-1426481787);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(893567983);
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test7704() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.enqueue(716353888);
		z.isFull();
		z.enqueue(793834833);
		z.enqueue(-781090420);
		z.enqueue(574723207);
		z.dequeue();
		z.enqueue(-1225816641);
		z.isFull();
		z.toString();
    }
    @Test
    public void test7705() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test7706() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.toString();
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.isFull();
		x.toString();
    }
    @Test
    public void test7707() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-60640678);
		variable.dequeue();
		variable.enqueue(68529392);
    }
    @Test
    public void test7708() {
		Queue z = new Queue();
		z.toString();
		z.toString();
    }
    @Test
    public void test7709() {
		Queue y = new Queue();
		y.enqueue(1714328960);
		y.toString();
		y.isFull();
		assertEquals(1714328960, y.dequeue());
		y.isFull();
		y.enqueue(92872501);
		assertFalse(y.isEmpty());
		y.dequeue();
    }
    @Test
    public void test7710() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		assertFalse(y.isFull());
		y.enqueue(-1802888482);
		y.enqueue(350792442);
		assertEquals(350792442, y.dequeue());
		y.enqueue(-159251905);
		y.isFull();
		assertTrue(y.isEmpty());
		y.enqueue(-1097632890);
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
		y.enqueue(1182161833);
    }
    @Test
    public void test7711() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(1876833908);
		assertFalse(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test7712() {
		Queue Var = new Queue();
		Var.enqueue(-1679312672);
    }
    @Test
    public void test7713() {
		Queue x = new Queue();
		x.enqueue(169411170);
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		assertFalse(x.isEmpty());
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test7714() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1703688878);
		Var.dequeue();
		Var.enqueue(-1194634013);
    }
    @Test
    public void test7715() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1479321507);
		Var.enqueue(-1343078908);
		Var.enqueue(-267220426);
		assertEquals(1479321507, Var.dequeue());
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.enqueue(-453347025);
		Var.enqueue(-1756718770);
    }
    @Test
    public void test7716() {
		Queue y = new Queue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test7717() {
		Queue y = new Queue();
		y.enqueue(-84710546);
		y.toString();
		y.isEmpty();
		y.dequeue();
		y.enqueue(144613148);
		y.enqueue(-580382593);
    }
    @Test
    public void test7718() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1545976265);
    }
    @Test
    public void test7719() {
		Queue Var = new Queue();
		Var.enqueue(735916844);
		Var.toString();
		Var.isFull();
		Var.toString();
		Var.enqueue(-1020555603);
		Var.dequeue();
		Var.enqueue(-731318862);
    }
    @Test
    public void test7720() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.enqueue(534134825);
		assertEquals(534134825, variable.dequeue());
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-423304571);
		variable.isEmpty();
    }
    @Test
    public void test7721() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-1807975021);
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.enqueue(1255987809);
		assertFalse(x.isFull());
		x.toString();
		x.toString();
    }
    @Test
    public void test7722() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(785999292);
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(-1214221555);
    }
    @Test
    public void test7723() {
		Queue x = new Queue();
		x.enqueue(1888038308);
		assertFalse(x.isFull());
		x.dequeue();
		x.isEmpty();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.enqueue(-1986750564);
		x.enqueue(-740130062);
		x.toString();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.enqueue(525068207);
    }
    @Test
    public void test7724() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-299484866);
		Var.dequeue();
		Var.enqueue(1600628568);
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test7725() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isFull();
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.toString();
		assertTrue(z.isEmpty());
		z.isFull();
		z.isFull();
		assertEquals("[]", z.toString());
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test7726() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
		y.enqueue(-368269408);
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(1967897856);
		y.isEmpty();
		assertEquals(1967897856, y.dequeue());
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test7727() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-1608010737);
		assertTrue(y.isEmpty());
		y.dequeue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(358478406);
		y.isEmpty();
		y.enqueue(-391138181);
		y.isFull();
		y.enqueue(-1496859785);
    }
    @Test
    public void test7728() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.toString();
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(-1841607004);
		x.isEmpty();
		x.enqueue(1606240561);
		x.enqueue(-2044514790);
		x.isEmpty();
    }
    @Test
    public void test7729() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-934529);
    }
    @Test
    public void test7730() {
		Queue x = new Queue();
		x.enqueue(1476278802);
		assertFalse(x.isEmpty());
		x.toString();
		x.enqueue(-1888276492);
		x.isEmpty();
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test7731() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1863110730);
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test7732() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test7733() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(423283060);
    }
    @Test
    public void test7734() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.toString();
    }
    @Test
    public void test7735() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.enqueue(786997400);
		variable.toString();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test7736() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test7737() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.dequeue();
		z.toString();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		z.toString();
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test7738() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test7739() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.toString();
    }
    @Test
    public void test7740() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-1827890957);
		variable.enqueue(-749093747);
		variable.toString();
		variable.toString();
    }
    @Test
    public void test7741() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(470415844);
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		Var.enqueue(686037283);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test7742() {
		Queue y = new Queue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isFull();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isFull();
		y.enqueue(-667632948);
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test7743() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-698230152);
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.toString();
		y.toString();
		y.toString();
		y.toString();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test7744() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.enqueue(912994207);
		assertEquals(912994207, x.dequeue());
		x.dequeue();
		x.dequeue();
		x.enqueue(-361776626);
    }
    @Test
    public void test7745() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test7746() {
		Queue variable = new Queue();
		variable.enqueue(-1804916901);
		assertTrue(variable.isEmpty());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test7747() {
		Queue variable = new Queue();
		variable.enqueue(-1718508742);
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(-649175187);
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test7748() {
		Queue y = new Queue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.enqueue(-540688561);
		y.enqueue(2097930309);
		assertFalse(y.isEmpty());
		y.isEmpty();
		y.dequeue();
		y.enqueue(1714179010);
		y.isFull();
    }
    @Test
    public void test7749() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isFull();
		variable.enqueue(-1339225111);
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test7750() {
		Queue z = new Queue();
		z.enqueue(-1060884843);
		z.enqueue(-321706687);
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test7751() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.isFull();
		variable.enqueue(257115998);
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test7752() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.enqueue(1770459963);
		y.isEmpty();
		y.enqueue(-608037763);
		assertEquals(1770459963, y.dequeue());
		y.enqueue(518988278);
    }
    @Test
    public void test7753() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.toString();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(350735878);
		assertEquals(350735878, Var.dequeue());
		Var.enqueue(1703153911);
		Var.toString();
		Var.enqueue(292944975);
		Var.enqueue(852185285);
		Var.toString();
    }
    @Test
    public void test7754() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(51224169);
		Var.toString();
		Var.isFull();
		Var.toString();
		Var.enqueue(-1748951354);
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test7755() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test7756() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(1549209929);
		y.dequeue();
		y.enqueue(646879460);
		y.toString();
		y.enqueue(1074279387);
		y.isEmpty();
		assertEquals(646879460, y.dequeue());
		y.enqueue(110409088);
    }
    @Test
    public void test7757() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(538963288);
		variable.enqueue(379474161);
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(-1025095402);
		variable.enqueue(1968891871);
    }
    @Test
    public void test7758() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		x.isFull();
		x.enqueue(1257306771);
		x.isFull();
		x.toString();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test7759() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(169070656);
		variable.enqueue(-352411746);
		variable.enqueue(-1501471405);
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test7760() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1115459186);
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.toString();
		Var.enqueue(860038010);
		Var.enqueue(1324551242);
		Var.dequeue();
		assertFalse(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.enqueue(-366939799);
    }
    @Test
    public void test7761() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.enqueue(-1865738248);
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.enqueue(627622956);
		y.enqueue(1779912105);
		y.isFull();
		y.dequeue();
		y.enqueue(-1823900608);
		y.toString();
    }
    @Test
    public void test7762() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(843639413);
		assertEquals("[843639413]", Var.toString());
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.enqueue(1143285236);
		assertEquals(843639413, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test7763() {
		Queue x = new Queue();
		x.enqueue(748291214);
		x.toString();
		x.isFull();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isFull();
		assertEquals("[]", x.toString());
		x.enqueue(-1169453698);
    }
    @Test
    public void test7764() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
    }
    @Test
    public void test7765() {
		Queue variable = new Queue();
		variable.enqueue(1337086818);
    }
    @Test
    public void test7766() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(1922425748);
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test7767() {
		Queue x = new Queue();
		x.enqueue(-21053587);
		x.isFull();
		x.isFull();
		x.dequeue();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.toString();
		x.isFull();
    }
    @Test
    public void test7768() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(1152716897);
		Var.enqueue(-1668131537);
		assertFalse(Var.isFull());
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.enqueue(1313245309);
		Var.isFull();
		Var.isFull();
		assertEquals("[1152716897, 1313245309]", Var.toString());
		assertFalse(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(69344668);
		Var.isFull();
		Var.enqueue(1424998055);
    }
    @Test
    public void test7769() {
		Queue y = new Queue();
		y.enqueue(1922228860);
		y.isEmpty();
    }
    @Test
    public void test7770() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		z.enqueue(-1527575607);
		z.isFull();
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(1169689641);
		assertEquals(1169689641, z.dequeue());
		z.enqueue(1969485014);
		assertFalse(z.isEmpty());
		z.isFull();
		assertEquals(1969485014, z.dequeue());
		z.enqueue(-565986815);
    }
    @Test
    public void test7771() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.isFull();
		x.enqueue(73676239);
		x.dequeue();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test7772() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		assertTrue(y.isEmpty());
		y.toString();
		assertEquals(-1, y.dequeue());
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(161248142);
		y.isEmpty();
		assertEquals(161248142, y.dequeue());
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(1620818345);
		y.isEmpty();
    }
    @Test
    public void test7773() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		z.isFull();
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(-2059136613);
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isEmpty();
		z.enqueue(1005677724);
    }
    @Test
    public void test7774() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(1758590098);
		Var.toString();
    }
    @Test
    public void test7775() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test7776() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test7777() {
		Queue Var = new Queue();
		Var.enqueue(-973410604);
		Var.enqueue(752678617);
		Var.toString();
		assertEquals(752678617, Var.dequeue());
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test7778() {
		Queue z = new Queue();
		z.enqueue(2049830604);
		z.isFull();
		assertFalse(z.isFull());
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test7779() {
		Queue y = new Queue();
		y.enqueue(1588511576);
		y.isEmpty();
    }
    @Test
    public void test7780() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test7781() {
		Queue x = new Queue();
		x.enqueue(-1370672348);
		x.toString();
		x.dequeue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test7782() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		Var.enqueue(1743533834);
		Var.enqueue(990820612);
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test7783() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(1176920174);
		z.isFull();
		assertEquals("[1176920174]", z.toString());
		z.isFull();
		z.isFull();
		assertFalse(z.isEmpty());
		z.isFull();
		assertEquals(1176920174, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isFull();
    }
    @Test
    public void test7784() {
		Queue variable = new Queue();
		variable.enqueue(560433866);
		variable.enqueue(-360573202);
		variable.isFull();
    }
    @Test
    public void test7785() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isFull();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.dequeue();
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test7786() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1215919251);
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-1083773298);
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.enqueue(-337351613);
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test7787() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test7788() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.toString();
    }
    @Test
    public void test7789() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(-873682486);
    }
    @Test
    public void test7790() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test7791() {
		Queue y = new Queue();
		y.enqueue(-1449984427);
		y.isEmpty();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isFull();
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test7792() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.enqueue(1570553266);
		assertEquals("[1570553266]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test7793() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(210956583);
		assertEquals(210956583, y.dequeue());
		y.enqueue(1315488786);
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test7794() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(1552104370);
    }
    @Test
    public void test7795() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.toString();
		y.toString();
		y.enqueue(512557707);
    }
    @Test
    public void test7796() {
		Queue y = new Queue();
		y.enqueue(110855292);
    }
    @Test
    public void test7797() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		assertFalse(x.isFull());
		x.isFull();
		x.toString();
		x.enqueue(-501574098);
		x.isFull();
    }
    @Test
    public void test7798() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(-1604547951);
		z.enqueue(-577257502);
		z.toString();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test7799() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(-1644543753);
		z.isEmpty();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(-1600636093);
    }
    @Test
    public void test7800() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		variable.isFull();
		variable.enqueue(-359524941);
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test7801() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(122079126);
		variable.isEmpty();
    }
    @Test
    public void test7802() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.enqueue(1967718765);
		y.enqueue(-523535828);
		y.isEmpty();
		y.toString();
		assertEquals(1967718765, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.enqueue(-701729470);
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test7803() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.isFull();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.enqueue(-461004374);
		y.toString();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1944392704);
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test7804() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.toString();
    }
    @Test
    public void test7805() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(-195299011);
		x.isFull();
		x.toString();
    }
    @Test
    public void test7806() {
		Queue y = new Queue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.toString();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isFull();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test7807() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isFull();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.enqueue(332278933);
		x.isFull();
    }
    @Test
    public void test7808() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test7809() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-2074549627);
		Var.toString();
		assertFalse(Var.isFull());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.enqueue(-1561842439);
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test7810() {
		Queue y = new Queue();
		y.enqueue(-1533565983);
		assertEquals(-1, y.dequeue());
		y.enqueue(107071564);
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test7811() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(-593935850);
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test7812() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(-122807826);
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test7813() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test7814() {
		Queue z = new Queue();
		z.enqueue(1318599065);
		z.isEmpty();
		assertFalse(z.isEmpty());
		assertEquals(1318599065, z.dequeue());
		z.toString();
		z.enqueue(1123953215);
		z.isEmpty();
		z.toString();
		z.enqueue(345364110);
		z.dequeue();
    }
    @Test
    public void test7815() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(284309498);
		x.toString();
		x.isEmpty();
		assertEquals("[284309498]", x.toString());
		assertEquals(284309498, x.dequeue());
		x.isFull();
		x.enqueue(415523851);
		x.toString();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test7816() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(667942254);
		assertEquals(667942254, x.dequeue());
		assertEquals("[]", x.toString());
		x.dequeue();
    }
    @Test
    public void test7817() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test7818() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.toString();
		assertTrue(z.isEmpty());
		z.isFull();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test7819() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.toString();
		x.toString();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.isFull();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test7820() {
		Queue z = new Queue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(-1597525679);
		z.isEmpty();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1128950813);
		z.enqueue(-1774726145);
    }
    @Test
    public void test7821() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(778568840);
    }
    @Test
    public void test7822() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test7823() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.isFull();
		x.enqueue(652188691);
		x.enqueue(1429162837);
		x.enqueue(-1047829598);
		x.enqueue(-1910460451);
		x.dequeue();
		assertEquals("[1429162837]", x.toString());
		x.toString();
		x.isFull();
    }
    @Test
    public void test7824() {
		Queue z = new Queue();
		z.enqueue(-1541277904);
		z.toString();
		z.isEmpty();
		z.enqueue(-2000425886);
		assertEquals("[]", z.toString());
		z.toString();
		z.isFull();
		z.dequeue();
		z.dequeue();
		z.isFull();
		z.toString();
    }
    @Test
    public void test7825() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.isFull();
		assertEquals("[]", y.toString());
		y.toString();
		y.dequeue();
		y.isFull();
		y.enqueue(-1590851731);
		y.isFull();
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test7826() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.enqueue(347144822);
		x.toString();
    }
    @Test
    public void test7827() {
		Queue y = new Queue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(-1954064132);
		y.isFull();
		y.dequeue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test7828() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.enqueue(1101982377);
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test7829() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test7830() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1902400850);
		variable.enqueue(-648406362);
    }
    @Test
    public void test7831() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.toString();
		z.dequeue();
		z.toString();
		z.isFull();
		z.toString();
    }
    @Test
    public void test7832() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.toString();
		x.isFull();
		x.dequeue();
		x.enqueue(1660903263);
		assertEquals(1660903263, x.dequeue());
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test7833() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.isFull();
		z.toString();
		z.enqueue(1614848475);
		z.enqueue(2127424703);
		z.isFull();
		assertEquals("[1614848475, 2127424703]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test7834() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.toString();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test7835() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.toString();
		z.enqueue(-1536581972);
		z.enqueue(1666360665);
		assertEquals("[1666360665]", z.toString());
		z.enqueue(20532471);
		assertEquals("[1666360665, 20532471]", z.toString());
		z.enqueue(-1433554739);
		z.isFull();
    }
    @Test
    public void test7836() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.isFull();
		variable.enqueue(-1871610588);
    }
    @Test
    public void test7837() {
		Queue x = new Queue();
		x.enqueue(-111021945);
		x.isEmpty();
		x.enqueue(67081134);
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		assertEquals(67081134, x.dequeue());
		x.isFull();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test7838() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(-1807078486);
    }
    @Test
    public void test7839() {
		Queue variable = new Queue();
		variable.enqueue(-520306211);
		variable.enqueue(-1530284937);
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-437633416);
		variable.toString();
		variable.isFull();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.toString();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.enqueue(1071221003);
    }
    @Test
    public void test7840() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.enqueue(-286855329);
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(154065879);
		Var.isEmpty();
		Var.enqueue(-520290153);
		Var.isFull();
    }
    @Test
    public void test7841() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(1833758290);
		y.enqueue(-228317662);
		y.enqueue(-1215562550);
		y.isEmpty();
		y.enqueue(-1850760512);
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test7842() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(-1545490384);
		y.toString();
		y.toString();
		y.enqueue(-1815857692);
		y.isEmpty();
		y.dequeue();
		y.enqueue(-870641130);
    }
    @Test
    public void test7843() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(-573479213);
		variable.isEmpty();
    }
    @Test
    public void test7844() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
		z.enqueue(-75728298);
    }
    @Test
    public void test7845() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-690605491);
		z.isFull();
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(-1683761287);
    }
    @Test
    public void test7846() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.enqueue(-620372686);
		x.toString();
		assertFalse(x.isFull());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test7847() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.toString();
		y.enqueue(1778127651);
		assertFalse(y.isEmpty());
		y.isEmpty();
		y.isFull();
		y.enqueue(-1122124432);
		y.dequeue();
    }
    @Test
    public void test7848() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(-224966924);
    }
    @Test
    public void test7849() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test7850() {
		Queue z = new Queue();
		z.enqueue(-358900528);
		z.isFull();
		z.enqueue(-340335641);
		z.enqueue(-853370397);
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.toString();
		z.toString();
		z.toString();
		z.toString();
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test7851() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-369259851);
		z.isFull();
		assertFalse(z.isFull());
		z.enqueue(-573381645);
		z.toString();
    }
    @Test
    public void test7852() {
		Queue variable = new Queue();
		variable.enqueue(-1996559463);
		variable.isEmpty();
		variable.enqueue(-2109349467);
    }
    @Test
    public void test7853() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(2090555659);
		y.isEmpty();
		y.enqueue(-1449102712);
		y.enqueue(274892243);
		y.isEmpty();
		y.enqueue(29178767);
		y.isEmpty();
    }
    @Test
    public void test7854() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1445586491);
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.enqueue(-969360754);
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-1992438715);
		Var.enqueue(1125960488);
		Var.isFull();
    }
    @Test
    public void test7855() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test7856() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.toString();
		y.enqueue(1641302786);
		y.toString();
		y.enqueue(536892304);
		assertEquals("[1641302786, 536892304]", y.toString());
		y.toString();
		y.toString();
		y.isFull();
    }
    @Test
    public void test7857() {
		Queue z = new Queue();
		z.toString();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isFull();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.enqueue(1025394586);
		z.toString();
		z.enqueue(207192642);
    }
    @Test
    public void test7858() {
		Queue variable = new Queue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.enqueue(268095420);
		assertFalse(variable.isEmpty());
		variable.isFull();
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-644686615);
		assertEquals("[268095420]", variable.toString());
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test7859() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		Var.isFull();
		Var.toString();
		Var.enqueue(-193617345);
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test7860() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		z.toString();
		z.enqueue(756323510);
		z.isFull();
    }
    @Test
    public void test7861() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test7862() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.toString();
		y.isFull();
    }
    @Test
    public void test7863() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		z.enqueue(-270307716);
		z.isFull();
		z.enqueue(925184713);
		z.enqueue(1777726440);
		z.dequeue();
		z.isFull();
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(-1534640492);
    }
    @Test
    public void test7864() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test7865() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test7866() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test7867() {
		Queue variable = new Queue();
		variable.enqueue(824727735);
		variable.isEmpty();
		variable.enqueue(2026934192);
		variable.enqueue(1116185467);
		assertFalse(variable.isEmpty());
		variable.enqueue(1619234662);
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test7868() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(-836133300);
		assertTrue(z.isEmpty());
		z.enqueue(-89897657);
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(1615086243);
		z.enqueue(-1445612315);
		z.enqueue(-780370680);
		z.enqueue(-1435714590);
    }
    @Test
    public void test7869() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(1756033439);
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(1848798055);
    }
    @Test
    public void test7870() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(279432435);
    }
    @Test
    public void test7871() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test7872() {
		Queue Var = new Queue();
		Var.enqueue(-697891205);
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(927601369);
		assertEquals("[927601369]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-652560038);
    }
    @Test
    public void test7873() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.enqueue(-343643350);
		Var.enqueue(-1930759427);
		Var.toString();
    }
    @Test
    public void test7874() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-2040626063);
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(613992525);
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test7875() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test7876() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.isFull();
		z.toString();
		z.isEmpty();
		z.enqueue(176755846);
		z.dequeue();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test7877() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-1079692264);
		y.isFull();
    }
    @Test
    public void test7878() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.enqueue(1637427575);
		assertEquals(1637427575, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isEmpty();
		variable.enqueue(1883982067);
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test7879() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test7880() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test7881() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-394262789);
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1751591138);
    }
    @Test
    public void test7882() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(381742407);
		x.isEmpty();
		x.toString();
		x.enqueue(1158078525);
		x.enqueue(1771879518);
    }
    @Test
    public void test7883() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test7884() {
		Queue variable = new Queue();
		variable.enqueue(-1535229351);
		variable.enqueue(-1427747724);
		variable.toString();
    }
    @Test
    public void test7885() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(-935547699);
    }
    @Test
    public void test7886() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.enqueue(770111657);
		y.isFull();
		y.enqueue(1257867750);
		y.isEmpty();
    }
    @Test
    public void test7887() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1616790165);
		variable.enqueue(-1323170362);
    }
    @Test
    public void test7888() {
		Queue y = new Queue();
		y.enqueue(-1765166444);
		y.isEmpty();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.enqueue(-2145033864);
		y.isFull();
		y.enqueue(-2010387025);
		y.toString();
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test7889() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.enqueue(575909846);
		x.enqueue(1136774285);
		x.isEmpty();
    }
    @Test
    public void test7890() {
		Queue Var = new Queue();
		Var.enqueue(-744599836);
		Var.toString();
		Var.isFull();
		Var.enqueue(-1979318229);
    }
    @Test
    public void test7891() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(1312856385);
		variable.isFull();
    }
    @Test
    public void test7892() {
		Queue x = new Queue();
		x.enqueue(471124386);
		x.isFull();
    }
    @Test
    public void test7893() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.enqueue(356180659);
    }
    @Test
    public void test7894() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.toString();
		z.isFull();
		z.toString();
		z.enqueue(1891767852);
		assertFalse(z.isFull());
		z.toString();
		assertEquals("[1891767852]", z.toString());
		z.enqueue(548287080);
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test7895() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.enqueue(-976121332);
		x.enqueue(-138107494);
		x.dequeue();
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(-1689537380);
		assertFalse(x.isFull());
		x.dequeue();
		x.isFull();
		x.toString();
    }
    @Test
    public void test7896() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.enqueue(-1292420909);
		assertFalse(x.isFull());
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		x.toString();
		x.isEmpty();
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test7897() {
		Queue y = new Queue();
		y.enqueue(1517823381);
		y.toString();
		y.toString();
		assertEquals("[1517823381]", y.toString());
		assertEquals(1517823381, y.dequeue());
		y.toString();
		y.enqueue(671731349);
		y.dequeue();
		y.enqueue(559797238);
		y.isEmpty();
    }
    @Test
    public void test7898() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(206987848);
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(420656880);
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test7899() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.isFull();
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.enqueue(-622446975);
		x.dequeue();
    }
    @Test
    public void test7900() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(1886807283);
		z.toString();
		z.isFull();
		z.toString();
		z.isEmpty();
		assertEquals("[1886807283]", z.toString());
		z.enqueue(1427653244);
		assertFalse(z.isEmpty());
		assertFalse(z.isEmpty());
		z.enqueue(841001353);
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test7901() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(1337854784);
		z.enqueue(24707618);
		z.isFull();
		z.dequeue();
		z.toString();
		assertFalse(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test7902() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.toString();
		assertEquals("[]", x.toString());
		x.toString();
		x.isEmpty();
		x.enqueue(182111921);
		x.enqueue(2050888123);
		x.toString();
		x.isFull();
		x.enqueue(340145906);
		x.dequeue();
		x.toString();
    }
    @Test
    public void test7903() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-1405555321);
		variable.enqueue(-198049872);
		variable.dequeue();
    }
    @Test
    public void test7904() {
		Queue variable = new Queue();
		variable.enqueue(-379088240);
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(-437578680);
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test7905() {
		Queue x = new Queue();
		x.enqueue(1916780494);
		x.isFull();
    }
    @Test
    public void test7906() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(126324812);
		y.enqueue(930069354);
		assertEquals(126324812, y.dequeue());
		y.isEmpty();
		assertEquals("[930069354]", y.toString());
		y.isEmpty();
		assertEquals(930069354, y.dequeue());
		y.isFull();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.dequeue();
		y.toString();
    }
    @Test
    public void test7907() {
		Queue variable = new Queue();
		variable.enqueue(-1603785565);
		variable.toString();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test7908() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test7909() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		z.toString();
		z.toString();
		z.toString();
    }
    @Test
    public void test7910() {
		Queue x = new Queue();
		x.enqueue(-699028014);
		assertEquals("[]", x.toString());
		x.enqueue(1750516896);
		x.dequeue();
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(820197132);
		x.toString();
    }
    @Test
    public void test7911() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test7912() {
		Queue x = new Queue();
		x.enqueue(95577239);
		assertEquals("[95577239]", x.toString());
		x.isFull();
		x.dequeue();
		x.toString();
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test7913() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(1716005973);
		z.toString();
		z.dequeue();
		z.enqueue(2097410125);
		z.toString();
		assertEquals("[2097410125]", z.toString());
		assertEquals("[2097410125]", z.toString());
		z.enqueue(830765838);
		z.enqueue(34758859);
    }
    @Test
    public void test7914() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.enqueue(-1021276436);
    }
    @Test
    public void test7915() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test7916() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(-581353404);
		Var.isFull();
		Var.toString();
		Var.enqueue(1513415131);
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(-1049494532);
    }
    @Test
    public void test7917() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.enqueue(-1118477304);
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-1351942667);
		Var.enqueue(-1851435373);
    }
    @Test
    public void test7918() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test7919() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.toString();
		z.dequeue();
    }
    @Test
    public void test7920() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.dequeue();
		z.enqueue(2100219817);
		assertEquals("[2100219817]", z.toString());
		z.dequeue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test7921() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-588080194);
		y.isFull();
		y.dequeue();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test7922() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-921118892);
		variable.toString();
		variable.enqueue(-1765090187);
		variable.dequeue();
    }
    @Test
    public void test7923() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.toString();
    }
    @Test
    public void test7924() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.enqueue(586017818);
		variable.enqueue(-1957335120);
    }
    @Test
    public void test7925() {
		Queue y = new Queue();
		y.toString();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.toString();
		y.enqueue(-1647396890);
		y.isFull();
		y.isEmpty();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test7926() {
		Queue y = new Queue();
		y.toString();
		assertFalse(y.isFull());
		y.toString();
		y.enqueue(1382155887);
		assertEquals(1382155887, y.dequeue());
		y.toString();
		y.enqueue(-513959298);
		y.enqueue(1113753341);
		assertEquals("[1113753341]", y.toString());
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(571693924);
		y.isEmpty();
    }
    @Test
    public void test7927() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(438469940);
    }
    @Test
    public void test7928() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.enqueue(-629723544);
		assertEquals("[]", x.toString());
		x.enqueue(-1057242311);
		x.enqueue(180685226);
		x.enqueue(1266850871);
		x.enqueue(-1606243282);
    }
    @Test
    public void test7929() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.enqueue(1393081302);
		x.isFull();
		x.enqueue(166469802);
		assertEquals("[1393081302, 166469802]", x.toString());
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test7930() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test7931() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		assertFalse(z.isFull());
		z.dequeue();
		z.enqueue(591954086);
    }
    @Test
    public void test7932() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test7933() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.toString();
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(1821454364);
		x.enqueue(1792114489);
		x.enqueue(1553175378);
		x.enqueue(324637617);
		x.enqueue(-1883225952);
    }
    @Test
    public void test7934() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test7935() {
		Queue Var = new Queue();
		Var.enqueue(397687197);
		Var.toString();
		Var.enqueue(109431600);
		Var.enqueue(-84330826);
		Var.enqueue(-1520764016);
		Var.enqueue(-714501638);
		Var.toString();
		Var.enqueue(1834746325);
    }
    @Test
    public void test7936() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.toString();
    }
    @Test
    public void test7937() {
		Queue z = new Queue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test7938() {
		Queue variable = new Queue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(1899992338);
		variable.toString();
    }
    @Test
    public void test7939() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-563517548);
		assertFalse(Var.isFull());
		Var.toString();
		Var.toString();
		Var.enqueue(1450896132);
    }
    @Test
    public void test7940() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(212571142);
		variable.isEmpty();
		variable.toString();
		variable.enqueue(457655877);
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(141968899);
		assertFalse(variable.isFull());
		assertEquals("[457655877, 141968899]", variable.toString());
		variable.toString();
		assertEquals("[457655877, 141968899]", variable.toString());
		variable.toString();
    }
    @Test
    public void test7941() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test7942() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(190076855);
		x.dequeue();
		x.enqueue(-42675711);
		assertTrue(x.isEmpty());
		x.isFull();
		assertTrue(x.isEmpty());
		x.toString();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test7943() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test7944() {
		Queue z = new Queue();
		z.toString();
		z.toString();
    }
    @Test
    public void test7945() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(1292852763);
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test7946() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.dequeue();
		assertFalse(z.isFull());
		z.isFull();
		z.isFull();
		assertEquals("[]", z.toString());
		z.isFull();
		assertFalse(z.isFull());
		z.isFull();
		z.dequeue();
		z.isFull();
		z.enqueue(2078181534);
		z.enqueue(1556472292);
    }
    @Test
    public void test7947() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test7948() {
		Queue Var = new Queue();
		Var.enqueue(929285034);
		assertFalse(Var.isFull());
		Var.enqueue(-446770868);
		Var.isFull();
		Var.isFull();
		Var.enqueue(-304130242);
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test7949() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(-2124260016);
    }
    @Test
    public void test7950() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(-1883891697);
		Var.enqueue(693160403);
    }
    @Test
    public void test7951() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.toString();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test7952() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		assertFalse(variable.isFull());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test7953() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(910903220);
		assertFalse(Var.isFull());
		assertEquals("[910903220]", Var.toString());
		Var.isFull();
		Var.toString();
		Var.enqueue(-1101990898);
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test7954() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-207582582);
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test7955() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		assertFalse(x.isFull());
		x.dequeue();
		x.enqueue(-1218119749);
    }
    @Test
    public void test7956() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(1311821905);
		assertEquals("[1311821905]", Var.toString());
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test7957() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(737152755);
    }
    @Test
    public void test7958() {
		Queue y = new Queue();
		y.enqueue(-245937957);
		y.isEmpty();
		y.enqueue(-1884384224);
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(184641822);
		y.dequeue();
		y.enqueue(422715438);
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test7959() {
		Queue Var = new Queue();
		Var.enqueue(1707235823);
		Var.toString();
		Var.enqueue(-348841095);
		Var.isEmpty();
		assertEquals("[1707235823]", Var.toString());
		assertFalse(Var.isFull());
		assertEquals(1707235823, Var.dequeue());
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test7960() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isFull();
		assertEquals("[]", z.toString());
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.toString();
		z.toString();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test7961() {
		Queue variable = new Queue();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.enqueue(-713954345);
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test7962() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test7963() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-732074758);
    }
    @Test
    public void test7964() {
		Queue z = new Queue();
		z.enqueue(-1480914675);
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test7965() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(672439536);
		Var.enqueue(1837680067);
		assertEquals(672439536, Var.dequeue());
		assertEquals(1837680067, Var.dequeue());
		Var.toString();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(156003545);
    }
    @Test
    public void test7966() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-475587376);
		assertFalse(Var.isFull());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-2139513244);
		Var.dequeue();
    }
    @Test
    public void test7967() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test7968() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test7969() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.enqueue(-1414154183);
		z.enqueue(575865468);
		assertFalse(z.isFull());
		assertEquals(575865468, z.dequeue());
		z.enqueue(-1821979714);
		z.isEmpty();
		z.toString();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test7970() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.enqueue(7215211);
		y.toString();
		y.toString();
		y.toString();
		y.toString();
		assertFalse(y.isFull());
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test7971() {
		Queue Var = new Queue();
		Var.enqueue(730984144);
		assertEquals(730984144, Var.dequeue());
		Var.toString();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-1304264664);
		Var.toString();
    }
    @Test
    public void test7972() {
		Queue variable = new Queue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test7973() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(584288361);
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test7974() {
		Queue variable = new Queue();
		variable.enqueue(1569360824);
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test7975() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.isFull();
		x.isFull();
		assertTrue(x.isEmpty());
		x.enqueue(-460714059);
    }
    @Test
    public void test7976() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test7977() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test7978() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(-449356744);
		x.toString();
		x.toString();
		x.enqueue(-2019492309);
		x.dequeue();
    }
    @Test
    public void test7979() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.toString();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.enqueue(-1708823492);
		x.isEmpty();
		x.dequeue();
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test7980() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test7981() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(2085489485);
		Var.dequeue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-169620765);
    }
    @Test
    public void test7982() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(1238424565);
		assertFalse(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test7983() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.enqueue(1947536586);
		y.isEmpty();
		y.dequeue();
		y.enqueue(32988649);
		y.enqueue(803973098);
		y.toString();
		y.toString();
		y.isFull();
		assertFalse(y.isEmpty());
		y.isEmpty();
		assertFalse(y.isEmpty());
		y.dequeue();
    }
    @Test
    public void test7984() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-1198720088);
		x.isFull();
    }
    @Test
    public void test7985() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.dequeue();
		y.dequeue();
		y.dequeue();
		y.dequeue();
		y.toString();
		y.isFull();
    }
    @Test
    public void test7986() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.toString();
		assertEquals(-1, x.dequeue());
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(-2022693414);
		x.enqueue(-1517602148);
		x.isFull();
		x.toString();
		x.isFull();
		x.enqueue(-1866044299);
		x.enqueue(-214732939);
		assertEquals(-1, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test7987() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test7988() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(1188700074);
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-755915467);
    }
    @Test
    public void test7989() {
		Queue y = new Queue();
		y.isFull();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.isFull();
		y.toString();
		y.isFull();
		assertEquals("[]", y.toString());
		y.toString();
		y.toString();
		y.enqueue(1543020922);
    }
    @Test
    public void test7990() {
		Queue z = new Queue();
		z.enqueue(1049078378);
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.toString();
    }
    @Test
    public void test7991() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-1763753874);
		y.dequeue();
		y.enqueue(-1851634114);
		y.isFull();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.enqueue(329545015);
		assertFalse(y.isFull());
		y.isEmpty();
		y.dequeue();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test7992() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.isFull();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test7993() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.enqueue(1733541321);
		x.enqueue(1765335497);
		x.isEmpty();
		x.enqueue(-1801435091);
		assertFalse(x.isEmpty());
		assertEquals("[1733541321, 1765335497]", x.toString());
		x.enqueue(-310929641);
		x.isFull();
    }
    @Test
    public void test7994() {
		Queue z = new Queue();
		z.enqueue(1315904601);
		z.isEmpty();
		z.isFull();
		assertEquals(1315904601, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isFull();
		z.toString();
		z.enqueue(-913010698);
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test7995() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		Var.enqueue(442087290);
		Var.toString();
		assertFalse(Var.isFull());
		assertEquals("[442087290]", Var.toString());
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		Var.isFull();
		Var.isFull();
		Var.isFull();
		assertEquals("[442087290]", Var.toString());
		assertEquals("[442087290]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test7996() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test7997() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(322599988);
		z.isEmpty();
		assertEquals("[322599988]", z.toString());
		z.dequeue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.toString();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test7998() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.enqueue(552314934);
		x.enqueue(-1807572820);
		assertFalse(x.isFull());
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		assertEquals("[552314934]", x.toString());
		x.enqueue(-462705443);
		x.enqueue(-1433967887);
    }
    @Test
    public void test7999() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test8000() {
		Queue y = new Queue();
		y.enqueue(-870930157);
		assertFalse(y.isFull());
		y.enqueue(-2049500862);
		y.isEmpty();
		y.dequeue();
		y.toString();
		y.enqueue(-1438229663);
		y.dequeue();
    }
    @Test
    public void test8001() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.enqueue(1502612393);
		variable.toString();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test8002() {
		Queue x = new Queue();
		x.enqueue(-1165086300);
		x.toString();
		x.enqueue(1912616682);
    }
    @Test
    public void test8003() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-77598125);
		variable.isFull();
    }
    @Test
    public void test8004() {
		Queue variable = new Queue();
		variable.enqueue(-388703922);
		variable.toString();
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(951967947);
		variable.enqueue(237879630);
		variable.isFull();
    }
    @Test
    public void test8005() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.toString();
		y.isFull();
		y.isEmpty();
		y.enqueue(-234816299);
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.dequeue();
		y.isFull();
		assertFalse(y.isFull());
		y.dequeue();
		y.dequeue();
		y.enqueue(982450177);
		y.isFull();
    }
    @Test
    public void test8006() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.enqueue(-945395392);
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test8007() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.enqueue(-2012111521);
		variable.isEmpty();
		variable.enqueue(-760564865);
    }
    @Test
    public void test8008() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		assertEquals("[]", z.toString());
		z.toString();
		z.dequeue();
    }
    @Test
    public void test8009() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-2084341674);
		Var.enqueue(996155704);
		Var.dequeue();
    }
    @Test
    public void test8010() {
		Queue y = new Queue();
		y.dequeue();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.enqueue(1984141792);
		y.isFull();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.enqueue(1172537138);
		assertFalse(y.isEmpty());
		assertFalse(y.isFull());
		y.toString();
		assertEquals(1172537138, y.dequeue());
		y.toString();
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test8011() {
		Queue y = new Queue();
		y.enqueue(-800893116);
		assertFalse(y.isFull());
		y.enqueue(737945867);
		assertFalse(y.isEmpty());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.toString();
		y.enqueue(1890710055);
		y.toString();
    }
    @Test
    public void test8012() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(-825148913);
    }
    @Test
    public void test8013() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test8014() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test8015() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.enqueue(2019685960);
		y.isFull();
    }
    @Test
    public void test8016() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test8017() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(1049150614);
    }
    @Test
    public void test8018() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isFull();
		y.toString();
		y.toString();
		y.enqueue(-1625267016);
		assertFalse(y.isFull());
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.enqueue(1883068381);
		y.isFull();
		y.enqueue(-374716273);
    }
    @Test
    public void test8019() {
		Queue variable = new Queue();
		variable.enqueue(1667462279);
		assertEquals(1667462279, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test8020() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.toString();
		x.isEmpty();
		x.isFull();
		x.toString();
    }
    @Test
    public void test8021() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test8022() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(1217543459);
		y.enqueue(357348128);
		y.enqueue(-1094367966);
		assertEquals("[1217543459, 357348128]", y.toString());
		y.dequeue();
		y.enqueue(982923396);
		assertEquals("[357348128, 982923396]", y.toString());
		y.enqueue(-1558892998);
		y.toString();
    }
    @Test
    public void test8023() {
		Queue x = new Queue();
		x.enqueue(403707923);
		assertEquals(403707923, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.isFull();
    }
    @Test
    public void test8024() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(-304219515);
		variable.isEmpty();
    }
    @Test
    public void test8025() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test8026() {
		Queue variable = new Queue();
		variable.enqueue(-1622925924);
		variable.dequeue();
		variable.toString();
		variable.enqueue(-1603344414);
    }
    @Test
    public void test8027() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-730870015);
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-21120757);
    }
    @Test
    public void test8028() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(193213734);
		variable.isFull();
    }
    @Test
    public void test8029() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test8030() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(-1372519075);
		z.isFull();
		z.dequeue();
		z.toString();
		z.enqueue(-614435842);
		z.enqueue(-638093080);
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test8031() {
		Queue y = new Queue();
		y.enqueue(-1471218501);
		y.toString();
    }
    @Test
    public void test8032() {
		Queue Var = new Queue();
		Var.enqueue(1227029680);
		assertEquals("[1227029680]", Var.toString());
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		assertFalse(Var.isFull());
		assertFalse(Var.isEmpty());
		Var.enqueue(2103041706);
		Var.isFull();
    }
    @Test
    public void test8033() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test8034() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(919167540);
		variable.isFull();
		variable.enqueue(-447161617);
    }
    @Test
    public void test8035() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(-431519018);
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		y.enqueue(-858725128);
    }
    @Test
    public void test8036() {
		Queue y = new Queue();
		y.enqueue(-2079220001);
		y.enqueue(59597648);
		y.isEmpty();
		assertEquals(59597648, y.dequeue());
		y.enqueue(2108570283);
		y.isEmpty();
		y.dequeue();
		y.enqueue(2125556013);
		y.isEmpty();
		y.enqueue(-1123218783);
    }
    @Test
    public void test8037() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.enqueue(-2033016492);
		x.toString();
		x.toString();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.enqueue(-2027792515);
    }
    @Test
    public void test8038() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(1314420861);
    }
    @Test
    public void test8039() {
		Queue y = new Queue();
		y.enqueue(-352732489);
		y.dequeue();
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test8040() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.enqueue(-87812390);
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(-1345564893);
		Var.isEmpty();
    }
    @Test
    public void test8041() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(1165941410);
		assertEquals("[1165941410]", y.toString());
		y.enqueue(1407603716);
    }
    @Test
    public void test8042() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
    }
    @Test
    public void test8043() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.enqueue(-1041817998);
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.toString();
    }
    @Test
    public void test8044() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test8045() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test8046() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.dequeue();
		Var.enqueue(2009121627);
		Var.isFull();
    }
    @Test
    public void test8047() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test8048() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test8049() {
		Queue y = new Queue();
		y.enqueue(1483822723);
		y.dequeue();
    }
    @Test
    public void test8050() {
		Queue variable = new Queue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test8051() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test8052() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-1804877555);
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(1214219748);
    }
    @Test
    public void test8053() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(1801289683);
		assertFalse(Var.isFull());
		Var.enqueue(-1056566423);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test8054() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.toString();
		assertFalse(variable.isFull());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test8055() {
		Queue x = new Queue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isEmpty();
    }
    @Test
    public void test8056() {
		Queue Var = new Queue();
		Var.enqueue(1992998272);
		Var.toString();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test8057() {
		Queue variable = new Queue();
		variable.enqueue(-2075417901);
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test8058() {
		Queue variable = new Queue();
		variable.enqueue(-880208009);
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.enqueue(-835802297);
    }
    @Test
    public void test8059() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(1155845062);
		assertFalse(variable.isEmpty());
		variable.isFull();
		variable.isEmpty();
		assertEquals(1155845062, variable.dequeue());
		variable.enqueue(-1347319106);
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.toString();
    }
    @Test
    public void test8060() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(1149793171);
    }
    @Test
    public void test8061() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.dequeue();
		variable.enqueue(525621424);
		variable.isFull();
		assertFalse(variable.isEmpty());
		assertEquals(525621424, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test8062() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test8063() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test8064() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-1292372679);
    }
    @Test
    public void test8065() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.toString();
		z.isFull();
		z.enqueue(297595995);
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test8066() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-441204791);
		y.enqueue(1848572515);
		assertFalse(y.isEmpty());
		assertEquals(1848572515, y.dequeue());
		y.toString();
    }
    @Test
    public void test8067() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(23068122);
		z.toString();
    }
    @Test
    public void test8068() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test8069() {
		Queue y = new Queue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.isFull();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.toString();
		y.enqueue(-1407760711);
		y.toString();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test8070() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test8071() {
		Queue variable = new Queue();
		variable.enqueue(-710731941);
		variable.isEmpty();
		variable.enqueue(-2033826554);
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.enqueue(-690297829);
    }
    @Test
    public void test8072() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(1760319945);
		assertEquals("[1760319945]", x.toString());
		x.enqueue(1299240752);
		x.dequeue();
		x.enqueue(-1265687962);
    }
    @Test
    public void test8073() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.isFull();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test8074() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(733756733);
    }
    @Test
    public void test8075() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(212469391);
		variable.isFull();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(-807504830);
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(-2107982045);
    }
    @Test
    public void test8076() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test8077() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test8078() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test8079() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.dequeue();
    }
    @Test
    public void test8080() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.enqueue(-461451044);
		x.enqueue(1005903465);
		x.dequeue();
		x.enqueue(-490453218);
    }
    @Test
    public void test8081() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(290412340);
    }
    @Test
    public void test8082() {
		Queue z = new Queue();
		z.enqueue(1652292775);
		assertEquals(1652292775, z.dequeue());
		z.enqueue(1794234565);
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test8083() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(2040153585);
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test8084() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test8085() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.enqueue(1433910541);
		variable.isFull();
		variable.enqueue(696416397);
		assertFalse(variable.isFull());
		variable.enqueue(-1358979504);
		assertEquals(1433910541, variable.dequeue());
		variable.enqueue(773076840);
		variable.enqueue(-859036607);
		variable.enqueue(426663895);
		variable.toString();
		variable.enqueue(1557010393);
    }
    @Test
    public void test8086() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test8087() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.toString();
		z.toString();
		z.enqueue(-888219706);
		z.isFull();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.enqueue(1624391048);
    }
    @Test
    public void test8088() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-413588638);
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test8089() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-1623841530);
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test8090() {
		Queue z = new Queue();
		z.enqueue(-2016820629);
		assertTrue(z.isEmpty());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(652180930);
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.enqueue(1390601470);
    }
    @Test
    public void test8091() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(1531336236);
		z.isFull();
    }
    @Test
    public void test8092() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(156258065);
		variable.toString();
		assertEquals(156258065, variable.dequeue());
		variable.enqueue(1499150286);
    }
    @Test
    public void test8093() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
		x.enqueue(1032255349);
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test8094() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.enqueue(-1332959154);
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1575640991);
		assertEquals("[1575640991]", Var.toString());
		Var.enqueue(694183066);
    }
    @Test
    public void test8095() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-793855111);
    }
    @Test
    public void test8096() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.toString();
		Var.toString();
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test8097() {
		Queue Var = new Queue();
		Var.enqueue(1150493458);
    }
    @Test
    public void test8098() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-822834897);
		x.enqueue(-1046662172);
		x.isFull();
		x.toString();
    }
    @Test
    public void test8099() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(872305901);
		variable.toString();
		variable.enqueue(-1546602108);
		variable.toString();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test8100() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-2001977301);
		assertFalse(z.isFull());
		z.dequeue();
		z.enqueue(1473852101);
		z.isFull();
		z.enqueue(-637943946);
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test8101() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.enqueue(399431194);
		Var.toString();
		Var.toString();
		assertEquals(399431194, Var.dequeue());
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-1635286671);
    }
    @Test
    public void test8102() {
		Queue y = new Queue();
		y.enqueue(842916488);
    }
    @Test
    public void test8103() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.enqueue(-224555008);
		Var.toString();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(-503538064);
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.enqueue(-743911551);
		Var.enqueue(-776408980);
    }
    @Test
    public void test8104() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test8105() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(-480458259);
    }
    @Test
    public void test8106() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.enqueue(-2069659035);
		variable.isFull();
		variable.isFull();
		variable.enqueue(1930865649);
		variable.enqueue(2092605788);
		variable.toString();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test8107() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1289239482);
    }
    @Test
    public void test8108() {
		Queue z = new Queue();
		z.enqueue(324560959);
		assertFalse(z.isFull());
		z.isEmpty();
		z.isFull();
		assertFalse(z.isEmpty());
		z.toString();
		assertEquals("[324560959]", z.toString());
		assertEquals("[324560959]", z.toString());
		z.isEmpty();
		assertEquals("[324560959]", z.toString());
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		z.enqueue(-1174064396);
    }
    @Test
    public void test8109() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(562981099);
		assertFalse(Var.isEmpty());
		Var.dequeue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-606187230);
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(1247349485);
		assertFalse(Var.isEmpty());
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test8110() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.toString();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test8111() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.isFull();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test8112() {
		Queue y = new Queue();
		y.enqueue(-1828568975);
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.enqueue(2127687357);
		y.toString();
    }
    @Test
    public void test8113() {
		Queue Var = new Queue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(1689210444);
    }
    @Test
    public void test8114() {
		Queue variable = new Queue();
		variable.enqueue(1381783794);
		assertEquals(1381783794, variable.dequeue());
		variable.dequeue();
		variable.enqueue(-1972485777);
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test8115() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test8116() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.enqueue(295946775);
		assertEquals("[295946775]", Var.toString());
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test8117() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test8118() {
		Queue Var = new Queue();
		Var.enqueue(696592151);
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test8119() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.isEmpty();
		x.enqueue(533573717);
		x.isEmpty();
		assertFalse(x.isFull());
		x.dequeue();
		x.enqueue(-618998128);
		x.enqueue(1877703230);
    }
    @Test
    public void test8120() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(1761206785);
    }
    @Test
    public void test8121() {
		Queue variable = new Queue();
		variable.enqueue(-847060463);
		variable.enqueue(566533871);
		assertEquals(566533871, variable.dequeue());
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(1786602014);
    }
    @Test
    public void test8122() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test8123() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.enqueue(1575432436);
		Var.enqueue(483223714);
    }
    @Test
    public void test8124() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test8125() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.enqueue(-2120285930);
    }
    @Test
    public void test8126() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(1474245350);
		y.isFull();
		y.isFull();
		assertFalse(y.isEmpty());
		y.dequeue();
    }
    @Test
    public void test8127() {
		Queue z = new Queue();
		z.enqueue(1049520037);
		z.enqueue(17491500);
		z.dequeue();
		assertEquals(17491500, z.dequeue());
		z.isFull();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.toString();
    }
    @Test
    public void test8128() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.enqueue(-1438287457);
		assertEquals("[]", variable.toString());
		variable.toString();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test8129() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1335294134);
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(1442525619);
    }
    @Test
    public void test8130() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test8131() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-779048548);
		assertTrue(x.isEmpty());
		x.dequeue();
		x.enqueue(682998438);
		x.enqueue(25445339);
		x.isEmpty();
		x.dequeue();
		x.enqueue(-848489272);
		x.toString();
		assertEquals(25445339, x.dequeue());
		x.toString();
    }
    @Test
    public void test8132() {
		Queue y = new Queue();
		y.enqueue(993568123);
    }
    @Test
    public void test8133() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.toString();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test8134() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(-1868868579);
		x.dequeue();
		x.enqueue(1469816644);
    }
    @Test
    public void test8135() {
		Queue z = new Queue();
		z.enqueue(1978520054);
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test8136() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(1605299150);
		assertFalse(x.isFull());
		x.toString();
		x.isFull();
		assertFalse(x.isFull());
		x.isEmpty();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isFull();
    }
    @Test
    public void test8137() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test8138() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		x.enqueue(-2091386174);
    }
    @Test
    public void test8139() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-96588290);
		y.dequeue();
		y.isFull();
		y.enqueue(2056873043);
		y.isEmpty();
		y.enqueue(-1649620356);
		y.isFull();
		y.toString();
    }
    @Test
    public void test8140() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test8141() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.enqueue(14574096);
		y.enqueue(538891889);
		assertFalse(y.isEmpty());
		y.isFull();
		assertFalse(y.isFull());
		y.isFull();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test8142() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-2026316630);
		variable.isFull();
    }
    @Test
    public void test8143() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
		y.enqueue(-1042044464);
		y.isEmpty();
    }
    @Test
    public void test8144() {
		Queue y = new Queue();
		y.enqueue(1934488986);
		assertFalse(y.isEmpty());
		y.isFull();
		assertFalse(y.isEmpty());
		y.dequeue();
		y.toString();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test8145() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.enqueue(1043488993);
    }
    @Test
    public void test8146() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.enqueue(-1057654261);
		y.toString();
    }
    @Test
    public void test8147() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(1825310053);
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test8148() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(845408777);
		assertEquals(845408777, Var.dequeue());
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test8149() {
		Queue Var = new Queue();
		Var.enqueue(-868220477);
		assertFalse(Var.isFull());
		Var.toString();
		Var.toString();
    }
    @Test
    public void test8150() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1130892209);
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(2132234808);
		variable.dequeue();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test8151() {
		Queue z = new Queue();
		z.enqueue(-1035341020);
		z.toString();
    }
    @Test
    public void test8152() {
		Queue y = new Queue();
		y.toString();
		assertEquals("[]", y.toString());
		y.toString();
		y.isEmpty();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test8153() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		z.enqueue(-8499105);
		assertTrue(z.isEmpty());
		z.enqueue(195996982);
		z.toString();
    }
    @Test
    public void test8154() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test8155() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(1498479738);
		z.isEmpty();
		z.toString();
		assertFalse(z.isFull());
		assertFalse(z.isEmpty());
		z.isEmpty();
		z.dequeue();
		z.isFull();
		assertEquals("[]", z.toString());
		z.isFull();
		z.toString();
		z.isFull();
    }
    @Test
    public void test8156() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.toString();
		z.enqueue(-1855656787);
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test8157() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(1729365045);
		Var.toString();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		assertEquals(1729365045, Var.dequeue());
		Var.toString();
		Var.enqueue(1926270736);
    }
    @Test
    public void test8158() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test8159() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-1637761922);
    }
    @Test
    public void test8160() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.isEmpty();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.toString();
    }
    @Test
    public void test8161() {
		Queue y = new Queue();
		y.enqueue(1542268841);
    }
    @Test
    public void test8162() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-1857491469);
		y.toString();
		y.toString();
    }
    @Test
    public void test8163() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.enqueue(1701183388);
		z.enqueue(-522521357);
		z.isEmpty();
		z.enqueue(712107948);
		assertEquals("[1701183388, 712107948]", z.toString());
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals(712107948, z.dequeue());
		z.enqueue(1963348767);
		z.dequeue();
    }
    @Test
    public void test8164() {
		Queue z = new Queue();
		z.enqueue(1954739198);
		z.enqueue(566242989);
		z.enqueue(-396440497);
		z.isFull();
		z.isFull();
		z.isFull();
		z.dequeue();
		z.toString();
		z.isFull();
    }
    @Test
    public void test8165() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.enqueue(-927696997);
		x.dequeue();
    }
    @Test
    public void test8166() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
		variable.isFull();
		variable.toString();
		variable.enqueue(-193076888);
		variable.enqueue(-2095240598);
		variable.isFull();
    }
    @Test
    public void test8167() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-1524102208);
		assertEquals(-1, y.dequeue());
		y.dequeue();
    }
    @Test
    public void test8168() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.enqueue(-2140952856);
		Var.enqueue(1619939688);
    }
    @Test
    public void test8169() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(1306816970);
		assertFalse(Var.isEmpty());
		assertFalse(Var.isEmpty());
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test8170() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(1126711500);
		assertFalse(x.isFull());
		x.toString();
		x.isFull();
    }
    @Test
    public void test8171() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.toString();
		variable.toString();
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test8172() {
		Queue y = new Queue();
		y.enqueue(280506522);
		assertEquals("[280506522]", y.toString());
		y.isFull();
		y.dequeue();
		y.enqueue(-295539073);
		y.enqueue(-1114925871);
    }
    @Test
    public void test8173() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.enqueue(1270276954);
		variable.enqueue(80421403);
		assertEquals(1270276954, variable.dequeue());
		variable.enqueue(1187038137);
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test8174() {
		Queue z = new Queue();
		z.enqueue(1957637940);
		z.toString();
		z.dequeue();
		z.toString();
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test8175() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(162824880);
    }
    @Test
    public void test8176() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1851701192);
		Var.dequeue();
    }
    @Test
    public void test8177() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test8178() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-607792953);
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test8179() {
		Queue z = new Queue();
		z.toString();
		assertFalse(z.isFull());
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.enqueue(1335770996);
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test8180() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(1871161870);
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test8181() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(1145309936);
    }
    @Test
    public void test8182() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.enqueue(-69587449);
		assertEquals("[]", Var.toString());
		Var.enqueue(-1768912923);
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test8183() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(-2122753058);
		x.enqueue(-1468645710);
		x.dequeue();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isEmpty();
		x.enqueue(2017408827);
		x.isEmpty();
		assertFalse(x.isEmpty());
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test8184() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test8185() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.toString();
		x.enqueue(183149192);
		x.dequeue();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test8186() {
		Queue z = new Queue();
		z.enqueue(727357278);
		assertEquals(727357278, z.dequeue());
		z.toString();
    }
    @Test
    public void test8187() {
		Queue z = new Queue();
		z.enqueue(802141678);
		assertFalse(z.isEmpty());
		assertFalse(z.isFull());
		z.dequeue();
		z.toString();
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test8188() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.enqueue(1072840162);
		assertEquals("[1072840162]", z.toString());
		z.toString();
    }
    @Test
    public void test8189() {
		Queue z = new Queue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.dequeue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(-735857638);
		z.enqueue(-1521303029);
		assertEquals("[]", z.toString());
		z.enqueue(971222906);
    }
    @Test
    public void test8190() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(1366055478);
    }
    @Test
    public void test8191() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test8192() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.isFull();
		x.dequeue();
		x.enqueue(341660239);
    }
    @Test
    public void test8193() {
		Queue variable = new Queue();
		variable.enqueue(-1095978807);
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test8194() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.isEmpty();
		y.enqueue(-1398929856);
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.toString();
		y.dequeue();
		y.enqueue(821985762);
		y.enqueue(1090843702);
		y.isEmpty();
    }
    @Test
    public void test8195() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-310399924);
		y.enqueue(480096195);
		assertFalse(y.isFull());
		assertEquals("[480096195]", y.toString());
		y.toString();
		y.toString();
		y.isEmpty();
		assertEquals("[480096195]", y.toString());
		y.dequeue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.enqueue(186127114);
    }
    @Test
    public void test8196() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test8197() {
		Queue x = new Queue();
		x.enqueue(1574876959);
		x.isEmpty();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test8198() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test8199() {
		Queue x = new Queue();
		x.enqueue(-1506261286);
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test8200() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.toString();
		z.enqueue(-93890745);
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test8201() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test8202() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(716963002);
		variable.enqueue(-1745180937);
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(-892086661);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test8203() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.enqueue(149291607);
		y.isFull();
		y.enqueue(1279735977);
		y.enqueue(2143121004);
    }
    @Test
    public void test8204() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.toString();
		y.isEmpty();
		y.toString();
		y.enqueue(-521241044);
		y.isEmpty();
		y.dequeue();
		y.enqueue(1968674442);
		y.toString();
		assertEquals("[1968674442]", y.toString());
		assertEquals(1968674442, y.dequeue());
		y.dequeue();
    }
    @Test
    public void test8205() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-997884747);
		Var.enqueue(1758318813);
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(1314419594);
    }
    @Test
    public void test8206() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(-1071234887);
		variable.enqueue(1358086700);
    }
    @Test
    public void test8207() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.toString();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.enqueue(65413161);
		x.enqueue(-717381789);
		x.toString();
		assertEquals("[65413161]", x.toString());
		x.toString();
		x.toString();
    }
    @Test
    public void test8208() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isEmpty();
		variable.enqueue(1520425689);
		variable.toString();
		assertFalse(variable.isEmpty());
		assertEquals("[1520425689]", variable.toString());
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test8209() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.toString();
		x.isEmpty();
		x.enqueue(-1337838646);
		assertFalse(x.isFull());
		x.isFull();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test8210() {
		Queue variable = new Queue();
		variable.enqueue(229603100);
		assertFalse(variable.isFull());
		variable.enqueue(-1755475027);
		variable.enqueue(-1468543804);
		variable.enqueue(-674813604);
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test8211() {
		Queue y = new Queue();
		y.enqueue(1030994429);
		y.dequeue();
		y.isFull();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(1967914125);
		y.isEmpty();
    }
    @Test
    public void test8212() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.dequeue();
		y.toString();
		y.dequeue();
		y.isEmpty();
		y.enqueue(5857240);
    }
    @Test
    public void test8213() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.enqueue(979659010);
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		assertFalse(Var.isEmpty());
		assertEquals(979659010, Var.dequeue());
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test8214() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(727328025);
		y.isFull();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isEmpty();
		y.enqueue(1000586893);
		y.isFull();
		y.enqueue(-114773490);
    }
    @Test
    public void test8215() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.toString();
		z.dequeue();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test8216() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.isEmpty();
		z.toString();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test8217() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isFull();
		variable.enqueue(1703908429);
		variable.dequeue();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test8218() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test8219() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(-1629138345);
		Var.toString();
		Var.enqueue(370731150);
		Var.isEmpty();
    }
    @Test
    public void test8220() {
		Queue variable = new Queue();
		variable.enqueue(-679175999);
		variable.toString();
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		variable.enqueue(2049749806);
    }
    @Test
    public void test8221() {
		Queue z = new Queue();
		z.enqueue(1784942710);
		z.enqueue(2008014934);
		assertEquals("[1784942710, 2008014934]", z.toString());
		z.enqueue(1853140301);
		assertEquals(1784942710, z.dequeue());
		z.toString();
		assertFalse(z.isFull());
		z.toString();
		z.toString();
		assertEquals("[2008014934, 1853140301]", z.toString());
		z.dequeue();
		z.enqueue(872312718);
		z.isEmpty();
    }
    @Test
    public void test8222() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(2089857523);
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test8223() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(570952054);
		assertEquals(570952054, z.dequeue());
		z.isFull();
		z.enqueue(1581501449);
		z.enqueue(735754585);
		z.dequeue();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test8224() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		x.toString();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.enqueue(-820566059);
		x.dequeue();
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test8225() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(-725225181);
		y.enqueue(1546266718);
		assertEquals(1546266718, y.dequeue());
		assertFalse(y.isFull());
		y.enqueue(-276845568);
    }
    @Test
    public void test8226() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		z.dequeue();
		z.enqueue(-1245695641);
		z.isFull();
		z.enqueue(-134558991);
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(-98007759);
		z.dequeue();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test8227() {
		Queue y = new Queue();
		y.enqueue(332737272);
		y.isEmpty();
		y.enqueue(1975169059);
		y.enqueue(206088773);
		assertFalse(y.isEmpty());
		y.isFull();
		y.dequeue();
		y.toString();
		y.enqueue(1391629626);
		y.isEmpty();
		y.enqueue(-381435044);
    }
    @Test
    public void test8228() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(-280910026);
		z.isFull();
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.dequeue();
		z.enqueue(-1985123562);
		z.isEmpty();
    }
    @Test
    public void test8229() {
		Queue variable = new Queue();
		variable.enqueue(430569871);
		variable.enqueue(2104650175);
		assertEquals(430569871, variable.dequeue());
		variable.enqueue(-2091140294);
		variable.enqueue(634908627);
		assertEquals(2104650175, variable.dequeue());
		variable.dequeue();
		variable.enqueue(74890404);
		variable.isEmpty();
		variable.enqueue(-1772904303);
		variable.toString();
		variable.toString();
    }
    @Test
    public void test8230() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.enqueue(-1858690159);
		y.toString();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.enqueue(1182678402);
		y.isEmpty();
    }
    @Test
    public void test8231() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(2121633555);
		z.dequeue();
		z.toString();
		z.isFull();
		assertEquals("[]", z.toString());
		z.enqueue(-166984378);
		z.toString();
		assertFalse(z.isFull());
		z.isFull();
		assertFalse(z.isFull());
		z.isEmpty();
		z.isEmpty();
		z.enqueue(1488947885);
    }
    @Test
    public void test8232() {
		Queue variable = new Queue();
		variable.enqueue(1342032682);
		variable.toString();
		variable.isFull();
		variable.isFull();
		variable.enqueue(-1951205787);
		variable.enqueue(2031317743);
		variable.dequeue();
    }
    @Test
    public void test8233() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-1325838989);
		z.isFull();
		z.enqueue(-1156572910);
		z.toString();
		z.toString();
    }
    @Test
    public void test8234() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.enqueue(1505577291);
		assertFalse(z.isFull());
		z.enqueue(248181124);
		assertEquals("[1505577291, 248181124]", z.toString());
		z.isEmpty();
		z.toString();
		z.dequeue();
		z.enqueue(1684541678);
    }
    @Test
    public void test8235() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.enqueue(670718461);
		Var.isEmpty();
    }
    @Test
    public void test8236() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test8237() {
		Queue variable = new Queue();
		variable.enqueue(1327736119);
		variable.isFull();
		variable.isEmpty();
		assertEquals(1327736119, variable.dequeue());
		variable.toString();
		variable.enqueue(1363080588);
		assertEquals("[1363080588]", variable.toString());
		variable.isEmpty();
		variable.enqueue(-1125061915);
		assertFalse(variable.isFull());
		variable.enqueue(-331485954);
		variable.enqueue(515876739);
		variable.isFull();
    }
    @Test
    public void test8238() {
		Queue Var = new Queue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test8239() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test8240() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(86915433);
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test8241() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(-891376086);
		assertEquals("[]", y.toString());
		y.dequeue();
		assertTrue(y.isEmpty());
		y.toString();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test8242() {
		Queue z = new Queue();
		z.enqueue(1842814601);
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test8243() {
		Queue z = new Queue();
		z.enqueue(-1421011161);
		z.isEmpty();
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.dequeue();
		z.dequeue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test8244() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-1480713333);
		y.isFull();
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test8245() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(553684298);
		variable.dequeue();
		variable.enqueue(604313747);
		variable.isFull();
		variable.toString();
		assertEquals(604313747, variable.dequeue());
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test8246() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.enqueue(-533407102);
		variable.dequeue();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test8247() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.enqueue(1323424103);
		y.enqueue(-1214253340);
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test8248() {
		Queue variable = new Queue();
		variable.enqueue(208200664);
		variable.enqueue(-1073751277);
		variable.toString();
		variable.toString();
    }
    @Test
    public void test8249() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test8250() {
		Queue x = new Queue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isFull();
		x.dequeue();
		x.isFull();
		x.enqueue(1761174636);
    }
    @Test
    public void test8251() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-700770404);
		z.enqueue(-1185879136);
		z.toString();
		z.isEmpty();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.isFull();
    }
    @Test
    public void test8252() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test8253() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-203727398);
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isEmpty();
		z.toString();
		z.enqueue(1471537558);
		z.toString();
    }
    @Test
    public void test8254() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test8255() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test8256() {
		Queue y = new Queue();
		y.enqueue(-2041311324);
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test8257() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(193121338);
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(-357001879);
		variable.enqueue(784766686);
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test8258() {
		Queue x = new Queue();
		x.enqueue(1384982843);
		x.isFull();
		x.isEmpty();
		x.toString();
		assertEquals(1384982843, x.dequeue());
		assertFalse(x.isFull());
		x.enqueue(-1492499837);
		assertFalse(x.isFull());
		x.isEmpty();
		x.dequeue();
		x.enqueue(-2141101512);
    }
    @Test
    public void test8259() {
		Queue variable = new Queue();
		variable.enqueue(1611415993);
		variable.dequeue();
		variable.enqueue(553030619);
		assertEquals(553030619, variable.dequeue());
		variable.enqueue(-739512936);
		variable.enqueue(-207875352);
    }
    @Test
    public void test8260() {
		Queue variable = new Queue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(2084187081);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(1278173245);
		assertEquals("[2084187081, 1278173245]", variable.toString());
		variable.isEmpty();
		assertEquals("[2084187081, 1278173245]", variable.toString());
		variable.enqueue(1805842896);
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(1005202999);
		variable.isEmpty();
    }
    @Test
    public void test8261() {
		Queue y = new Queue();
		y.enqueue(-248156886);
		y.enqueue(-661153536);
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.isEmpty();
		y.dequeue();
		y.toString();
		y.enqueue(47040808);
		assertFalse(y.isFull());
		y.isFull();
		y.isEmpty();
		y.enqueue(887532717);
		y.isEmpty();
    }
    @Test
    public void test8262() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test8263() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.isFull();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isFull();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test8264() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(1429248239);
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test8265() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(-2006915384);
		assertTrue(z.isEmpty());
		z.toString();
		z.toString();
		z.enqueue(-798941280);
		z.enqueue(932919556);
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test8266() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1910096119);
		x.enqueue(-986741742);
		x.toString();
		assertEquals(1910096119, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.toString();
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(-1970830077);
		x.enqueue(-669972387);
		x.dequeue();
    }
    @Test
    public void test8267() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test8268() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.enqueue(2099163520);
		Var.isFull();
		Var.enqueue(1247391340);
		assertEquals("[2099163520, 1247391340]", Var.toString());
		Var.enqueue(-1914237188);
    }
    @Test
    public void test8269() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test8270() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test8271() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test8272() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.toString();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test8273() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test8274() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.isFull();
		Var.enqueue(-156787656);
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test8275() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.toString();
		y.enqueue(-464817773);
		y.enqueue(849445321);
		assertFalse(y.isEmpty());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1175056491);
		y.toString();
		y.toString();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test8276() {
		Queue variable = new Queue();
		variable.enqueue(831512152);
		variable.toString();
		variable.toString();
		variable.enqueue(-1763596871);
		assertEquals(831512152, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.enqueue(1971891944);
		variable.dequeue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1808946424);
    }
    @Test
    public void test8277() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.enqueue(-393633928);
		x.toString();
		x.toString();
		assertTrue(x.isEmpty());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test8278() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isFull();
		y.enqueue(799039933);
		assertEquals(799039933, y.dequeue());
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.enqueue(1672102720);
		y.toString();
    }
    @Test
    public void test8279() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(1189830366);
		y.isEmpty();
		y.dequeue();
		y.isFull();
		y.enqueue(-1282446115);
		y.dequeue();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test8280() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(1186356985);
		assertFalse(Var.isEmpty());
		assertEquals("[1186356985]", Var.toString());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
		assertEquals("[1186356985]", Var.toString());
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(-758101267);
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.enqueue(56457108);
		Var.enqueue(-1949560644);
    }
    @Test
    public void test8281() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test8282() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test8283() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test8284() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(1409049172);
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test8285() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test8286() {
		Queue z = new Queue();
		z.dequeue();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.enqueue(-1472005821);
		assertEquals(-1, z.dequeue());
		z.toString();
		z.dequeue();
		z.dequeue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.enqueue(-500188960);
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test8287() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.toString();
		x.isFull();
		x.dequeue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isFull();
		assertEquals("[]", x.toString());
		x.enqueue(1168875852);
    }
    @Test
    public void test8288() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.enqueue(1769274139);
		y.toString();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isFull();
		assertFalse(y.isFull());
		y.isEmpty();
		y.toString();
		y.isFull();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test8289() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-1985343644);
		Var.dequeue();
		Var.enqueue(-575825019);
    }
    @Test
    public void test8290() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-84224732);
		variable.enqueue(-393086081);
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test8291() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.isFull();
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(-1742823463);
		z.toString();
		z.toString();
		z.toString();
		assertTrue(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test8292() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test8293() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test8294() {
		Queue y = new Queue();
		y.enqueue(731477090);
		y.isEmpty();
		y.toString();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.enqueue(1162648347);
		y.isEmpty();
		assertFalse(y.isEmpty());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isEmpty();
		y.enqueue(1443313696);
    }
    @Test
    public void test8295() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(1563943038);
		Var.dequeue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(-488113945);
    }
    @Test
    public void test8296() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(508160298);
		z.enqueue(-915102864);
		assertEquals("[508160298]", z.toString());
		z.enqueue(798366229);
		assertEquals("[508160298, 798366229]", z.toString());
		z.toString();
		assertFalse(z.isEmpty());
		z.enqueue(1395078204);
		z.isEmpty();
    }
    @Test
    public void test8297() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test8298() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.toString();
		z.isEmpty();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.isFull();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.dequeue();
		z.enqueue(-1336905406);
    }
    @Test
    public void test8299() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(269477248);
		variable.dequeue();
		variable.isFull();
		variable.enqueue(258992331);
    }
    @Test
    public void test8300() {
		Queue x = new Queue();
		x.enqueue(-1923491829);
		x.toString();
		x.enqueue(-1126241174);
		x.isEmpty();
    }
    @Test
    public void test8301() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test8302() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test8303() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-961245614);
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.enqueue(1420937531);
		assertEquals("[1420937531]", Var.toString());
		Var.enqueue(-1498186678);
		assertFalse(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test8304() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(1684758333);
		variable.isEmpty();
		assertEquals("[1684758333]", variable.toString());
		variable.dequeue();
		variable.enqueue(1797248855);
		variable.enqueue(-133495487);
		variable.enqueue(-94032713);
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test8305() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-406255930);
		y.toString();
		assertEquals("[]", y.toString());
		y.dequeue();
		assertFalse(y.isFull());
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test8306() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-2081626955);
		variable.enqueue(-1731924360);
		assertEquals("[]", variable.toString());
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(940254532);
		assertFalse(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test8307() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test8308() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(-790625560);
    }
    @Test
    public void test8309() {
		Queue variable = new Queue();
		variable.enqueue(-819961080);
    }
    @Test
    public void test8310() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.enqueue(-61208890);
		variable.isFull();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isFull();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(-315936569);
		variable.enqueue(-1343448155);
		variable.toString();
    }
    @Test
    public void test8311() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(1447052844);
		Var.enqueue(971034554);
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-1647169636);
		Var.enqueue(523186501);
		Var.enqueue(1733210894);
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test8312() {
		Queue y = new Queue();
		y.enqueue(-1284404427);
		y.enqueue(1053629947);
		assertEquals(1053629947, y.dequeue());
		y.dequeue();
    }
    @Test
    public void test8313() {
		Queue variable = new Queue();
		variable.enqueue(345961561);
		variable.enqueue(-736876912);
		variable.isEmpty();
		variable.isEmpty();
		assertEquals(345961561, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test8314() {
		Queue y = new Queue();
		y.enqueue(-273305281);
    }
    @Test
    public void test8315() {
		Queue y = new Queue();
		y.enqueue(-1606633122);
		y.enqueue(-419542388);
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.toString();
		y.isFull();
		y.toString();
    }
    @Test
    public void test8316() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test8317() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1615805302);
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.isFull();
		x.toString();
		x.toString();
		assertEquals("[]", x.toString());
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(-581738942);
    }
    @Test
    public void test8318() {
		Queue z = new Queue();
		z.enqueue(743663508);
    }
    @Test
    public void test8319() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.toString();
		Var.enqueue(417306328);
		Var.isFull();
		Var.enqueue(239583823);
    }
    @Test
    public void test8320() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.toString();
		variable.toString();
		variable.isFull();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(194923718);
		variable.isEmpty();
    }
    @Test
    public void test8321() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.enqueue(499551737);
		assertFalse(variable.isFull());
		assertFalse(variable.isEmpty());
		variable.isFull();
		assertFalse(variable.isFull());
		assertEquals("[499551737]", variable.toString());
		variable.isEmpty();
		assertEquals("[499551737]", variable.toString());
		assertFalse(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
		variable.toString();
		variable.enqueue(545569900);
    }
    @Test
    public void test8322() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.enqueue(-870473206);
		assertTrue(y.isEmpty());
		y.enqueue(-454135009);
		assertTrue(y.isEmpty());
		y.enqueue(1291749942);
		y.isEmpty();
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(-604545807);
		assertEquals("[1291749942]", y.toString());
		assertFalse(y.isEmpty());
		y.enqueue(942780041);
		y.isEmpty();
    }
    @Test
    public void test8323() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test8324() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.enqueue(-473715068);
    }
    @Test
    public void test8325() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.enqueue(-558659329);
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isFull();
		y.enqueue(1168442125);
    }
    @Test
    public void test8326() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test8327() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test8328() {
		Queue variable = new Queue();
		variable.enqueue(2102348185);
    }
    @Test
    public void test8329() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-1811300356);
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test8330() {
		Queue Var = new Queue();
		Var.enqueue(1397645229);
		Var.enqueue(-221233853);
		assertFalse(Var.isFull());
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test8331() {
		Queue y = new Queue();
		y.enqueue(551273203);
		y.isEmpty();
		assertFalse(y.isEmpty());
		y.enqueue(872923356);
		assertFalse(y.isFull());
		y.toString();
		y.enqueue(-843824166);
		y.isEmpty();
		assertFalse(y.isEmpty());
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test8332() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test8333() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(236235519);
		Var.enqueue(-800900481);
		Var.isEmpty();
		Var.enqueue(763128143);
		assertEquals(236235519, Var.dequeue());
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test8334() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-889762713);
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(-95104291);
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(-223125571);
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.enqueue(-2118218259);
    }
    @Test
    public void test8335() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.enqueue(804764187);
		Var.enqueue(-667774900);
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test8336() {
		Queue z = new Queue();
		z.enqueue(2107818327);
		z.enqueue(-193304294);
		assertFalse(z.isEmpty());
		z.isEmpty();
		assertFalse(z.isEmpty());
		assertFalse(z.isFull());
		z.isEmpty();
		assertFalse(z.isFull());
		assertEquals("[2107818327]", z.toString());
		z.enqueue(-1452399420);
    }
    @Test
    public void test8337() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.dequeue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test8338() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.enqueue(1163861326);
		z.enqueue(650769088);
		z.toString();
    }
    @Test
    public void test8339() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.enqueue(-1981575224);
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.toString();
		y.isFull();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test8340() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-319198536);
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-389451921);
		Var.enqueue(-1076094091);
		Var.dequeue();
		Var.enqueue(715805532);
		Var.toString();
    }
    @Test
    public void test8341() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test8342() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(1645873903);
		Var.toString();
		assertEquals(1645873903, Var.dequeue());
		Var.isFull();
		Var.enqueue(-991666742);
		assertFalse(Var.isFull());
		Var.enqueue(-1378664173);
		Var.isEmpty();
    }
    @Test
    public void test8343() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test8344() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isFull();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.toString();
		z.isEmpty();
		z.isFull();
		assertTrue(z.isEmpty());
		z.enqueue(-1689726341);
		z.enqueue(-1292509753);
		z.toString();
		assertEquals(-1, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test8345() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(1221622219);
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(1153115287);
		variable.enqueue(-717103272);
    }
    @Test
    public void test8346() {
		Queue Var = new Queue();
		Var.enqueue(-343876844);
		Var.isEmpty();
		Var.enqueue(158872373);
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test8347() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(1605595172);
		Var.enqueue(323256736);
		assertFalse(Var.isFull());
		Var.enqueue(1906235111);
		Var.dequeue();
		Var.enqueue(1604362290);
    }
    @Test
    public void test8348() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test8349() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(-976466910);
		x.toString();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.enqueue(1097475111);
		x.enqueue(888929191);
		assertEquals(1097475111, x.dequeue());
		x.toString();
    }
    @Test
    public void test8350() {
		Queue x = new Queue();
		x.enqueue(1271915411);
		assertEquals("[1271915411]", x.toString());
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.toString();
		x.enqueue(-2133103865);
		x.toString();
		assertEquals(-1, x.dequeue());
		x.enqueue(1429112328);
    }
    @Test
    public void test8351() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-687527202);
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-1502756567);
		variable.enqueue(1351919132);
		variable.isFull();
		variable.enqueue(-293654786);
    }
    @Test
    public void test8352() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.toString();
    }
    @Test
    public void test8353() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test8354() {
		Queue variable = new Queue();
		variable.enqueue(-1079030140);
		variable.enqueue(150500410);
		variable.dequeue();
    }
    @Test
    public void test8355() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1546823495);
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test8356() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		variable.toString();
		variable.enqueue(-951971151);
		variable.isEmpty();
    }
    @Test
    public void test8357() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test8358() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.enqueue(-1528345473);
		z.dequeue();
    }
    @Test
    public void test8359() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-745373431);
		z.dequeue();
		z.isFull();
		z.isFull();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.toString();
		z.isFull();
    }
    @Test
    public void test8360() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(1881781550);
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test8361() {
		Queue z = new Queue();
		z.enqueue(783310161);
		z.dequeue();
		z.enqueue(614783871);
		z.isFull();
		z.enqueue(-1909602009);
		assertFalse(z.isEmpty());
		z.isEmpty();
		assertEquals("[614783871]", z.toString());
		z.toString();
		z.toString();
		z.toString();
    }
    @Test
    public void test8362() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(-25351512);
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test8363() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.enqueue(1069340929);
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(2038469854);
    }
    @Test
    public void test8364() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test8365() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.enqueue(-2141053410);
		z.toString();
		z.toString();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test8366() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(-1633064890);
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.enqueue(291656601);
		Var.enqueue(423580989);
		Var.enqueue(-811088899);
		Var.enqueue(961125297);
    }
    @Test
    public void test8367() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test8368() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.enqueue(2088862138);
		Var.toString();
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-293127301);
    }
    @Test
    public void test8369() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.toString();
		Var.enqueue(1579385302);
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test8370() {
		Queue x = new Queue();
		x.enqueue(-1301204537);
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.enqueue(-1242951721);
		x.isEmpty();
		x.toString();
		x.isFull();
    }
    @Test
    public void test8371() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.enqueue(-289729835);
		variable.toString();
		variable.enqueue(-6192419);
    }
    @Test
    public void test8372() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.toString();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test8373() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test8374() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.toString();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.toString();
		y.dequeue();
		y.toString();
		y.isFull();
    }
    @Test
    public void test8375() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test8376() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.dequeue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.enqueue(1599756936);
		y.isEmpty();
		assertEquals(1599756936, y.dequeue());
		y.toString();
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test8377() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-926103659);
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test8378() {
		Queue z = new Queue();
		z.enqueue(986038579);
		z.enqueue(1142500170);
		z.enqueue(-1712209713);
		assertEquals("[986038579, 1142500170]", z.toString());
		assertFalse(z.isFull());
		assertEquals(986038579, z.dequeue());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test8379() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.enqueue(1696090964);
		variable.isFull();
		assertEquals("[1696090964]", variable.toString());
		variable.toString();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test8380() {
		Queue Var = new Queue();
		Var.enqueue(152072932);
		Var.toString();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test8381() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-757916624);
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test8382() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test8383() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test8384() {
		Queue variable = new Queue();
		variable.enqueue(191143131);
		variable.isFull();
		assertEquals("[191143131]", variable.toString());
		variable.isEmpty();
		variable.enqueue(833425313);
		variable.isFull();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test8385() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(79482142);
		assertFalse(Var.isEmpty());
		Var.isFull();
		Var.enqueue(816749065);
		Var.enqueue(-1056673493);
		Var.enqueue(1080659049);
    }
    @Test
    public void test8386() {
		Queue Var = new Queue();
		Var.enqueue(661050109);
		Var.isEmpty();
		Var.isEmpty();
		assertEquals("[661050109]", Var.toString());
		Var.dequeue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(-1496953502);
    }
    @Test
    public void test8387() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.isFull();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test8388() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(1507227531);
		variable.toString();
		variable.enqueue(-1759821002);
		variable.isEmpty();
		variable.toString();
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test8389() {
		Queue z = new Queue();
		z.enqueue(-1691144957);
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.enqueue(-589167776);
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(-1426925295);
		z.enqueue(256829467);
		z.isFull();
		z.enqueue(14296943);
		z.toString();
    }
    @Test
    public void test8390() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-148728786);
		Var.enqueue(-2021478365);
		assertTrue(Var.isEmpty());
		Var.enqueue(-313310619);
		Var.isEmpty();
    }
    @Test
    public void test8391() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test8392() {
		Queue x = new Queue();
		x.enqueue(-1559867119);
		x.dequeue();
		x.enqueue(-321747437);
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(1167480002);
    }
    @Test
    public void test8393() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1906576363);
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-2042548472);
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(-186783501);
		variable.enqueue(214042776);
    }
    @Test
    public void test8394() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.toString();
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test8395() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(1546850825);
		variable.isEmpty();
		variable.enqueue(-2051133293);
		variable.enqueue(-1639703795);
		assertFalse(variable.isFull());
		assertEquals(1546850825, variable.dequeue());
		variable.enqueue(1298904941);
		assertFalse(variable.isFull());
		variable.enqueue(-1990328123);
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test8396() {
		Queue variable = new Queue();
		variable.enqueue(-1747217461);
		variable.dequeue();
    }
    @Test
    public void test8397() {
		Queue variable = new Queue();
		variable.enqueue(671726412);
		variable.isFull();
    }
    @Test
    public void test8398() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.enqueue(1912946509);
    }
    @Test
    public void test8399() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.enqueue(-1420727426);
		Var.toString();
		Var.isFull();
		Var.enqueue(-828932729);
		Var.enqueue(1874097854);
    }
    @Test
    public void test8400() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test8401() {
		Queue x = new Queue();
		x.enqueue(-480750460);
		x.enqueue(-1681170121);
		x.isFull();
    }
    @Test
    public void test8402() {
		Queue y = new Queue();
		y.enqueue(1165669894);
		y.toString();
    }
    @Test
    public void test8403() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isFull();
		assertFalse(y.isFull());
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.enqueue(1888449184);
    }
    @Test
    public void test8404() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-1190479138);
		Var.enqueue(-2118890471);
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(1080479252);
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test8405() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(-333836278);
		Var.enqueue(1703479540);
		Var.isFull();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test8406() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test8407() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.enqueue(1751243091);
		assertEquals("[1751243091]", variable.toString());
		variable.isEmpty();
		variable.isEmpty();
		assertEquals("[1751243091]", variable.toString());
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test8408() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-1925242280);
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test8409() {
		Queue x = new Queue();
		x.enqueue(-1634156298);
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test8410() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isFull();
		x.enqueue(-1694469597);
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.dequeue();
    }
    @Test
    public void test8411() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test8412() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.enqueue(1565504108);
		x.isFull();
		x.isEmpty();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test8413() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test8414() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1207117882);
		variable.isFull();
		variable.enqueue(-1824623132);
		variable.dequeue();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test8415() {
		Queue z = new Queue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test8416() {
		Queue z = new Queue();
		z.enqueue(1134431660);
		z.isFull();
		z.dequeue();
		z.isFull();
		z.enqueue(979332114);
    }
    @Test
    public void test8417() {
		Queue y = new Queue();
		y.enqueue(1887043718);
		y.dequeue();
		assertTrue(y.isEmpty());
		y.toString();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.toString();
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test8418() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.enqueue(1758106786);
		assertEquals("[1758106786]", x.toString());
		x.isFull();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test8419() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-172971025);
		assertEquals(-1, x.dequeue());
		x.toString();
		assertTrue(x.isEmpty());
		x.toString();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.isFull();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.isEmpty();
		x.enqueue(26184568);
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test8420() {
		Queue y = new Queue();
		y.enqueue(1222740507);
		y.toString();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.dequeue();
		y.enqueue(-1138964356);
		y.isEmpty();
		y.toString();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test8421() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-1964324252);
		Var.toString();
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test8422() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.enqueue(-1642247159);
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(1207964235);
		Var.enqueue(13018732);
    }
    @Test
    public void test8423() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(-1764799798);
		Var.enqueue(1454676061);
		Var.isFull();
    }
    @Test
    public void test8424() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test8425() {
		Queue Var = new Queue();
		Var.enqueue(-107280329);
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isFull();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.enqueue(1349568123);
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test8426() {
		Queue y = new Queue();
		y.toString();
		assertEquals("[]", y.toString());
		y.toString();
		y.dequeue();
		y.enqueue(-1063937291);
		y.isEmpty();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test8427() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(1348870485);
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test8428() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(-663170051);
		Var.enqueue(-428591571);
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.toString();
		Var.enqueue(-826012404);
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test8429() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test8430() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test8431() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.enqueue(-1045827698);
		z.isFull();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isEmpty();
		z.enqueue(972683725);
		z.isFull();
		z.enqueue(-1265698349);
		z.isEmpty();
    }
    @Test
    public void test8432() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.toString();
		x.isEmpty();
		x.toString();
		x.enqueue(1203567829);
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test8433() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-1386502261);
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test8434() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test8435() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-2131848581);
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(1039472485);
		z.isEmpty();
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test8436() {
		Queue Var = new Queue();
		Var.enqueue(-708455162);
		Var.toString();
		Var.isFull();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test8437() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(701149620);
		assertFalse(x.isFull());
		assertEquals("[701149620]", x.toString());
		x.toString();
		assertEquals("[701149620]", x.toString());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.enqueue(860150790);
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.enqueue(-1194152550);
		assertEquals(-1, x.dequeue());
		x.toString();
    }
    @Test
    public void test8438() {
		Queue x = new Queue();
		x.enqueue(-17825247);
		x.toString();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(-7387329);
    }
    @Test
    public void test8439() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.enqueue(-520293092);
		y.toString();
    }
    @Test
    public void test8440() {
		Queue variable = new Queue();
		variable.enqueue(-1569245397);
		variable.isEmpty();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test8441() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.enqueue(-1276844968);
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isFull();
    }
    @Test
    public void test8442() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(1556574666);
		variable.isEmpty();
    }
    @Test
    public void test8443() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test8444() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.toString();
		x.enqueue(1204212518);
		x.toString();
		x.enqueue(-1702539694);
		x.enqueue(1953914311);
		assertEquals("[1204212518, 1953914311]", x.toString());
		x.enqueue(936597121);
    }
    @Test
    public void test8445() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.enqueue(-681325186);
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test8446() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test8447() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-2103385052);
    }
    @Test
    public void test8448() {
		Queue z = new Queue();
		z.enqueue(1356924631);
		z.isEmpty();
    }
    @Test
    public void test8449() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
    }
    @Test
    public void test8450() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		y.toString();
		y.toString();
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test8451() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-1672776528);
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.enqueue(1859901815);
		assertEquals(1859901815, x.dequeue());
		x.dequeue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.enqueue(-1083348808);
		x.dequeue();
    }
    @Test
    public void test8452() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
		y.enqueue(-1580268970);
		y.toString();
		y.enqueue(1999565103);
    }
    @Test
    public void test8453() {
		Queue z = new Queue();
		z.enqueue(-139729390);
		assertTrue(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test8454() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(2087958023);
		assertEquals("[2087958023]", x.toString());
		x.isEmpty();
		x.enqueue(-2082113715);
		assertEquals(2087958023, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test8455() {
		Queue Var = new Queue();
		Var.enqueue(839897080);
		assertFalse(Var.isEmpty());
		assertEquals(839897080, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test8456() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.enqueue(-618698113);
		x.enqueue(1497292157);
		assertFalse(x.isEmpty());
		assertEquals(1497292157, x.dequeue());
		assertTrue(x.isEmpty());
		x.dequeue();
		x.enqueue(-885557859);
		x.isEmpty();
		x.enqueue(-503171144);
		x.isEmpty();
    }
    @Test
    public void test8457() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test8458() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isFull();
		variable.toString();
		variable.enqueue(-1650033874);
		variable.isFull();
    }
    @Test
    public void test8459() {
		Queue Var = new Queue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.enqueue(-878949719);
		Var.toString();
		Var.toString();
		Var.dequeue();
		Var.toString();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.enqueue(830251775);
		assertEquals(830251775, Var.dequeue());
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test8460() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test8461() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test8462() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(20685071);
		Var.isEmpty();
		assertEquals("[20685071]", Var.toString());
		Var.enqueue(1795582129);
		Var.toString();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test8463() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test8464() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		Var.isEmpty();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-921096298);
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test8465() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test8466() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(550192059);
		variable.enqueue(1796896858);
		variable.enqueue(1934088366);
		variable.enqueue(-910121592);
    }
    @Test
    public void test8467() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(-363525209);
		variable.enqueue(1301489799);
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test8468() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test8469() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test8470() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test8471() {
		Queue variable = new Queue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test8472() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.enqueue(73051765);
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.enqueue(936580756);
		x.toString();
		x.enqueue(-810092135);
		x.isEmpty();
    }
    @Test
    public void test8473() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test8474() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.isEmpty();
		z.enqueue(349970247);
		z.isEmpty();
		z.toString();
		assertFalse(z.isEmpty());
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(2098246373);
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test8475() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		y.isFull();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isFull();
		y.toString();
    }
    @Test
    public void test8476() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-274132702);
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(-1489020279);
		variable.enqueue(2001016963);
		assertEquals(2001016963, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		variable.enqueue(-1943270712);
    }
    @Test
    public void test8477() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.isFull();
    }
    @Test
    public void test8478() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(-173705166);
		z.toString();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test8479() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.enqueue(-1657904008);
		Var.enqueue(599312089);
		Var.toString();
    }
    @Test
    public void test8480() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test8481() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.enqueue(-1495920431);
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(1078595132);
		assertEquals(1078595132, Var.dequeue());
		Var.enqueue(1960612334);
		Var.enqueue(-1604288885);
		Var.isEmpty();
    }
    @Test
    public void test8482() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(1827763866);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test8483() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.toString();
    }
    @Test
    public void test8484() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.enqueue(-595814853);
		variable.isFull();
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.enqueue(-1151734157);
		variable.enqueue(-1911489035);
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-519074500);
		variable.isEmpty();
    }
    @Test
    public void test8485() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test8486() {
		Queue x = new Queue();
		x.enqueue(1374604221);
		x.isEmpty();
		x.toString();
		x.toString();
		x.enqueue(-2075461433);
    }
    @Test
    public void test8487() {
		Queue variable = new Queue();
		variable.enqueue(1637038083);
		variable.enqueue(1728270947);
    }
    @Test
    public void test8488() {
		Queue z = new Queue();
		z.enqueue(-1037246845);
		assertFalse(z.isFull());
		z.isFull();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.enqueue(-104991456);
    }
    @Test
    public void test8489() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-498317758);
		assertEquals("[]", z.toString());
		z.isFull();
		z.toString();
    }
    @Test
    public void test8490() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.isFull();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test8491() {
		Queue x = new Queue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isFull();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.toString();
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(-1660309704);
		x.isFull();
		x.enqueue(970655464);
    }
    @Test
    public void test8492() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.enqueue(-882825442);
		Var.enqueue(1514103193);
		assertEquals("[1514103193]", Var.toString());
		Var.enqueue(513987256);
		Var.toString();
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(294984547);
		assertEquals(513987256, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test8493() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-1787661864);
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(43656077);
		variable.dequeue();
    }
    @Test
    public void test8494() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		x.isFull();
		assertTrue(x.isEmpty());
		x.enqueue(516601671);
		x.dequeue();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test8495() {
		Queue y = new Queue();
		y.enqueue(-1058525452);
    }
    @Test
    public void test8496() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.isFull();
		y.enqueue(-1307829733);
		y.toString();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test8497() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test8498() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test8499() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(561349562);
		variable.isFull();
		variable.enqueue(-1270128155);
		variable.dequeue();
    }
    @Test
    public void test8500() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test8501() {
		Queue Var = new Queue();
		Var.enqueue(121251763);
		Var.dequeue();
		Var.enqueue(-1500311378);
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test8502() {
		Queue x = new Queue();
		x.enqueue(-437737069);
		x.enqueue(866610941);
    }
    @Test
    public void test8503() {
		Queue y = new Queue();
		y.enqueue(2055389347);
		y.enqueue(-393676460);
		y.isFull();
		y.isFull();
    }
    @Test
    public void test8504() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test8505() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.toString();
		assertEquals("[]", x.toString());
		x.isEmpty();
    }
    @Test
    public void test8506() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		assertFalse(z.isFull());
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.enqueue(109794246);
		z.enqueue(2094983910);
    }
    @Test
    public void test8507() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test8508() {
		Queue z = new Queue();
		z.enqueue(-1300276621);
		assertEquals("[]", z.toString());
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test8509() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(1342890108);
    }
    @Test
    public void test8510() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-998835972);
		x.dequeue();
		x.isFull();
		x.isFull();
		x.enqueue(1040566195);
    }
    @Test
    public void test8511() {
		Queue z = new Queue();
		z.enqueue(-1714067208);
		z.dequeue();
		assertTrue(z.isEmpty());
		z.enqueue(-1005771858);
		assertEquals("[]", z.toString());
		z.enqueue(821851288);
		z.isFull();
		z.isFull();
		z.dequeue();
		z.enqueue(-444830810);
		assertFalse(z.isFull());
		z.toString();
		z.isFull();
    }
    @Test
    public void test8512() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test8513() {
		Queue z = new Queue();
		z.enqueue(-1724271386);
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test8514() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(2014079968);
		Var.enqueue(-2011726314);
		assertFalse(Var.isEmpty());
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(-704567760);
		assertTrue(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test8515() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.toString();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test8516() {
		Queue Var = new Queue();
		Var.enqueue(905321351);
		assertFalse(Var.isEmpty());
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(1420604596);
		Var.dequeue();
    }
    @Test
    public void test8517() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.dequeue();
		y.enqueue(636317433);
		y.isEmpty();
    }
    @Test
    public void test8518() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(468024250);
    }
    @Test
    public void test8519() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test8520() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.enqueue(1050555964);
		z.isFull();
		z.enqueue(-21463823);
		z.isFull();
		assertEquals("[1050555964]", z.toString());
		z.isFull();
		z.isFull();
    }
    @Test
    public void test8521() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
    }
    @Test
    public void test8522() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.isFull();
		y.toString();
    }
    @Test
    public void test8523() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test8524() {
		Queue variable = new Queue();
		variable.enqueue(-2079481801);
		variable.toString();
		variable.toString();
		variable.enqueue(90267499);
		variable.isFull();
		assertEquals(90267499, variable.dequeue());
		variable.isEmpty();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.toString();
    }
    @Test
    public void test8525() {
		Queue variable = new Queue();
		variable.enqueue(-2084935804);
		variable.enqueue(-1157354207);
		variable.enqueue(1431380430);
		variable.enqueue(-1803418565);
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test8526() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-200879736);
		z.dequeue();
		z.enqueue(1149446773);
		z.dequeue();
    }
    @Test
    public void test8527() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.enqueue(-1337684081);
		Var.enqueue(-369464353);
		assertTrue(Var.isEmpty());
		Var.enqueue(1300609512);
		Var.toString();
    }
    @Test
    public void test8528() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.enqueue(-990827542);
		x.isFull();
    }
    @Test
    public void test8529() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1290731801);
		assertEquals(1290731801, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test8530() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-2078708703);
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(554036908);
    }
    @Test
    public void test8531() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.enqueue(355503091);
		y.enqueue(-1055046455);
		y.isEmpty();
		y.isFull();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test8532() {
		Queue y = new Queue();
		y.enqueue(987216249);
		assertFalse(y.isFull());
		assertFalse(y.isEmpty());
		y.dequeue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.enqueue(646728845);
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test8533() {
		Queue Var = new Queue();
		Var.enqueue(-14643345);
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1510139084);
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.enqueue(-271112146);
		Var.enqueue(-870844079);
    }
    @Test
    public void test8534() {
		Queue z = new Queue();
		z.isFull();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(1340434179);
		assertFalse(z.isEmpty());
		assertFalse(z.isEmpty());
		z.dequeue();
		z.isFull();
		z.enqueue(-1069426540);
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test8535() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(-370823246);
		y.isEmpty();
    }
    @Test
    public void test8536() {
		Queue Var = new Queue();
		Var.dequeue();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.enqueue(1486250627);
		assertFalse(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(172154507);
		Var.isEmpty();
    }
    @Test
    public void test8537() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		variable.enqueue(1521026864);
		variable.enqueue(-1881717431);
		variable.toString();
		variable.enqueue(-489101458);
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test8538() {
		Queue z = new Queue();
		z.enqueue(-1493892694);
		z.isEmpty();
		z.toString();
		z.enqueue(668513008);
		z.isFull();
		z.isFull();
    }
    @Test
    public void test8539() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test8540() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.dequeue();
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test8541() {
		Queue y = new Queue();
		y.enqueue(261826265);
		y.dequeue();
    }
    @Test
    public void test8542() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test8543() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.isFull();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-1608276506);
		variable.isFull();
    }
    @Test
    public void test8544() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isEmpty();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test8545() {
		Queue Var = new Queue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(267372280);
		Var.dequeue();
		Var.toString();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.enqueue(701345405);
		assertEquals("[701345405]", Var.toString());
		Var.isEmpty();
		Var.enqueue(1605665649);
		assertEquals("[701345405, 1605665649]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test8546() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.isEmpty();
		z.enqueue(1494081718);
		z.isFull();
		z.toString();
		z.dequeue();
		z.isEmpty();
		z.enqueue(-329031652);
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.enqueue(-1463658082);
    }
    @Test
    public void test8547() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test8548() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.toString();
    }
    @Test
    public void test8549() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.toString();
		x.dequeue();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test8550() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.toString();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.enqueue(-2090495726);
		z.toString();
		z.isFull();
		z.toString();
    }
    @Test
    public void test8551() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test8552() {
		Queue x = new Queue();
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(-1904757795);
		x.dequeue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.toString();
    }
    @Test
    public void test8553() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-2097956935);
    }
    @Test
    public void test8554() {
		Queue z = new Queue();
		z.enqueue(20309318);
		z.enqueue(-1466993755);
		assertEquals("[20309318]", z.toString());
		z.enqueue(-1019942299);
    }
    @Test
    public void test8555() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.toString();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test8556() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(-184782705);
		x.dequeue();
    }
    @Test
    public void test8557() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(1786450642);
    }
    @Test
    public void test8558() {
		Queue y = new Queue();
		y.enqueue(780309651);
		y.dequeue();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test8559() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.enqueue(-1641535658);
		y.enqueue(-2118944993);
		y.enqueue(791833610);
		y.enqueue(-1120572861);
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(-941932771);
    }
    @Test
    public void test8560() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.toString();
		y.toString();
		y.isFull();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.enqueue(-657849193);
		y.isEmpty();
		y.dequeue();
		y.enqueue(697132963);
    }
    @Test
    public void test8561() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test8562() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.enqueue(-1327553327);
		assertTrue(z.isEmpty());
		z.toString();
		z.isFull();
		z.enqueue(-276585051);
    }
    @Test
    public void test8563() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test8564() {
		Queue variable = new Queue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(1199470005);
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-759166624);
		variable.enqueue(913071449);
		assertFalse(variable.isFull());
		variable.isFull();
		assertEquals("[913071449]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test8565() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(1307280861);
    }
    @Test
    public void test8566() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.dequeue();
		Var.enqueue(-92026689);
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1511913084);
		Var.dequeue();
    }
    @Test
    public void test8567() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(1648616007);
    }
    @Test
    public void test8568() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.enqueue(-611996494);
		x.enqueue(90575313);
		assertFalse(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test8569() {
		Queue variable = new Queue();
		variable.enqueue(634506389);
		variable.isFull();
		assertFalse(variable.isEmpty());
		variable.toString();
		variable.isFull();
		variable.enqueue(-968034367);
		variable.toString();
		variable.dequeue();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test8570() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.toString();
		x.isFull();
		x.enqueue(-602459571);
		x.enqueue(-1581251562);
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.enqueue(-845408581);
		x.enqueue(-1487592220);
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test8571() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.isEmpty();
		z.toString();
		z.isEmpty();
		z.enqueue(-1336527099);
    }
    @Test
    public void test8572() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test8573() {
		Queue y = new Queue();
		y.enqueue(-316640859);
		y.isFull();
    }
    @Test
    public void test8574() {
		Queue Var = new Queue();
		Var.enqueue(-612741449);
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test8575() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test8576() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test8577() {
		Queue variable = new Queue();
		variable.enqueue(1105537361);
		variable.enqueue(1842625903);
		variable.enqueue(1753087141);
		variable.dequeue();
		variable.enqueue(1851221608);
		assertEquals(1842625903, variable.dequeue());
		variable.toString();
		variable.enqueue(-1786432966);
		variable.isEmpty();
    }
    @Test
    public void test8578() {
		Queue x = new Queue();
		x.enqueue(-1592360292);
		x.dequeue();
		x.isFull();
		x.toString();
		x.isFull();
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.isFull();
		x.toString();
    }
    @Test
    public void test8579() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1063901210);
    }
    @Test
    public void test8580() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test8581() {
		Queue variable = new Queue();
		variable.enqueue(-1443043712);
		variable.enqueue(-1954079289);
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(-2097023791);
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test8582() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test8583() {
		Queue x = new Queue();
		x.enqueue(1091216533);
		x.toString();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test8584() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(811008179);
		z.enqueue(1692975522);
		z.isEmpty();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.enqueue(692882722);
		z.toString();
		z.enqueue(-1118957590);
		assertEquals(811008179, z.dequeue());
		z.isFull();
		assertEquals("[1692975522, 692882722]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test8585() {
		Queue y = new Queue();
		y.toString();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.enqueue(94786945);
		y.enqueue(-1224913029);
		y.dequeue();
		y.toString();
		y.toString();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.toString();
		y.isFull();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test8586() {
		Queue y = new Queue();
		y.enqueue(-421050326);
		y.enqueue(-1548332977);
		assertTrue(y.isEmpty());
		y.toString();
		y.toString();
		y.enqueue(2100053982);
		y.isEmpty();
		assertEquals("[2100053982]", y.toString());
		y.dequeue();
    }
    @Test
    public void test8587() {
		Queue Var = new Queue();
		Var.enqueue(-868370805);
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test8588() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test8589() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1453546054);
		assertEquals("[]", Var.toString());
		Var.enqueue(1597536416);
		assertEquals("[1597536416]", Var.toString());
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.toString();
		assertEquals("[1597536416]", Var.toString());
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test8590() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.isEmpty();
		z.enqueue(680917066);
    }
    @Test
    public void test8591() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test8592() {
		Queue Var = new Queue();
		Var.enqueue(39476499);
		assertFalse(Var.isEmpty());
		Var.enqueue(308956422);
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test8593() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
		x.enqueue(-1203838288);
		x.isFull();
		x.isFull();
    }
    @Test
    public void test8594() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test8595() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.toString();
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test8596() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test8597() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(-1317861210);
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.enqueue(-664112425);
		x.toString();
    }
    @Test
    public void test8598() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1966864826);
		Var.enqueue(1975776243);
		assertEquals("[1975776243]", Var.toString());
		Var.dequeue();
		Var.enqueue(263193075);
		Var.toString();
    }
    @Test
    public void test8599() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
		x.enqueue(982697861);
		x.isEmpty();
		x.enqueue(-134234163);
    }
    @Test
    public void test8600() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test8601() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.toString();
		x.isFull();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(2098141062);
		x.enqueue(1594120554);
		x.toString();
		x.isFull();
		x.toString();
    }
    @Test
    public void test8602() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1221475802);
		variable.dequeue();
    }
    @Test
    public void test8603() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-2034590327);
		assertFalse(x.isFull());
		x.isFull();
    }
    @Test
    public void test8604() {
		Queue z = new Queue();
		z.enqueue(-928971231);
		z.isFull();
		z.toString();
		z.enqueue(-650628808);
		z.enqueue(623988994);
		assertFalse(z.isEmpty());
		assertFalse(z.isEmpty());
		z.toString();
		z.dequeue();
    }
    @Test
    public void test8605() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.isFull();
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(-423694763);
		z.isEmpty();
    }
    @Test
    public void test8606() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.toString();
		z.isFull();
		z.dequeue();
		z.enqueue(899980211);
		z.toString();
		z.isFull();
    }
    @Test
    public void test8607() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(1825469809);
		x.toString();
		x.enqueue(-389287973);
		x.isFull();
    }
    @Test
    public void test8608() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.toString();
		y.toString();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.isFull();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test8609() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.toString();
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.toString();
		z.enqueue(-1334335975);
		assertTrue(z.isEmpty());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.enqueue(-1098174921);
    }
    @Test
    public void test8610() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.enqueue(971350015);
		variable.enqueue(819071224);
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-322803645);
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-1097739460);
    }
    @Test
    public void test8611() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test8612() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.enqueue(242357607);
		y.enqueue(1525954761);
		y.isFull();
    }
    @Test
    public void test8613() {
		Queue y = new Queue();
		y.enqueue(-1547285030);
		y.isEmpty();
		y.dequeue();
		y.enqueue(-181465090);
		assertEquals(-1, y.dequeue());
		y.enqueue(2111689785);
    }
    @Test
    public void test8614() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(-2130954903);
		z.isFull();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test8615() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test8616() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.enqueue(1499952625);
    }
    @Test
    public void test8617() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-1946770913);
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test8618() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.toString();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test8619() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test8620() {
		Queue z = new Queue();
		z.enqueue(-1897574161);
		z.toString();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.enqueue(-122367138);
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.toString();
		z.isFull();
    }
    @Test
    public void test8621() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.enqueue(1363531760);
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test8622() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.toString();
    }
    @Test
    public void test8623() {
		Queue z = new Queue();
		z.enqueue(826591040);
		z.isFull();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
    }
    @Test
    public void test8624() {
		Queue y = new Queue();
		y.enqueue(-1150194210);
		y.toString();
		y.isEmpty();
		y.toString();
		y.enqueue(-1446356398);
		y.toString();
		y.enqueue(-1177791980);
		assertFalse(y.isFull());
		y.isEmpty();
		y.dequeue();
		y.enqueue(287042918);
    }
    @Test
    public void test8625() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.toString();
		y.enqueue(-1567430331);
		y.isEmpty();
		y.isFull();
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(62524216);
    }
    @Test
    public void test8626() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(1868944700);
		assertEquals("[1868944700]", Var.toString());
		Var.isEmpty();
		Var.enqueue(225499811);
    }
    @Test
    public void test8627() {
		Queue y = new Queue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isEmpty();
		y.enqueue(938467272);
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test8628() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.enqueue(-1201576644);
		Var.dequeue();
		Var.toString();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.enqueue(-637467068);
		Var.toString();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test8629() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.enqueue(-1820386434);
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test8630() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.isEmpty();
		y.isFull();
		assertEquals("[]", y.toString());
		y.toString();
		y.enqueue(1515142784);
		y.toString();
		assertEquals("[1515142784]", y.toString());
		assertFalse(y.isFull());
		y.enqueue(1126281587);
		y.isFull();
    }
    @Test
    public void test8631() {
		Queue z = new Queue();
		z.enqueue(-618681725);
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(-462083831);
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(57583676);
		assertEquals(57583676, z.dequeue());
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test8632() {
		Queue variable = new Queue();
		variable.enqueue(233533696);
		variable.enqueue(1147634719);
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		variable.enqueue(1671152598);
		assertEquals("[233533696, 1147634719, 1671152598]", variable.toString());
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test8633() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-509542044);
		variable.isEmpty();
		variable.toString();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.enqueue(-1099414500);
		assertFalse(variable.isFull());
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test8634() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test8635() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test8636() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(1538999976);
		Var.isFull();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1117477541);
		Var.toString();
		Var.enqueue(-1489639286);
		Var.toString();
    }
    @Test
    public void test8637() {
		Queue x = new Queue();
		x.enqueue(-688062319);
		x.isFull();
		x.dequeue();
		x.toString();
		x.enqueue(1139239185);
		assertFalse(x.isEmpty());
		x.enqueue(304343173);
    }
    @Test
    public void test8638() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.enqueue(-932806281);
		assertFalse(z.isFull());
		z.enqueue(-886096268);
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test8639() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test8640() {
		Queue z = new Queue();
		z.enqueue(2124587777);
		z.isEmpty();
		z.isEmpty();
		z.enqueue(14855506);
    }
    @Test
    public void test8641() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		z.isFull();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isFull();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test8642() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(51503308);
		Var.isEmpty();
		Var.enqueue(-1732406135);
		Var.dequeue();
    }
    @Test
    public void test8643() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test8644() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.toString();
		z.toString();
		z.toString();
		z.enqueue(-306802734);
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test8645() {
		Queue x = new Queue();
		x.isFull();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test8646() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-1392015470);
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.enqueue(-1593889487);
		y.dequeue();
		y.toString();
		y.enqueue(-763920272);
		y.isFull();
		y.isFull();
		y.enqueue(-2078926960);
    }
    @Test
    public void test8647() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.enqueue(-1619542163);
		x.toString();
		x.isFull();
		x.isFull();
		x.enqueue(206104283);
		x.dequeue();
    }
    @Test
    public void test8648() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.isEmpty();
		z.dequeue();
		z.toString();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test8649() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isEmpty();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(-180738733);
		assertTrue(z.isEmpty());
		z.enqueue(1455452461);
		z.toString();
		z.enqueue(-111941199);
		assertFalse(z.isEmpty());
		z.toString();
    }
    @Test
    public void test8650() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.enqueue(-645558221);
		variable.toString();
		variable.toString();
		variable.enqueue(-2113881875);
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(18491503);
		variable.enqueue(-794440266);
    }
    @Test
    public void test8651() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(-2006658912);
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(801622774);
		Var.isFull();
		Var.enqueue(-314955990);
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		Var.enqueue(-866986484);
		Var.isFull();
    }
    @Test
    public void test8652() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.enqueue(215305993);
		assertFalse(y.isFull());
		y.isFull();
		assertFalse(y.isEmpty());
		y.toString();
		assertFalse(y.isEmpty());
		y.isEmpty();
		y.enqueue(-196523703);
		y.dequeue();
    }
    @Test
    public void test8653() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test8654() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test8655() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test8656() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(1959034608);
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test8657() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(488953783);
		assertFalse(variable.isFull());
		assertEquals("[488953783]", variable.toString());
		variable.enqueue(2091043681);
		variable.enqueue(-1855893029);
    }
    @Test
    public void test8658() {
		Queue variable = new Queue();
		variable.enqueue(349865208);
		variable.toString();
		variable.enqueue(1900253046);
		variable.enqueue(986748850);
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test8659() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.enqueue(861080996);
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test8660() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.isFull();
		x.enqueue(-2055118642);
		x.toString();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test8661() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(492856974);
		assertEquals(492856974, variable.dequeue());
		variable.enqueue(-1328276252);
    }
    @Test
    public void test8662() {
		Queue variable = new Queue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1676332195);
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test8663() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(-1777680760);
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.toString();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.toString();
    }
    @Test
    public void test8664() {
		Queue Var = new Queue();
		Var.enqueue(596436828);
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.toString();
		Var.isFull();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test8665() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test8666() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.toString();
		y.isFull();
		y.isEmpty();
		y.isFull();
		assertFalse(y.isFull());
		y.dequeue();
		y.toString();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.enqueue(471946271);
		y.toString();
		y.enqueue(-1407363743);
    }
    @Test
    public void test8667() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1864711491);
		Var.isEmpty();
		Var.enqueue(133451452);
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-1350566250);
		Var.enqueue(280232974);
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test8668() {
		Queue z = new Queue();
		z.enqueue(-2129302817);
		z.dequeue();
		z.enqueue(1089590472);
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(-1399407191);
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.isFull();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test8669() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(-1265170727);
		Var.isEmpty();
		Var.enqueue(-816416043);
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.enqueue(1246613064);
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test8670() {
		Queue x = new Queue();
		x.enqueue(1052089577);
		x.enqueue(-2052980156);
    }
    @Test
    public void test8671() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(1838358947);
		Var.isFull();
		Var.toString();
		assertEquals("[1838358947]", Var.toString());
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(1068651447);
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test8672() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(75695139);
		z.enqueue(525495620);
		z.enqueue(-178815338);
    }
    @Test
    public void test8673() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.toString();
		z.enqueue(1148433764);
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(-1449959440);
		z.toString();
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(1108480998);
    }
    @Test
    public void test8674() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
		y.isFull();
		y.isEmpty();
		y.toString();
		y.enqueue(-598996632);
    }
    @Test
    public void test8675() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.dequeue();
		x.enqueue(531142031);
		x.toString();
		x.enqueue(1478011509);
    }
    @Test
    public void test8676() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.enqueue(-1538965265);
    }
    @Test
    public void test8677() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test8678() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(2116122841);
		assertEquals(2116122841, variable.dequeue());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.toString();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test8679() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test8680() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.enqueue(-4935629);
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.dequeue();
		y.isFull();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test8681() {
		Queue x = new Queue();
		x.enqueue(-650205221);
		x.isFull();
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isFull();
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(401531046);
		assertEquals("[401531046]", x.toString());
		x.enqueue(-1645311490);
		x.enqueue(474337737);
		x.toString();
    }
    @Test
    public void test8682() {
		Queue Var = new Queue();
		Var.enqueue(-569830064);
		Var.dequeue();
		Var.enqueue(350111576);
		Var.isFull();
		Var.enqueue(-1213244866);
    }
    @Test
    public void test8683() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.toString();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-1089679847);
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.enqueue(-631541896);
		y.isFull();
    }
    @Test
    public void test8684() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test8685() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(-1074443975);
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-1593495813);
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isEmpty();
		z.toString();
		z.toString();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.enqueue(-85116927);
		z.dequeue();
    }
    @Test
    public void test8686() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isFull();
		y.toString();
		y.enqueue(631082537);
		y.isFull();
		y.dequeue();
		y.enqueue(-255190860);
    }
    @Test
    public void test8687() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test8688() {
		Queue x = new Queue();
		x.enqueue(196459048);
		x.enqueue(566955098);
		x.dequeue();
		x.isFull();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.enqueue(-484196491);
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test8689() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.toString();
		Var.isEmpty();
		Var.enqueue(1714773447);
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.isFull();
		Var.enqueue(-566100671);
		Var.isEmpty();
    }
    @Test
    public void test8690() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(-862998150);
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1666520653);
		variable.isFull();
		assertEquals(1666520653, variable.dequeue());
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-1201645467);
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test8691() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(17870152);
		assertFalse(x.isFull());
		x.enqueue(1917389868);
		x.isEmpty();
		x.enqueue(2081280439);
		x.isFull();
		assertFalse(x.isFull());
		assertEquals(17870152, x.dequeue());
		x.isFull();
		assertEquals("[1917389868, 2081280439]", x.toString());
		x.dequeue();
		assertEquals("[2081280439]", x.toString());
		assertFalse(x.isEmpty());
		x.enqueue(1468356304);
		x.dequeue();
    }
    @Test
    public void test8692() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.toString();
		z.dequeue();
    }
    @Test
    public void test8693() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.isFull();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.isFull();
    }
    @Test
    public void test8694() {
		Queue y = new Queue();
		y.enqueue(-727494727);
		y.isEmpty();
		y.enqueue(-390392814);
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test8695() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.toString();
		y.toString();
    }
    @Test
    public void test8696() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(1070590991);
		x.toString();
		x.toString();
    }
    @Test
    public void test8697() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.isFull();
		assertEquals("[]", z.toString());
		z.enqueue(-2047893528);
    }
    @Test
    public void test8698() {
		Queue x = new Queue();
		x.enqueue(-177146202);
		x.enqueue(-1269024702);
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test8699() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(1564346530);
    }
    @Test
    public void test8700() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-728293181);
		Var.enqueue(1066246560);
		Var.enqueue(-1031515482);
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test8701() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(1422491208);
		variable.isFull();
		assertFalse(variable.isEmpty());
		assertEquals(1422491208, variable.dequeue());
		variable.toString();
    }
    @Test
    public void test8702() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.enqueue(-184721181);
		variable.dequeue();
    }
    @Test
    public void test8703() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test8704() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test8705() {
		Queue z = new Queue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.toString();
		z.toString();
    }
    @Test
    public void test8706() {
		Queue y = new Queue();
		y.enqueue(-2094626636);
		assertTrue(y.isEmpty());
		y.enqueue(-1731933939);
		y.toString();
    }
    @Test
    public void test8707() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.enqueue(-574883907);
		x.isFull();
    }
    @Test
    public void test8708() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test8709() {
		Queue variable = new Queue();
		variable.enqueue(-1868224148);
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test8710() {
		Queue y = new Queue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.enqueue(938015684);
		y.enqueue(-2038017654);
		y.isFull();
		y.enqueue(-2072097010);
		assertFalse(y.isEmpty());
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
		y.toString();
    }
    @Test
    public void test8711() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.toString();
		x.isFull();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test8712() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(666427279);
		assertFalse(z.isEmpty());
		z.isEmpty();
		z.isEmpty();
		z.toString();
		assertFalse(z.isEmpty());
		z.enqueue(1984315720);
		z.isEmpty();
		assertFalse(z.isEmpty());
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test8713() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.toString();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test8714() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.enqueue(224437299);
    }
    @Test
    public void test8715() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
    }
    @Test
    public void test8716() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test8717() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.enqueue(-1773900995);
		y.toString();
		y.dequeue();
		y.enqueue(2066391640);
		y.isEmpty();
		assertEquals(2066391640, y.dequeue());
		assertEquals("[]", y.toString());
		y.isFull();
		y.isFull();
    }
    @Test
    public void test8718() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(2131960230);
		Var.dequeue();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.enqueue(-1358339099);
		Var.isFull();
    }
    @Test
    public void test8719() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.enqueue(-64762685);
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(1095607435);
		assertEquals(1095607435, Var.dequeue());
		Var.enqueue(716885248);
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test8720() {
		Queue y = new Queue();
		y.enqueue(-3208112);
		assertEquals(-1, y.dequeue());
		y.toString();
		y.dequeue();
		y.toString();
		y.isFull();
		assertFalse(y.isFull());
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test8721() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(1833387530);
    }
    @Test
    public void test8722() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-590874703);
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test8723() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.enqueue(705265695);
		variable.enqueue(1003094954);
		variable.isFull();
		variable.enqueue(-823429284);
		variable.isFull();
    }
    @Test
    public void test8724() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.toString();
		z.enqueue(-2146218689);
    }
    @Test
    public void test8725() {
		Queue Var = new Queue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.enqueue(-2010738838);
    }
    @Test
    public void test8726() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test8727() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-716360133);
		y.isEmpty();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.dequeue();
		y.enqueue(-1518936115);
    }
    @Test
    public void test8728() {
		Queue y = new Queue();
		y.enqueue(-109337560);
		y.enqueue(-1654020626);
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test8729() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test8730() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.enqueue(721875856);
		variable.enqueue(2110924423);
		variable.dequeue();
		assertFalse(variable.isFull());
		assertFalse(variable.isEmpty());
		assertFalse(variable.isEmpty());
		assertFalse(variable.isEmpty());
		assertEquals(2110924423, variable.dequeue());
		variable.isFull();
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test8731() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test8732() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.enqueue(-1546914605);
		Var.enqueue(-1698158972);
    }
    @Test
    public void test8733() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-452288676);
		y.enqueue(-271248265);
		assertTrue(y.isEmpty());
		y.enqueue(1312508512);
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1358870149);
    }
    @Test
    public void test8734() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.toString();
		y.enqueue(1884769176);
		y.enqueue(1553565085);
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
		y.enqueue(-1458619363);
		y.dequeue();
    }
    @Test
    public void test8735() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test8736() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1616008290);
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.toString();
		y.isEmpty();
		y.enqueue(1505031217);
		y.isEmpty();
    }
    @Test
    public void test8737() {
		Queue Var = new Queue();
		Var.enqueue(1950028047);
		Var.enqueue(1348742734);
		Var.isEmpty();
		assertEquals(1950028047, Var.dequeue());
		Var.isFull();
		assertEquals("[1348742734]", Var.toString());
		assertFalse(Var.isEmpty());
		assertEquals("[1348742734]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test8738() {
		Queue z = new Queue();
		z.enqueue(-1443517396);
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.isFull();
		z.isFull();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.enqueue(-1432891163);
		z.toString();
		assertEquals("[]", z.toString());
		z.toString();
		z.dequeue();
		z.enqueue(6889077);
    }
    @Test
    public void test8739() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.enqueue(1816853429);
		z.enqueue(-1255305553);
    }
    @Test
    public void test8740() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test8741() {
		Queue z = new Queue();
		z.enqueue(-1641387441);
		z.enqueue(73825847);
		z.enqueue(2035824277);
		z.dequeue();
		z.enqueue(1829635364);
    }
    @Test
    public void test8742() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(-1620762561);
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test8743() {
		Queue y = new Queue();
		y.enqueue(1094378552);
		y.isFull();
		assertEquals(1094378552, y.dequeue());
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.enqueue(2146673209);
		y.toString();
		y.toString();
    }
    @Test
    public void test8744() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test8745() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(178918503);
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test8746() {
		Queue x = new Queue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
		x.enqueue(979960915);
		assertFalse(x.isEmpty());
		x.enqueue(-206105056);
		assertEquals("[979960915]", x.toString());
		x.isFull();
		x.enqueue(-1335829559);
		x.toString();
    }
    @Test
    public void test8747() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test8748() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(640566364);
		variable.toString();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test8749() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test8750() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test8751() {
		Queue x = new Queue();
		x.isFull();
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(966879578);
		x.enqueue(1380057473);
    }
    @Test
    public void test8752() {
		Queue y = new Queue();
		y.enqueue(-1264399965);
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test8753() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-1693892829);
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(1745811550);
    }
    @Test
    public void test8754() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(524443105);
		x.enqueue(1942440864);
		x.dequeue();
    }
    @Test
    public void test8755() {
		Queue x = new Queue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test8756() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.toString();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.enqueue(-1592419443);
		Var.dequeue();
    }
    @Test
    public void test8757() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(-1013456345);
		Var.isEmpty();
    }
    @Test
    public void test8758() {
		Queue z = new Queue();
		z.enqueue(1587259327);
		z.enqueue(-967252370);
		z.toString();
		z.enqueue(-906170796);
		z.isEmpty();
		z.dequeue();
		z.toString();
		z.enqueue(746716489);
		z.enqueue(822517011);
		z.dequeue();
    }
    @Test
    public void test8759() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1197862118);
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test8760() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test8761() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test8762() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test8763() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.enqueue(-1166195236);
		x.enqueue(-1728039799);
		x.dequeue();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.isFull();
		x.isEmpty();
		x.isFull();
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test8764() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-1214894874);
		variable.toString();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-559746122);
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(261982331);
		variable.dequeue();
    }
    @Test
    public void test8765() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(1010886599);
		z.toString();
		assertEquals(1010886599, z.dequeue());
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(1811429433);
    }
    @Test
    public void test8766() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.enqueue(-1668855961);
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test8767() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.toString();
		y.enqueue(-1271127910);
    }
    @Test
    public void test8768() {
		Queue Var = new Queue();
		Var.enqueue(1918325453);
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.enqueue(1497347701);
		Var.enqueue(503087376);
		Var.enqueue(-748596580);
    }
    @Test
    public void test8769() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.toString();
    }
    @Test
    public void test8770() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test8771() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-393570698);
		variable.isFull();
		variable.toString();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test8772() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-1592892361);
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test8773() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.toString();
		x.enqueue(499806549);
		x.isFull();
		x.enqueue(499608043);
		x.isFull();
    }
    @Test
    public void test8774() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-1080048942);
		x.toString();
		x.enqueue(-231760538);
		x.enqueue(-892688618);
    }
    @Test
    public void test8775() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.dequeue();
		y.toString();
		y.toString();
		y.dequeue();
		y.enqueue(-17609999);
    }
    @Test
    public void test8776() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(130073854);
		assertEquals("[130073854]", Var.toString());
		Var.enqueue(542492482);
		Var.isFull();
    }
    @Test
    public void test8777() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(529283234);
		variable.dequeue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test8778() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test8779() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.enqueue(-523921021);
    }
    @Test
    public void test8780() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isEmpty();
		z.toString();
		z.isFull();
    }
    @Test
    public void test8781() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(-1151852620);
		assertFalse(x.isFull());
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.enqueue(433329323);
		x.enqueue(737021408);
		x.dequeue();
    }
    @Test
    public void test8782() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-1664225170);
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test8783() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test8784() {
		Queue variable = new Queue();
		variable.enqueue(426161330);
		variable.enqueue(705768377);
		variable.enqueue(-84850940);
		assertEquals("[426161330, 705768377]", variable.toString());
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(-1363637408);
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(1668030984);
    }
    @Test
    public void test8785() {
		Queue Var = new Queue();
		Var.enqueue(1910900204);
		Var.isEmpty();
		assertEquals(1910900204, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.enqueue(1199016059);
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test8786() {
		Queue y = new Queue();
		y.toString();
		assertFalse(y.isFull());
		y.isEmpty();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test8787() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test8788() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1247348999);
		assertEquals("[1247348999]", Var.toString());
		assertEquals("[1247348999]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-717652667);
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test8789() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		z.toString();
		z.dequeue();
		z.toString();
		z.isEmpty();
		z.dequeue();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test8790() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.enqueue(1956796550);
		z.isEmpty();
		z.toString();
		z.toString();
		z.isEmpty();
		assertEquals(1956796550, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test8791() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(704551161);
		assertEquals("[704551161]", z.toString());
		assertEquals("[704551161]", z.toString());
		assertEquals("[704551161]", z.toString());
		assertFalse(z.isEmpty());
		z.enqueue(-823805650);
    }
    @Test
    public void test8792() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.toString();
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.isFull();
		x.enqueue(1118880834);
    }
    @Test
    public void test8793() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test8794() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
    }
    @Test
    public void test8795() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test8796() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.toString();
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.dequeue();
		assertFalse(x.isFull());
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test8797() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.toString();
		z.isFull();
		assertEquals("[]", z.toString());
		z.toString();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.toString();
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(104733618);
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test8798() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test8799() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-50895320);
		Var.isEmpty();
    }
    @Test
    public void test8800() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.toString();
		x.isFull();
		x.dequeue();
		x.enqueue(-2023800383);
    }
    @Test
    public void test8801() {
		Queue z = new Queue();
		z.enqueue(1622885865);
		z.toString();
		z.isEmpty();
		z.isFull();
		z.enqueue(375081599);
		z.dequeue();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test8802() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test8803() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-578729063);
		Var.enqueue(1114031067);
		Var.isEmpty();
		Var.enqueue(-1722937191);
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-2009064418);
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test8804() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test8805() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test8806() {
		Queue x = new Queue();
		x.isFull();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(856769825);
		x.toString();
		assertFalse(x.isFull());
		assertEquals(856769825, x.dequeue());
		assertEquals("[]", x.toString());
		x.enqueue(-994062697);
		x.isEmpty();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test8807() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(1167087031);
    }
    @Test
    public void test8808() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(1369120346);
		Var.isFull();
		assertFalse(Var.isEmpty());
		assertEquals("[1369120346]", Var.toString());
		Var.isEmpty();
		assertEquals(1369120346, Var.dequeue());
		Var.enqueue(-1133150920);
    }
    @Test
    public void test8809() {
		Queue Var = new Queue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1127358268);
		Var.toString();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1221435644);
		Var.dequeue();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test8810() {
		Queue x = new Queue();
		x.enqueue(-171263060);
		x.enqueue(-981330929);
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test8811() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test8812() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(-2051142941);
		z.isFull();
		z.isFull();
		z.toString();
		z.enqueue(1180126755);
    }
    @Test
    public void test8813() {
		Queue variable = new Queue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(566551061);
		variable.enqueue(-1137472848);
		variable.toString();
		assertEquals(566551061, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test8814() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.isFull();
		variable.toString();
		variable.enqueue(1011376753);
		assertEquals("[1011376753]", variable.toString());
		variable.isFull();
		variable.toString();
		variable.isFull();
		assertEquals("[1011376753]", variable.toString());
		variable.toString();
    }
    @Test
    public void test8815() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.enqueue(-277348631);
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(2005484049);
		Var.isFull();
    }
    @Test
    public void test8816() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.dequeue();
    }
    @Test
    public void test8817() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.enqueue(-1432368442);
		assertEquals("[]", y.toString());
		y.enqueue(-1089669391);
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(1370664388);
		y.toString();
		y.isEmpty();
		y.dequeue();
		y.enqueue(-837804722);
		y.dequeue();
    }
    @Test
    public void test8818() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test8819() {
		Queue Var = new Queue();
		Var.enqueue(950537472);
		assertEquals(950537472, Var.dequeue());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(1993288626);
		Var.isFull();
    }
    @Test
    public void test8820() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test8821() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test8822() {
		Queue y = new Queue();
		y.enqueue(-60314320);
		y.toString();
		y.enqueue(953213409);
		assertEquals("[953213409]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test8823() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		assertFalse(z.isFull());
		z.isFull();
		z.isEmpty();
		z.enqueue(1848247653);
		z.toString();
		z.dequeue();
    }
    @Test
    public void test8824() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test8825() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.toString();
		assertFalse(y.isFull());
		y.dequeue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(322279770);
		assertFalse(y.isFull());
		y.enqueue(1236263243);
		y.dequeue();
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(-1808574338);
    }
    @Test
    public void test8826() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isFull();
		Var.isFull();
		Var.enqueue(-1964334998);
    }
    @Test
    public void test8827() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(1411515252);
		assertFalse(y.isEmpty());
		y.isFull();
		y.dequeue();
		y.isFull();
		y.dequeue();
		y.enqueue(525223409);
		y.toString();
		y.toString();
    }
    @Test
    public void test8828() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-1654275305);
		variable.isEmpty();
		variable.toString();
		variable.enqueue(525784127);
		assertFalse(variable.isEmpty());
		variable.enqueue(1034246700);
		variable.isFull();
    }
    @Test
    public void test8829() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(1476344104);
		y.enqueue(-1383661141);
		assertEquals(1476344104, y.dequeue());
		y.isEmpty();
		y.toString();
		y.isFull();
		assertEquals("[]", y.toString());
		y.enqueue(1467245986);
    }
    @Test
    public void test8830() {
		Queue z = new Queue();
		z.isFull();
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isEmpty();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test8831() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test8832() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(-1032399737);
		Var.isEmpty();
		Var.enqueue(-2116736126);
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test8833() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(1672730800);
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test8834() {
		Queue y = new Queue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(-503873774);
		assertFalse(y.isFull());
		y.enqueue(-1232682324);
		y.dequeue();
    }
    @Test
    public void test8835() {
		Queue x = new Queue();
		x.enqueue(1219463270);
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test8836() {
		Queue Var = new Queue();
		Var.enqueue(-1275996961);
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.dequeue();
		Var.enqueue(1140729063);
    }
    @Test
    public void test8837() {
		Queue y = new Queue();
		y.toString();
		y.toString();
    }
    @Test
    public void test8838() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test8839() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test8840() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		variable.toString();
		variable.toString();
		variable.enqueue(-1759714184);
    }
    @Test
    public void test8841() {
		Queue z = new Queue();
		z.enqueue(642710848);
		assertFalse(z.isFull());
		z.toString();
		z.enqueue(-1465742120);
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test8842() {
		Queue y = new Queue();
		y.toString();
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test8843() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-918277867);
		y.isFull();
		assertFalse(y.isFull());
		y.dequeue();
		y.toString();
		y.isFull();
		y.dequeue();
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test8844() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(-1943582880);
		y.enqueue(-215831155);
		y.dequeue();
    }
    @Test
    public void test8845() {
		Queue z = new Queue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(1006517083);
    }
    @Test
    public void test8846() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isFull();
		y.isFull();
		y.enqueue(194479309);
		y.enqueue(1399885919);
		y.toString();
    }
    @Test
    public void test8847() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.enqueue(314163296);
		assertEquals(314163296, y.dequeue());
		y.enqueue(1600397371);
		assertFalse(y.isEmpty());
		y.isEmpty();
		assertEquals(1600397371, y.dequeue());
		y.dequeue();
		y.enqueue(-2144601124);
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(-1206559061);
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test8848() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.toString();
		variable.toString();
		variable.dequeue();
		variable.toString();
		variable.toString();
		variable.enqueue(1138656911);
		variable.enqueue(-1757949811);
    }
    @Test
    public void test8849() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(2080112211);
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test8850() {
		Queue x = new Queue();
		x.enqueue(1500749948);
		x.toString();
		x.isFull();
    }
    @Test
    public void test8851() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.enqueue(1026961666);
		y.isEmpty();
    }
    @Test
    public void test8852() {
		Queue Var = new Queue();
		Var.enqueue(556145184);
		assertEquals(556145184, Var.dequeue());
		Var.enqueue(-1621290082);
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test8853() {
		Queue y = new Queue();
		y.enqueue(-261451274);
		y.isFull();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test8854() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(1785387133);
		y.isFull();
		y.isFull();
		assertFalse(y.isFull());
		y.isFull();
		y.dequeue();
		y.enqueue(548786440);
		assertFalse(y.isFull());
		y.isEmpty();
		assertEquals("[548786440]", y.toString());
		y.dequeue();
    }
    @Test
    public void test8855() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-361085570);
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-1599100909);
		variable.isFull();
    }
    @Test
    public void test8856() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		variable.enqueue(-214429914);
		variable.enqueue(-1848265768);
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test8857() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.dequeue();
		z.enqueue(1284458436);
		z.isEmpty();
		assertFalse(z.isEmpty());
		z.isFull();
		assertEquals(1284458436, z.dequeue());
		z.isEmpty();
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(102032432);
    }
    @Test
    public void test8858() {
		Queue y = new Queue();
		y.enqueue(1300843395);
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test8859() {
		Queue x = new Queue();
		x.enqueue(402901121);
    }
    @Test
    public void test8860() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(1034059407);
    }
    @Test
    public void test8861() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(355009292);
		assertEquals("[355009292]", variable.toString());
		assertEquals(355009292, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test8862() {
		Queue y = new Queue();
		y.enqueue(246912566);
		y.dequeue();
		y.toString();
		y.enqueue(-228018751);
    }
    @Test
    public void test8863() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test8864() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(-329178755);
		assertFalse(z.isFull());
		z.enqueue(937271814);
		z.dequeue();
    }
    @Test
    public void test8865() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(1310627115);
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		variable.enqueue(-1023538826);
		assertEquals(1310627115, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test8866() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.toString();
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test8867() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
    }
    @Test
    public void test8868() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1892029809);
		Var.isFull();
		Var.enqueue(666115710);
		Var.enqueue(1715826491);
		assertEquals("[1892029809, 666115710, 1715826491]", Var.toString());
		assertEquals(1892029809, Var.dequeue());
		Var.toString();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-1343799389);
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test8869() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(539995945);
		Var.isFull();
		Var.toString();
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test8870() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test8871() {
		Queue y = new Queue();
		y.enqueue(-200155509);
		y.isEmpty();
		y.enqueue(1263393912);
    }
    @Test
    public void test8872() {
		Queue y = new Queue();
		y.enqueue(1150345525);
		y.toString();
		assertEquals(1150345525, y.dequeue());
		y.dequeue();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test8873() {
		Queue y = new Queue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test8874() {
		Queue y = new Queue();
		y.enqueue(1716731352);
		y.dequeue();
		y.toString();
		y.enqueue(-1006582915);
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.enqueue(-498817029);
    }
    @Test
    public void test8875() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(-1986004408);
		y.enqueue(627252126);
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test8876() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(2021207757);
		z.enqueue(34249397);
		z.toString();
		assertEquals(2021207757, z.dequeue());
		z.enqueue(829042824);
		z.isEmpty();
		z.dequeue();
		assertEquals("[829042824]", z.toString());
		z.enqueue(-1009744741);
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test8877() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test8878() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(340787062);
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test8879() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.enqueue(-319402314);
    }
    @Test
    public void test8880() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(774809009);
		z.enqueue(1131917198);
		z.enqueue(1488486787);
		z.enqueue(-1530646163);
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(934766900);
		assertFalse(z.isEmpty());
		assertFalse(z.isEmpty());
		z.enqueue(117733147);
    }
    @Test
    public void test8881() {
		Queue y = new Queue();
		y.enqueue(99754813);
		y.enqueue(1140928628);
    }
    @Test
    public void test8882() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(1211605336);
		assertFalse(x.isEmpty());
		x.enqueue(-262494229);
		x.isFull();
		x.enqueue(1935246228);
		x.enqueue(1364698857);
    }
    @Test
    public void test8883() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test8884() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-2129475050);
		variable.toString();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-39287300);
		variable.dequeue();
    }
    @Test
    public void test8885() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.toString();
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(825697164);
		z.enqueue(-1490639809);
		z.enqueue(1126151077);
		z.toString();
		z.isEmpty();
		z.enqueue(-714508877);
    }
    @Test
    public void test8886() {
		Queue variable = new Queue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test8887() {
		Queue Var = new Queue();
		Var.enqueue(-773580440);
		Var.isEmpty();
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test8888() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		x.toString();
		x.enqueue(-1495638922);
    }
    @Test
    public void test8889() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(760068527);
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(2104074585);
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(276417378);
		Var.toString();
    }
    @Test
    public void test8890() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		assertFalse(y.isFull());
		y.enqueue(200161571);
		y.enqueue(923153057);
    }
    @Test
    public void test8891() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-181012082);
    }
    @Test
    public void test8892() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test8893() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(249090571);
		variable.dequeue();
		variable.enqueue(-2044382001);
		variable.dequeue();
    }
    @Test
    public void test8894() {
		Queue z = new Queue();
		z.enqueue(537760042);
		z.toString();
		z.enqueue(1864107523);
		z.toString();
		z.isEmpty();
		z.toString();
		z.toString();
		z.enqueue(1296399323);
    }
    @Test
    public void test8895() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test8896() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		assertFalse(z.isFull());
		z.toString();
		z.enqueue(1427217564);
		z.enqueue(978829685);
		z.isFull();
		z.isEmpty();
		z.dequeue();
		z.enqueue(1593072726);
		z.dequeue();
    }
    @Test
    public void test8897() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.toString();
		y.isEmpty();
		y.enqueue(272479812);
		y.enqueue(756600499);
		assertEquals("[272479812, 756600499]", y.toString());
		y.isEmpty();
		assertFalse(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test8898() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
		assertEquals("[]", y.toString());
		y.enqueue(173355617);
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-410258704);
    }
    @Test
    public void test8899() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.enqueue(798691376);
		assertEquals(798691376, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(-570953040);
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test8900() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test8901() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isFull();
		variable.toString();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1047252585);
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		assertEquals("[1047252585]", variable.toString());
		assertEquals("[1047252585]", variable.toString());
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.enqueue(-2111454630);
    }
    @Test
    public void test8902() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1235777129);
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(487378121);
    }
    @Test
    public void test8903() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(1828908289);
		y.isEmpty();
    }
    @Test
    public void test8904() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test8905() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.enqueue(-38042524);
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test8906() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(703118091);
		variable.enqueue(-1391806712);
		variable.enqueue(-397506823);
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test8907() {
		Queue x = new Queue();
		x.isFull();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
		x.isFull();
		x.enqueue(339189968);
		x.enqueue(1470171856);
		x.enqueue(-1761953513);
		x.enqueue(785437166);
    }
    @Test
    public void test8908() {
		Queue y = new Queue();
		y.enqueue(-32536910);
		y.isEmpty();
		y.dequeue();
		y.enqueue(-1552087070);
		y.toString();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.enqueue(524751022);
		y.isEmpty();
		assertEquals(524751022, y.dequeue());
		y.isFull();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.enqueue(-1411936318);
		y.enqueue(2115381811);
    }
    @Test
    public void test8909() {
		Queue variable = new Queue();
		variable.enqueue(-2030902763);
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.toString();
    }
    @Test
    public void test8910() {
		Queue z = new Queue();
		z.enqueue(-50359045);
		z.isEmpty();
    }
    @Test
    public void test8911() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		y.enqueue(-133059803);
		y.toString();
    }
    @Test
    public void test8912() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.enqueue(357877992);
		Var.dequeue();
		Var.enqueue(981186069);
		Var.enqueue(1169848784);
		Var.isEmpty();
		Var.enqueue(-778768300);
		Var.dequeue();
    }
    @Test
    public void test8913() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.enqueue(2031841151);
		assertEquals(2031841151, y.dequeue());
		y.isEmpty();
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.enqueue(455355261);
    }
    @Test
    public void test8914() {
		Queue variable = new Queue();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.enqueue(-16815283);
    }
    @Test
    public void test8915() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(1209497336);
    }
    @Test
    public void test8916() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.toString();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(1483985685);
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(1589792171);
		Var.isEmpty();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test8917() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test8918() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(-952131019);
		y.enqueue(887137653);
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.toString();
		assertTrue(y.isEmpty());
		y.toString();
		y.enqueue(1737602347);
		assertFalse(y.isEmpty());
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test8919() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.enqueue(776986263);
		x.isFull();
		x.toString();
		x.enqueue(-1355056578);
		x.isEmpty();
    }
    @Test
    public void test8920() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-1717594611);
		variable.enqueue(1075281360);
    }
    @Test
    public void test8921() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.enqueue(907926994);
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(-950417612);
		assertFalse(Var.isFull());
		Var.enqueue(-1269568910);
    }
    @Test
    public void test8922() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test8923() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(-521731700);
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test8924() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test8925() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-614588681);
		variable.toString();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.enqueue(-207445918);
    }
    @Test
    public void test8926() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.toString();
		z.isFull();
		z.toString();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test8927() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-814456536);
		variable.isFull();
		variable.enqueue(2100298250);
		assertEquals(2100298250, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test8928() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.isFull();
		assertEquals("[]", z.toString());
		z.toString();
		z.toString();
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test8929() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test8930() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
    }
    @Test
    public void test8931() {
		Queue variable = new Queue();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1645468154);
		variable.enqueue(2050679325);
		variable.enqueue(-417995566);
    }
    @Test
    public void test8932() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1229583523);
		Var.isEmpty();
		assertEquals("[1229583523]", Var.toString());
		Var.dequeue();
		Var.enqueue(-169105991);
		Var.dequeue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-2144092636);
    }
    @Test
    public void test8933() {
		Queue Var = new Queue();
		Var.enqueue(-708764284);
    }
    @Test
    public void test8934() {
		Queue z = new Queue();
		z.enqueue(1586298062);
    }
    @Test
    public void test8935() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(2047062944);
		assertEquals("[2047062944]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test8936() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1866874131);
		variable.enqueue(1010087416);
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(1483340402);
		variable.enqueue(614249822);
    }
    @Test
    public void test8937() {
		Queue x = new Queue();
		x.enqueue(730104052);
		x.enqueue(296146811);
		x.isFull();
		x.toString();
		x.enqueue(1690926501);
		x.toString();
		x.toString();
    }
    @Test
    public void test8938() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.toString();
		y.toString();
    }
    @Test
    public void test8939() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test8940() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1560842934);
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test8941() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(-176156599);
    }
    @Test
    public void test8942() {
		Queue y = new Queue();
		y.enqueue(-818094850);
		y.enqueue(-671477458);
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.enqueue(1531834237);
    }
    @Test
    public void test8943() {
		Queue variable = new Queue();
		variable.enqueue(283483983);
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.isEmpty();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(300355789);
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test8944() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1639604627);
    }
    @Test
    public void test8945() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isFull();
		Var.enqueue(1329715628);
		Var.enqueue(202997873);
		Var.enqueue(844609709);
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.toString();
		assertEquals("[1329715628, 202997873, 844609709]", Var.toString());
		Var.toString();
    }
    @Test
    public void test8946() {
		Queue y = new Queue();
		y.enqueue(-518622865);
		y.toString();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test8947() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-1518429378);
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test8948() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test8949() {
		Queue y = new Queue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test8950() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.isFull();
		x.dequeue();
		x.toString();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.enqueue(76568043);
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(-583387747);
    }
    @Test
    public void test8951() {
		Queue z = new Queue();
		z.enqueue(-1307770087);
		z.enqueue(1906675274);
		z.isFull();
		z.enqueue(-1487524548);
		z.isEmpty();
		z.enqueue(-877857649);
		z.toString();
    }
    @Test
    public void test8952() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1713941522);
		y.isEmpty();
		y.enqueue(-643040348);
		y.isFull();
		y.enqueue(1096863056);
		y.isEmpty();
		y.isFull();
		y.dequeue();
		y.isEmpty();
		y.enqueue(-708226116);
    }
    @Test
    public void test8953() {
		Queue y = new Queue();
		y.enqueue(-58759928);
		y.isEmpty();
		assertFalse(y.isFull());
		y.dequeue();
		y.toString();
		y.isEmpty();
		y.enqueue(811042173);
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test8954() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(710952828);
		Var.isEmpty();
		Var.enqueue(478950245);
		assertFalse(Var.isFull());
		Var.dequeue();
		assertEquals(478950245, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test8955() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(960939274);
		Var.isEmpty();
		Var.enqueue(137768820);
		Var.isEmpty();
    }
    @Test
    public void test8956() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isFull();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test8957() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isEmpty();
		y.enqueue(-1672518932);
    }
    @Test
    public void test8958() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.isEmpty();
		y.toString();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.toString();
    }
    @Test
    public void test8959() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.enqueue(-1445202489);
		y.toString();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.dequeue();
		y.enqueue(-1629533389);
    }
    @Test
    public void test8960() {
		Queue y = new Queue();
		y.enqueue(-1755045702);
		y.toString();
		y.dequeue();
		y.enqueue(-968836951);
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test8961() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-2044415130);
		y.isFull();
		assertTrue(y.isEmpty());
		y.enqueue(1944041645);
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.enqueue(-1918033806);
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test8962() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test8963() {
		Queue Var = new Queue();
		Var.enqueue(-1126332716);
		Var.isFull();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test8964() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isFull();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(2144627537);
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-497801993);
		y.isEmpty();
    }
    @Test
    public void test8965() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		y.enqueue(2118497961);
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1296203594);
		y.toString();
		y.toString();
    }
    @Test
    public void test8966() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.toString();
		y.enqueue(-1631184365);
		assertEquals("[]", y.toString());
		y.enqueue(432656998);
		y.isEmpty();
		y.enqueue(-19961611);
		y.enqueue(1726021844);
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test8967() {
		Queue x = new Queue();
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(295556135);
		x.isEmpty();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test8968() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.enqueue(-1925340941);
		x.isFull();
		x.isFull();
    }
    @Test
    public void test8969() {
		Queue y = new Queue();
		y.enqueue(1144393832);
		y.isFull();
		y.enqueue(-77674896);
		y.isFull();
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.enqueue(974036354);
		assertEquals("[974036354]", y.toString());
		assertFalse(y.isFull());
		y.enqueue(-304548535);
		y.enqueue(-2145866549);
    }
    @Test
    public void test8970() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(-1498768106);
		assertEquals(-1, variable.dequeue());
		variable.enqueue(2092800496);
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(1485914621);
    }
    @Test
    public void test8971() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(-1559872398);
		assertTrue(Var.isEmpty());
		Var.enqueue(-925190024);
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.enqueue(1208728077);
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test8972() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isFull();
		x.isFull();
		x.isEmpty();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.enqueue(368722509);
    }
    @Test
    public void test8973() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(728866295);
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test8974() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test8975() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.toString();
		x.isFull();
    }
    @Test
    public void test8976() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test8977() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		z.enqueue(-1855900111);
		z.dequeue();
    }
    @Test
    public void test8978() {
		Queue z = new Queue();
		z.enqueue(-1705609301);
		z.isEmpty();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isFull();
		z.isFull();
		z.toString();
    }
    @Test
    public void test8979() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test8980() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(633575347);
		variable.dequeue();
    }
    @Test
    public void test8981() {
		Queue x = new Queue();
		x.toString();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.toString();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test8982() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(1950063481);
		Var.isEmpty();
		assertEquals(1950063481, Var.dequeue());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(-468265879);
		Var.isEmpty();
		Var.enqueue(-1897093679);
		Var.enqueue(563401658);
		assertEquals(563401658, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test8983() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.enqueue(780997696);
		variable.isEmpty();
		variable.enqueue(-1101477692);
    }
    @Test
    public void test8984() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-453556129);
		x.isEmpty();
		x.dequeue();
		x.enqueue(1098139610);
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test8985() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test8986() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(71830851);
    }
    @Test
    public void test8987() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-1135506224);
		Var.dequeue();
		Var.isFull();
		Var.enqueue(94054390);
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test8988() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test8989() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(1882512421);
		y.enqueue(-519739905);
		y.toString();
		assertFalse(y.isEmpty());
		y.enqueue(1413845949);
    }
    @Test
    public void test8990() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.isFull();
		x.toString();
		x.enqueue(1517171340);
		x.enqueue(-1118983777);
		x.isEmpty();
    }
    @Test
    public void test8991() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test8992() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-1558569433);
		Var.toString();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test8993() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isEmpty();
		y.enqueue(-328433240);
		assertFalse(y.isFull());
		y.isEmpty();
		y.isFull();
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test8994() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(660800166);
		y.enqueue(555182219);
		y.dequeue();
		assertEquals("[555182219]", y.toString());
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		y.enqueue(342728834);
    }
    @Test
    public void test8995() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.enqueue(-955816648);
		y.toString();
		y.dequeue();
		y.enqueue(1361362221);
		y.dequeue();
		y.dequeue();
		y.enqueue(-613236637);
    }
    @Test
    public void test8996() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isFull();
		variable.enqueue(302179978);
		variable.toString();
		variable.toString();
    }
    @Test
    public void test8997() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.isFull();
		assertTrue(y.isEmpty());
		y.toString();
		y.enqueue(-521266756);
		y.toString();
		y.enqueue(-534190482);
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test8998() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(-534333361);
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(2050406174);
		variable.isFull();
    }
    @Test
    public void test8999() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test9000() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(315489855);
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-825336575);
		variable.enqueue(1794610822);
		assertEquals(315489855, variable.dequeue());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test9001() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.toString();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isEmpty();
		z.toString();
		z.enqueue(-541845800);
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.toString();
    }
    @Test
    public void test9002() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(493207772);
		Var.isEmpty();
    }
    @Test
    public void test9003() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test9004() {
		Queue y = new Queue();
		y.enqueue(-1211034864);
		y.enqueue(592233339);
    }
    @Test
    public void test9005() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(1141338879);
		Var.enqueue(1871651451);
		assertFalse(Var.isEmpty());
		Var.isEmpty();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test9006() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test9007() {
		Queue x = new Queue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(-98971002);
    }
    @Test
    public void test9008() {
		Queue x = new Queue();
		x.enqueue(-724627720);
		x.dequeue();
		x.toString();
		x.enqueue(-1391586793);
		x.isFull();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(277088920);
    }
    @Test
    public void test9009() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.enqueue(-46508487);
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(2115460757);
		x.isEmpty();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test9010() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test9011() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test9012() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test9013() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test9014() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test9015() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(780917067);
		Var.enqueue(-736584717);
		Var.toString();
		Var.enqueue(1446147205);
    }
    @Test
    public void test9016() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.toString();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
    }
    @Test
    public void test9017() {
		Queue z = new Queue();
		z.enqueue(-2083598790);
		z.dequeue();
		assertFalse(z.isFull());
		z.isFull();
		z.toString();
		z.isFull();
		z.isFull();
		z.enqueue(-1751216901);
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test9018() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(2130665671);
		variable.enqueue(-1472550641);
		variable.toString();
		variable.isFull();
		variable.enqueue(1974590332);
		variable.enqueue(870763477);
		variable.enqueue(181707127);
		assertFalse(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test9019() {
		Queue z = new Queue();
		z.enqueue(-1809211081);
		assertTrue(z.isEmpty());
		z.dequeue();
		z.enqueue(1766712521);
		z.dequeue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.enqueue(-1463090666);
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test9020() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(405297747);
    }
    @Test
    public void test9021() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.toString();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test9022() {
		Queue x = new Queue();
		x.enqueue(-85106540);
		x.toString();
		x.toString();
		x.toString();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test9023() {
		Queue y = new Queue();
		y.enqueue(-1841404928);
		y.isFull();
		y.isFull();
		y.dequeue();
		y.enqueue(1123875576);
		assertFalse(y.isFull());
		y.enqueue(-1056111015);
		assertFalse(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test9024() {
		Queue x = new Queue();
		x.enqueue(370191610);
		x.dequeue();
		x.enqueue(-218822828);
		x.enqueue(-732741251);
		assertEquals("[]", x.toString());
		x.dequeue();
    }
    @Test
    public void test9025() {
		Queue y = new Queue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isEmpty();
		y.enqueue(582957824);
		y.toString();
		y.enqueue(-1702180870);
		y.isEmpty();
		y.toString();
		y.isFull();
    }
    @Test
    public void test9026() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.enqueue(-1342399369);
		y.toString();
    }
    @Test
    public void test9027() {
		Queue y = new Queue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(-698289504);
		y.dequeue();
		y.toString();
		y.toString();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test9028() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.toString();
		z.isEmpty();
		z.enqueue(-949307422);
		z.dequeue();
		z.enqueue(18346783);
    }
    @Test
    public void test9029() {
		Queue y = new Queue();
		y.enqueue(-458640380);
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.enqueue(-2004885120);
    }
    @Test
    public void test9030() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.isFull();
		z.enqueue(391263347);
    }
    @Test
    public void test9031() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(302443515);
		assertEquals(302443515, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1950916582);
		Var.enqueue(-1368128419);
		assertEquals("[1950916582]", Var.toString());
		assertEquals("[1950916582]", Var.toString());
		assertFalse(Var.isFull());
		Var.toString();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test9032() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertFalse(y.isFull());
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test9033() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test9034() {
		Queue z = new Queue();
		z.enqueue(621879499);
		z.enqueue(-2003122281);
		z.dequeue();
		z.dequeue();
		z.isFull();
		z.isEmpty();
		z.toString();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(1428231106);
		assertEquals("[1428231106]", z.toString());
		assertFalse(z.isEmpty());
		z.toString();
    }
    @Test
    public void test9035() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.toString();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.toString();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test9036() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test9037() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isFull();
		variable.enqueue(110363295);
		variable.isEmpty();
		variable.enqueue(1965800493);
		variable.toString();
    }
    @Test
    public void test9038() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1970608611);
		Var.enqueue(537336965);
		assertFalse(Var.isFull());
		Var.enqueue(232415291);
		Var.enqueue(1562071154);
		assertEquals(537336965, Var.dequeue());
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test9039() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(109111539);
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(1797499560);
		variable.enqueue(370415504);
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test9040() {
		Queue variable = new Queue();
		variable.enqueue(-1905870461);
		variable.enqueue(1752656894);
		variable.dequeue();
		variable.toString();
		variable.enqueue(1043225634);
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(-2052940787);
    }
    @Test
    public void test9041() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.enqueue(-205569865);
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test9042() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		variable.enqueue(1108631504);
		variable.enqueue(839352141);
		variable.isEmpty();
    }
    @Test
    public void test9043() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(1109623435);
    }
    @Test
    public void test9044() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test9045() {
		Queue variable = new Queue();
		variable.enqueue(1223720059);
		variable.isFull();
		variable.isEmpty();
		assertEquals("[1223720059]", variable.toString());
		variable.toString();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
		assertEquals(1223720059, variable.dequeue());
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-1294798450);
		variable.dequeue();
    }
    @Test
    public void test9046() {
		Queue y = new Queue();
		y.enqueue(1408399857);
		y.dequeue();
		y.isEmpty();
		y.toString();
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test9047() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test9048() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(-797511789);
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(755008391);
		Var.enqueue(-1378450957);
		Var.isFull();
    }
    @Test
    public void test9049() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(402010455);
		assertEquals(402010455, z.dequeue());
		z.isFull();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test9050() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(525500511);
    }
    @Test
    public void test9051() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(735961439);
		z.isFull();
		assertFalse(z.isEmpty());
		assertFalse(z.isEmpty());
		z.enqueue(399886100);
    }
    @Test
    public void test9052() {
		Queue y = new Queue();
		y.enqueue(-833794063);
		y.enqueue(1525829993);
		y.isFull();
		y.toString();
		y.toString();
		y.toString();
		y.isFull();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test9053() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test9054() {
		Queue z = new Queue();
		z.enqueue(-110914208);
		assertEquals("[]", z.toString());
		z.isFull();
		z.isFull();
		z.enqueue(-678499962);
		z.isFull();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test9055() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.toString();
		y.isFull();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.toString();
		y.toString();
		y.isFull();
    }
    @Test
    public void test9056() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test9057() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(-2139294986);
    }
    @Test
    public void test9058() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-1952443942);
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		y.enqueue(-846998704);
		y.toString();
		y.enqueue(1815050492);
    }
    @Test
    public void test9059() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(-40207433);
    }
    @Test
    public void test9060() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-1359267942);
		z.isEmpty();
		z.enqueue(1145619896);
		z.enqueue(-1433692676);
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test9061() {
		Queue z = new Queue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(-1737956340);
		z.isEmpty();
		z.enqueue(-612651776);
		z.toString();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.toString();
		z.isFull();
    }
    @Test
    public void test9062() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test9063() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test9064() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(702692653);
    }
    @Test
    public void test9065() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(327312008);
		Var.isFull();
		assertEquals(327312008, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test9066() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test9067() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
		assertEquals("[]", y.toString());
		y.isFull();
		y.enqueue(-1138119215);
		y.isEmpty();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test9068() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.toString();
		y.toString();
		assertEquals("[]", y.toString());
		y.isFull();
		y.enqueue(888885988);
    }
    @Test
    public void test9069() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.enqueue(-691408062);
		y.isEmpty();
		y.enqueue(2084457247);
		y.enqueue(-47064466);
		assertEquals("[2084457247]", y.toString());
		y.dequeue();
		y.enqueue(268692755);
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test9070() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test9071() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test9072() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(-1810491439);
		y.isEmpty();
		y.toString();
		y.toString();
		y.isEmpty();
		y.enqueue(1911117019);
		assertFalse(y.isFull());
		y.isEmpty();
		y.enqueue(1176536532);
    }
    @Test
    public void test9073() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test9074() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(26882207);
		variable.enqueue(90560366);
		variable.isFull();
		variable.enqueue(1709332631);
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		assertEquals(1709332631, variable.dequeue());
		variable.dequeue();
		variable.enqueue(-147644278);
    }
    @Test
    public void test9075() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.enqueue(-902258870);
		assertEquals("[]", x.toString());
		x.enqueue(725052263);
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(-1140651284);
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test9076() {
		Queue Var = new Queue();
		Var.enqueue(469581943);
		Var.enqueue(838477056);
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test9077() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1644167965);
		Var.dequeue();
		Var.enqueue(-1519400828);
		assertFalse(Var.isFull());
		Var.enqueue(-460901834);
    }
    @Test
    public void test9078() {
		Queue y = new Queue();
		y.dequeue();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test9079() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.toString();
    }
    @Test
    public void test9080() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(244119493);
		Var.toString();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test9081() {
		Queue y = new Queue();
		y.enqueue(1873575029);
		assertFalse(y.isFull());
		y.isEmpty();
		y.enqueue(1915393362);
		y.isFull();
		y.dequeue();
		y.enqueue(-239167694);
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test9082() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-1037219534);
		assertFalse(y.isFull());
		y.enqueue(-1243864084);
		y.enqueue(440904908);
		y.enqueue(-91021879);
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.dequeue();
		y.dequeue();
		y.toString();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test9083() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.isFull();
		z.isEmpty();
		z.isFull();
		z.isFull();
		z.isFull();
		z.enqueue(-973753602);
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test9084() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-1087184406);
		z.isEmpty();
		z.isFull();
		z.dequeue();
		z.dequeue();
		z.toString();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test9085() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(-1505020701);
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1525993313);
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test9086() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.toString();
		x.toString();
		assertEquals("[]", x.toString());
		x.toString();
		x.toString();
		x.isFull();
    }
    @Test
    public void test9087() {
		Queue Var = new Queue();
		Var.enqueue(481159043);
		assertEquals(481159043, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1523696208);
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test9088() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test9089() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.enqueue(1088299505);
		variable.enqueue(146770368);
		variable.isEmpty();
		variable.enqueue(-2123363929);
    }
    @Test
    public void test9090() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
    }
    @Test
    public void test9091() {
		Queue Var = new Queue();
		Var.enqueue(541933420);
		assertEquals(541933420, Var.dequeue());
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(-1607786385);
		Var.enqueue(-1442192473);
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(1998133333);
		Var.enqueue(-581526295);
		Var.isEmpty();
		assertEquals("[1998133333]", Var.toString());
		Var.toString();
    }
    @Test
    public void test9092() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test9093() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test9094() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test9095() {
		Queue z = new Queue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isFull();
		z.toString();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.toString();
		z.enqueue(1370120906);
    }
    @Test
    public void test9096() {
		Queue variable = new Queue();
		variable.enqueue(2142058230);
    }
    @Test
    public void test9097() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1126641106);
    }
    @Test
    public void test9098() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.enqueue(-910209901);
		x.isFull();
		x.toString();
		x.isFull();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test9099() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-261932348);
    }
    @Test
    public void test9100() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.dequeue();
		y.dequeue();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test9101() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(2038185266);
		variable.toString();
		variable.toString();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test9102() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1414341249);
		variable.isFull();
		variable.isFull();
		variable.enqueue(412263386);
		variable.enqueue(1739799779);
    }
    @Test
    public void test9103() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test9104() {
		Queue variable = new Queue();
		variable.enqueue(-387929524);
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.enqueue(-1183220982);
		variable.isEmpty();
		variable.enqueue(2046203214);
		variable.enqueue(1541598644);
		variable.toString();
		variable.enqueue(1108492483);
		variable.enqueue(-2001605802);
    }
    @Test
    public void test9105() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.enqueue(-140487967);
    }
    @Test
    public void test9106() {
		Queue Var = new Queue();
		Var.toString();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(1374622370);
		Var.isFull();
		Var.enqueue(-830251841);
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-1961441978);
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test9107() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-54889426);
		y.isFull();
		y.isFull();
    }
    @Test
    public void test9108() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(-1844975098);
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.isFull();
		x.enqueue(-1752530153);
    }
    @Test
    public void test9109() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(-255311793);
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test9110() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
    }
    @Test
    public void test9111() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(-1175189530);
    }
    @Test
    public void test9112() {
		Queue x = new Queue();
		x.enqueue(905863263);
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.enqueue(827970152);
		x.enqueue(1651899142);
    }
    @Test
    public void test9113() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(-613389357);
		Var.enqueue(-412601114);
		Var.dequeue();
    }
    @Test
    public void test9114() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test9115() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test9116() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.dequeue();
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(821004388);
    }
    @Test
    public void test9117() {
		Queue Var = new Queue();
		Var.enqueue(-669959014);
		Var.enqueue(1625893235);
		Var.isEmpty();
		Var.enqueue(331809873);
    }
    @Test
    public void test9118() {
		Queue Var = new Queue();
		Var.enqueue(1519623414);
    }
    @Test
    public void test9119() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test9120() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(671266206);
		assertEquals(671266206, x.dequeue());
		x.enqueue(749990643);
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test9121() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.dequeue();
		y.enqueue(-131307861);
    }
    @Test
    public void test9122() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(2116620229);
		x.toString();
		x.enqueue(129932781);
		x.dequeue();
		x.toString();
    }
    @Test
    public void test9123() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test9124() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.isFull();
		y.dequeue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test9125() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.isFull();
		x.enqueue(-1370187928);
		x.isFull();
		x.enqueue(-1541469736);
    }
    @Test
    public void test9126() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test9127() {
		Queue variable = new Queue();
		variable.enqueue(-880367682);
		variable.toString();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test9128() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		assertTrue(z.isEmpty());
		z.enqueue(-121080968);
		assertEquals("[]", z.toString());
		z.toString();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.toString();
		z.enqueue(760029416);
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test9129() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isEmpty();
		y.toString();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.enqueue(1049558863);
		y.toString();
    }
    @Test
    public void test9130() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test9131() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isFull();
		variable.enqueue(1750069176);
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test9132() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-456350704);
		x.toString();
		x.isEmpty();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.enqueue(8893410);
		x.enqueue(-1170629716);
    }
    @Test
    public void test9133() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(2136407012);
		assertEquals(2136407012, z.dequeue());
		z.toString();
		z.enqueue(-1699283938);
		z.isFull();
		assertEquals("[]", z.toString());
		z.toString();
		z.enqueue(-1759584751);
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(381141132);
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test9134() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.enqueue(1285654502);
		variable.isEmpty();
		assertEquals("[1285654502]", variable.toString());
		assertEquals("[1285654502]", variable.toString());
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test9135() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test9136() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.toString();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test9137() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.enqueue(1711923166);
		z.toString();
		z.enqueue(2062625439);
		z.enqueue(-1125815931);
		z.enqueue(-886661405);
    }
    @Test
    public void test9138() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test9139() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(306506894);
		z.isEmpty();
		assertEquals("[306506894]", z.toString());
		z.isFull();
		assertEquals(306506894, z.dequeue());
		z.dequeue();
		z.enqueue(1362357371);
    }
    @Test
    public void test9140() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.enqueue(-1868824876);
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(2081673890);
		z.dequeue();
		z.dequeue();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test9141() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		variable.enqueue(-1688715430);
		variable.isFull();
		variable.enqueue(-1128663968);
    }
    @Test
    public void test9142() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-732522007);
		z.toString();
		z.enqueue(-1757667498);
		z.enqueue(608795962);
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test9143() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.enqueue(649463593);
		y.toString();
		assertEquals("[649463593]", y.toString());
		y.enqueue(1096281772);
		y.dequeue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
    }
    @Test
    public void test9144() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isEmpty();
		z.enqueue(1464936210);
		z.isEmpty();
    }
    @Test
    public void test9145() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.toString();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test9146() {
		Queue x = new Queue();
		x.enqueue(2085696199);
		x.toString();
		x.enqueue(-512211192);
		x.isFull();
		x.enqueue(1062736392);
    }
    @Test
    public void test9147() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test9148() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
		x.toString();
		x.enqueue(1008603379);
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test9149() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.enqueue(-1779568482);
		assertEquals(-1, x.dequeue());
		x.toString();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test9150() {
		Queue variable = new Queue();
		variable.enqueue(2028308357);
		variable.dequeue();
		variable.toString();
		variable.toString();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-659356176);
		variable.enqueue(-809402394);
		variable.enqueue(1344071024);
    }
    @Test
    public void test9151() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.dequeue();
		y.dequeue();
		y.toString();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test9152() {
		Queue variable = new Queue();
		variable.enqueue(1943817348);
		variable.toString();
		variable.enqueue(-1818385454);
		assertFalse(variable.isFull());
		variable.enqueue(374297760);
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test9153() {
		Queue y = new Queue();
		y.enqueue(-1011907848);
		y.isFull();
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.toString();
		y.isEmpty();
		y.enqueue(-335992741);
		assertFalse(y.isFull());
		y.enqueue(2102430414);
		y.isFull();
    }
    @Test
    public void test9154() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.dequeue();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(1924679329);
    }
    @Test
    public void test9155() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test9156() {
		Queue variable = new Queue();
		variable.enqueue(-534576499);
		variable.toString();
		variable.enqueue(885945340);
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test9157() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.enqueue(906657838);
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test9158() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.isFull();
		z.enqueue(-667828533);
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test9159() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test9160() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(376242723);
		z.isEmpty();
		z.enqueue(-216406594);
		assertFalse(z.isEmpty());
		assertEquals(376242723, z.dequeue());
		z.enqueue(6849868);
		z.enqueue(-1688265487);
    }
    @Test
    public void test9161() {
		Queue z = new Queue();
		z.enqueue(-1752516584);
		assertEquals("[]", z.toString());
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(-2008614890);
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(115395305);
		z.enqueue(257006695);
    }
    @Test
    public void test9162() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(1892336026);
		x.isEmpty();
		assertFalse(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test9163() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test9164() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.enqueue(-1118887206);
		assertEquals("[]", Var.toString());
		Var.enqueue(-1996203491);
		assertFalse(Var.isFull());
		Var.enqueue(1102949635);
		Var.toString();
		Var.toString();
		Var.toString();
		Var.toString();
		assertFalse(Var.isEmpty());
		assertEquals("[1102949635]", Var.toString());
		Var.isEmpty();
		assertEquals(1102949635, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-1601698949);
    }
    @Test
    public void test9165() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.enqueue(-637281405);
		Var.enqueue(1146246132);
		Var.toString();
		Var.enqueue(-766101651);
		Var.enqueue(-217004619);
    }
    @Test
    public void test9166() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(1162036992);
    }
    @Test
    public void test9167() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test9168() {
		Queue variable = new Queue();
		variable.enqueue(-1015352436);
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test9169() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.toString();
		y.isFull();
		y.enqueue(1801616061);
		assertEquals(1801616061, y.dequeue());
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test9170() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.enqueue(568992659);
		x.enqueue(1083959261);
		x.isEmpty();
		assertEquals(568992659, x.dequeue());
		x.isEmpty();
		x.enqueue(-539261663);
    }
    @Test
    public void test9171() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.toString();
		z.toString();
		z.enqueue(-1486299816);
		z.enqueue(57266701);
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		z.enqueue(-1393130409);
    }
    @Test
    public void test9172() {
		Queue z = new Queue();
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(-1264129717);
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test9173() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test9174() {
		Queue variable = new Queue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-248178335);
		variable.isFull();
		variable.toString();
		variable.enqueue(-891776632);
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(452131782);
    }
    @Test
    public void test9175() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.isFull();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isFull();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test9176() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.enqueue(1776292701);
		z.isEmpty();
		assertEquals("[1776292701]", z.toString());
		z.toString();
		z.enqueue(1077891946);
    }
    @Test
    public void test9177() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.toString();
		z.enqueue(-131834070);
		z.dequeue();
		z.enqueue(1340911502);
		assertFalse(z.isFull());
		z.dequeue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.enqueue(-1861893789);
		assertTrue(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test9178() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test9179() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test9180() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(1706207720);
    }
    @Test
    public void test9181() {
		Queue Var = new Queue();
		Var.enqueue(-84595824);
		Var.toString();
		Var.enqueue(1947003544);
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test9182() {
		Queue Var = new Queue();
		Var.enqueue(373182386);
		Var.isEmpty();
		Var.enqueue(-1023653060);
		assertFalse(Var.isEmpty());
		assertFalse(Var.isEmpty());
		Var.enqueue(492376335);
		assertFalse(Var.isFull());
		Var.isFull();
		assertEquals(373182386, Var.dequeue());
		assertEquals(492376335, Var.dequeue());
		Var.isEmpty();
		Var.enqueue(-1266028678);
		Var.enqueue(-1982883190);
    }
    @Test
    public void test9183() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test9184() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-511153110);
    }
    @Test
    public void test9185() {
		Queue variable = new Queue();
		variable.enqueue(-1745555737);
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test9186() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test9187() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test9188() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.enqueue(-786089089);
		x.enqueue(1634167558);
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.enqueue(-1116286416);
		x.isFull();
    }
    @Test
    public void test9189() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1582393052);
		variable.enqueue(1459363941);
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test9190() {
		Queue variable = new Queue();
		variable.enqueue(-1352229047);
		variable.dequeue();
		variable.enqueue(1744403682);
		variable.dequeue();
    }
    @Test
    public void test9191() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(1400040767);
		y.isEmpty();
		assertFalse(y.isEmpty());
		assertEquals(1400040767, y.dequeue());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test9192() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.enqueue(-578697010);
		y.isFull();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(-2040185864);
		y.enqueue(1993579909);
    }
    @Test
    public void test9193() {
		Queue z = new Queue();
		z.enqueue(-177345887);
		z.isFull();
		z.isFull();
		z.toString();
    }
    @Test
    public void test9194() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.toString();
		z.toString();
		z.toString();
		z.isFull();
		z.toString();
		z.isFull();
		z.isEmpty();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test9195() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test9196() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.toString();
		z.toString();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test9197() {
		Queue variable = new Queue();
		variable.enqueue(-2003085708);
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test9198() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.isFull();
		z.enqueue(-1823820205);
		z.enqueue(-1829416333);
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.isEmpty();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test9199() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(-1426788449);
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test9200() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test9201() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(1945711396);
		assertFalse(z.isFull());
		assertEquals(1945711396, z.dequeue());
		assertEquals("[]", z.toString());
		z.enqueue(599880227);
		z.isEmpty();
		z.isEmpty();
		z.toString();
		z.isFull();
		assertFalse(z.isEmpty());
		z.isEmpty();
		assertFalse(z.isEmpty());
		z.enqueue(-1121933407);
		z.dequeue();
    }
    @Test
    public void test9202() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test9203() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(841264187);
		z.toString();
		z.toString();
		z.dequeue();
		z.enqueue(-806077047);
    }
    @Test
    public void test9204() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(1043080346);
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test9205() {
		Queue z = new Queue();
		z.enqueue(1486321915);
		z.enqueue(-973988994);
		assertFalse(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test9206() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(-737527209);
		assertEquals(-1, x.dequeue());
		x.toString();
		x.dequeue();
		x.toString();
		x.isFull();
    }
    @Test
    public void test9207() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-2001970898);
		x.dequeue();
    }
    @Test
    public void test9208() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test9209() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(647618238);
		Var.isFull();
		Var.isFull();
		Var.enqueue(1202282210);
    }
    @Test
    public void test9210() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.enqueue(1239531205);
		Var.isFull();
		Var.enqueue(-69935744);
    }
    @Test
    public void test9211() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test9212() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isFull();
    }
    @Test
    public void test9213() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(-1968398482);
		x.enqueue(451748419);
		assertFalse(x.isFull());
		x.isEmpty();
		x.isFull();
		assertEquals(451748419, x.dequeue());
		x.enqueue(639421734);
		assertEquals(639421734, x.dequeue());
		x.toString();
    }
    @Test
    public void test9214() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
    }
    @Test
    public void test9215() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(732841291);
    }
    @Test
    public void test9216() {
		Queue x = new Queue();
		x.enqueue(1985416991);
		assertEquals(1985416991, x.dequeue());
		x.isFull();
		x.toString();
		x.dequeue();
		x.enqueue(642444069);
		x.toString();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test9217() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test9218() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.dequeue();
		Var.enqueue(2019903918);
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test9219() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isFull();
		y.enqueue(-325477082);
		y.enqueue(-1269768103);
    }
    @Test
    public void test9220() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.enqueue(-1732470055);
		Var.enqueue(570174944);
    }
    @Test
    public void test9221() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.isFull();
		y.enqueue(-1346506450);
		y.toString();
    }
    @Test
    public void test9222() {
		Queue x = new Queue();
		x.enqueue(1262956739);
		x.isEmpty();
		assertFalse(x.isFull());
		x.isEmpty();
		x.enqueue(872314749);
		assertFalse(x.isFull());
		x.enqueue(1730309307);
		assertEquals("[1262956739, 872314749, 1730309307]", x.toString());
		x.isFull();
		x.toString();
		x.isFull();
		x.enqueue(2077748667);
		x.toString();
    }
    @Test
    public void test9223() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(1095282035);
		assertFalse(y.isEmpty());
		y.dequeue();
		y.isFull();
		y.dequeue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.toString();
		y.enqueue(1097758828);
		assertEquals(1097758828, y.dequeue());
		y.dequeue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.dequeue();
    }
    @Test
    public void test9224() {
		Queue z = new Queue();
		z.enqueue(-1480640282);
		z.isEmpty();
		z.enqueue(851516595);
		z.dequeue();
		z.enqueue(-257655134);
		assertTrue(z.isEmpty());
		z.enqueue(2065823790);
		assertEquals("[2065823790]", z.toString());
		z.enqueue(-1756064936);
		assertEquals(2065823790, z.dequeue());
		z.enqueue(-1096858648);
		z.isFull();
		z.toString();
    }
    @Test
    public void test9225() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test9226() {
		Queue z = new Queue();
		z.enqueue(-743165036);
		assertFalse(z.isFull());
		z.isFull();
		z.isFull();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test9227() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test9228() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.enqueue(1817747811);
		x.isFull();
		assertFalse(x.isFull());
		assertEquals("[1817747811]", x.toString());
		x.isFull();
		x.isFull();
		assertFalse(x.isEmpty());
		assertEquals(1817747811, x.dequeue());
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test9229() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(2049189094);
		assertEquals(2049189094, variable.dequeue());
		variable.enqueue(-1014087010);
		variable.isFull();
    }
    @Test
    public void test9230() {
		Queue z = new Queue();
		z.enqueue(-1047330424);
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
    }
    @Test
    public void test9231() {
		Queue x = new Queue();
		x.enqueue(-806451992);
    }
    @Test
    public void test9232() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-511067453);
		assertEquals("[]", x.toString());
		x.toString();
		x.isEmpty();
		x.toString();
		x.isFull();
    }
    @Test
    public void test9233() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-44411817);
		variable.enqueue(1871761759);
		variable.isEmpty();
		variable.enqueue(-1569754950);
		variable.enqueue(613338507);
    }
    @Test
    public void test9234() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(1394320912);
		y.enqueue(835398816);
		y.dequeue();
    }
    @Test
    public void test9235() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test9236() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test9237() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test9238() {
		Queue z = new Queue();
		z.enqueue(-776177628);
		assertEquals("[]", z.toString());
		z.enqueue(-658801672);
		assertTrue(z.isEmpty());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test9239() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.enqueue(-1887192415);
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isFull();
		x.isFull();
		x.toString();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test9240() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(1802507941);
		y.isFull();
		assertFalse(y.isEmpty());
		y.dequeue();
		y.isEmpty();
		y.enqueue(1439844359);
		y.isFull();
    }
    @Test
    public void test9241() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.enqueue(-1545200624);
		z.isFull();
		z.isEmpty();
		z.enqueue(-1997599179);
		assertFalse(z.isFull());
		z.dequeue();
		assertFalse(z.isFull());
		z.dequeue();
		z.enqueue(-420948451);
    }
    @Test
    public void test9242() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.toString();
		Var.enqueue(-1272890680);
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1254615495);
		Var.enqueue(-2031206087);
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
    }
    @Test
    public void test9243() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.toString();
		x.isFull();
		x.enqueue(-1075410743);
		assertFalse(x.isFull());
		x.isFull();
    }
    @Test
    public void test9244() {
		Queue Var = new Queue();
		Var.enqueue(934638032);
    }
    @Test
    public void test9245() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(1694002921);
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.enqueue(-2122399858);
		Var.isEmpty();
    }
    @Test
    public void test9246() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(1339683889);
		variable.toString();
		variable.enqueue(266501701);
		variable.dequeue();
    }
    @Test
    public void test9247() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(1348975671);
		Var.enqueue(-694009260);
		assertEquals("[1348975671]", Var.toString());
		Var.toString();
    }
    @Test
    public void test9248() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.toString();
		x.isEmpty();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test9249() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-288310116);
		variable.dequeue();
		variable.enqueue(-858711171);
		variable.enqueue(2056291194);
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test9250() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test9251() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test9252() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-1876159715);
		variable.enqueue(827799236);
    }
    @Test
    public void test9253() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.enqueue(1707071788);
		assertEquals(1707071788, variable.dequeue());
		variable.enqueue(1717183821);
		variable.enqueue(-975306579);
    }
    @Test
    public void test9254() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.enqueue(-152620146);
		variable.enqueue(414508545);
		variable.toString();
		variable.enqueue(-1261480124);
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.enqueue(-1361577582);
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test9255() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(1814176003);
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(380843962);
		variable.isFull();
		assertFalse(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test9256() {
		Queue Var = new Queue();
		Var.enqueue(1276888475);
		Var.toString();
		assertEquals(1276888475, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test9257() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test9258() {
		Queue variable = new Queue();
		variable.enqueue(-1898744735);
		assertTrue(variable.isEmpty());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test9259() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isFull();
		assertTrue(x.isEmpty());
		x.toString();
		x.isFull();
		x.toString();
		x.toString();
		x.dequeue();
		x.toString();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test9260() {
		Queue x = new Queue();
		x.enqueue(-1845868543);
		x.toString();
		x.toString();
		x.enqueue(1827459188);
		x.isFull();
		assertEquals("[1827459188]", x.toString());
		x.isFull();
		x.isFull();
		x.toString();
    }
    @Test
    public void test9261() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.dequeue();
		y.isFull();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test9262() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1334332726);
		Var.dequeue();
		Var.enqueue(751166815);
		Var.enqueue(1190077780);
		Var.toString();
		Var.isFull();
		Var.enqueue(2061106125);
		Var.isFull();
    }
    @Test
    public void test9263() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test9264() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1577355695);
		Var.toString();
		Var.dequeue();
		Var.enqueue(1537207515);
		assertFalse(Var.isEmpty());
		assertFalse(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(107391679);
		Var.isFull();
		Var.enqueue(-1866858586);
		Var.isEmpty();
    }
    @Test
    public void test9265() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(510490477);
		variable.dequeue();
		variable.enqueue(-1373482837);
		assertEquals(-1, variable.dequeue());
		variable.toString();
    }
    @Test
    public void test9266() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isFull();
		x.enqueue(-1546661681);
		x.toString();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test9267() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(-1595418709);
		x.toString();
		x.toString();
		x.toString();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test9268() {
		Queue y = new Queue();
		y.enqueue(1075032855);
		assertEquals(1075032855, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.toString();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test9269() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.toString();
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.toString();
		assertTrue(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test9270() {
		Queue x = new Queue();
		x.enqueue(-686297720);
		x.toString();
		x.enqueue(-364076426);
    }
    @Test
    public void test9271() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.toString();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test9272() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-817192828);
		y.enqueue(114793591);
		assertFalse(y.isFull());
		y.isFull();
		y.toString();
		y.isEmpty();
		y.isFull();
		assertEquals("[114793591]", y.toString());
		y.isFull();
		assertEquals(114793591, y.dequeue());
		y.toString();
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test9273() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.enqueue(897828891);
		x.isEmpty();
		x.enqueue(1670588071);
		x.toString();
		assertEquals(897828891, x.dequeue());
		x.enqueue(723384614);
    }
    @Test
    public void test9274() {
		Queue z = new Queue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.toString();
		z.isFull();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test9275() {
		Queue variable = new Queue();
		variable.enqueue(191070440);
		variable.enqueue(352934081);
		variable.isEmpty();
    }
    @Test
    public void test9276() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(1488235131);
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(72942002);
		y.dequeue();
		y.enqueue(6768421);
		y.dequeue();
    }
    @Test
    public void test9277() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test9278() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test9279() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test9280() {
		Queue x = new Queue();
		x.enqueue(-183472142);
		x.toString();
		x.dequeue();
    }
    @Test
    public void test9281() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test9282() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test9283() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		z.enqueue(783647577);
		z.enqueue(-1950831492);
		z.isEmpty();
    }
    @Test
    public void test9284() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(-454598195);
		z.enqueue(-32350721);
		assertFalse(z.isFull());
		z.enqueue(-1928042299);
		assertFalse(z.isFull());
		z.toString();
		z.enqueue(-413490754);
		z.isEmpty();
		z.isFull();
		z.toString();
		z.isFull();
    }
    @Test
    public void test9285() {
		Queue Var = new Queue();
		Var.enqueue(-241884800);
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-378253379);
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test9286() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(1408610267);
		Var.toString();
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test9287() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.enqueue(-67919477);
		z.dequeue();
		z.isFull();
		z.isEmpty();
		z.enqueue(1099712402);
		z.isEmpty();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test9288() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(1905538258);
		variable.toString();
    }
    @Test
    public void test9289() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(193211356);
		assertEquals(193211356, z.dequeue());
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(681066824);
		z.enqueue(-1934649512);
		assertFalse(z.isEmpty());
		z.isFull();
		z.enqueue(-1595161063);
		assertFalse(z.isFull());
		z.enqueue(-1484164941);
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test9290() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.isFull();
		Var.enqueue(1981931631);
		assertFalse(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test9291() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.enqueue(1145248696);
		y.isEmpty();
		y.toString();
		y.isFull();
		assertFalse(y.isEmpty());
		y.isFull();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test9292() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isFull();
		x.toString();
		x.isEmpty();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test9293() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test9294() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.toString();
		x.isEmpty();
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.toString();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test9295() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(-48879901);
		z.isFull();
		z.toString();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.enqueue(71939301);
    }
    @Test
    public void test9296() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(-562439686);
		variable.dequeue();
		variable.enqueue(1319040826);
    }
    @Test
    public void test9297() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1665419649);
		variable.enqueue(-1397196485);
		variable.isFull();
		variable.toString();
		variable.toString();
		variable.enqueue(-700029304);
		variable.toString();
		variable.isFull();
		variable.enqueue(736342130);
    }
    @Test
    public void test9298() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-1158548912);
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test9299() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-1125750123);
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.enqueue(-62246437);
		variable.toString();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.enqueue(692103807);
    }
    @Test
    public void test9300() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test9301() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test9302() {
		Queue z = new Queue();
		z.enqueue(-261425967);
		z.enqueue(304798521);
		z.isFull();
		z.enqueue(-1162332215);
		z.isFull();
		assertFalse(z.isFull());
		z.enqueue(1802540996);
		z.isEmpty();
		assertEquals(304798521, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test9303() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isFull();
		x.enqueue(101389345);
		x.isEmpty();
		assertFalse(x.isEmpty());
		x.isEmpty();
		x.toString();
		x.toString();
		assertEquals(101389345, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test9304() {
		Queue variable = new Queue();
		variable.enqueue(-425815571);
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(-1303217934);
		variable.toString();
    }
    @Test
    public void test9305() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(431091121);
		x.enqueue(1846302254);
		x.enqueue(1315346208);
		x.isEmpty();
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(2066233019);
		x.toString();
		x.dequeue();
		x.enqueue(2025710362);
    }
    @Test
    public void test9306() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(1554760161);
		z.enqueue(-844546805);
		z.dequeue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.enqueue(-1810838170);
		z.isEmpty();
		assertFalse(z.isFull());
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test9307() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(1925480110);
		assertFalse(Var.isEmpty());
		Var.enqueue(-532254569);
		Var.isFull();
		Var.toString();
		assertEquals(1925480110, Var.dequeue());
		Var.enqueue(-67828597);
		assertEquals("[]", Var.toString());
		Var.enqueue(-1684428958);
		Var.dequeue();
    }
    @Test
    public void test9308() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test9309() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.toString();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.isFull();
		z.enqueue(2109470435);
    }
    @Test
    public void test9310() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isEmpty();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1985009814);
    }
    @Test
    public void test9311() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-1831437174);
		y.isFull();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test9312() {
		Queue y = new Queue();
		y.enqueue(562521775);
		y.isFull();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test9313() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test9314() {
		Queue x = new Queue();
		x.enqueue(-1323787341);
		assertEquals(-1, x.dequeue());
		x.toString();
    }
    @Test
    public void test9315() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.enqueue(-1703495605);
		z.toString();
		z.enqueue(-2024966796);
		assertFalse(z.isFull());
		z.isFull();
		z.toString();
    }
    @Test
    public void test9316() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test9317() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test9318() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test9319() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test9320() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.dequeue();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(2071048611);
    }
    @Test
    public void test9321() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		y.isFull();
		y.toString();
		y.enqueue(-1744696432);
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.enqueue(616928258);
		y.toString();
    }
    @Test
    public void test9322() {
		Queue z = new Queue();
		z.enqueue(1609144120);
		assertEquals("[1609144120]", z.toString());
		z.dequeue();
		z.isFull();
		z.toString();
    }
    @Test
    public void test9323() {
		Queue x = new Queue();
		x.enqueue(378347452);
		x.isEmpty();
		x.isFull();
		assertEquals(378347452, x.dequeue());
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(-764898797);
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test9324() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(945622896);
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test9325() {
		Queue z = new Queue();
		z.enqueue(-266160965);
		z.isFull();
		z.isFull();
		z.enqueue(2074185888);
		z.dequeue();
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(1474882530);
    }
    @Test
    public void test9326() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(1025938937);
		variable.enqueue(773764668);
		variable.enqueue(851741680);
    }
    @Test
    public void test9327() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.isFull();
		x.isEmpty();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.enqueue(-412450888);
    }
    @Test
    public void test9328() {
		Queue Var = new Queue();
		Var.enqueue(-1791453850);
		Var.toString();
		Var.toString();
		assertFalse(Var.isFull());
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test9329() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(143502682);
		Var.isFull();
		Var.enqueue(-1554442355);
		assertFalse(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test9330() {
		Queue y = new Queue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.enqueue(-1358765707);
		y.enqueue(1994605405);
    }
    @Test
    public void test9331() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(1553160140);
		x.isEmpty();
		assertFalse(x.isFull());
		assertFalse(x.isEmpty());
		x.isFull();
		x.isFull();
		x.enqueue(-177833382);
		x.enqueue(753972331);
		x.isFull();
		x.isFull();
    }
    @Test
    public void test9332() {
		Queue Var = new Queue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.enqueue(1483371493);
		Var.toString();
		Var.toString();
		Var.toString();
		Var.dequeue();
		Var.toString();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test9333() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test9334() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(1689604136);
    }
    @Test
    public void test9335() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(330428234);
    }
    @Test
    public void test9336() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.enqueue(-364607705);
		x.toString();
    }
    @Test
    public void test9337() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-1854723006);
		x.enqueue(232898001);
		assertEquals("[232898001]", x.toString());
		x.enqueue(1835904416);
		assertFalse(x.isEmpty());
		x.toString();
    }
    @Test
    public void test9338() {
		Queue Var = new Queue();
		Var.enqueue(-1348930800);
		Var.enqueue(1592262841);
		assertEquals(1592262841, Var.dequeue());
		Var.isFull();
		Var.enqueue(-1286611340);
    }
    @Test
    public void test9339() {
		Queue x = new Queue();
		x.enqueue(-1138335332);
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test9340() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test9341() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test9342() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.enqueue(736072840);
    }
    @Test
    public void test9343() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test9344() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test9345() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-1190637590);
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test9346() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test9347() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.toString();
		y.toString();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(-1577226316);
		y.toString();
		y.isFull();
		y.enqueue(-994078761);
    }
    @Test
    public void test9348() {
		Queue y = new Queue();
		y.enqueue(2052185834);
		y.enqueue(-1036930377);
		y.enqueue(-1568163058);
		y.isFull();
		assertFalse(y.isFull());
		assertEquals("[2052185834]", y.toString());
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.toString();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test9349() {
		Queue x = new Queue();
		x.enqueue(-1279260545);
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(-2079728203);
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test9350() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
		z.isEmpty();
		z.enqueue(1998735759);
		assertEquals(1998735759, z.dequeue());
		z.dequeue();
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(1452140130);
		z.isFull();
		z.enqueue(-1071453400);
    }
    @Test
    public void test9351() {
		Queue y = new Queue();
		y.enqueue(1764776607);
		assertFalse(y.isEmpty());
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test9352() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test9353() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-585709269);
		assertEquals("[]", x.toString());
		x.toString();
		x.dequeue();
		x.enqueue(300334150);
		assertFalse(x.isFull());
		x.dequeue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test9354() {
		Queue x = new Queue();
		x.enqueue(102061932);
		x.dequeue();
		x.enqueue(-457368798);
		x.dequeue();
    }
    @Test
    public void test9355() {
		Queue Var = new Queue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test9356() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.isFull();
		x.dequeue();
		x.enqueue(1422504492);
    }
    @Test
    public void test9357() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(1906332871);
		assertEquals("[1906332871]", z.toString());
		z.isEmpty();
		assertFalse(z.isEmpty());
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test9358() {
		Queue Var = new Queue();
		Var.enqueue(1325862178);
		Var.toString();
		Var.toString();
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		assertEquals("[1325862178]", Var.toString());
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test9359() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test9360() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		assertFalse(y.isFull());
		y.isFull();
		y.toString();
		y.isFull();
		y.enqueue(-460865173);
    }
    @Test
    public void test9361() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.enqueue(2056793385);
		y.toString();
		y.enqueue(-1430062544);
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(-914451733);
		y.enqueue(-124463668);
		assertTrue(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test9362() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test9363() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test9364() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.enqueue(963641712);
		y.enqueue(1450204774);
    }
    @Test
    public void test9365() {
		Queue y = new Queue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(-1168104180);
		y.isEmpty();
    }
    @Test
    public void test9366() {
		Queue variable = new Queue();
		variable.enqueue(316094541);
		assertEquals("[316094541]", variable.toString());
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-110532481);
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test9367() {
		Queue Var = new Queue();
		Var.enqueue(-1884611016);
		Var.enqueue(-1070213549);
		Var.toString();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.toString();
		Var.isFull();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(120500902);
		Var.enqueue(-1847386979);
    }
    @Test
    public void test9368() {
		Queue z = new Queue();
		z.enqueue(-1746653388);
    }
    @Test
    public void test9369() {
		Queue y = new Queue();
		y.enqueue(65365646);
		y.isFull();
		y.enqueue(1907183032);
		y.isFull();
    }
    @Test
    public void test9370() {
		Queue x = new Queue();
		x.enqueue(1150189918);
		assertFalse(x.isEmpty());
		x.isEmpty();
		x.enqueue(1501954581);
		assertFalse(x.isEmpty());
		assertEquals("[1150189918, 1501954581]", x.toString());
		x.dequeue();
		assertFalse(x.isEmpty());
		x.isEmpty();
		assertEquals("[1501954581]", x.toString());
		assertEquals(1501954581, x.dequeue());
		x.dequeue();
		x.toString();
		x.toString();
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test9371() {
		Queue x = new Queue();
		x.enqueue(-280705858);
		x.enqueue(-1625164415);
		x.isFull();
    }
    @Test
    public void test9372() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test9373() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-1159249374);
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(1319021234);
		assertFalse(y.isEmpty());
		assertFalse(y.isFull());
		assertFalse(y.isEmpty());
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(-1522319873);
    }
    @Test
    public void test9374() {
		Queue Var = new Queue();
		Var.enqueue(-819257829);
		Var.isFull();
		Var.enqueue(-907106146);
		Var.isFull();
		Var.toString();
		Var.enqueue(189316384);
		Var.toString();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test9375() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.toString();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.enqueue(86577819);
    }
    @Test
    public void test9376() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.enqueue(-248855674);
		Var.dequeue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test9377() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test9378() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
    }
    @Test
    public void test9379() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-1051867272);
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test9380() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.toString();
		variable.isFull();
		variable.enqueue(842702906);
    }
    @Test
    public void test9381() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test9382() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(1700490747);
		assertFalse(y.isFull());
		y.toString();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(81504014);
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test9383() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-1994810263);
    }
    @Test
    public void test9384() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.isFull();
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test9385() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.enqueue(2049882008);
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.enqueue(920226320);
		x.enqueue(1844754690);
    }
    @Test
    public void test9386() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test9387() {
		Queue variable = new Queue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test9388() {
		Queue y = new Queue();
		y.enqueue(2081533841);
		assertFalse(y.isEmpty());
		y.isEmpty();
		assertEquals(2081533841, y.dequeue());
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.enqueue(1113416723);
		assertFalse(y.isFull());
		assertFalse(y.isEmpty());
		y.dequeue();
		y.enqueue(719506522);
		y.enqueue(-459214662);
		y.toString();
    }
    @Test
    public void test9389() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(300033749);
		y.enqueue(-1991744435);
		y.dequeue();
    }
    @Test
    public void test9390() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-1280467957);
    }
    @Test
    public void test9391() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.enqueue(-1892186571);
		x.dequeue();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.toString();
		x.isEmpty();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test9392() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(-2136756126);
		Var.enqueue(-199213028);
    }
    @Test
    public void test9393() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(919094826);
    }
    @Test
    public void test9394() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.enqueue(-1730725776);
		z.isFull();
		z.dequeue();
		z.enqueue(525441041);
		z.isEmpty();
    }
    @Test
    public void test9395() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.toString();
		z.toString();
    }
    @Test
    public void test9396() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(1310818283);
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isEmpty();
		z.enqueue(1575059977);
		z.enqueue(36115541);
		assertEquals("[1575059977, 36115541]", z.toString());
		z.enqueue(2010877187);
		z.toString();
    }
    @Test
    public void test9397() {
		Queue z = new Queue();
		z.enqueue(1410937491);
		z.toString();
    }
    @Test
    public void test9398() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(1384894515);
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(1552414624);
		Var.toString();
		assertEquals("[1552414624]", Var.toString());
		Var.toString();
    }
    @Test
    public void test9399() {
		Queue z = new Queue();
		z.enqueue(-690708402);
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test9400() {
		Queue Var = new Queue();
		Var.enqueue(-581901332);
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.enqueue(211443008);
    }
    @Test
    public void test9401() {
		Queue x = new Queue();
		x.enqueue(-1845645019);
		x.enqueue(-211559858);
		x.isEmpty();
    }
    @Test
    public void test9402() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test9403() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.enqueue(2041484375);
		assertEquals(2041484375, variable.dequeue());
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test9404() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		Var.enqueue(1800723353);
    }
    @Test
    public void test9405() {
		Queue y = new Queue();
		y.enqueue(-3789571);
		y.toString();
		y.dequeue();
    }
    @Test
    public void test9406() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test9407() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test9408() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test9409() {
		Queue x = new Queue();
		x.enqueue(2114505198);
		x.dequeue();
    }
    @Test
    public void test9410() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test9411() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(283099775);
		z.dequeue();
		z.dequeue();
		z.enqueue(-1846970622);
		assertFalse(z.isFull());
		z.dequeue();
		z.enqueue(-199476125);
		z.isFull();
		z.isFull();
    }
    @Test
    public void test9412() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test9413() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-1056285825);
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test9414() {
		Queue variable = new Queue();
		variable.enqueue(499388414);
		variable.isFull();
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(-266312252);
		variable.isFull();
    }
    @Test
    public void test9415() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(2021535300);
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-1887670846);
		assertEquals("[2021535300]", variable.toString());
		variable.isEmpty();
		assertEquals("[2021535300]", variable.toString());
		variable.enqueue(1427392536);
		assertEquals("[2021535300, 1427392536]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test9416() {
		Queue x = new Queue();
		x.enqueue(-542769803);
		assertTrue(x.isEmpty());
		x.toString();
		x.toString();
    }
    @Test
    public void test9417() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(1292250782);
		variable.isFull();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test9418() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test9419() {
		Queue Var = new Queue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1802423590);
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-737400298);
		assertEquals(-1, Var.dequeue());
		Var.enqueue(924916612);
		Var.isFull();
		Var.toString();
		Var.enqueue(1334467688);
    }
    @Test
    public void test9420() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test9421() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.isFull();
		x.enqueue(73523404);
		x.isFull();
		x.toString();
		x.enqueue(174488194);
		assertEquals("[73523404, 174488194]", x.toString());
		assertEquals(73523404, x.dequeue());
		x.isFull();
    }
    @Test
    public void test9422() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1933947991);
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-138656915);
		variable.dequeue();
    }
    @Test
    public void test9423() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.enqueue(1211558009);
		y.toString();
		y.enqueue(-1945572133);
		y.isFull();
    }
    @Test
    public void test9424() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(-2033430426);
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(2009478623);
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test9425() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(-1342811366);
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test9426() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test9427() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test9428() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.toString();
		Var.enqueue(787126635);
		Var.toString();
		Var.enqueue(-830407089);
		Var.dequeue();
    }
    @Test
    public void test9429() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-1643484623);
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test9430() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.enqueue(-1455081539);
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.enqueue(164643914);
    }
    @Test
    public void test9431() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-263875592);
		Var.isFull();
		Var.enqueue(-1373573100);
		Var.toString();
		Var.enqueue(1240095984);
		Var.isFull();
		assertFalse(Var.isFull());
		assertFalse(Var.isEmpty());
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		Var.toString();
		assertEquals("[1240095984]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test9432() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-1244896163);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(-881108045);
		variable.enqueue(-1786711867);
    }
    @Test
    public void test9433() {
		Queue x = new Queue();
		x.enqueue(-588005263);
		x.dequeue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test9434() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test9435() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		z.isFull();
    }
    @Test
    public void test9436() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test9437() {
		Queue z = new Queue();
		z.enqueue(2141244722);
		z.isFull();
		assertEquals("[2141244722]", z.toString());
		z.isEmpty();
		z.enqueue(871410233);
    }
    @Test
    public void test9438() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test9439() {
		Queue x = new Queue();
		x.enqueue(-1486023891);
		x.isFull();
		x.isFull();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test9440() {
		Queue variable = new Queue();
		variable.enqueue(-2117723550);
		variable.toString();
		variable.isFull();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test9441() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1891141496);
		variable.enqueue(-1504008771);
    }
    @Test
    public void test9442() {
		Queue y = new Queue();
		y.enqueue(-60182450);
		y.enqueue(1093516872);
		y.enqueue(1519798132);
		y.isEmpty();
		y.dequeue();
		assertEquals("[1519798132]", y.toString());
		y.enqueue(1322227933);
    }
    @Test
    public void test9443() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(659070504);
		variable.enqueue(2029836100);
    }
    @Test
    public void test9444() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test9445() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test9446() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-1065618748);
		z.enqueue(308627593);
		z.enqueue(576198458);
		z.isEmpty();
		assertFalse(z.isEmpty());
		z.isFull();
		z.dequeue();
		z.dequeue();
		z.enqueue(304624102);
    }
    @Test
    public void test9447() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.enqueue(-477733759);
		y.isFull();
    }
    @Test
    public void test9448() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(471462614);
		assertFalse(x.isEmpty());
		assertEquals(471462614, x.dequeue());
		x.enqueue(1725470557);
		x.isEmpty();
		x.dequeue();
		assertFalse(x.isFull());
		x.dequeue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test9449() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		x.toString();
		x.toString();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test9450() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-1373721308);
		Var.isFull();
    }
    @Test
    public void test9451() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(-2009203076);
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test9452() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.isEmpty();
		x.enqueue(998335559);
		assertFalse(x.isEmpty());
		assertEquals("[998335559]", x.toString());
		x.dequeue();
		assertFalse(x.isFull());
		x.isFull();
		x.toString();
		x.enqueue(-1637376776);
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.isEmpty();
    }
    @Test
    public void test9453() {
		Queue Var = new Queue();
		Var.enqueue(-1840529510);
		assertTrue(Var.isEmpty());
		Var.enqueue(-2083491632);
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(711062556);
    }
    @Test
    public void test9454() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(2136499006);
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test9455() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.enqueue(-91857669);
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.enqueue(-2004483018);
		x.isFull();
		x.enqueue(-1060577702);
    }
    @Test
    public void test9456() {
		Queue z = new Queue();
		z.toString();
		assertTrue(z.isEmpty());
		z.toString();
		z.isFull();
		z.dequeue();
		z.enqueue(-1634631332);
		assertTrue(z.isEmpty());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.toString();
    }
    @Test
    public void test9457() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.enqueue(148813855);
		Var.enqueue(1939482234);
		Var.toString();
		Var.isFull();
		assertEquals("[148813855, 1939482234]", Var.toString());
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-264820611);
		Var.enqueue(1909679742);
		Var.enqueue(-1337756959);
		Var.isEmpty();
    }
    @Test
    public void test9458() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.enqueue(-1352946024);
		Var.isEmpty();
		Var.enqueue(-1480207796);
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test9459() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.isFull();
		x.isFull();
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(-1272025728);
		assertFalse(x.isFull());
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.isFull();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test9460() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-837133800);
		assertFalse(variable.isFull());
		variable.enqueue(-1871567079);
		assertEquals(-1, variable.dequeue());
		variable.enqueue(672825722);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test9461() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(2082093523);
		x.isEmpty();
		assertFalse(x.isFull());
		x.isFull();
		x.isEmpty();
		x.isFull();
		assertEquals(2082093523, x.dequeue());
		x.isFull();
		x.enqueue(-1230001472);
		x.enqueue(551603117);
    }
    @Test
    public void test9462() {
		Queue Var = new Queue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-175106424);
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test9463() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.toString();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test9464() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.enqueue(2062740914);
    }
    @Test
    public void test9465() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(1409828286);
		z.dequeue();
		z.isFull();
		z.toString();
		z.toString();
    }
    @Test
    public void test9466() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		z.toString();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isFull();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test9467() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test9468() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.enqueue(-1470591560);
    }
    @Test
    public void test9469() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test9470() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.toString();
		y.enqueue(1154456625);
		y.isFull();
		assertFalse(y.isFull());
		y.enqueue(-650393441);
		y.isFull();
    }
    @Test
    public void test9471() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(741484593);
		Var.enqueue(1369670879);
		assertFalse(Var.isEmpty());
		Var.enqueue(-278821665);
		assertFalse(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test9472() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(2044817324);
		z.enqueue(1717516304);
		z.toString();
		z.toString();
		z.enqueue(1190421645);
		z.isFull();
    }
    @Test
    public void test9473() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.isFull();
		z.dequeue();
		z.enqueue(-305101611);
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isEmpty();
		z.enqueue(-299456297);
		z.enqueue(-1452884105);
		z.isFull();
    }
    @Test
    public void test9474() {
		Queue Var = new Queue();
		Var.enqueue(-553874795);
		Var.enqueue(966910941);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(1586743610);
		Var.enqueue(1162627183);
		Var.isFull();
    }
    @Test
    public void test9475() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test9476() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.enqueue(56252373);
    }
    @Test
    public void test9477() {
		Queue x = new Queue();
		x.enqueue(1382693650);
		x.toString();
		x.toString();
		x.dequeue();
		x.enqueue(1049437880);
		x.isEmpty();
    }
    @Test
    public void test9478() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1113694149);
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(820393350);
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test9479() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.dequeue();
		y.toString();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.isFull();
		y.toString();
		y.enqueue(913554413);
    }
    @Test
    public void test9480() {
		Queue y = new Queue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.enqueue(-308512919);
		y.enqueue(1530411047);
    }
    @Test
    public void test9481() {
		Queue x = new Queue();
		x.enqueue(1499879064);
		x.enqueue(1208490186);
    }
    @Test
    public void test9482() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.toString();
    }
    @Test
    public void test9483() {
		Queue z = new Queue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.enqueue(945804629);
		assertFalse(z.isEmpty());
		z.isFull();
		z.enqueue(747612108);
		assertEquals("[945804629, 747612108]", z.toString());
		z.enqueue(-175423587);
		z.dequeue();
		z.dequeue();
		z.enqueue(-685371233);
    }
    @Test
    public void test9484() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.enqueue(-796531953);
    }
    @Test
    public void test9485() {
		Queue x = new Queue();
		x.enqueue(-129459936);
		x.dequeue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.enqueue(-2087038798);
		x.isFull();
		x.enqueue(-116796693);
		x.enqueue(1545245010);
    }
    @Test
    public void test9486() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.enqueue(-1533245309);
		x.enqueue(-856416522);
		assertEquals(-1, x.dequeue());
		x.enqueue(304519897);
		x.dequeue();
    }
    @Test
    public void test9487() {
		Queue x = new Queue();
		x.enqueue(90094738);
		assertEquals("[90094738]", x.toString());
		assertFalse(x.isFull());
		x.enqueue(-1604367719);
		assertEquals("[90094738]", x.toString());
		assertEquals(90094738, x.dequeue());
		x.enqueue(1220777138);
		x.isEmpty();
    }
    @Test
    public void test9488() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.dequeue();
		x.toString();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.enqueue(525353090);
		x.enqueue(560268028);
		x.isFull();
    }
    @Test
    public void test9489() {
		Queue z = new Queue();
		z.enqueue(-1176367916);
		z.toString();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.dequeue();
		z.enqueue(-1765390597);
		z.isEmpty();
		z.dequeue();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.isFull();
		z.isEmpty();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test9490() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.isFull();
		x.enqueue(-1980544303);
		x.isEmpty();
		x.enqueue(112331433);
		x.toString();
    }
    @Test
    public void test9491() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.enqueue(-447065106);
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test9492() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.toString();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.enqueue(-1344920608);
		y.isEmpty();
    }
    @Test
    public void test9493() {
		Queue z = new Queue();
		z.enqueue(-222350444);
		assertEquals(-1, z.dequeue());
		z.isFull();
    }
    @Test
    public void test9494() {
		Queue x = new Queue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.dequeue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.enqueue(544537443);
		x.toString();
		x.isFull();
    }
    @Test
    public void test9495() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(986270285);
    }
    @Test
    public void test9496() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test9497() {
		Queue Var = new Queue();
		Var.enqueue(203747385);
		Var.isFull();
		Var.enqueue(-725878468);
		Var.enqueue(1014300174);
		Var.isEmpty();
    }
    @Test
    public void test9498() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(-639163390);
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.enqueue(920985524);
    }
    @Test
    public void test9499() {
		Queue x = new Queue();
		x.enqueue(-1760051824);
		assertEquals(-1, x.dequeue());
		x.enqueue(-2081912052);
		x.dequeue();
		x.enqueue(-1061606699);
    }
    @Test
    public void test9500() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(1009472275);
		x.enqueue(-661791316);
		x.isFull();
		x.enqueue(191902742);
		assertEquals("[1009472275, 191902742]", x.toString());
		x.dequeue();
		assertEquals("[191902742]", x.toString());
		x.isFull();
    }
    @Test
    public void test9501() {
		Queue y = new Queue();
		y.enqueue(-1752565320);
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
		y.dequeue();
		y.enqueue(-651674739);
		y.enqueue(731137088);
		y.enqueue(1504417517);
		y.dequeue();
		y.enqueue(1261561323);
    }
    @Test
    public void test9502() {
		Queue variable = new Queue();
		variable.enqueue(-265584812);
		variable.enqueue(2086550087);
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test9503() {
		Queue z = new Queue();
		z.enqueue(-1859686222);
		z.enqueue(-2058257497);
		z.enqueue(-1114537211);
		z.isEmpty();
		z.isEmpty();
		z.enqueue(1235289725);
		z.enqueue(-774701766);
		z.enqueue(-488541189);
		z.enqueue(-35284808);
    }
    @Test
    public void test9504() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.enqueue(1894878720);
		z.enqueue(694500137);
		z.dequeue();
		z.dequeue();
		z.dequeue();
		z.enqueue(839693044);
    }
    @Test
    public void test9505() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-798772629);
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
		Var.enqueue(1185232519);
    }
    @Test
    public void test9506() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(1308730021);
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-1140783095);
		variable.dequeue();
    }
    @Test
    public void test9507() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isFull();
		assertTrue(z.isEmpty());
		z.enqueue(-66594622);
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.enqueue(25532173);
		z.isFull();
		assertEquals("[25532173]", z.toString());
		z.dequeue();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.dequeue();
    }
    @Test
    public void test9508() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(-1722547028);
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test9509() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.enqueue(542194971);
		assertFalse(Var.isFull());
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test9510() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-487738450);
		Var.enqueue(-661319047);
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.enqueue(239386907);
		Var.isFull();
    }
    @Test
    public void test9511() {
		Queue Var = new Queue();
		Var.enqueue(943403306);
    }
    @Test
    public void test9512() {
		Queue y = new Queue();
		y.enqueue(-621735402);
		assertEquals("[]", y.toString());
		y.dequeue();
		y.enqueue(-2037738223);
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test9513() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(-1275221161);
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test9514() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test9515() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(-879935846);
		x.enqueue(1663938749);
		x.isFull();
		assertEquals("[1663938749]", x.toString());
		x.enqueue(1791527579);
		assertFalse(x.isEmpty());
		assertEquals("[1663938749, 1791527579]", x.toString());
		x.enqueue(-1523003752);
		x.toString();
    }
    @Test
    public void test9516() {
		Queue y = new Queue();
		y.toString();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.toString();
		y.toString();
		y.toString();
		y.isFull();
    }
    @Test
    public void test9517() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test9518() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(337698761);
		y.enqueue(-491857564);
		assertEquals("[337698761]", y.toString());
		y.enqueue(1892500586);
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test9519() {
		Queue x = new Queue();
		x.enqueue(1226457827);
		x.dequeue();
		x.enqueue(-714552930);
		x.isEmpty();
		x.enqueue(-1055007821);
		x.dequeue();
		x.enqueue(-2070651886);
		x.isEmpty();
    }
    @Test
    public void test9520() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.enqueue(-613719618);
		x.isEmpty();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test9521() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test9522() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(-1460087128);
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1105813453);
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(492418231);
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-443950939);
    }
    @Test
    public void test9523() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test9524() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-458044933);
    }
    @Test
    public void test9525() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(1481736618);
		z.dequeue();
		z.isFull();
		assertFalse(z.isFull());
		z.dequeue();
		z.isFull();
		z.isEmpty();
		z.enqueue(-461411477);
    }
    @Test
    public void test9526() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.enqueue(-767153626);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test9527() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(730311614);
		x.dequeue();
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test9528() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-1364491223);
		variable.toString();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(-843725501);
		variable.enqueue(-379092791);
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test9529() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test9530() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1765971334);
		assertTrue(z.isEmpty());
		z.isFull();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test9531() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test9532() {
		Queue y = new Queue();
		y.enqueue(352706483);
		y.enqueue(249546772);
		y.isEmpty();
		y.isFull();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test9533() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test9534() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test9535() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.isEmpty();
		x.toString();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(1126322655);
    }
    @Test
    public void test9536() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(666854569);
    }
    @Test
    public void test9537() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.enqueue(229868859);
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.enqueue(971163831);
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test9538() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-2029696368);
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(1845873744);
		Var.toString();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-1925920818);
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test9539() {
		Queue z = new Queue();
		z.enqueue(-571668881);
		z.toString();
		z.enqueue(-577055890);
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.toString();
		assertEquals("[]", z.toString());
		z.dequeue();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.isFull();
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test9540() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-1299930717);
		assertFalse(z.isFull());
		z.enqueue(-237936277);
		z.isEmpty();
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.enqueue(1581143451);
    }
    @Test
    public void test9541() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test9542() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
		y.enqueue(-1544586063);
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test9543() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.enqueue(-1988379346);
		z.isFull();
		z.enqueue(-1991391272);
		z.enqueue(969618462);
    }
    @Test
    public void test9544() {
		Queue y = new Queue();
		y.enqueue(-1961915086);
		y.isFull();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isFull();
		y.enqueue(1225207871);
    }
    @Test
    public void test9545() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test9546() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		z.enqueue(393115228);
    }
    @Test
    public void test9547() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test9548() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test9549() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1456419317);
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(819322335);
		variable.isFull();
		variable.enqueue(-1219445680);
		assertEquals("[819322335]", variable.toString());
		variable.enqueue(449235740);
    }
    @Test
    public void test9550() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test9551() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(138477536);
    }
    @Test
    public void test9552() {
		Queue variable = new Queue();
		variable.enqueue(-1476261638);
		variable.enqueue(-688696492);
		variable.isEmpty();
    }
    @Test
    public void test9553() {
		Queue x = new Queue();
		x.enqueue(2038603180);
		x.isFull();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test9554() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(1813822717);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-1388127895);
    }
    @Test
    public void test9555() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.enqueue(570114484);
		y.dequeue();
		y.enqueue(517896764);
    }
    @Test
    public void test9556() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test9557() {
		Queue Var = new Queue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test9558() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.enqueue(-216263825);
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test9559() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test9560() {
		Queue z = new Queue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isEmpty();
		z.enqueue(1539462345);
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
    }
    @Test
    public void test9561() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-821653051);
		y.enqueue(-417012841);
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(-338480470);
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test9562() {
		Queue variable = new Queue();
		variable.enqueue(1449193390);
		assertEquals(1449193390, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
    }
    @Test
    public void test9563() {
		Queue variable = new Queue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(1066441998);
		variable.isFull();
		variable.enqueue(548940705);
		assertFalse(variable.isFull());
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.isFull();
		assertEquals(1066441998, variable.dequeue());
		variable.dequeue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test9564() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.enqueue(-1268917788);
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test9565() {
		Queue z = new Queue();
		z.toString();
		assertEquals("[]", z.toString());
		z.toString();
		z.toString();
    }
    @Test
    public void test9566() {
		Queue x = new Queue();
		x.enqueue(1094742507);
		x.toString();
		x.toString();
		x.enqueue(-291146758);
		x.enqueue(276997771);
		x.enqueue(-2095842297);
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test9567() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.enqueue(1079281595);
		Var.dequeue();
		Var.enqueue(-1260610108);
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-1742346250);
    }
    @Test
    public void test9568() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(871308266);
		assertEquals("[871308266]", x.toString());
		x.enqueue(-1155055220);
		x.toString();
		x.enqueue(234152945);
		assertFalse(x.isFull());
		x.isEmpty();
		x.dequeue();
		x.enqueue(-650661331);
    }
    @Test
    public void test9569() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test9570() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(1324341);
		variable.toString();
		variable.enqueue(-1591077039);
		variable.isFull();
		variable.toString();
		variable.enqueue(905854666);
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test9571() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(405265037);
		Var.dequeue();
    }
    @Test
    public void test9572() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(168399616);
    }
    @Test
    public void test9573() {
		Queue y = new Queue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test9574() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-2042562183);
		y.isFull();
		y.toString();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test9575() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(-583583785);
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test9576() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-765369436);
		z.enqueue(-1475233052);
		z.toString();
		z.isEmpty();
		z.isEmpty();
		assertFalse(z.isFull());
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test9577() {
		Queue Var = new Queue();
		Var.enqueue(-174101687);
		Var.isEmpty();
		Var.enqueue(-1211675798);
		Var.toString();
    }
    @Test
    public void test9578() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(1340186502);
		y.dequeue();
		y.dequeue();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test9579() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(538915059);
		y.enqueue(-91599172);
		y.enqueue(-308059114);
    }
    @Test
    public void test9580() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-685542293);
		variable.isEmpty();
		variable.enqueue(-449638305);
    }
    @Test
    public void test9581() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1468124691);
		variable.dequeue();
		variable.enqueue(2061320771);
		assertFalse(variable.isFull());
		variable.enqueue(-34779581);
    }
    @Test
    public void test9582() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		y.isFull();
		y.dequeue();
		y.enqueue(1283741676);
		y.toString();
		y.isFull();
		assertFalse(y.isFull());
		assertEquals(1283741676, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test9583() {
		Queue Var = new Queue();
		Var.enqueue(-2041554350);
		Var.isFull();
		Var.enqueue(2069439929);
		Var.dequeue();
		Var.enqueue(1990396685);
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(-202384279);
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test9584() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(858684121);
		z.isFull();
		z.isFull();
		z.enqueue(-1550111616);
		z.isFull();
		assertFalse(z.isEmpty());
		z.isFull();
		z.enqueue(1992608939);
		z.toString();
		z.isFull();
    }
    @Test
    public void test9585() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test9586() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.enqueue(972064144);
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test9587() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test9588() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.isFull();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(343299273);
		Var.toString();
    }
    @Test
    public void test9589() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.isFull();
    }
    @Test
    public void test9590() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1882426354);
		assertEquals(-1, variable.dequeue());
		variable.toString();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(232041869);
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test9591() {
		Queue x = new Queue();
		x.enqueue(-1699254888);
		x.toString();
		x.enqueue(-1527685301);
		x.isFull();
		x.enqueue(713711545);
		x.enqueue(107514132);
		assertEquals("[713711545, 107514132]", x.toString());
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test9592() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test9593() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(-368451637);
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test9594() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-680127059);
		Var.toString();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.enqueue(1779447292);
		Var.isFull();
		assertEquals("[1779447292]", Var.toString());
		assertFalse(Var.isEmpty());
		assertFalse(Var.isEmpty());
		assertEquals(1779447292, Var.dequeue());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test9595() {
		Queue z = new Queue();
		z.enqueue(869191934);
		z.isEmpty();
    }
    @Test
    public void test9596() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(799392006);
		Var.enqueue(-1853147259);
    }
    @Test
    public void test9597() {
		Queue z = new Queue();
		z.enqueue(1334526009);
		z.enqueue(-1133489033);
		z.enqueue(72092146);
		assertFalse(z.isEmpty());
		z.enqueue(-974660546);
    }
    @Test
    public void test9598() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test9599() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		z.toString();
		z.isFull();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test9600() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(-1847883159);
		variable.dequeue();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test9601() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(238061273);
		variable.enqueue(106218519);
		variable.isFull();
    }
    @Test
    public void test9602() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test9603() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(1534333892);
		assertFalse(y.isFull());
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test9604() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.enqueue(466153124);
		z.isFull();
		z.enqueue(-301955572);
		z.isFull();
		z.isEmpty();
		assertEquals("[466153124]", z.toString());
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test9605() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.dequeue();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.isFull();
		assertFalse(y.isFull());
		y.enqueue(1471240558);
		y.dequeue();
		y.enqueue(1566958561);
		y.enqueue(966447403);
		y.enqueue(-1838369412);
		y.isFull();
		y.enqueue(-1600703197);
    }
    @Test
    public void test9606() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(855068779);
		variable.enqueue(2070906188);
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.isFull();
		assertEquals("[855068779, 2070906188]", variable.toString());
		assertFalse(variable.isEmpty());
		variable.enqueue(863199611);
		variable.enqueue(-1748646457);
		variable.toString();
    }
    @Test
    public void test9607() {
		Queue x = new Queue();
		x.enqueue(906903656);
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
		x.toString();
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test9608() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.enqueue(-2044611407);
		z.toString();
		assertFalse(z.isFull());
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.isFull();
		z.toString();
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(557032071);
		z.enqueue(-144317909);
    }
    @Test
    public void test9609() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.enqueue(-1000169387);
		Var.isFull();
    }
    @Test
    public void test9610() {
		Queue variable = new Queue();
		variable.enqueue(-2065445125);
		assertFalse(variable.isFull());
		variable.enqueue(-299108641);
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-458592379);
		variable.enqueue(-1235555983);
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test9611() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.toString();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isEmpty();
		y.enqueue(1263559715);
		assertEquals("[1263559715]", y.toString());
		y.isEmpty();
		y.enqueue(654464843);
    }
    @Test
    public void test9612() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.enqueue(-324667168);
		y.dequeue();
		y.dequeue();
		y.toString();
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test9613() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isFull();
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(-962262812);
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test9614() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1460249090);
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test9615() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(971440399);
		assertFalse(x.isEmpty());
		assertFalse(x.isEmpty());
		x.isEmpty();
		x.enqueue(1749503805);
		assertFalse(x.isFull());
		assertEquals(971440399, x.dequeue());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(652460047);
		x.isFull();
    }
    @Test
    public void test9616() {
		Queue Var = new Queue();
		Var.enqueue(-43900082);
		Var.isEmpty();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1685158697);
    }
    @Test
    public void test9617() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(-433058654);
    }
    @Test
    public void test9618() {
		Queue z = new Queue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test9619() {
		Queue y = new Queue();
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(1687350741);
		assertFalse(y.isEmpty());
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test9620() {
		Queue variable = new Queue();
		variable.enqueue(-931483528);
		variable.dequeue();
		variable.toString();
		variable.toString();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test9621() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isFull();
		z.toString();
		z.dequeue();
		z.dequeue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.toString();
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(1512970422);
		assertFalse(z.isEmpty());
		z.enqueue(1225972151);
    }
    @Test
    public void test9622() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.enqueue(-1114820928);
		variable.isFull();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test9623() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(1117054357);
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isFull();
    }
    @Test
    public void test9624() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-1969845672);
		assertEquals("[]", x.toString());
		x.toString();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test9625() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test9626() {
		Queue Var = new Queue();
		Var.enqueue(-1120022962);
		Var.enqueue(484211871);
		Var.enqueue(867742939);
		Var.toString();
		Var.enqueue(278084402);
		Var.toString();
		Var.dequeue();
		Var.enqueue(-1492469332);
		Var.toString();
		Var.toString();
    }
    @Test
    public void test9627() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(1881828745);
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test9628() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(209933874);
    }
    @Test
    public void test9629() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		x.toString();
		x.enqueue(-845408304);
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test9630() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(1981441227);
		z.isEmpty();
    }
    @Test
    public void test9631() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-1897212416);
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test9632() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-1715554777);
		assertEquals("[]", x.toString());
		x.enqueue(616382238);
		x.enqueue(2104551633);
		x.enqueue(1310510678);
    }
    @Test
    public void test9633() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(1176408689);
		variable.isEmpty();
		variable.toString();
		variable.enqueue(383576857);
		assertEquals("[1176408689, 383576857]", variable.toString());
		assertFalse(variable.isEmpty());
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test9634() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-158782279);
    }
    @Test
    public void test9635() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(-559537081);
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
		x.toString();
		x.enqueue(-2003160524);
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test9636() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(1917151774);
		assertFalse(y.isEmpty());
		assertFalse(y.isFull());
		assertEquals("[1917151774]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test9637() {
		Queue z = new Queue();
		z.enqueue(-771570373);
		assertFalse(z.isFull());
		z.toString();
		z.toString();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isFull();
		z.enqueue(30826917);
		assertEquals("[30826917]", z.toString());
		z.enqueue(-424297050);
		z.dequeue();
    }
    @Test
    public void test9638() {
		Queue y = new Queue();
		y.enqueue(848508819);
		y.isEmpty();
		y.isFull();
		assertEquals(848508819, y.dequeue());
		y.toString();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.isFull();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test9639() {
		Queue y = new Queue();
		y.toString();
		assertEquals("[]", y.toString());
		y.toString();
		assertFalse(y.isFull());
		y.isFull();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.dequeue();
		y.isEmpty();
		y.enqueue(222291482);
    }
    @Test
    public void test9640() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.enqueue(-1465897218);
		Var.toString();
		Var.enqueue(-1954023588);
		Var.enqueue(-583336954);
		Var.toString();
    }
    @Test
    public void test9641() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test9642() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isFull();
		z.isFull();
		z.enqueue(1061309413);
    }
    @Test
    public void test9643() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-1156529879);
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(1844387631);
		assertFalse(Var.isEmpty());
		assertFalse(Var.isFull());
		assertEquals(1844387631, Var.dequeue());
		Var.enqueue(-383461994);
		Var.isFull();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-2114030281);
    }
    @Test
    public void test9644() {
		Queue Var = new Queue();
		Var.enqueue(110487962);
		Var.isEmpty();
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test9645() {
		Queue y = new Queue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.toString();
		y.dequeue();
		y.enqueue(-1219181725);
		y.isEmpty();
		y.enqueue(1944209897);
		y.isEmpty();
		y.dequeue();
		y.enqueue(1947536069);
		y.isEmpty();
    }
    @Test
    public void test9646() {
		Queue z = new Queue();
		z.enqueue(139855360);
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		assertFalse(z.isEmpty());
		z.enqueue(200107052);
    }
    @Test
    public void test9647() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-1065553224);
		y.toString();
		y.enqueue(-2067688252);
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.isFull();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.isFull();
		y.enqueue(-1028593689);
    }
    @Test
    public void test9648() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1429413928);
		Var.isEmpty();
		Var.enqueue(1766440791);
		Var.dequeue();
    }
    @Test
    public void test9649() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test9650() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test9651() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-202345260);
		Var.isEmpty();
		Var.enqueue(-484233215);
    }
    @Test
    public void test9652() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-278229767);
		x.isFull();
    }
    @Test
    public void test9653() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test9654() {
		Queue variable = new Queue();
		variable.enqueue(577615760);
    }
    @Test
    public void test9655() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.isFull();
		assertEquals("[]", z.toString());
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(-197549540);
		z.enqueue(649918084);
    }
    @Test
    public void test9656() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test9657() {
		Queue variable = new Queue();
		variable.enqueue(1128864409);
		variable.isEmpty();
    }
    @Test
    public void test9658() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(-1214075273);
		y.isEmpty();
		y.dequeue();
		y.toString();
		y.enqueue(-1647546573);
    }
    @Test
    public void test9659() {
		Queue y = new Queue();
		y.enqueue(-646404826);
		y.isEmpty();
		y.toString();
		y.isEmpty();
		y.isFull();
		y.enqueue(-76372852);
		y.dequeue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test9660() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.dequeue();
		y.dequeue();
		y.enqueue(-287163972);
		assertTrue(y.isEmpty());
		y.toString();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test9661() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isFull();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
		y.toString();
    }
    @Test
    public void test9662() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(-1516415094);
		z.enqueue(880109269);
		z.enqueue(2019247809);
    }
    @Test
    public void test9663() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.isEmpty();
		x.enqueue(1847697753);
		x.toString();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test9664() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test9665() {
		Queue x = new Queue();
		x.enqueue(326634027);
		x.enqueue(1155141711);
		x.toString();
		x.isFull();
		x.dequeue();
		assertFalse(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test9666() {
		Queue y = new Queue();
		y.enqueue(-893215302);
		y.isFull();
		y.isEmpty();
		y.enqueue(374652818);
		assertEquals(374652818, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test9667() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test9668() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.dequeue();
		x.enqueue(1751162289);
		assertFalse(x.isEmpty());
		x.isFull();
		x.toString();
    }
    @Test
    public void test9669() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-718398902);
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(-702944340);
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(843588749);
    }
    @Test
    public void test9670() {
		Queue x = new Queue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		x.enqueue(1791554716);
		x.dequeue();
		x.enqueue(1012289297);
		x.toString();
    }
    @Test
    public void test9671() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.toString();
		variable.isFull();
		variable.enqueue(-786553327);
		variable.enqueue(-1809789749);
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-581052584);
    }
    @Test
    public void test9672() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.enqueue(1762107738);
		x.dequeue();
		assertTrue(x.isEmpty());
		x.toString();
		x.isEmpty();
		x.enqueue(-1480321972);
		x.toString();
    }
    @Test
    public void test9673() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(-1564040434);
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1102927657);
		variable.enqueue(-1504317990);
    }
    @Test
    public void test9674() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(1084254145);
		assertFalse(variable.isFull());
		assertFalse(variable.isEmpty());
		assertEquals(1084254145, variable.dequeue());
		variable.enqueue(-222114051);
		variable.isFull();
    }
    @Test
    public void test9675() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(1186747567);
		assertEquals("[1186747567]", Var.toString());
		Var.toString();
		Var.enqueue(1595635602);
		Var.toString();
		Var.enqueue(-1547344073);
		Var.isEmpty();
		Var.dequeue();
		assertEquals("[1595635602]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test9676() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(2000420451);
		assertEquals(2000420451, x.dequeue());
		x.toString();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(598381083);
    }
    @Test
    public void test9677() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(773902122);
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(1149469249);
		variable.isEmpty();
    }
    @Test
    public void test9678() {
		Queue variable = new Queue();
		variable.enqueue(-1502983426);
		variable.dequeue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-1431531353);
		variable.toString();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test9679() {
		Queue x = new Queue();
		x.enqueue(-2142192671);
		assertFalse(x.isFull());
		x.isFull();
		x.isFull();
		x.enqueue(-1547234160);
		x.isFull();
    }
    @Test
    public void test9680() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test9681() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.toString();
    }
    @Test
    public void test9682() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test9683() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.enqueue(677655451);
		x.toString();
		x.enqueue(-911357314);
		assertEquals(677655451, x.dequeue());
		x.isEmpty();
		x.toString();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test9684() {
		Queue Var = new Queue();
		Var.enqueue(-1321989259);
		Var.enqueue(1462559029);
    }
    @Test
    public void test9685() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(415819035);
		z.dequeue();
		z.isFull();
		z.isFull();
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test9686() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test9687() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.toString();
		x.enqueue(-372123814);
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test9688() {
		Queue y = new Queue();
		y.toString();
		assertTrue(y.isEmpty());
		y.toString();
		assertEquals("[]", y.toString());
		y.toString();
		assertEquals("[]", y.toString());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isFull();
    }
    @Test
    public void test9689() {
		Queue z = new Queue();
		z.enqueue(-520684217);
    }
    @Test
    public void test9690() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test9691() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test9692() {
		Queue variable = new Queue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test9693() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test9694() {
		Queue z = new Queue();
		z.isFull();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.toString();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test9695() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(-111695108);
		assertEquals("[]", y.toString());
		y.toString();
		y.isEmpty();
		y.enqueue(567599207);
		y.toString();
		assertEquals("[567599207]", y.toString());
		y.toString();
    }
    @Test
    public void test9696() {
		Queue y = new Queue();
		y.enqueue(1484570379);
		y.enqueue(-118676551);
		assertFalse(y.isFull());
		y.enqueue(-154513825);
		assertEquals(1484570379, y.dequeue());
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.enqueue(-2065209799);
		y.dequeue();
		y.isEmpty();
		y.enqueue(-669210354);
		y.dequeue();
    }
    @Test
    public void test9697() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.toString();
		variable.isFull();
		variable.toString();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test9698() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test9699() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test9700() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-644861602);
		z.isEmpty();
		z.enqueue(-372860847);
    }
    @Test
    public void test9701() {
		Queue y = new Queue();
		y.enqueue(-744745996);
		assertFalse(y.isFull());
		y.enqueue(1222891750);
		y.dequeue();
		y.enqueue(-707289518);
		y.isFull();
		y.dequeue();
		y.isFull();
		y.isEmpty();
		y.enqueue(-575600237);
		y.isFull();
    }
    @Test
    public void test9702() {
		Queue Var = new Queue();
		Var.enqueue(-1894403738);
		assertFalse(Var.isFull());
		Var.enqueue(923339508);
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-50225);
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test9703() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(2036037110);
		assertFalse(variable.isFull());
		variable.toString();
		variable.toString();
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test9704() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.isFull();
		y.enqueue(259454575);
		y.toString();
		y.enqueue(2006193380);
		y.dequeue();
		y.toString();
    }
    @Test
    public void test9705() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.toString();
		x.enqueue(1406490785);
		x.isFull();
		x.dequeue();
		x.isFull();
		x.enqueue(-374904091);
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(-516751607);
    }
    @Test
    public void test9706() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test9707() {
		Queue x = new Queue();
		x.enqueue(-949394259);
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.isFull();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test9708() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test9709() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-937879628);
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		variable.toString();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(-637091749);
    }
    @Test
    public void test9710() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.toString();
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test9711() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(-1568108923);
		assertEquals("[]", variable.toString());
		variable.enqueue(-987615370);
    }
    @Test
    public void test9712() {
		Queue z = new Queue();
		z.enqueue(128723934);
		z.enqueue(-1940051912);
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(1849721160);
		z.enqueue(1944076375);
		assertFalse(z.isFull());
		z.dequeue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test9713() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.enqueue(-1110322290);
		variable.enqueue(-819486500);
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test9714() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-1538419377);
		z.toString();
    }
    @Test
    public void test9715() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.toString();
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test9716() {
		Queue Var = new Queue();
		Var.enqueue(-1400317638);
		Var.dequeue();
		Var.enqueue(1563501683);
		Var.enqueue(-1026359392);
		Var.dequeue();
		Var.enqueue(-775394482);
    }
    @Test
    public void test9717() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test9718() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.enqueue(1455215531);
    }
    @Test
    public void test9719() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(480962417);
		z.toString();
    }
    @Test
    public void test9720() {
		Queue y = new Queue();
		y.enqueue(-1376391875);
		y.isFull();
		y.dequeue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test9721() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-724831439);
		variable.isFull();
		variable.enqueue(541880923);
		variable.toString();
    }
    @Test
    public void test9722() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test9723() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(1725974848);
		Var.isEmpty();
		Var.enqueue(1577941257);
		Var.enqueue(1252507602);
    }
    @Test
    public void test9724() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(1749546681);
		z.isEmpty();
    }
    @Test
    public void test9725() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-2048837647);
		y.dequeue();
    }
    @Test
    public void test9726() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test9727() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(1981283590);
		assertEquals(1981283590, x.dequeue());
		assertEquals("[]", x.toString());
		x.enqueue(658481009);
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.dequeue();
		x.enqueue(554492287);
    }
    @Test
    public void test9728() {
		Queue y = new Queue();
		y.enqueue(-1539428658);
		y.isEmpty();
		y.isFull();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.dequeue();
		y.dequeue();
		y.toString();
		y.isFull();
		y.isEmpty();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.toString();
    }
    @Test
    public void test9729() {
		Queue variable = new Queue();
		variable.enqueue(-1735673240);
    }
    @Test
    public void test9730() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.toString();
		x.isFull();
		x.toString();
    }
    @Test
    public void test9731() {
		Queue variable = new Queue();
		variable.enqueue(1399129711);
		variable.enqueue(-459652230);
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test9732() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test9733() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.toString();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.enqueue(373174873);
    }
    @Test
    public void test9734() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-679364076);
		z.toString();
		z.isFull();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test9735() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-654405978);
		z.enqueue(-356339297);
    }
    @Test
    public void test9736() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.toString();
    }
    @Test
    public void test9737() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test9738() {
		Queue Var = new Queue();
		Var.enqueue(-408176492);
    }
    @Test
    public void test9739() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.toString();
		z.isFull();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.enqueue(-842557177);
		z.isEmpty();
    }
    @Test
    public void test9740() {
		Queue x = new Queue();
		x.enqueue(-1033472823);
		x.isFull();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(-1332398353);
    }
    @Test
    public void test9741() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(764294926);
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test9742() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.enqueue(1727929915);
    }
    @Test
    public void test9743() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(2140664986);
		assertFalse(z.isFull());
		z.enqueue(2037538711);
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(2031468228);
		z.enqueue(-1550073771);
    }
    @Test
    public void test9744() {
		Queue z = new Queue();
		z.dequeue();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(1096708810);
		z.enqueue(-1870135063);
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test9745() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.enqueue(-1058459965);
		z.enqueue(-2084628956);
		z.dequeue();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test9746() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.enqueue(-682922856);
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-1230179826);
		variable.toString();
    }
    @Test
    public void test9747() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(152614303);
		assertFalse(Var.isEmpty());
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test9748() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test9749() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.toString();
		z.toString();
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.toString();
		z.enqueue(-1214461483);
		z.isFull();
		z.toString();
		z.isFull();
    }
    @Test
    public void test9750() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1479399979);
		Var.enqueue(70238239);
		Var.enqueue(744107988);
    }
    @Test
    public void test9751() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(1769844309);
		assertEquals(1769844309, z.dequeue());
		z.isFull();
		z.toString();
		z.toString();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.dequeue();
		z.enqueue(1951716930);
		z.dequeue();
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test9752() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.isFull();
		z.isFull();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.enqueue(579546918);
    }
    @Test
    public void test9753() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-1373462873);
		assertEquals(-1, y.dequeue());
		y.toString();
		y.toString();
		y.isFull();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test9754() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test9755() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test9756() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		assertFalse(x.isFull());
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.enqueue(1108583033);
    }
    @Test
    public void test9757() {
		Queue y = new Queue();
		y.enqueue(1675214211);
		y.toString();
		y.dequeue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isFull();
    }
    @Test
    public void test9758() {
		Queue z = new Queue();
		z.enqueue(-1788189811);
		z.enqueue(1996020039);
		z.isFull();
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test9759() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(1570525497);
		assertFalse(z.isEmpty());
		z.toString();
		z.toString();
    }
    @Test
    public void test9760() {
		Queue variable = new Queue();
		variable.enqueue(126522305);
		variable.dequeue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test9761() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(1358736654);
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertEquals("[1358736654]", variable.toString());
		variable.dequeue();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-2053032226);
		variable.toString();
    }
    @Test
    public void test9762() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test9763() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test9764() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test9765() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
		assertFalse(y.isFull());
		y.isEmpty();
		y.dequeue();
		y.enqueue(1135928331);
		y.dequeue();
    }
    @Test
    public void test9766() {
		Queue Var = new Queue();
		Var.enqueue(1601480976);
		Var.toString();
		Var.enqueue(278368305);
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-1132016322);
    }
    @Test
    public void test9767() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-2097768733);
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-1744937971);
    }
    @Test
    public void test9768() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test9769() {
		Queue x = new Queue();
		x.enqueue(-1689219099);
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test9770() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
		variable.enqueue(457551647);
    }
    @Test
    public void test9771() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(2056845701);
		y.toString();
		assertEquals("[2056845701]", y.toString());
		assertFalse(y.isEmpty());
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test9772() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.dequeue();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test9773() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test9774() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test9775() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		x.enqueue(-1691701851);
		x.enqueue(-599810284);
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(-727115766);
		x.isEmpty();
    }
    @Test
    public void test9776() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(495554660);
		assertEquals(495554660, x.dequeue());
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test9777() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.enqueue(1409306242);
    }
    @Test
    public void test9778() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test9779() {
		Queue Var = new Queue();
		Var.enqueue(1598103708);
    }
    @Test
    public void test9780() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isFull();
		Var.isFull();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test9781() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(-38268954);
		y.toString();
		y.toString();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-2119399556);
		y.toString();
		y.toString();
		y.isFull();
		assertEquals("[]", y.toString());
		y.enqueue(906152167);
		y.toString();
    }
    @Test
    public void test9782() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test9783() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(-1104448478);
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test9784() {
		Queue variable = new Queue();
		variable.enqueue(2018426777);
		assertFalse(variable.isFull());
		variable.enqueue(-486955577);
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test9785() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		assertEquals("[]", z.toString());
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(1933514057);
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test9786() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-1358879976);
		Var.isFull();
		Var.toString();
		Var.enqueue(225339702);
		assertFalse(Var.isFull());
		Var.enqueue(373376576);
		Var.toString();
    }
    @Test
    public void test9787() {
		Queue y = new Queue();
		y.enqueue(1467123401);
		y.isFull();
		y.enqueue(-341839845);
		y.enqueue(1698723209);
		y.enqueue(864837050);
		assertFalse(y.isFull());
		y.isEmpty();
		y.enqueue(-2023184474);
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test9788() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.enqueue(-1022881859);
		z.isEmpty();
		z.enqueue(-1981632829);
		z.enqueue(-2059136120);
		assertEquals("[]", z.toString());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(1686409941);
		z.isFull();
    }
    @Test
    public void test9789() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(1975748781);
		Var.dequeue();
		Var.enqueue(154666573);
    }
    @Test
    public void test9790() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.enqueue(-873780076);
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(-1586021520);
		Var.dequeue();
		Var.enqueue(1570819673);
		assertEquals("[1570819673]", Var.toString());
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test9791() {
		Queue y = new Queue();
		y.enqueue(718749668);
		y.toString();
		y.toString();
		y.toString();
		y.isFull();
		y.isFull();
		y.dequeue();
		y.enqueue(-1293076407);
		y.enqueue(-1770033866);
		y.isFull();
    }
    @Test
    public void test9792() {
		Queue z = new Queue();
		z.enqueue(-686188321);
		assertEquals("[]", z.toString());
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test9793() {
		Queue x = new Queue();
		x.enqueue(250687648);
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.isEmpty();
		x.isFull();
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test9794() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.dequeue();
		y.toString();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test9795() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.enqueue(-1549938015);
    }
    @Test
    public void test9796() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.toString();
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		y.enqueue(-541075537);
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test9797() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.enqueue(-251906010);
		x.dequeue();
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(309725110);
		x.dequeue();
		x.dequeue();
		x.enqueue(-164763104);
    }
    @Test
    public void test9798() {
		Queue Var = new Queue();
		Var.enqueue(-1167986489);
		Var.isEmpty();
    }
    @Test
    public void test9799() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(257005229);
		z.isFull();
		assertFalse(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test9800() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.isFull();
		assertFalse(z.isFull());
		z.toString();
		z.dequeue();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(1128620455);
		assertFalse(z.isFull());
		assertEquals(1128620455, z.dequeue());
		assertEquals("[]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test9801() {
		Queue z = new Queue();
		z.enqueue(-193341817);
		z.isFull();
		z.enqueue(-1005987240);
		z.isFull();
		assertEquals("[]", z.toString());
		z.toString();
		z.toString();
		z.enqueue(1239341610);
    }
    @Test
    public void test9802() {
		Queue Var = new Queue();
		Var.enqueue(-1674586208);
		Var.enqueue(1648296186);
		Var.isEmpty();
    }
    @Test
    public void test9803() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test9804() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(-1297038080);
		y.toString();
		y.enqueue(-1679041752);
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test9805() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-1657162090);
		z.isEmpty();
		z.enqueue(1338293890);
		assertFalse(z.isEmpty());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.toString();
		z.dequeue();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.enqueue(1715919459);
    }
    @Test
    public void test9806() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(1277889904);
    }
    @Test
    public void test9807() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.isEmpty();
		x.dequeue();
		x.enqueue(-1693625857);
		x.enqueue(1696906437);
    }
    @Test
    public void test9808() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.dequeue();
		z.isFull();
		z.isFull();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isEmpty();
		z.enqueue(-989286091);
		z.toString();
    }
    @Test
    public void test9809() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.isFull();
		variable.enqueue(-97737368);
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test9810() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isFull();
		z.toString();
		z.isEmpty();
		z.isFull();
		z.isEmpty();
		z.enqueue(714654568);
    }
    @Test
    public void test9811() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-786293292);
		Var.enqueue(-1823493155);
		Var.enqueue(421126912);
		Var.isFull();
		Var.enqueue(-420934543);
		assertFalse(Var.isEmpty());
		Var.enqueue(1390100431);
		Var.isEmpty();
    }
    @Test
    public void test9812() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.isEmpty();
		z.dequeue();
		assertFalse(z.isFull());
		z.toString();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test9813() {
		Queue y = new Queue();
		y.enqueue(-1310693173);
		y.enqueue(1264396242);
		y.isEmpty();
    }
    @Test
    public void test9814() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test9815() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(1278093696);
    }
    @Test
    public void test9816() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-1669346306);
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.toString();
		z.dequeue();
		z.toString();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test9817() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(1394707486);
		variable.enqueue(-1026633860);
    }
    @Test
    public void test9818() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test9819() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test9820() {
		Queue variable = new Queue();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(-1600000203);
		variable.isFull();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.enqueue(-1806383701);
		variable.enqueue(855804431);
		variable.dequeue();
    }
    @Test
    public void test9821() {
		Queue variable = new Queue();
		variable.enqueue(-1506898787);
    }
    @Test
    public void test9822() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.enqueue(600539162);
		x.toString();
		x.toString();
    }
    @Test
    public void test9823() {
		Queue x = new Queue();
		x.toString();
		x.toString();
    }
    @Test
    public void test9824() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.toString();
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test9825() {
		Queue Var = new Queue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-728565657);
		assertEquals(-1, Var.dequeue());
		Var.enqueue(453684756);
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-308100381);
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(820342614);
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertEquals("[820342614]", Var.toString());
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test9826() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.toString();
    }
    @Test
    public void test9827() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.isFull();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test9828() {
		Queue x = new Queue();
		x.dequeue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.enqueue(705942527);
    }
    @Test
    public void test9829() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-1444167536);
		z.dequeue();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test9830() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(-1265295796);
		y.isFull();
		y.isFull();
		y.enqueue(1594217309);
		y.isFull();
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test9831() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.enqueue(1150532607);
		z.isEmpty();
		z.toString();
		z.isEmpty();
		z.isEmpty();
		z.isFull();
		z.enqueue(-18546124);
    }
    @Test
    public void test9832() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test9833() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.enqueue(-595557691);
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(1083795881);
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test9834() {
		Queue Var = new Queue();
		Var.enqueue(-522885851);
		Var.isFull();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1864378824);
		assertFalse(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test9835() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(1218071213);
		assertFalse(x.isEmpty());
		x.enqueue(1581551348);
		x.dequeue();
		x.enqueue(1894891256);
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.enqueue(1664735757);
		x.isFull();
		assertEquals("[1581551348, 1894891256, 1664735757]", x.toString());
		x.isFull();
		assertEquals(1581551348, x.dequeue());
		x.enqueue(1377837449);
    }
    @Test
    public void test9836() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test9837() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test9838() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(1704757148);
		variable.enqueue(-893213177);
		assertEquals("[1704757148]", variable.toString());
		variable.toString();
    }
    @Test
    public void test9839() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test9840() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(27251729);
		x.isEmpty();
		x.dequeue();
		x.enqueue(62159750);
    }
    @Test
    public void test9841() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.enqueue(125391944);
    }
    @Test
    public void test9842() {
		Queue y = new Queue();
		y.enqueue(-1025162060);
		y.enqueue(-1210925313);
		y.dequeue();
		assertEquals("[]", y.toString());
		y.toString();
		assertTrue(y.isEmpty());
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.enqueue(1182658374);
    }
    @Test
    public void test9843() {
		Queue variable = new Queue();
		variable.enqueue(78813805);
		assertEquals("[78813805]", variable.toString());
		variable.enqueue(-1170040120);
		variable.isFull();
		variable.isFull();
		assertEquals(78813805, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test9844() {
		Queue Var = new Queue();
		Var.enqueue(1925492452);
		Var.toString();
		Var.enqueue(-990944847);
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test9845() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(-958344886);
		assertFalse(x.isFull());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(-752998372);
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.enqueue(-1761502380);
		assertEquals("[]", x.toString());
		x.dequeue();
		x.dequeue();
		x.enqueue(1800759788);
    }
    @Test
    public void test9846() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		z.toString();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test9847() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isEmpty();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.toString();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.enqueue(-1649176121);
		y.dequeue();
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test9848() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(-102090102);
		y.toString();
    }
    @Test
    public void test9849() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.isFull();
		z.enqueue(1940451087);
		z.toString();
		z.dequeue();
		z.toString();
		z.toString();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test9850() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.isFull();
		variable.toString();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(-435455801);
    }
    @Test
    public void test9851() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1475117006);
		assertEquals(1475117006, x.dequeue());
		assertEquals("[]", x.toString());
		x.enqueue(-566276929);
		x.dequeue();
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test9852() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test9853() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-1121645355);
		Var.enqueue(-1614872619);
    }
    @Test
    public void test9854() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
    }
    @Test
    public void test9855() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.isFull();
		x.toString();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test9856() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(1595740001);
		variable.enqueue(-966529401);
    }
    @Test
    public void test9857() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test9858() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test9859() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(810072295);
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.dequeue();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test9860() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test9861() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.enqueue(-1660715514);
		y.dequeue();
		y.isFull();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test9862() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test9863() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(591790305);
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test9864() {
		Queue y = new Queue();
		y.enqueue(846451394);
		y.isFull();
		y.enqueue(1507358237);
		assertFalse(y.isFull());
		y.toString();
		y.dequeue();
		assertFalse(y.isEmpty());
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test9865() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test9866() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(807617327);
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test9867() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(-1792866850);
		x.isFull();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test9868() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(1633770028);
		Var.enqueue(674353386);
		Var.toString();
		Var.enqueue(-1968260010);
		Var.enqueue(-2099176824);
    }
    @Test
    public void test9869() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.enqueue(-811883120);
		y.isEmpty();
		assertFalse(y.isFull());
		y.isFull();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test9870() {
		Queue Var = new Queue();
		Var.enqueue(1392659071);
		assertFalse(Var.isEmpty());
		Var.isEmpty();
		assertEquals(1392659071, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1944793515);
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test9871() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.toString();
		y.isFull();
		y.enqueue(1989056961);
		y.enqueue(1571137099);
    }
    @Test
    public void test9872() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.enqueue(-1899955544);
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test9873() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.enqueue(-1035691777);
		assertEquals("[]", y.toString());
		y.enqueue(-746167997);
		y.toString();
    }
    @Test
    public void test9874() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.enqueue(-1140772155);
		assertEquals("[]", Var.toString());
		Var.enqueue(-1434743761);
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.enqueue(-971922080);
		Var.enqueue(276988887);
    }
    @Test
    public void test9875() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test9876() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.toString();
		z.enqueue(1411608414);
		z.enqueue(-625100265);
		z.enqueue(745257143);
		z.isEmpty();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test9877() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.enqueue(-1954524226);
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test9878() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.enqueue(200868212);
		Var.enqueue(1048400747);
		Var.toString();
		Var.toString();
    }
    @Test
    public void test9879() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.enqueue(-763539473);
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test9880() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.isFull();
		z.enqueue(1186348321);
		assertFalse(z.isEmpty());
		assertEquals("[1186348321]", z.toString());
		z.isFull();
    }
    @Test
    public void test9881() {
		Queue x = new Queue();
		x.enqueue(-2129930531);
		x.enqueue(-1907165810);
		x.toString();
		x.isFull();
		x.isFull();
		x.isFull();
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(901257793);
    }
    @Test
    public void test9882() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(532449321);
    }
    @Test
    public void test9883() {
		Queue Var = new Queue();
		Var.enqueue(-661021117);
		Var.isFull();
		Var.enqueue(-849418213);
		Var.enqueue(1397533930);
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isFull();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test9884() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.enqueue(-817456123);
		Var.dequeue();
		Var.enqueue(267955917);
		assertEquals(267955917, Var.dequeue());
		Var.enqueue(881164694);
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-270420770);
		Var.toString();
		Var.toString();
    }
    @Test
    public void test9885() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		x.isFull();
		assertEquals("[]", x.toString());
		x.isFull();
		x.toString();
    }
    @Test
    public void test9886() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(248646830);
		y.isEmpty();
		y.enqueue(-1196990450);
		y.dequeue();
		y.dequeue();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test9887() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-413169561);
		y.enqueue(-818726731);
		assertEquals("[]", y.toString());
		y.isFull();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test9888() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test9889() {
		Queue x = new Queue();
		x.enqueue(1213768575);
		x.isEmpty();
		x.toString();
		x.isEmpty();
		assertFalse(x.isFull());
		assertEquals(1213768575, x.dequeue());
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isFull();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(33303270);
		x.isFull();
    }
    @Test
    public void test9890() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.toString();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.enqueue(-869336356);
		y.isEmpty();
		y.enqueue(1930923437);
		y.isFull();
		y.enqueue(1284074046);
    }
    @Test
    public void test9891() {
		Queue y = new Queue();
		y.enqueue(-107502100);
		y.enqueue(-2118159000);
    }
    @Test
    public void test9892() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.toString();
    }
    @Test
    public void test9893() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.enqueue(-1468872990);
		Var.dequeue();
		Var.toString();
		Var.enqueue(1962567082);
		assertEquals(1962567082, Var.dequeue());
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test9894() {
		Queue variable = new Queue();
		variable.enqueue(-1971752069);
		variable.enqueue(890003939);
		variable.enqueue(1147576791);
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test9895() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(1373525475);
		assertFalse(y.isEmpty());
		y.enqueue(-2051477837);
		y.isEmpty();
    }
    @Test
    public void test9896() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-262805087);
    }
    @Test
    public void test9897() {
		Queue y = new Queue();
		y.enqueue(1500577599);
		y.toString();
		y.isFull();
		y.isEmpty();
		y.enqueue(-772111314);
		assertEquals(1500577599, y.dequeue());
		y.toString();
    }
    @Test
    public void test9898() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-1070448603);
		assertFalse(variable.isFull());
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-620192345);
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test9899() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		z.enqueue(371413493);
		z.enqueue(17101725);
		z.isEmpty();
		z.isEmpty();
		z.toString();
		z.isFull();
    }
    @Test
    public void test9900() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test9901() {
		Queue x = new Queue();
		x.enqueue(-673213409);
		x.isFull();
		x.toString();
		x.isEmpty();
		x.isFull();
		x.enqueue(-645188207);
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(-331872856);
		x.enqueue(586175641);
		x.enqueue(467721083);
    }
    @Test
    public void test9902() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test9903() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test9904() {
		Queue x = new Queue();
		x.isFull();
		assertFalse(x.isFull());
		x.isFull();
		x.isFull();
		x.toString();
		x.isFull();
		assertFalse(x.isFull());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.dequeue();
		assertFalse(x.isFull());
		x.isFull();
		x.toString();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.enqueue(-93033747);
    }
    @Test
    public void test9905() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		z.enqueue(-250337983);
		z.enqueue(-1108717097);
		z.toString();
    }
    @Test
    public void test9906() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(-1590387223);
    }
    @Test
    public void test9907() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test9908() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.isEmpty();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.toString();
		assertTrue(y.isEmpty());
		y.toString();
		y.enqueue(-909552304);
		y.isFull();
    }
    @Test
    public void test9909() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(693687028);
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(-1001324573);
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test9910() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test9911() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-1040149340);
    }
    @Test
    public void test9912() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(-2087870563);
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.dequeue();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.enqueue(394379646);
		x.enqueue(962848294);
    }
    @Test
    public void test9913() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.toString();
		y.isFull();
		y.enqueue(680988503);
		y.isFull();
		assertFalse(y.isEmpty());
		y.enqueue(1682541987);
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test9914() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test9915() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.enqueue(1201854043);
		z.enqueue(1000235684);
		z.enqueue(1715739347);
		z.enqueue(-397774847);
		assertFalse(z.isFull());
		z.toString();
		z.enqueue(-1263490786);
		z.isFull();
		assertEquals(1201854043, z.dequeue());
		z.toString();
    }
    @Test
    public void test9916() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test9917() {
		Queue x = new Queue();
		x.enqueue(-640073649);
    }
    @Test
    public void test9918() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test9919() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(-145456010);
		z.isFull();
    }
    @Test
    public void test9920() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test9921() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.enqueue(1420086247);
    }
    @Test
    public void test9922() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test9923() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(-1087568430);
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test9924() {
		Queue y = new Queue();
		y.enqueue(-1176882951);
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.toString();
		y.isEmpty();
		y.dequeue();
		y.isFull();
		y.toString();
		y.dequeue();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test9925() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		x.enqueue(671338566);
		x.isFull();
		x.enqueue(-1817393753);
    }
    @Test
    public void test9926() {
		Queue z = new Queue();
		z.enqueue(-147111358);
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertFalse(z.isFull());
		z.dequeue();
		z.toString();
		z.isEmpty();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test9927() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test9928() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-598883361);
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(1733436202);
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test9929() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test9930() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(221434378);
		Var.enqueue(-400187072);
		Var.enqueue(-299083296);
		Var.toString();
    }
    @Test
    public void test9931() {
		Queue z = new Queue();
		z.isFull();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.enqueue(-1528904003);
		z.toString();
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-1763892252);
		z.toString();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.toString();
    }
    @Test
    public void test9932() {
		Queue x = new Queue();
		x.enqueue(444082485);
		assertFalse(x.isEmpty());
		assertEquals(444082485, x.dequeue());
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test9933() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.dequeue();
		x.isFull();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.enqueue(118442672);
		x.dequeue();
		x.isFull();
		x.toString();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test9934() {
		Queue x = new Queue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.toString();
		x.toString();
		x.enqueue(-521679834);
		assertEquals("[]", x.toString());
		x.toString();
		x.enqueue(758887882);
		x.toString();
		x.enqueue(1335967600);
    }
    @Test
    public void test9935() {
		Queue Var = new Queue();
		Var.enqueue(-221344644);
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test9936() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.toString();
		x.dequeue();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test9937() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(-665056637);
		assertFalse(z.isFull());
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test9938() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.isFull();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1516087264);
		y.isEmpty();
    }
    @Test
    public void test9939() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-2053641274);
		y.enqueue(-1110725548);
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(1282595054);
		y.enqueue(1316675075);
		y.dequeue();
		assertFalse(y.isEmpty());
		y.enqueue(-1867672697);
		y.isFull();
    }
    @Test
    public void test9940() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(1830262395);
		assertFalse(x.isFull());
		x.isEmpty();
		x.dequeue();
		x.enqueue(145618373);
		assertFalse(x.isFull());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test9941() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.isFull();
		z.toString();
    }
    @Test
    public void test9942() {
		Queue y = new Queue();
		y.enqueue(814365101);
		y.isEmpty();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.toString();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test9943() {
		Queue y = new Queue();
		y.enqueue(833059832);
		y.toString();
    }
    @Test
    public void test9944() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(-1510004922);
		assertTrue(y.isEmpty());
		y.isFull();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.enqueue(-681734278);
		assertEquals("[]", y.toString());
		y.isFull();
		y.enqueue(723603460);
    }
    @Test
    public void test9945() {
		Queue Var = new Queue();
		Var.enqueue(752287659);
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.enqueue(-1264404467);
    }
    @Test
    public void test9946() {
		Queue z = new Queue();
		z.toString();
		z.toString();
    }
    @Test
    public void test9947() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test9948() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(-1970181748);
		x.isEmpty();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test9949() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test9950() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test9951() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test9952() {
		Queue y = new Queue();
		y.enqueue(1791597239);
		y.isFull();
		assertEquals(1791597239, y.dequeue());
		y.enqueue(1557164787);
		assertEquals(1557164787, y.dequeue());
		y.toString();
		y.isEmpty();
		y.isFull();
		y.enqueue(17720951);
    }
    @Test
    public void test9953() {
		Queue y = new Queue();
		y.enqueue(-1219224889);
		y.isFull();
		y.isFull();
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.toString();
    }
    @Test
    public void test9954() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test9955() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.enqueue(-592595373);
		x.enqueue(1619771633);
		x.toString();
		x.isEmpty();
		x.enqueue(815639835);
    }
    @Test
    public void test9956() {
		Queue z = new Queue();
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isFull();
		z.enqueue(718477490);
		z.enqueue(-1097441684);
		z.isFull();
    }
    @Test
    public void test9957() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
		y.enqueue(-437910315);
		y.enqueue(1430566244);
		y.isFull();
		y.enqueue(-937941917);
		y.toString();
    }
    @Test
    public void test9958() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.toString();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.dequeue();
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test9959() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test9960() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(1018556664);
		z.dequeue();
    }
    @Test
    public void test9961() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test9962() {
		Queue y = new Queue();
		y.enqueue(910893765);
		y.toString();
		y.toString();
    }
    @Test
    public void test9963() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
		variable.isFull();
		variable.toString();
		variable.toString();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1325038243);
		assertFalse(variable.isFull());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test9964() {
		Queue Var = new Queue();
		Var.enqueue(340571042);
		Var.toString();
		assertEquals(340571042, Var.dequeue());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test9965() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-301556829);
		assertEquals(-1, x.dequeue());
		x.enqueue(-2125526172);
		x.enqueue(-325272733);
		x.toString();
		x.toString();
		x.isEmpty();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test9966() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1917999224);
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.dequeue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test9967() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.enqueue(-1400421415);
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test9968() {
		Queue y = new Queue();
		y.enqueue(-220057678);
		y.isEmpty();
		y.enqueue(22505151);
		y.isFull();
		y.toString();
		assertFalse(y.isEmpty());
		assertFalse(y.isFull());
		assertEquals("[22505151]", y.toString());
		y.dequeue();
    }
    @Test
    public void test9969() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test9970() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(637672604);
		assertFalse(Var.isEmpty());
		Var.enqueue(628323289);
		assertEquals("[637672604, 628323289]", Var.toString());
		Var.enqueue(1771256156);
		Var.isFull();
		assertEquals(637672604, Var.dequeue());
		Var.enqueue(-639581239);
		Var.isEmpty();
		assertEquals("[628323289, 1771256156]", Var.toString());
		assertEquals("[628323289, 1771256156]", Var.toString());
		assertEquals(628323289, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test9971() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(1167797084);
		variable.enqueue(-426170168);
		variable.toString();
		assertEquals(1167797084, variable.dequeue());
		variable.enqueue(821249957);
		assertFalse(variable.isFull());
		variable.dequeue();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.enqueue(-1069026454);
    }
    @Test
    public void test9972() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-525219429);
		z.dequeue();
		z.isFull();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test9973() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test9974() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.enqueue(-272250435);
		Var.enqueue(-1938802820);
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(-524763799);
		assertEquals(-1, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test9975() {
		Queue x = new Queue();
		x.enqueue(103679129);
		x.toString();
		x.enqueue(-2103229033);
		x.isFull();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test9976() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(-150003217);
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test9977() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.enqueue(-47177463);
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-1707088126);
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1589318193);
		variable.dequeue();
    }
    @Test
    public void test9978() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.toString();
    }
    @Test
    public void test9979() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.enqueue(833684976);
    }
    @Test
    public void test9980() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isFull();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test9981() {
		Queue x = new Queue();
		x.isFull();
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
		x.isFull();
		x.enqueue(1743604629);
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.toString();
		x.dequeue();
		x.dequeue();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test9982() {
		Queue y = new Queue();
		y.enqueue(370658835);
		y.dequeue();
		y.dequeue();
		y.enqueue(563100721);
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test9983() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.dequeue();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.toString();
		z.dequeue();
    }
    @Test
    public void test9984() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.enqueue(-674813112);
		Var.isEmpty();
		Var.enqueue(-2003988464);
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-271403219);
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test9985() {
		Queue z = new Queue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.enqueue(622927741);
		z.isEmpty();
		z.enqueue(-1080271756);
		assertFalse(z.isFull());
		z.isFull();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test9986() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.enqueue(-831643527);
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test9987() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-2075177343);
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test9988() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.enqueue(1911796512);
		assertEquals("[1911796512]", x.toString());
		assertEquals(1911796512, x.dequeue());
		x.toString();
		x.isFull();
		x.enqueue(-1847070355);
		x.isEmpty();
    }
    @Test
    public void test9989() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test9990() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-240150621);
    }
    @Test
    public void test9991() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isFull();
		y.enqueue(1140176181);
		y.isEmpty();
		assertFalse(y.isEmpty());
		y.enqueue(352772512);
		y.dequeue();
		y.enqueue(1764286726);
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test9992() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.enqueue(1898141992);
		x.toString();
		assertFalse(x.isEmpty());
		x.toString();
		assertEquals("[1898141992]", x.toString());
		x.isFull();
    }
    @Test
    public void test9993() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(887299190);
		variable.isFull();
		assertEquals(887299190, variable.dequeue());
		variable.enqueue(-1202595769);
    }
    @Test
    public void test9994() {
		Queue variable = new Queue();
		variable.enqueue(1044049798);
		variable.isFull();
    }
    @Test
    public void test9995() {
		Queue x = new Queue();
		x.enqueue(173231755);
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.toString();
		x.enqueue(1335493689);
		x.dequeue();
    }
    @Test
    public void test9996() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1040512908);
		Var.toString();
		Var.toString();
		assertEquals("[1040512908]", Var.toString());
		assertEquals("[1040512908]", Var.toString());
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test9997() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test9998() {
		Queue Var = new Queue();
		Var.enqueue(-256682267);
    }
    @Test
    public void test9999() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.toString();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test10000() {
		Queue variable = new Queue();
		variable.enqueue(-523973182);
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test10001() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test10002() {
		Queue x = new Queue();
		x.enqueue(1373609209);
    }
    @Test
    public void test10003() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(272405419);
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-190435663);
    }
    @Test
    public void test10004() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(415151685);
		y.isFull();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(-1092001038);
		y.isEmpty();
		y.enqueue(1758373888);
		y.toString();
		y.isFull();
    }
    @Test
    public void test10005() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test10006() {
		Queue x = new Queue();
		x.enqueue(-2026895772);
		x.toString();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test10007() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(-1001883949);
		x.enqueue(1867943565);
		x.isEmpty();
		assertEquals(1867943565, x.dequeue());
		x.dequeue();
		assertFalse(x.isFull());
		x.dequeue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test10008() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-1633178237);
		Var.enqueue(-1563305536);
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test10009() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test10010() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(191588013);
		assertFalse(x.isFull());
		x.isEmpty();
		x.enqueue(-726934263);
		x.isEmpty();
		assertFalse(x.isEmpty());
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test10011() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(1178281235);
    }
    @Test
    public void test10012() {
		Queue y = new Queue();
		y.enqueue(-636588707);
    }
    @Test
    public void test10013() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.toString();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(1581776654);
    }
    @Test
    public void test10014() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.enqueue(-1716883173);
		z.toString();
		z.toString();
		z.dequeue();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test10015() {
		Queue x = new Queue();
		x.isFull();
		assertFalse(x.isFull());
		x.isEmpty();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
		x.toString();
		x.dequeue();
		x.isFull();
		x.toString();
    }
    @Test
    public void test10016() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(1103472458);
		Var.isFull();
		assertEquals(1103472458, Var.dequeue());
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test10017() {
		Queue Var = new Queue();
		Var.enqueue(1022029673);
		Var.enqueue(1628604283);
		Var.dequeue();
		assertFalse(Var.isFull());
		assertFalse(Var.isEmpty());
		Var.toString();
		assertEquals(1628604283, Var.dequeue());
		Var.toString();
		Var.enqueue(-1843390330);
		Var.enqueue(1909109410);
		Var.toString();
		Var.enqueue(-1916291077);
		Var.enqueue(1864744676);
    }
    @Test
    public void test10018() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.enqueue(-485112511);
		Var.enqueue(785235665);
		assertEquals("[785235665]", Var.toString());
		Var.toString();
    }
    @Test
    public void test10019() {
		Queue y = new Queue();
		y.toString();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.enqueue(1065193045);
		y.isFull();
		assertFalse(y.isEmpty());
		assertFalse(y.isEmpty());
		assertFalse(y.isEmpty());
		y.dequeue();
		y.dequeue();
		y.enqueue(-932802944);
		y.dequeue();
    }
    @Test
    public void test10020() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.toString();
		x.enqueue(-244371213);
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test10021() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.dequeue();
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test10022() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test10023() {
		Queue z = new Queue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.dequeue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(956999744);
    }
    @Test
    public void test10024() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test10025() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.isFull();
		x.isFull();
		x.enqueue(641340028);
    }
    @Test
    public void test10026() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.enqueue(-1506816144);
		assertEquals(-1, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test10027() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(196515342);
		assertFalse(variable.isEmpty());
		variable.isFull();
		variable.toString();
		variable.enqueue(-725749260);
		variable.isFull();
    }
    @Test
    public void test10028() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.enqueue(83909176);
		Var.isFull();
		Var.toString();
		Var.enqueue(-34292946);
		Var.isFull();
		Var.isEmpty();
		assertEquals("[83909176]", Var.toString());
		assertEquals("[83909176]", Var.toString());
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(-903417661);
    }
    @Test
    public void test10029() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test10030() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(-2000122235);
    }
    @Test
    public void test10031() {
		Queue Var = new Queue();
		Var.enqueue(-1757167654);
		Var.dequeue();
    }
    @Test
    public void test10032() {
		Queue x = new Queue();
		x.enqueue(2142349020);
		assertEquals("[2142349020]", x.toString());
		x.enqueue(-1674674579);
		x.isFull();
    }
    @Test
    public void test10033() {
		Queue z = new Queue();
		z.enqueue(-817581751);
		z.enqueue(-1269005750);
		z.dequeue();
		z.enqueue(1047451733);
		assertEquals(1047451733, z.dequeue());
		z.toString();
		z.toString();
		z.isFull();
    }
    @Test
    public void test10034() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test10035() {
		Queue z = new Queue();
		z.enqueue(-722368972);
		z.enqueue(-1202482342);
		z.toString();
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(1572693764);
		z.dequeue();
		assertFalse(z.isFull());
		z.isFull();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isFull();
    }
    @Test
    public void test10036() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(1915147384);
		y.isEmpty();
		y.enqueue(-483894716);
		y.enqueue(553374201);
    }
    @Test
    public void test10037() {
		Queue Var = new Queue();
		Var.enqueue(-1578844827);
		Var.enqueue(1646003706);
		assertFalse(Var.isEmpty());
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(276012846);
    }
    @Test
    public void test10038() {
		Queue Var = new Queue();
		Var.enqueue(1737291430);
		Var.enqueue(-1053701215);
    }
    @Test
    public void test10039() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(-200508541);
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.enqueue(-841069649);
    }
    @Test
    public void test10040() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.enqueue(-941804071);
		variable.toString();
		variable.enqueue(-2116596376);
		variable.isEmpty();
    }
    @Test
    public void test10041() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.dequeue();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.toString();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test10042() {
		Queue z = new Queue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isFull();
		z.enqueue(318945417);
		z.enqueue(-2097192274);
		assertFalse(z.isFull());
		z.enqueue(-1668114358);
    }
    @Test
    public void test10043() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test10044() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(-625659984);
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test10045() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(-3205989);
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.dequeue();
    }
    @Test
    public void test10046() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1245343466);
		Var.isFull();
		Var.enqueue(881522691);
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(-156507250);
		assertTrue(Var.isEmpty());
		Var.enqueue(-1029933908);
    }
    @Test
    public void test10047() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test10048() {
		Queue y = new Queue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(-119701027);
		y.isFull();
		y.isFull();
    }
    @Test
    public void test10049() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(1405493125);
		assertFalse(x.isEmpty());
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
		x.enqueue(1892662143);
		x.isEmpty();
		x.toString();
		x.toString();
		x.enqueue(395105843);
		x.enqueue(1967959591);
    }
    @Test
    public void test10050() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.enqueue(-953393178);
		x.isEmpty();
    }
    @Test
    public void test10051() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1901262554);
		variable.toString();
    }
    @Test
    public void test10052() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.dequeue();
		x.enqueue(-1848696012);
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(1218425287);
		x.dequeue();
    }
    @Test
    public void test10053() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.enqueue(-1566447555);
		z.toString();
		assertEquals(-1, z.dequeue());
		z.toString();
		assertFalse(z.isFull());
		z.toString();
		z.isFull();
		z.enqueue(1503576281);
		z.enqueue(-51055471);
		z.dequeue();
    }
    @Test
    public void test10054() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(1429290532);
		assertFalse(y.isEmpty());
		y.enqueue(900544965);
		y.isEmpty();
		y.dequeue();
		y.isFull();
		assertEquals("[900544965]", y.toString());
		y.isEmpty();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.isFull();
    }
    @Test
    public void test10055() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.enqueue(-301887297);
		Var.toString();
		Var.isFull();
		Var.enqueue(-373977827);
    }
    @Test
    public void test10056() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test10057() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(-910393651);
		variable.enqueue(-1731139405);
    }
    @Test
    public void test10058() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(-1648605681);
		Var.enqueue(-1100182795);
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-567831403);
    }
    @Test
    public void test10059() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(744638398);
		assertFalse(Var.isEmpty());
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.enqueue(-2075276752);
		Var.enqueue(409378121);
		Var.toString();
		Var.isEmpty();
		Var.enqueue(1064582975);
    }
    @Test
    public void test10060() {
		Queue z = new Queue();
		z.enqueue(-1299994002);
		z.dequeue();
    }
    @Test
    public void test10061() {
		Queue x = new Queue();
		x.toString();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.enqueue(-1677040145);
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test10062() {
		Queue y = new Queue();
		y.enqueue(2019487877);
		y.isFull();
		y.enqueue(147609844);
		y.dequeue();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test10063() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test10064() {
		Queue z = new Queue();
		z.enqueue(804414653);
    }
    @Test
    public void test10065() {
		Queue x = new Queue();
		x.isFull();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.enqueue(1072082077);
		assertFalse(x.isEmpty());
		x.enqueue(1702436243);
		x.enqueue(497668153);
    }
    @Test
    public void test10066() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test10067() {
		Queue x = new Queue();
		x.enqueue(-1148817800);
		x.isEmpty();
		x.dequeue();
		x.enqueue(907167786);
		x.enqueue(1996057787);
		x.isFull();
		x.toString();
    }
    @Test
    public void test10068() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(-139153813);
    }
    @Test
    public void test10069() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.dequeue();
		y.enqueue(1614988851);
		y.isEmpty();
		y.isEmpty();
		assertFalse(y.isEmpty());
		y.isEmpty();
		assertEquals("[1614988851]", y.toString());
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test10070() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(-844933498);
		variable.enqueue(-1059749924);
		variable.enqueue(1437008965);
    }
    @Test
    public void test10071() {
		Queue Var = new Queue();
		Var.enqueue(-1085687593);
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		Var.isFull();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isFull();
		Var.enqueue(1815689979);
    }
    @Test
    public void test10072() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		z.enqueue(-498876217);
		z.dequeue();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test10073() {
		Queue Var = new Queue();
		Var.enqueue(-831592672);
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(1586312841);
    }
    @Test
    public void test10074() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.toString();
		x.toString();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(693752966);
		x.isEmpty();
		assertEquals(693752966, x.dequeue());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(55364030);
    }
    @Test
    public void test10075() {
		Queue x = new Queue();
		x.enqueue(-1952915416);
		x.enqueue(1909187973);
		x.toString();
		assertFalse(x.isEmpty());
		x.toString();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test10076() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test10077() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test10078() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(1721384414);
		assertEquals(1721384414, z.dequeue());
		z.enqueue(1397272791);
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(-769425364);
		z.isFull();
		z.toString();
		z.enqueue(227230831);
    }
    @Test
    public void test10079() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(1961810683);
		Var.enqueue(149122700);
		Var.dequeue();
		Var.enqueue(-731816888);
		Var.isFull();
		Var.isFull();
		Var.isFull();
		assertEquals("[149122700]", Var.toString());
		Var.enqueue(580750297);
    }
    @Test
    public void test10080() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-302805343);
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.enqueue(1050780337);
		variable.enqueue(-1888061240);
		variable.isEmpty();
    }
    @Test
    public void test10081() {
		Queue x = new Queue();
		x.toString();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test10082() {
		Queue x = new Queue();
		x.enqueue(197114769);
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test10083() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(1667731780);
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isFull();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isFull();
    }
    @Test
    public void test10084() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.enqueue(-144548926);
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isFull();
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
		assertFalse(y.isFull());
		y.toString();
		assertTrue(y.isEmpty());
		y.enqueue(-1351144171);
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.enqueue(876784006);
    }
    @Test
    public void test10085() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(1264289555);
		y.isEmpty();
		y.isFull();
		assertEquals(1264289555, y.dequeue());
		y.enqueue(1649125415);
		y.isEmpty();
    }
    @Test
    public void test10086() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test10087() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(377748440);
		Var.toString();
    }
    @Test
    public void test10088() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test10089() {
		Queue variable = new Queue();
		variable.enqueue(1241223075);
    }
    @Test
    public void test10090() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isFull();
		z.enqueue(-1954828321);
		z.dequeue();
		z.isFull();
		z.enqueue(-984225059);
		assertEquals("[]", z.toString());
		z.toString();
		z.isFull();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test10091() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.isEmpty();
		y.enqueue(-2080145601);
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(1576033204);
		y.isEmpty();
    }
    @Test
    public void test10092() {
		Queue y = new Queue();
		y.enqueue(-370787558);
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.dequeue();
		y.enqueue(1343402213);
		y.toString();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.toString();
		y.toString();
    }
    @Test
    public void test10093() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		Var.enqueue(-1425830767);
		assertTrue(Var.isEmpty());
		Var.enqueue(-251230180);
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test10094() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test10095() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-1896496575);
		assertEquals(-1, x.dequeue());
		x.toString();
		x.dequeue();
		x.toString();
		x.enqueue(1760597759);
		x.enqueue(-640943093);
    }
    @Test
    public void test10096() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test10097() {
		Queue variable = new Queue();
		variable.enqueue(1829196510);
		variable.dequeue();
    }
    @Test
    public void test10098() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(886834722);
		assertEquals(886834722, z.dequeue());
		z.dequeue();
		z.isEmpty();
		z.isFull();
		z.enqueue(1392497859);
    }
    @Test
    public void test10099() {
		Queue y = new Queue();
		y.enqueue(1794294573);
		y.isEmpty();
    }
    @Test
    public void test10100() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-1382267401);
		y.toString();
    }
    @Test
    public void test10101() {
		Queue z = new Queue();
		z.enqueue(554025849);
		assertFalse(z.isFull());
		assertEquals("[554025849]", z.toString());
		z.isFull();
		assertFalse(z.isEmpty());
		z.enqueue(994911599);
    }
    @Test
    public void test10102() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
		x.isEmpty();
		assertFalse(x.isFull());
		x.toString();
		assertFalse(x.isFull());
		x.isFull();
    }
    @Test
    public void test10103() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test10104() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.enqueue(948535019);
		x.isEmpty();
		x.isFull();
		x.enqueue(-853287229);
    }
    @Test
    public void test10105() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(-500117154);
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
		Var.enqueue(-1715620996);
    }
    @Test
    public void test10106() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test10107() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test10108() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(-479882707);
		z.isEmpty();
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(-173152758);
		z.isEmpty();
		z.isFull();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.enqueue(-1676051959);
		z.enqueue(-1516784309);
		assertTrue(z.isEmpty());
		z.isFull();
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test10109() {
		Queue variable = new Queue();
		variable.enqueue(1411314340);
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(3077623);
    }
    @Test
    public void test10110() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(1303210);
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.isFull();
		x.enqueue(-1091127446);
    }
    @Test
    public void test10111() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.toString();
		x.isFull();
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(355629953);
		x.dequeue();
		x.toString();
    }
    @Test
    public void test10112() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(1800909210);
		y.isEmpty();
		y.enqueue(586222994);
		y.dequeue();
		y.isFull();
		assertFalse(y.isEmpty());
		assertFalse(y.isEmpty());
		y.toString();
		y.enqueue(101530125);
    }
    @Test
    public void test10113() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.enqueue(1839932813);
		Var.isFull();
		assertEquals(1839932813, Var.dequeue());
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test10114() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		z.isFull();
		z.isEmpty();
		z.toString();
		assertEquals("[]", z.toString());
		z.dequeue();
    }
    @Test
    public void test10115() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.toString();
    }
    @Test
    public void test10116() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(-1754654390);
    }
    @Test
    public void test10117() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.toString();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test10118() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test10119() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(1840905752);
		variable.enqueue(1778714557);
		assertEquals(1840905752, variable.dequeue());
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test10120() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.enqueue(-1330205721);
		y.dequeue();
    }
    @Test
    public void test10121() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isFull();
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(114395504);
		x.toString();
		assertFalse(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test10122() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(-1906179421);
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.enqueue(-624615171);
		y.dequeue();
		y.isEmpty();
		y.enqueue(1691805025);
    }
    @Test
    public void test10123() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-1239037670);
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test10124() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test10125() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(1941160337);
		y.dequeue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1052207923);
    }
    @Test
    public void test10126() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test10127() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(1589303147);
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test10128() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(-235123378);
    }
    @Test
    public void test10129() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(1610365403);
		variable.enqueue(361636488);
		variable.toString();
    }
    @Test
    public void test10130() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test10131() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test10132() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test10133() {
		Queue x = new Queue();
		x.enqueue(-1457213073);
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.enqueue(1008789167);
		x.isFull();
		x.enqueue(-556469996);
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test10134() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(-164108912);
		Var.toString();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test10135() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		variable.enqueue(-548873486);
		variable.enqueue(-32370281);
		assertFalse(variable.isFull());
		variable.enqueue(1121708612);
		assertEquals(1121708612, variable.dequeue());
		variable.toString();
		variable.enqueue(-237379054);
    }
    @Test
    public void test10136() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(1223324463);
		y.isEmpty();
		assertFalse(y.isFull());
		assertFalse(y.isEmpty());
		y.enqueue(659112338);
		y.isEmpty();
		y.enqueue(881809826);
		y.dequeue();
		y.enqueue(2033718418);
		y.toString();
    }
    @Test
    public void test10137() {
		Queue z = new Queue();
		z.enqueue(-1504672064);
		z.dequeue();
		z.enqueue(236813759);
		z.isEmpty();
    }
    @Test
    public void test10138() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.toString();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test10139() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(-374965669);
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test10140() {
		Queue Var = new Queue();
		Var.enqueue(-1353136248);
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test10141() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.dequeue();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test10142() {
		Queue y = new Queue();
		y.enqueue(-2088121739);
		y.toString();
		y.toString();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.dequeue();
    }
    @Test
    public void test10143() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1780421249);
		Var.enqueue(-284988238);
		Var.isEmpty();
		Var.enqueue(-569030447);
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.enqueue(106699940);
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test10144() {
		Queue z = new Queue();
		z.enqueue(-622179252);
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(280892252);
    }
    @Test
    public void test10145() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(704279472);
		variable.toString();
		variable.enqueue(52723233);
		variable.isFull();
		assertFalse(variable.isEmpty());
		variable.enqueue(1951684742);
    }
    @Test
    public void test10146() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isFull();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.enqueue(-2087077357);
    }
    @Test
    public void test10147() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test10148() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.enqueue(690859731);
		y.isFull();
		assertEquals(690859731, y.dequeue());
		y.isEmpty();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.isEmpty();
		y.enqueue(1550899867);
		y.dequeue();
    }
    @Test
    public void test10149() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.toString();
		variable.toString();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test10150() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.dequeue();
		y.toString();
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.isEmpty();
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test10151() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.isFull();
		y.dequeue();
		y.toString();
		y.isFull();
    }
    @Test
    public void test10152() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.toString();
		y.isFull();
		y.toString();
    }
    @Test
    public void test10153() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.isFull();
		y.isFull();
		y.enqueue(1557675312);
		y.isEmpty();
		assertEquals(1557675312, y.dequeue());
		y.enqueue(1374059783);
		assertFalse(y.isFull());
		assertEquals("[1374059783]", y.toString());
		assertEquals(1374059783, y.dequeue());
		assertFalse(y.isFull());
		y.isFull();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.dequeue();
    }
    @Test
    public void test10154() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(-1015510141);
		z.isFull();
		z.isEmpty();
		z.enqueue(696288806);
    }
    @Test
    public void test10155() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test10156() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.enqueue(-649838232);
		y.isEmpty();
    }
    @Test
    public void test10157() {
		Queue Var = new Queue();
		Var.enqueue(697865979);
		Var.dequeue();
    }
    @Test
    public void test10158() {
		Queue z = new Queue();
		z.enqueue(56054929);
		z.isEmpty();
		z.enqueue(-303946525);
    }
    @Test
    public void test10159() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test10160() {
		Queue y = new Queue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.enqueue(-327896120);
		y.isEmpty();
		y.dequeue();
		y.isFull();
		y.isFull();
		y.enqueue(1882324730);
    }
    @Test
    public void test10161() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.toString();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(273702998);
		assertEquals(273702998, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test10162() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1238053316);
		Var.dequeue();
		Var.enqueue(-2139764906);
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test10163() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.toString();
		assertTrue(z.isEmpty());
		z.isFull();
		z.dequeue();
		z.isEmpty();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.enqueue(-432421485);
		z.enqueue(1791681597);
    }
    @Test
    public void test10164() {
		Queue x = new Queue();
		x.enqueue(-191639999);
    }
    @Test
    public void test10165() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(1801901085);
		variable.toString();
		assertFalse(variable.isEmpty());
		variable.isFull();
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test10166() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.enqueue(920510884);
		assertEquals("[920510884]", y.toString());
		assertFalse(y.isEmpty());
		assertFalse(y.isEmpty());
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.dequeue();
		y.toString();
		y.isFull();
    }
    @Test
    public void test10167() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test10168() {
		Queue x = new Queue();
		x.enqueue(-1674499230);
		x.dequeue();
		x.toString();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.dequeue();
		x.toString();
		x.isFull();
		x.isEmpty();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test10169() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(1218482434);
		assertFalse(variable.isEmpty());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test10170() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
		y.toString();
		y.isFull();
		assertFalse(y.isFull());
		y.dequeue();
		y.isEmpty();
		y.enqueue(-257799589);
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(1158699954);
    }
    @Test
    public void test10171() {
		Queue z = new Queue();
		z.enqueue(-785612193);
    }
    @Test
    public void test10172() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.enqueue(-686420135);
		variable.isEmpty();
		variable.toString();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test10173() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test10174() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test10175() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test10176() {
		Queue x = new Queue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(-1420394191);
		x.enqueue(446194771);
    }
    @Test
    public void test10177() {
		Queue x = new Queue();
		x.enqueue(818813739);
		assertEquals(818813739, x.dequeue());
		assertFalse(x.isFull());
		x.enqueue(918099982);
		x.toString();
		x.toString();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-1230455171);
		x.dequeue();
    }
    @Test
    public void test10178() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.isFull();
		z.isEmpty();
		z.toString();
		z.isFull();
		z.enqueue(1586820276);
		z.dequeue();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test10179() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-1916745884);
		z.isFull();
		z.enqueue(1322433021);
		z.dequeue();
		z.enqueue(-172048741);
		z.toString();
		z.toString();
    }
    @Test
    public void test10180() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(-888211119);
		z.isFull();
		z.enqueue(1927409065);
		z.isFull();
    }
    @Test
    public void test10181() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test10182() {
		Queue Var = new Queue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test10183() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.enqueue(-1050781235);
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.toString();
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test10184() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
		Var.isFull();
		Var.enqueue(-1741561692);
		assertTrue(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test10185() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.enqueue(703343266);
		assertEquals("[703343266]", Var.toString());
		assertEquals(703343266, Var.dequeue());
		Var.enqueue(-582733858);
		assertTrue(Var.isEmpty());
		Var.enqueue(-120366378);
		Var.toString();
		Var.dequeue();
		Var.enqueue(403775668);
    }
    @Test
    public void test10186() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(1852362131);
		y.isFull();
		assertFalse(y.isEmpty());
		y.isEmpty();
		y.enqueue(271617525);
		y.enqueue(-595611839);
    }
    @Test
    public void test10187() {
		Queue y = new Queue();
		y.enqueue(-816286975);
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.toString();
		y.toString();
    }
    @Test
    public void test10188() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.toString();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.enqueue(733959633);
		assertEquals("[733959633]", x.toString());
		x.toString();
		x.isFull();
    }
    @Test
    public void test10189() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.isFull();
		y.dequeue();
		y.toString();
		y.toString();
		y.isFull();
    }
    @Test
    public void test10190() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(1590230346);
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-611111601);
    }
    @Test
    public void test10191() {
		Queue y = new Queue();
		y.enqueue(810323543);
		y.isEmpty();
		y.enqueue(2093865135);
		y.dequeue();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test10192() {
		Queue y = new Queue();
		y.enqueue(1859776997);
		y.isEmpty();
		assertFalse(y.isEmpty());
		y.enqueue(-882512954);
		y.enqueue(-1837019119);
		y.toString();
    }
    @Test
    public void test10193() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(1218291178);
    }
    @Test
    public void test10194() {
		Queue y = new Queue();
		y.enqueue(-1467275771);
		y.enqueue(815792024);
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.dequeue();
		y.toString();
		y.enqueue(416671735);
		y.isFull();
		assertFalse(y.isEmpty());
		y.toString();
    }
    @Test
    public void test10195() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(-1654628851);
		variable.toString();
		variable.enqueue(992680379);
		variable.isEmpty();
    }
    @Test
    public void test10196() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.enqueue(970658287);
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test10197() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(1343530667);
		variable.enqueue(-1128810925);
		variable.isEmpty();
		variable.enqueue(1800471273);
		variable.toString();
    }
    @Test
    public void test10198() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.isFull();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test10199() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		assertFalse(x.isFull());
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(-558712449);
		x.isEmpty();
		x.enqueue(1757560893);
		x.isFull();
		assertEquals("[1757560893]", x.toString());
		x.enqueue(-586080409);
		x.isEmpty();
    }
    @Test
    public void test10200() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test10201() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.enqueue(-441671871);
		variable.dequeue();
		variable.enqueue(2075983715);
    }
    @Test
    public void test10202() {
		Queue y = new Queue();
		y.isFull();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.enqueue(-2127035966);
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isFull();
		assertEquals("[]", y.toString());
		y.isFull();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test10203() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-1854299383);
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.enqueue(1746058765);
    }
    @Test
    public void test10204() {
		Queue variable = new Queue();
		variable.isFull();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-119445912);
		variable.isEmpty();
    }
    @Test
    public void test10205() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(81697332);
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test10206() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(2103025652);
		z.isEmpty();
		z.enqueue(1939787715);
		z.isFull();
		z.enqueue(-1509910693);
    }
    @Test
    public void test10207() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(-704368844);
		x.enqueue(1209298631);
		x.toString();
		x.toString();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test10208() {
		Queue y = new Queue();
		y.enqueue(-600015739);
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.dequeue();
		y.isFull();
		y.enqueue(-478730522);
		y.toString();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test10209() {
		Queue z = new Queue();
		z.enqueue(1552835695);
		z.isEmpty();
		z.enqueue(1693669484);
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-128633708);
		z.dequeue();
    }
    @Test
    public void test10210() {
		Queue x = new Queue();
		x.enqueue(432678750);
		x.dequeue();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test10211() {
		Queue z = new Queue();
		z.enqueue(-378483867);
		z.toString();
		z.dequeue();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertFalse(z.isFull());
		z.isEmpty();
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(-391582664);
    }
    @Test
    public void test10212() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.enqueue(190048645);
		Var.isEmpty();
    }
    @Test
    public void test10213() {
		Queue variable = new Queue();
		variable.enqueue(124891831);
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertEquals(124891831, variable.dequeue());
		variable.enqueue(1092032280);
		variable.isEmpty();
		variable.enqueue(569656984);
		assertEquals("[1092032280, 569656984]", variable.toString());
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test10214() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test10215() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
		y.enqueue(-1586100730);
		assertEquals("[]", y.toString());
		y.isFull();
    }
    @Test
    public void test10216() {
		Queue x = new Queue();
		x.enqueue(-1099873186);
		x.isFull();
		x.enqueue(-1087951302);
		x.isEmpty();
    }
    @Test
    public void test10217() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-2143945319);
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.toString();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
    }
    @Test
    public void test10218() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test10219() {
		Queue y = new Queue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test10220() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(2066881883);
		assertEquals("[2066881883]", z.toString());
		assertFalse(z.isFull());
		z.dequeue();
		z.isFull();
		z.toString();
    }
    @Test
    public void test10221() {
		Queue variable = new Queue();
		variable.enqueue(-837724925);
		variable.toString();
		variable.dequeue();
		variable.enqueue(-2031163936);
    }
    @Test
    public void test10222() {
		Queue x = new Queue();
		x.enqueue(-1970243283);
		x.dequeue();
    }
    @Test
    public void test10223() {
		Queue z = new Queue();
		z.enqueue(1908925885);
    }
    @Test
    public void test10224() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-118006558);
		x.isFull();
		x.toString();
		x.dequeue();
		x.enqueue(-1334231123);
		x.toString();
		x.toString();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test10225() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.enqueue(1366306767);
    }
    @Test
    public void test10226() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(1088818285);
		Var.toString();
		Var.enqueue(-868795536);
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(999055459);
		Var.toString();
    }
    @Test
    public void test10227() {
		Queue z = new Queue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.toString();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.enqueue(1807025024);
		z.isFull();
		z.isFull();
		assertEquals("[1807025024]", z.toString());
		z.enqueue(-1196324799);
    }
    @Test
    public void test10228() {
		Queue x = new Queue();
		x.toString();
		assertEquals("[]", x.toString());
		x.toString();
		x.enqueue(1722074642);
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
		assertEquals("[1722074642]", x.toString());
		assertFalse(x.isEmpty());
		assertFalse(x.isFull());
		x.enqueue(140087530);
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test10229() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.enqueue(344232899);
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test10230() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.toString();
		assertTrue(x.isEmpty());
		x.dequeue();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.enqueue(-1287532702);
    }
    @Test
    public void test10231() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test10232() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(17881722);
		assertEquals(17881722, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test10233() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
		z.enqueue(1067414736);
		z.isFull();
		z.toString();
    }
    @Test
    public void test10234() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.enqueue(435098014);
		assertEquals("[435098014]", z.toString());
		z.toString();
		z.toString();
		assertEquals("[435098014]", z.toString());
		z.enqueue(2083163971);
		z.toString();
		assertFalse(z.isEmpty());
		z.dequeue();
		z.isFull();
		z.enqueue(-1826984206);
    }
    @Test
    public void test10235() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test10236() {
		Queue y = new Queue();
		y.enqueue(1779433834);
		y.isFull();
    }
    @Test
    public void test10237() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test10238() {
		Queue y = new Queue();
		y.enqueue(-1219496150);
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(-596301582);
		y.dequeue();
		y.enqueue(-805821404);
		y.toString();
		assertTrue(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test10239() {
		Queue x = new Queue();
		x.enqueue(-1527700321);
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(-2049635010);
    }
    @Test
    public void test10240() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.enqueue(-992867372);
		y.enqueue(-928984696);
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(220594578);
		y.isFull();
		y.enqueue(505817734);
		y.enqueue(-1765378940);
    }
    @Test
    public void test10241() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.enqueue(1534834766);
    }
    @Test
    public void test10242() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-1665881999);
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(1965047927);
		assertFalse(Var.isFull());
		Var.toString();
		assertEquals("[1965047927]", Var.toString());
		assertEquals("[1965047927]", Var.toString());
		assertEquals("[1965047927]", Var.toString());
		assertFalse(Var.isEmpty());
		Var.isFull();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test10243() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.dequeue();
		z.dequeue();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test10244() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.enqueue(1054320544);
		y.toString();
		y.dequeue();
    }
    @Test
    public void test10245() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1394159978);
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(1663275531);
    }
    @Test
    public void test10246() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.dequeue();
		Var.enqueue(2876188);
    }
    @Test
    public void test10247() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.enqueue(-1345081454);
    }
    @Test
    public void test10248() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.dequeue();
		z.toString();
		z.isEmpty();
		z.isFull();
		z.isEmpty();
		z.toString();
		z.enqueue(1684264831);
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test10249() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.enqueue(1176913897);
		variable.toString();
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test10250() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test10251() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(897342006);
		assertEquals("[897342006]", Var.toString());
		Var.isFull();
		Var.enqueue(1179313566);
		Var.isEmpty();
		Var.enqueue(-351852624);
		assertFalse(Var.isFull());
		Var.enqueue(-1473436327);
    }
    @Test
    public void test10252() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.enqueue(417588610);
		assertFalse(x.isEmpty());
		x.isEmpty();
		x.isFull();
		x.toString();
    }
    @Test
    public void test10253() {
		Queue variable = new Queue();
		variable.enqueue(1476313254);
		variable.isEmpty();
    }
    @Test
    public void test10254() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(1768079334);
		variable.enqueue(77451747);
    }
    @Test
    public void test10255() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(1213588686);
		z.isFull();
		z.dequeue();
		z.enqueue(1960168127);
		z.isFull();
		assertFalse(z.isEmpty());
		z.dequeue();
		z.dequeue();
		z.isFull();
		z.enqueue(-2110214789);
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test10256() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test10257() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-378668429);
		Var.dequeue();
		Var.isFull();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test10258() {
		Queue Var = new Queue();
		Var.enqueue(1082136916);
		Var.toString();
		assertEquals(1082136916, Var.dequeue());
		Var.toString();
		Var.enqueue(-1588265798);
		Var.dequeue();
    }
    @Test
    public void test10259() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(-944536059);
		x.dequeue();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test10260() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test10261() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test10262() {
		Queue y = new Queue();
		y.enqueue(2126897517);
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		assertEquals("[2126897517]", y.toString());
		assertFalse(y.isFull());
		assertEquals("[2126897517]", y.toString());
		y.toString();
		assertEquals(2126897517, y.dequeue());
		y.enqueue(1452262931);
		y.enqueue(-1427234892);
		assertEquals("[1452262931]", y.toString());
		assertEquals(1452262931, y.dequeue());
		assertEquals("[]", y.toString());
		y.isFull();
    }
    @Test
    public void test10263() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test10264() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(1545651011);
		z.isEmpty();
    }
    @Test
    public void test10265() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(-694422016);
		x.enqueue(1815215378);
    }
    @Test
    public void test10266() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(-1683986392);
		Var.isFull();
		Var.enqueue(-686168557);
		Var.isFull();
		Var.toString();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1811893796);
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test10267() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.toString();
		z.enqueue(2062408803);
		z.toString();
    }
    @Test
    public void test10268() {
		Queue z = new Queue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(-30260166);
		z.toString();
		z.toString();
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(-1603443235);
    }
    @Test
    public void test10269() {
		Queue x = new Queue();
		x.enqueue(1037793521);
		x.enqueue(-1816190397);
		x.isFull();
		assertEquals(1037793521, x.dequeue());
		x.enqueue(222030246);
		x.toString();
		x.isFull();
		x.enqueue(745457286);
		x.dequeue();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test10270() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1423818887);
		assertEquals("[1423818887]", variable.toString());
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(952814644);
    }
    @Test
    public void test10271() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-1359932703);
		y.enqueue(-1994314389);
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test10272() {
		Queue Var = new Queue();
		Var.enqueue(-1866901778);
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test10273() {
		Queue y = new Queue();
		y.enqueue(-462486830);
    }
    @Test
    public void test10274() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1236692962);
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test10275() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.isFull();
		assertTrue(z.isEmpty());
		z.toString();
		z.dequeue();
		z.enqueue(348181865);
    }
    @Test
    public void test10276() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.enqueue(1187008060);
		z.isFull();
		z.toString();
		z.toString();
		z.isFull();
		z.isFull();
		assertEquals("[1187008060]", z.toString());
		z.isFull();
    }
    @Test
    public void test10277() {
		Queue variable = new Queue();
		variable.enqueue(-2043001329);
		variable.enqueue(175053521);
		variable.toString();
		variable.enqueue(212276865);
		variable.enqueue(-1055642467);
		variable.enqueue(1366281149);
		variable.toString();
		variable.enqueue(-2127315843);
		variable.isFull();
    }
    @Test
    public void test10278() {
		Queue variable = new Queue();
		variable.enqueue(-1659034686);
		variable.dequeue();
    }
    @Test
    public void test10279() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.toString();
		x.enqueue(1134170890);
    }
    @Test
    public void test10280() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
    }
    @Test
    public void test10281() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(2085806980);
		assertEquals("[2085806980]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test10282() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test10283() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test10284() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(-1043837643);
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test10285() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(1259814990);
		Var.isFull();
		Var.enqueue(-1158246932);
		assertEquals("[1259814990]", Var.toString());
		Var.enqueue(143272150);
    }
    @Test
    public void test10286() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(1470167720);
		assertEquals(1470167720, variable.dequeue());
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test10287() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(522881619);
		y.enqueue(-25874243);
		assertEquals(522881619, y.dequeue());
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test10288() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-264375118);
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test10289() {
		Queue Var = new Queue();
		Var.enqueue(1763731951);
		Var.dequeue();
		Var.enqueue(-848292306);
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.isFull();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test10290() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(-362937978);
		z.isEmpty();
    }
    @Test
    public void test10291() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-1927593600);
		assertEquals("[]", variable.toString());
		variable.enqueue(-2031743727);
    }
    @Test
    public void test10292() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.enqueue(-1250129133);
		z.enqueue(-1476178925);
		z.toString();
		z.isFull();
		z.isFull();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test10293() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(797775784);
		assertFalse(Var.isFull());
		assertEquals("[797775784]", Var.toString());
		Var.isFull();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.enqueue(-1699645924);
		assertFalse(Var.isEmpty());
		assertEquals(797775784, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test10294() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.enqueue(273231382);
		y.dequeue();
    }
    @Test
    public void test10295() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.toString();
		Var.isFull();
		Var.toString();
		Var.enqueue(-1402222382);
    }
    @Test
    public void test10296() {
		Queue x = new Queue();
		x.enqueue(155699061);
		x.isFull();
		x.toString();
		assertEquals(155699061, x.dequeue());
		x.toString();
    }
    @Test
    public void test10297() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(64895586);
		Var.isFull();
    }
    @Test
    public void test10298() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isFull();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.enqueue(-190425939);
    }
    @Test
    public void test10299() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-1746534583);
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test10300() {
		Queue variable = new Queue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test10301() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.enqueue(-1506565177);
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(313904470);
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test10302() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(1448592948);
		assertEquals("[1448592948]", Var.toString());
		Var.enqueue(1913090094);
		Var.isFull();
		assertFalse(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test10303() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.isFull();
		x.isFull();
		x.isFull();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.enqueue(998151656);
    }
    @Test
    public void test10304() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(594724066);
		variable.isEmpty();
		variable.enqueue(1116925650);
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
		variable.enqueue(468432858);
		variable.dequeue();
    }
    @Test
    public void test10305() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-871282949);
    }
    @Test
    public void test10306() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.enqueue(778720338);
    }
    @Test
    public void test10307() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.toString();
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.enqueue(1587301619);
		x.isEmpty();
		x.enqueue(-759343028);
    }
    @Test
    public void test10308() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1128069088);
		Var.isEmpty();
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		assertFalse(Var.isEmpty());
		Var.enqueue(-141981436);
		assertEquals(1128069088, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(527534037);
		assertFalse(Var.isEmpty());
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.enqueue(-1118240917);
    }
    @Test
    public void test10309() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-671097546);
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
		variable.enqueue(1187000741);
		assertEquals(1187000741, variable.dequeue());
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.toString();
    }
    @Test
    public void test10310() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test10311() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-700984887);
		z.isEmpty();
		z.isEmpty();
		z.enqueue(1564403372);
		assertFalse(z.isEmpty());
		z.isEmpty();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test10312() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.enqueue(-1627928578);
		Var.toString();
    }
    @Test
    public void test10313() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test10314() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isFull();
		x.toString();
    }
    @Test
    public void test10315() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test10316() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(1651390305);
		x.enqueue(1980440653);
		x.toString();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test10317() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.enqueue(-580813778);
		assertEquals("[]", z.toString());
		z.enqueue(2020762549);
    }
    @Test
    public void test10318() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(-2129084551);
    }
    @Test
    public void test10319() {
		Queue z = new Queue();
		z.enqueue(-1210682319);
		z.isFull();
		z.isEmpty();
		z.isFull();
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test10320() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-2006018060);
		variable.enqueue(907670362);
		variable.toString();
		variable.enqueue(1989508214);
		variable.isFull();
		assertEquals("[907670362, 1989508214]", variable.toString());
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.isFull();
		assertEquals("[907670362, 1989508214]", variable.toString());
		variable.enqueue(-2044569982);
    }
    @Test
    public void test10321() {
		Queue variable = new Queue();
		variable.enqueue(1767888332);
		variable.isFull();
    }
    @Test
    public void test10322() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.dequeue();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test10323() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test10324() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(1291490630);
    }
    @Test
    public void test10325() {
		Queue Var = new Queue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1373358051);
		Var.isFull();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1073578859);
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test10326() {
		Queue variable = new Queue();
		variable.enqueue(1633535453);
		variable.isFull();
		variable.enqueue(-390243349);
		variable.dequeue();
		variable.enqueue(-1646182436);
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test10327() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.dequeue();
		y.enqueue(-1144419325);
		y.dequeue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(-430896902);
		y.enqueue(-1416201752);
		y.isEmpty();
    }
    @Test
    public void test10328() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(1370598362);
		Var.toString();
    }
    @Test
    public void test10329() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(1043027093);
		assertFalse(z.isFull());
		z.enqueue(-854088634);
		z.enqueue(808674998);
		z.toString();
		z.toString();
		z.enqueue(-1007919668);
    }
    @Test
    public void test10330() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
    }
    @Test
    public void test10331() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.toString();
		variable.isFull();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-2100140056);
		variable.isFull();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test10332() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(2095050100);
		variable.toString();
		variable.enqueue(1819408882);
		assertFalse(variable.isFull());
		variable.enqueue(263046763);
    }
    @Test
    public void test10333() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-528260143);
		x.dequeue();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test10334() {
		Queue Var = new Queue();
		Var.enqueue(-1716259888);
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		Var.enqueue(1888288651);
		Var.isFull();
		Var.toString();
		Var.toString();
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test10335() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.enqueue(-656345893);
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(-1108284274);
		assertEquals("[]", x.toString());
		x.dequeue();
		x.toString();
    }
    @Test
    public void test10336() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test10337() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.enqueue(-311170974);
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(1115706267);
		variable.toString();
		variable.toString();
		assertFalse(variable.isEmpty());
		assertEquals("[1115706267]", variable.toString());
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test10338() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(922228547);
		Var.dequeue();
		Var.enqueue(793982818);
		Var.enqueue(-371638831);
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test10339() {
		Queue variable = new Queue();
		variable.enqueue(-176830879);
		variable.enqueue(1611028354);
    }
    @Test
    public void test10340() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-1931292053);
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-1340978072);
		variable.dequeue();
    }
    @Test
    public void test10341() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.enqueue(-1552342032);
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test10342() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test10343() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(278780844);
    }
    @Test
    public void test10344() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test10345() {
		Queue variable = new Queue();
		variable.enqueue(148610788);
		variable.toString();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test10346() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isEmpty();
		z.toString();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.toString();
		z.dequeue();
		z.isEmpty();
		z.enqueue(-1536529768);
    }
    @Test
    public void test10347() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.enqueue(2045416580);
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test10348() {
		Queue y = new Queue();
		y.enqueue(-913134628);
    }
    @Test
    public void test10349() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test10350() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test10351() {
		Queue x = new Queue();
		x.enqueue(1160501976);
		x.dequeue();
		x.isFull();
		x.toString();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test10352() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-494635463);
    }
    @Test
    public void test10353() {
		Queue variable = new Queue();
		variable.enqueue(-1432336457);
		variable.enqueue(1932507338);
		assertEquals("[1932507338]", variable.toString());
		variable.enqueue(-780578709);
		assertEquals("[1932507338]", variable.toString());
		variable.toString();
		variable.toString();
		variable.toString();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test10354() {
		Queue Var = new Queue();
		Var.enqueue(1342967105);
		Var.toString();
		Var.enqueue(1588904957);
		assertEquals("[1342967105, 1588904957]", Var.toString());
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test10355() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(1973067765);
		assertEquals("[1973067765]", y.toString());
		y.isEmpty();
		y.isFull();
		y.toString();
    }
    @Test
    public void test10356() {
		Queue x = new Queue();
		x.enqueue(1412532100);
		x.isFull();
		assertEquals("[1412532100]", x.toString());
		x.isFull();
		x.isEmpty();
		x.toString();
		assertFalse(x.isEmpty());
		x.enqueue(164782465);
		assertFalse(x.isEmpty());
		assertEquals("[1412532100, 164782465]", x.toString());
		x.enqueue(-1443153938);
		x.isFull();
    }
    @Test
    public void test10357() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		x.enqueue(913095333);
    }
    @Test
    public void test10358() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test10359() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(582442467);
		Var.enqueue(979584916);
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test10360() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(1543141984);
		y.dequeue();
    }
    @Test
    public void test10361() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
		y.enqueue(-706541530);
		y.dequeue();
		assertFalse(y.isFull());
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
		y.enqueue(1212516060);
		assertFalse(y.isEmpty());
		y.dequeue();
    }
    @Test
    public void test10362() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test10363() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test10364() {
		Queue x = new Queue();
		x.enqueue(-1820116844);
		x.isFull();
		x.isEmpty();
		assertFalse(x.isFull());
		x.dequeue();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test10365() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test10366() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.enqueue(-1171686516);
    }
    @Test
    public void test10367() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test10368() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.toString();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test10369() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test10370() {
		Queue y = new Queue();
		y.enqueue(1002388701);
		y.enqueue(68716760);
		y.dequeue();
		y.isFull();
		y.toString();
		y.isFull();
		assertEquals(68716760, y.dequeue());
		y.dequeue();
		y.isFull();
		y.enqueue(-1317531965);
    }
    @Test
    public void test10371() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-2093836412);
		x.isFull();
		x.enqueue(-1083937233);
		assertFalse(x.isFull());
		x.toString();
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test10372() {
		Queue z = new Queue();
		z.enqueue(-1803069783);
		z.enqueue(-526594474);
		z.dequeue();
		z.isFull();
		z.dequeue();
		z.enqueue(-145132536);
		assertFalse(z.isFull());
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isFull();
		z.toString();
		z.enqueue(1525911415);
    }
    @Test
    public void test10373() {
		Queue z = new Queue();
		z.enqueue(24578353);
		z.enqueue(-849304420);
    }
    @Test
    public void test10374() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(566129934);
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test10375() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-2000930334);
    }
    @Test
    public void test10376() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-117927609);
		variable.isFull();
		variable.enqueue(2140333372);
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test10377() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.dequeue();
		z.dequeue();
		z.enqueue(-318484609);
		z.dequeue();
		assertTrue(z.isEmpty());
		z.enqueue(433985426);
		z.isEmpty();
		assertFalse(z.isEmpty());
		assertEquals(433985426, z.dequeue());
		z.isFull();
    }
    @Test
    public void test10378() {
		Queue z = new Queue();
		z.enqueue(1316579994);
		z.isFull();
    }
    @Test
    public void test10379() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test10380() {
		Queue z = new Queue();
		z.toString();
		assertEquals("[]", z.toString());
		z.toString();
		z.dequeue();
		z.enqueue(1221539058);
		z.toString();
		z.enqueue(250902848);
		z.toString();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test10381() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-1945134867);
		Var.isEmpty();
    }
    @Test
    public void test10382() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.enqueue(-898415561);
    }
    @Test
    public void test10383() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(2125848921);
		assertEquals("[2125848921]", variable.toString());
		assertEquals("[2125848921]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test10384() {
		Queue Var = new Queue();
		Var.enqueue(674124935);
		Var.toString();
		Var.toString();
		Var.enqueue(2057310365);
		assertEquals(674124935, Var.dequeue());
		Var.enqueue(-197810613);
    }
    @Test
    public void test10385() {
		Queue y = new Queue();
		y.enqueue(26648629);
		assertEquals(26648629, y.dequeue());
		assertTrue(y.isEmpty());
		y.isFull();
		y.isFull();
		y.enqueue(1973617732);
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-242617520);
		y.toString();
		y.enqueue(-822404448);
		y.toString();
    }
    @Test
    public void test10386() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.dequeue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test10387() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.enqueue(-452284154);
		x.toString();
		x.enqueue(1315907804);
		assertFalse(x.isEmpty());
		assertEquals(1315907804, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.isFull();
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test10388() {
		Queue x = new Queue();
		x.enqueue(1778398102);
    }
    @Test
    public void test10389() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.enqueue(-125821027);
		variable.dequeue();
		variable.isFull();
		variable.enqueue(497563866);
		variable.isFull();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(-1534535385);
    }
    @Test
    public void test10390() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(1685449155);
    }
    @Test
    public void test10391() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test10392() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test10393() {
		Queue x = new Queue();
		x.enqueue(-663555043);
		x.enqueue(-1368624514);
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(-1671999801);
		x.toString();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.enqueue(30516348);
		x.isEmpty();
    }
    @Test
    public void test10394() {
		Queue z = new Queue();
		z.enqueue(-779454111);
    }
    @Test
    public void test10395() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.enqueue(-1905122893);
		y.enqueue(1980193093);
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		assertEquals(1980193093, y.dequeue());
		y.enqueue(-1127652116);
    }
    @Test
    public void test10396() {
		Queue z = new Queue();
		z.isFull();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test10397() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test10398() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(927803639);
		Var.enqueue(-1368476505);
		Var.enqueue(1020660825);
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.toString();
		Var.toString();
    }
    @Test
    public void test10399() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test10400() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		x.isFull();
		x.isFull();
		x.isFull();
		x.toString();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(1190480069);
		x.isFull();
    }
    @Test
    public void test10401() {
		Queue y = new Queue();
		y.enqueue(-1482486634);
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test10402() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.isEmpty();
		x.enqueue(-1960572818);
		x.isFull();
		x.enqueue(-511288357);
    }
    @Test
    public void test10403() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.enqueue(-585708171);
		assertEquals("[]", Var.toString());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1693144181);
		Var.dequeue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test10404() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-153167205);
    }
    @Test
    public void test10405() {
		Queue z = new Queue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.enqueue(151615793);
		z.toString();
		z.enqueue(325947717);
		z.toString();
		z.toString();
    }
    @Test
    public void test10406() {
		Queue y = new Queue();
		y.enqueue(-966597114);
    }
    @Test
    public void test10407() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(-1195163540);
		Var.isEmpty();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test10408() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.dequeue();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.toString();
		z.enqueue(-2003120214);
		z.isFull();
		z.isFull();
    }
    @Test
    public void test10409() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-2127012233);
		Var.dequeue();
		Var.dequeue();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test10410() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-1003410696);
		z.enqueue(-1694246828);
    }
    @Test
    public void test10411() {
		Queue variable = new Queue();
		variable.enqueue(490298260);
    }
    @Test
    public void test10412() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isFull();
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test10413() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.enqueue(-1142694830);
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test10414() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(-1696473615);
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test10415() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		z.toString();
		assertTrue(z.isEmpty());
		z.isFull();
		z.toString();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.enqueue(-2138270937);
		z.isFull();
		assertTrue(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test10416() {
		Queue variable = new Queue();
		variable.enqueue(-132036446);
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-1870367701);
		assertTrue(variable.isEmpty());
		variable.enqueue(107195354);
		assertEquals("[107195354]", variable.toString());
		variable.isFull();
		variable.enqueue(-395601184);
		variable.toString();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test10417() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(801873162);
		assertFalse(Var.isFull());
		assertEquals(801873162, Var.dequeue());
		Var.enqueue(-1932260680);
		Var.dequeue();
    }
    @Test
    public void test10418() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test10419() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.toString();
		z.isFull();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.dequeue();
		z.isFull();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.toString();
		z.isFull();
    }
    @Test
    public void test10420() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test10421() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1640112294);
		variable.isEmpty();
		variable.enqueue(704885075);
		variable.dequeue();
		variable.enqueue(1815389005);
		variable.toString();
		variable.toString();
    }
    @Test
    public void test10422() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.enqueue(-1185224750);
		variable.isFull();
		variable.toString();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test10423() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test10424() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.enqueue(-37196973);
		Var.dequeue();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test10425() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test10426() {
		Queue z = new Queue();
		z.toString();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.enqueue(-755695683);
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test10427() {
		Queue Var = new Queue();
		Var.enqueue(1281004336);
		Var.enqueue(158755986);
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(939855591);
		Var.toString();
		assertEquals("[1281004336, 158755986, 939855591]", Var.toString());
		Var.enqueue(-118715795);
    }
    @Test
    public void test10428() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test10429() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(-2125446078);
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		Var.enqueue(800383810);
    }
    @Test
    public void test10430() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test10431() {
		Queue variable = new Queue();
		variable.enqueue(349277694);
		variable.toString();
		variable.dequeue();
		variable.toString();
		variable.enqueue(-225377027);
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test10432() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.enqueue(-2145165569);
		Var.enqueue(-845592592);
		Var.dequeue();
		Var.enqueue(-421264717);
    }
    @Test
    public void test10433() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.enqueue(-932473678);
		Var.enqueue(-1594256827);
    }
    @Test
    public void test10434() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(1139604324);
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(648774329);
    }
    @Test
    public void test10435() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test10436() {
		Queue x = new Queue();
		x.enqueue(1657182301);
    }
    @Test
    public void test10437() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(748471144);
		assertEquals("[748471144]", x.toString());
		x.toString();
		x.isFull();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.toString();
		x.isFull();
    }
    @Test
    public void test10438() {
		Queue x = new Queue();
		x.enqueue(1384096205);
		x.toString();
		assertEquals("[1384096205]", x.toString());
		x.enqueue(-587963535);
		x.toString();
    }
    @Test
    public void test10439() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-405721296);
		z.dequeue();
    }
    @Test
    public void test10440() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.enqueue(173383794);
		assertEquals("[173383794]", y.toString());
		assertEquals("[173383794]", y.toString());
		y.toString();
		y.isEmpty();
		y.isFull();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test10441() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(1937726396);
		assertEquals(1937726396, z.dequeue());
		z.isEmpty();
		z.isEmpty();
		z.enqueue(1020820885);
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test10442() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.enqueue(-538307786);
		y.enqueue(455746162);
		assertEquals("[455746162]", y.toString());
		y.enqueue(-1272986364);
		assertEquals(455746162, y.dequeue());
		assertEquals("[]", y.toString());
		y.toString();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test10443() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.enqueue(-10632879);
		y.enqueue(-501090783);
		assertFalse(y.isFull());
		y.toString();
		y.dequeue();
		y.enqueue(1559211382);
    }
    @Test
    public void test10444() {
		Queue z = new Queue();
		z.enqueue(-1155269228);
		z.toString();
		z.toString();
    }
    @Test
    public void test10445() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test10446() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(1217116067);
    }
    @Test
    public void test10447() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.dequeue();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.toString();
		z.dequeue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test10448() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test10449() {
		Queue z = new Queue();
		z.enqueue(-703984659);
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1807633845);
		assertEquals("[]", z.toString());
		z.enqueue(494589797);
		z.enqueue(1290594320);
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test10450() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-556137575);
    }
    @Test
    public void test10451() {
		Queue variable = new Queue();
		variable.isFull();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test10452() {
		Queue variable = new Queue();
		variable.enqueue(-589714037);
    }
    @Test
    public void test10453() {
		Queue z = new Queue();
		z.enqueue(1012579257);
    }
    @Test
    public void test10454() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(732733896);
		x.isEmpty();
		assertEquals("[732733896]", x.toString());
		x.isEmpty();
		assertFalse(x.isFull());
		assertEquals("[732733896]", x.toString());
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test10455() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-1732263685);
    }
    @Test
    public void test10456() {
		Queue Var = new Queue();
		Var.enqueue(322610107);
		Var.toString();
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.enqueue(-756502163);
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test10457() {
		Queue variable = new Queue();
		variable.enqueue(1130392256);
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(-1792621291);
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.enqueue(193307837);
		variable.isEmpty();
    }
    @Test
    public void test10458() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(144774087);
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(1002081843);
		variable.toString();
		variable.toString();
    }
    @Test
    public void test10459() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.enqueue(-1581366574);
		x.enqueue(-278240591);
		x.isFull();
		x.toString();
    }
    @Test
    public void test10460() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(214704637);
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-598716271);
    }
    @Test
    public void test10461() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(104947532);
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(-329341736);
		Var.isEmpty();
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.enqueue(2076418945);
    }
    @Test
    public void test10462() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(695721327);
		assertEquals("[695721327]", variable.toString());
		variable.enqueue(-2122708285);
		assertFalse(variable.isEmpty());
		assertEquals("[695721327]", variable.toString());
		assertFalse(variable.isEmpty());
		variable.enqueue(-420072401);
		variable.toString();
    }
    @Test
    public void test10463() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test10464() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-176076456);
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test10465() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-496945674);
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isEmpty();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.isFull();
    }
    @Test
    public void test10466() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.dequeue();
		y.enqueue(-973650871);
		y.enqueue(-282436130);
    }
    @Test
    public void test10467() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test10468() {
		Queue z = new Queue();
		z.enqueue(615143332);
		z.enqueue(1236721445);
		assertFalse(z.isEmpty());
		assertFalse(z.isEmpty());
		z.toString();
		assertFalse(z.isEmpty());
		assertFalse(z.isEmpty());
		assertFalse(z.isEmpty());
		assertFalse(z.isEmpty());
		z.isEmpty();
		z.isFull();
		z.toString();
		z.isEmpty();
		z.toString();
		z.enqueue(-1009005511);
    }
    @Test
    public void test10469() {
		Queue z = new Queue();
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(1686342829);
		z.isFull();
		z.toString();
		z.toString();
		assertEquals(1686342829, z.dequeue());
		z.enqueue(-1533808593);
		assertEquals("[]", z.toString());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test10470() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		assertFalse(y.isFull());
		y.dequeue();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test10471() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test10472() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test10473() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-818079604);
		Var.enqueue(-717992445);
		Var.dequeue();
		Var.isFull();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.enqueue(-995943605);
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.enqueue(1716959401);
    }
    @Test
    public void test10474() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test10475() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(849580379);
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.enqueue(-905379930);
		assertEquals("[849580379]", Var.toString());
		Var.enqueue(2080948841);
		Var.toString();
    }
    @Test
    public void test10476() {
		Queue z = new Queue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1165920109);
		z.dequeue();
		z.dequeue();
		z.dequeue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.toString();
		z.dequeue();
		z.enqueue(1697666708);
    }
    @Test
    public void test10477() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.toString();
		y.isFull();
		y.enqueue(-136930580);
		y.toString();
		y.enqueue(522391560);
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test10478() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(1149287586);
		x.toString();
		x.dequeue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.enqueue(-1615040459);
    }
    @Test
    public void test10479() {
		Queue z = new Queue();
		z.enqueue(1977968626);
		z.isEmpty();
		z.toString();
		z.enqueue(2116436763);
		z.toString();
		z.isFull();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test10480() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test10481() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(1206824749);
		z.isFull();
		assertFalse(z.isFull());
		z.dequeue();
		z.enqueue(-532000284);
		assertFalse(z.isFull());
		z.toString();
		z.toString();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test10482() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.toString();
    }
    @Test
    public void test10483() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-1321926038);
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.dequeue();
		z.enqueue(-175304959);
		z.isFull();
		assertTrue(z.isEmpty());
		z.toString();
		assertTrue(z.isEmpty());
		z.isFull();
		assertTrue(z.isEmpty());
		z.enqueue(-132744509);
    }
    @Test
    public void test10484() {
		Queue x = new Queue();
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(1722892973);
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test10485() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(1576872920);
		x.enqueue(1912094969);
    }
    @Test
    public void test10486() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(253980551);
		assertFalse(x.isEmpty());
		x.toString();
		x.isEmpty();
		x.enqueue(1474566810);
		assertEquals(253980551, x.dequeue());
		assertEquals(1474566810, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test10487() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(-874604862);
		z.enqueue(-869406710);
		z.toString();
		z.toString();
		z.enqueue(-2017142978);
		z.dequeue();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test10488() {
		Queue variable = new Queue();
		variable.enqueue(-746515807);
		variable.isEmpty();
		variable.enqueue(2138136684);
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test10489() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isFull();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test10490() {
		Queue y = new Queue();
		y.enqueue(-1490892077);
		y.isFull();
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.toString();
    }
    @Test
    public void test10491() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test10492() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		x.enqueue(1548917458);
		x.dequeue();
		x.dequeue();
		x.toString();
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(-671727040);
		x.toString();
		x.toString();
		x.enqueue(-1382429157);
    }
    @Test
    public void test10493() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test10494() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.toString();
		z.dequeue();
		z.isFull();
		z.toString();
		z.enqueue(-1348362311);
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.isFull();
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(1487165995);
    }
    @Test
    public void test10495() {
		Queue y = new Queue();
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(737447991);
		y.isFull();
		y.isEmpty();
		y.toString();
		y.enqueue(1537922830);
    }
    @Test
    public void test10496() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.enqueue(1219070333);
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test10497() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-1349615020);
		y.isFull();
		y.enqueue(-673384797);
		y.enqueue(-1014876760);
		y.dequeue();
		y.enqueue(-1313302962);
		y.dequeue();
    }
    @Test
    public void test10498() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.dequeue();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(-2074336937);
    }
    @Test
    public void test10499() {
		Queue z = new Queue();
		z.enqueue(942557110);
		z.enqueue(788268533);
		assertFalse(z.isFull());
		z.isFull();
		assertEquals(942557110, z.dequeue());
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.toString();
		z.isFull();
		assertEquals("[788268533]", z.toString());
		z.enqueue(1732499885);
		assertFalse(z.isEmpty());
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test10500() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-185968530);
		variable.toString();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test10501() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test10502() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test10503() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.isFull();
		y.toString();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test10504() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test10505() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.toString();
		assertEquals("[]", x.toString());
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.isFull();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test10506() {
		Queue z = new Queue();
		z.enqueue(-1616424583);
		z.enqueue(-1178799775);
		z.isEmpty();
		z.toString();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(-209926628);
		z.enqueue(-1432139877);
		z.enqueue(-1495527008);
		z.isFull();
    }
    @Test
    public void test10507() {
		Queue Var = new Queue();
		Var.enqueue(-789297830);
		Var.toString();
		Var.isEmpty();
		Var.enqueue(-1123270819);
		Var.toString();
		Var.toString();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test10508() {
		Queue x = new Queue();
		x.enqueue(-1197941992);
		x.dequeue();
    }
    @Test
    public void test10509() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test10510() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(210476934);
		x.isEmpty();
		assertFalse(x.isEmpty());
		x.enqueue(-751620144);
		x.toString();
		assertEquals(210476934, x.dequeue());
		x.isFull();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test10511() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-1865095758);
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test10512() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test10513() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.toString();
		z.toString();
		z.enqueue(1840621511);
		z.enqueue(-369525727);
		z.isEmpty();
		z.isFull();
		z.isFull();
		z.enqueue(982226916);
    }
    @Test
    public void test10514() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-177594093);
		Var.enqueue(-2113553733);
		Var.enqueue(1850510455);
		assertFalse(Var.isEmpty());
		Var.isFull();
		Var.enqueue(-2024476451);
		assertEquals(1850510455, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.enqueue(-456397073);
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test10515() {
		Queue Var = new Queue();
		Var.enqueue(-1121276312);
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(567350695);
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test10516() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test10517() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-253598562);
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(1886031944);
		variable.isEmpty();
		variable.enqueue(-981737358);
		assertEquals("[1886031944]", variable.toString());
		variable.toString();
    }
    @Test
    public void test10518() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.toString();
		variable.enqueue(1005857651);
		variable.dequeue();
    }
    @Test
    public void test10519() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.toString();
		y.toString();
		y.toString();
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test10520() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.dequeue();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test10521() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.toString();
		x.toString();
		x.isFull();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test10522() {
		Queue variable = new Queue();
		variable.enqueue(1060607151);
		variable.enqueue(-1011866751);
		variable.enqueue(1547062262);
		assertEquals(1060607151, variable.dequeue());
		assertEquals("[1547062262]", variable.toString());
		variable.toString();
		assertFalse(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.enqueue(952626876);
		variable.dequeue();
    }
    @Test
    public void test10523() {
		Queue z = new Queue();
		z.enqueue(-281512199);
		z.enqueue(-1897055586);
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isFull();
		z.dequeue();
		z.enqueue(-998451972);
		z.dequeue();
    }
    @Test
    public void test10524() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(1620026487);
		Var.isFull();
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test10525() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(893842879);
    }
    @Test
    public void test10526() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test10527() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(-170006943);
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test10528() {
		Queue z = new Queue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(-370769844);
		z.toString();
		z.enqueue(-288957043);
		z.enqueue(105256772);
		z.toString();
		z.isFull();
		z.enqueue(757456108);
		z.dequeue();
    }
    @Test
    public void test10529() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test10530() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.dequeue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isFull();
		x.isFull();
		x.toString();
    }
    @Test
    public void test10531() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test10532() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(983440601);
		y.dequeue();
    }
    @Test
    public void test10533() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(-1049324765);
		variable.enqueue(799956870);
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test10534() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(2100977422);
		z.enqueue(1895443580);
		z.isFull();
		z.isFull();
    }
    @Test
    public void test10535() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.toString();
    }
    @Test
    public void test10536() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(1624372114);
		variable.dequeue();
		variable.toString();
		variable.toString();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test10537() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(-1133139367);
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test10538() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test10539() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(-513680726);
		Var.isFull();
    }
    @Test
    public void test10540() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.enqueue(948672621);
		variable.toString();
		assertFalse(variable.isEmpty());
		variable.toString();
		variable.enqueue(-1593894514);
		variable.enqueue(-378077324);
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test10541() {
		Queue x = new Queue();
		x.enqueue(513782452);
		x.enqueue(-47728708);
		x.isEmpty();
		assertFalse(x.isFull());
		assertFalse(x.isEmpty());
		x.enqueue(-1086512308);
		assertFalse(x.isFull());
		x.dequeue();
		x.enqueue(-587854643);
		x.isEmpty();
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(-1097535022);
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test10542() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-1471351600);
		Var.isFull();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.enqueue(1816937024);
		Var.dequeue();
    }
    @Test
    public void test10543() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.toString();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test10544() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(1789243198);
		assertEquals("[1789243198]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test10545() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test10546() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test10547() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test10548() {
		Queue y = new Queue();
		y.enqueue(-125639794);
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.enqueue(1254349778);
		y.isEmpty();
		y.enqueue(1470443189);
    }
    @Test
    public void test10549() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test10550() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		z.isFull();
		z.enqueue(304481224);
    }
    @Test
    public void test10551() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-1596407038);
    }
    @Test
    public void test10552() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-1899100185);
		variable.enqueue(-1518143095);
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(2021781385);
		variable.isEmpty();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test10553() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test10554() {
		Queue Var = new Queue();
		Var.enqueue(-946627548);
		Var.isEmpty();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.toString();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test10555() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(1491159607);
		variable.enqueue(-608151646);
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test10556() {
		Queue z = new Queue();
		z.enqueue(-1641789673);
		assertTrue(z.isEmpty());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test10557() {
		Queue x = new Queue();
		x.enqueue(1873358475);
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(601033843);
		x.dequeue();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test10558() {
		Queue x = new Queue();
		x.enqueue(1388983943);
		assertEquals(1388983943, x.dequeue());
		x.enqueue(-346692533);
    }
    @Test
    public void test10559() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
		y.enqueue(327945688);
    }
    @Test
    public void test10560() {
		Queue z = new Queue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.dequeue();
		z.enqueue(-1398946015);
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-368161754);
		assertFalse(z.isFull());
		z.dequeue();
		z.enqueue(292253383);
    }
    @Test
    public void test10561() {
		Queue y = new Queue();
		y.enqueue(1774629834);
    }
    @Test
    public void test10562() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isFull();
		assertTrue(y.isEmpty());
		y.enqueue(573339153);
		assertFalse(y.isFull());
		y.isEmpty();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test10563() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(903078917);
		Var.enqueue(1909655123);
		Var.dequeue();
    }
    @Test
    public void test10564() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(38647210);
		assertFalse(y.isFull());
		y.enqueue(-1334148762);
		y.dequeue();
		y.dequeue();
		y.enqueue(349041270);
		y.isFull();
		assertEquals(349041270, y.dequeue());
		y.isFull();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test10565() {
		Queue z = new Queue();
		z.enqueue(1562102409);
		z.isFull();
		assertEquals(1562102409, z.dequeue());
		z.enqueue(-147013985);
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test10566() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(1266458607);
		Var.toString();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test10567() {
		Queue x = new Queue();
		x.toString();
		assertEquals("[]", x.toString());
		x.isFull();
		x.toString();
    }
    @Test
    public void test10568() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.enqueue(1442949474);
		z.toString();
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test10569() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test10570() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.enqueue(-770059205);
		x.toString();
    }
    @Test
    public void test10571() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-1851605857);
		Var.enqueue(880457942);
		Var.enqueue(2021971919);
		Var.dequeue();
		Var.enqueue(-1178914288);
    }
    @Test
    public void test10572() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test10573() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(1980538311);
		y.isFull();
		y.dequeue();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test10574() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.enqueue(-665782165);
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test10575() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1909813010);
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test10576() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.toString();
    }
    @Test
    public void test10577() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(13650676);
		variable.dequeue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.enqueue(-940313403);
    }
    @Test
    public void test10578() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(-1035425332);
		variable.isFull();
    }
    @Test
    public void test10579() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(-1072681187);
    }
    @Test
    public void test10580() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test10581() {
		Queue variable = new Queue();
		variable.enqueue(-1225309319);
    }
    @Test
    public void test10582() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.toString();
		Var.enqueue(478137055);
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.toString();
    }
    @Test
    public void test10583() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.dequeue();
		y.enqueue(-1316128398);
		y.isFull();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test10584() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isFull();
		Var.enqueue(-1435797255);
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.enqueue(1922614750);
		Var.isEmpty();
		Var.enqueue(881395026);
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test10585() {
		Queue Var = new Queue();
		Var.enqueue(1499399817);
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.toString();
		Var.isEmpty();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test10586() {
		Queue x = new Queue();
		x.enqueue(942493707);
		x.dequeue();
    }
    @Test
    public void test10587() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test10588() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.enqueue(-1477310034);
    }
    @Test
    public void test10589() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.dequeue();
		variable.toString();
		variable.enqueue(-1279101980);
		variable.enqueue(-478146962);
		variable.toString();
		variable.toString();
    }
    @Test
    public void test10590() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(1374241293);
		assertEquals(1374241293, variable.dequeue());
		assertFalse(variable.isFull());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test10591() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(1434498257);
    }
    @Test
    public void test10592() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(691676100);
    }
    @Test
    public void test10593() {
		Queue z = new Queue();
		z.enqueue(1889394119);
		z.enqueue(-14069941);
		assertFalse(z.isEmpty());
		z.enqueue(37194044);
		assertEquals("[1889394119, 37194044]", z.toString());
		assertEquals("[1889394119, 37194044]", z.toString());
		z.isEmpty();
		z.isFull();
		assertFalse(z.isFull());
		z.isEmpty();
		z.isEmpty();
		assertEquals("[1889394119, 37194044]", z.toString());
		assertEquals(1889394119, z.dequeue());
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test10594() {
		Queue x = new Queue();
		x.enqueue(1736819414);
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test10595() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isFull();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(149023290);
		variable.enqueue(159710082);
		variable.dequeue();
		assertFalse(variable.isEmpty());
		assertEquals("[159710082]", variable.toString());
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test10596() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.toString();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1022668490);
		variable.toString();
    }
    @Test
    public void test10597() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test10598() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(1772135314);
		assertFalse(x.isFull());
		x.enqueue(1563234720);
		x.isEmpty();
		x.isFull();
		x.toString();
		x.isEmpty();
		x.toString();
		x.isFull();
    }
    @Test
    public void test10599() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test10600() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test10601() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.toString();
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.dequeue();
		x.enqueue(-1039551043);
    }
    @Test
    public void test10602() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-2133833020);
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test10603() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test10604() {
		Queue Var = new Queue();
		Var.enqueue(1555478929);
    }
    @Test
    public void test10605() {
		Queue x = new Queue();
		x.enqueue(-1896368871);
		assertEquals("[]", x.toString());
		x.toString();
		x.isFull();
		x.toString();
		x.toString();
    }
    @Test
    public void test10606() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-2010690452);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test10607() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.isEmpty();
		z.isFull();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test10608() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.enqueue(1474679533);
		assertFalse(Var.isFull());
		Var.isFull();
		assertEquals("[1474679533]", Var.toString());
		assertFalse(Var.isEmpty());
		Var.toString();
		assertFalse(Var.isFull());
		assertFalse(Var.isEmpty());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test10609() {
		Queue Var = new Queue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(478196136);
		Var.enqueue(-1674081241);
    }
    @Test
    public void test10610() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test10611() {
		Queue y = new Queue();
		y.enqueue(-689645566);
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test10612() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertFalse(x.isFull());
		x.isEmpty();
		x.enqueue(1280215594);
		x.dequeue();
		x.isEmpty();
		x.enqueue(-193850434);
		x.toString();
		x.enqueue(1793409735);
		x.isEmpty();
    }
    @Test
    public void test10613() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.isFull();
		y.enqueue(-8687328);
		y.enqueue(-6517347);
		y.dequeue();
    }
    @Test
    public void test10614() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.enqueue(-1668481739);
		assertFalse(z.isFull());
		z.isFull();
		z.isEmpty();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(-895537215);
    }
    @Test
    public void test10615() {
		Queue x = new Queue();
		x.enqueue(-413469035);
		x.isFull();
		x.enqueue(293606326);
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test10616() {
		Queue Var = new Queue();
		Var.enqueue(1856709703);
		Var.enqueue(-1885304668);
		Var.dequeue();
		Var.enqueue(300113541);
		Var.isEmpty();
		assertEquals("[300113541]", Var.toString());
		assertEquals(300113541, Var.dequeue());
		Var.toString();
		Var.toString();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test10617() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test10618() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
		z.enqueue(-1646189740);
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.toString();
		z.isFull();
    }
    @Test
    public void test10619() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(-1262050899);
		y.isFull();
		assertFalse(y.isFull());
		y.enqueue(-1640370229);
		y.dequeue();
		y.isFull();
		y.dequeue();
		y.toString();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test10620() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-1271176907);
		variable.enqueue(1674913771);
		variable.enqueue(902962794);
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(1134313425);
    }
    @Test
    public void test10621() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.enqueue(-993631764);
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test10622() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test10623() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test10624() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.enqueue(622272555);
		y.isFull();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.toString();
		y.enqueue(1803492692);
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.toString();
    }
    @Test
    public void test10625() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.toString();
		Var.isEmpty();
		Var.toString();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test10626() {
		Queue Var = new Queue();
		Var.enqueue(-1397039127);
		Var.toString();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test10627() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-132424072);
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test10628() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test10629() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.toString();
    }
    @Test
    public void test10630() {
		Queue z = new Queue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.enqueue(-831769330);
		z.toString();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.toString();
		z.enqueue(1340157572);
		assertFalse(z.isEmpty());
		z.enqueue(1132408851);
    }
    @Test
    public void test10631() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.enqueue(-626684748);
    }
    @Test
    public void test10632() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.isFull();
		x.enqueue(-899867946);
		x.toString();
		x.enqueue(1998675537);
		x.isFull();
    }
    @Test
    public void test10633() {
		Queue variable = new Queue();
		variable.enqueue(-1706854060);
		variable.isFull();
    }
    @Test
    public void test10634() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test10635() {
		Queue Var = new Queue();
		Var.enqueue(-1954807561);
    }
    @Test
    public void test10636() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test10637() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(395959366);
		z.toString();
		z.dequeue();
    }
    @Test
    public void test10638() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.enqueue(-161639703);
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test10639() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.toString();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.enqueue(-775071295);
		x.enqueue(2004249378);
		x.enqueue(1243125839);
		x.enqueue(890036884);
		x.dequeue();
		assertEquals(1243125839, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test10640() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		y.isFull();
		assertFalse(y.isFull());
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test10641() {
		Queue Var = new Queue();
		Var.enqueue(351719811);
		Var.isFull();
    }
    @Test
    public void test10642() {
		Queue y = new Queue();
		y.enqueue(-1105141713);
		y.enqueue(-1401568772);
		y.toString();
		y.enqueue(1796665336);
		y.isEmpty();
		y.isEmpty();
		y.enqueue(1355353178);
    }
    @Test
    public void test10643() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(1942987672);
		Var.isFull();
		Var.toString();
		assertEquals(1942987672, Var.dequeue());
		Var.isFull();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(1520463676);
    }
    @Test
    public void test10644() {
		Queue z = new Queue();
		z.enqueue(-1310922537);
		assertFalse(z.isFull());
		z.enqueue(1151657264);
		assertEquals(1151657264, z.dequeue());
		assertFalse(z.isFull());
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test10645() {
		Queue y = new Queue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-423915919);
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test10646() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-1159284306);
		assertEquals("[]", Var.toString());
		Var.enqueue(1683301189);
		Var.toString();
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test10647() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.enqueue(-56411906);
    }
    @Test
    public void test10648() {
		Queue y = new Queue();
		y.toString();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-455409453);
		y.isFull();
		y.isFull();
		y.enqueue(-1097161340);
		y.toString();
		y.isFull();
    }
    @Test
    public void test10649() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.dequeue();
		variable.enqueue(-370580306);
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.enqueue(675913515);
		variable.toString();
		assertEquals(675913515, variable.dequeue());
		variable.enqueue(-843983089);
		variable.toString();
		variable.enqueue(602262349);
    }
    @Test
    public void test10650() {
		Queue Var = new Queue();
		Var.enqueue(1485193640);
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test10651() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.enqueue(1882443207);
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test10652() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-652701698);
		Var.isFull();
		Var.enqueue(396979447);
		Var.isEmpty();
		Var.isFull();
		assertEquals("[396979447]", Var.toString());
		Var.enqueue(-585519672);
		Var.isEmpty();
		Var.enqueue(-163190976);
		Var.enqueue(-1072386340);
    }
    @Test
    public void test10653() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(-419594823);
		x.dequeue();
		x.dequeue();
		x.enqueue(182267985);
		x.isEmpty();
		assertEquals("[182267985]", x.toString());
		assertEquals("[182267985]", x.toString());
		x.dequeue();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test10654() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1281734010);
		variable.dequeue();
		variable.enqueue(-1981202658);
    }
    @Test
    public void test10655() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(122819425);
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test10656() {
		Queue x = new Queue();
		x.enqueue(1643433451);
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		assertFalse(x.isEmpty());
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test10657() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(764726117);
		y.toString();
		y.isFull();
		y.toString();
		y.isFull();
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test10658() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1832535618);
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test10659() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.toString();
		x.isFull();
		x.isEmpty();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(1389221161);
		x.dequeue();
    }
    @Test
    public void test10660() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.toString();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test10661() {
		Queue z = new Queue();
		z.isFull();
		assertFalse(z.isFull());
		z.enqueue(-2141303413);
		z.toString();
		z.toString();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.dequeue();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test10662() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.dequeue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.enqueue(-398884848);
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(-1987471351);
    }
    @Test
    public void test10663() {
		Queue y = new Queue();
		y.enqueue(-1578585525);
		y.enqueue(1176826788);
		y.isEmpty();
		y.isFull();
		y.isFull();
		assertEquals("[1176826788]", y.toString());
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
		y.enqueue(1544707717);
    }
    @Test
    public void test10664() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test10665() {
		Queue variable = new Queue();
		variable.enqueue(-840683655);
    }
    @Test
    public void test10666() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.enqueue(-462026791);
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(-858104192);
		z.isFull();
		assertTrue(z.isEmpty());
		z.enqueue(152851461);
		z.isFull();
		assertEquals("[152851461]", z.toString());
		assertFalse(z.isFull());
		z.enqueue(1668625810);
    }
    @Test
    public void test10667() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.enqueue(2111530260);
		assertFalse(z.isFull());
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.dequeue();
    }
    @Test
    public void test10668() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(1108259720);
		assertEquals("[1108259720]", y.toString());
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		y.isFull();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.toString();
		y.enqueue(-2102023152);
		y.enqueue(-665660746);
    }
    @Test
    public void test10669() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
		y.enqueue(-2031058686);
		y.isFull();
		y.enqueue(1944086423);
		assertEquals(1944086423, y.dequeue());
		assertFalse(y.isFull());
		y.enqueue(1576508703);
		y.isFull();
		assertFalse(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test10670() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test10671() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.enqueue(614374441);
		variable.toString();
    }
    @Test
    public void test10672() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.enqueue(-970204937);
		Var.isFull();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test10673() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.toString();
		y.dequeue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(-1049510977);
		y.isEmpty();
		y.enqueue(-842020282);
		y.isFull();
		y.isFull();
		y.enqueue(-55459945);
    }
    @Test
    public void test10674() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.toString();
		z.enqueue(-1300875381);
		z.isFull();
		z.isEmpty();
		z.enqueue(140400083);
    }
    @Test
    public void test10675() {
		Queue z = new Queue();
		z.enqueue(2072523803);
		z.enqueue(-1769817296);
		assertEquals("[2072523803]", z.toString());
		z.isEmpty();
		assertEquals("[2072523803]", z.toString());
		z.isFull();
    }
    @Test
    public void test10676() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(1224980719);
		assertEquals(1224980719, y.dequeue());
		y.isFull();
		y.enqueue(1696582947);
    }
    @Test
    public void test10677() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.enqueue(-1847747152);
		x.dequeue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(1234099980);
		x.isEmpty();
    }
    @Test
    public void test10678() {
		Queue y = new Queue();
		y.enqueue(-1587334213);
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test10679() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(801522003);
		x.isEmpty();
		assertEquals("[801522003]", x.toString());
		x.enqueue(2059241505);
		x.toString();
		x.isFull();
		x.enqueue(1364809884);
		x.isEmpty();
    }
    @Test
    public void test10680() {
		Queue y = new Queue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.toString();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.toString();
    }
    @Test
    public void test10681() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-607055317);
    }
    @Test
    public void test10682() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.toString();
    }
    @Test
    public void test10683() {
		Queue variable = new Queue();
		variable.enqueue(837820799);
		variable.isFull();
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(567626105);
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test10684() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-67614782);
    }
    @Test
    public void test10685() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.enqueue(2082998692);
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		assertEquals(2082998692, y.dequeue());
		y.enqueue(-1535190065);
		y.toString();
    }
    @Test
    public void test10686() {
		Queue x = new Queue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.toString();
		x.enqueue(-1075815177);
		x.isEmpty();
		x.dequeue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test10687() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.dequeue();
		y.enqueue(-1861940566);
		y.enqueue(-743064460);
    }
    @Test
    public void test10688() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.isFull();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test10689() {
		Queue Var = new Queue();
		Var.enqueue(-1658592637);
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1255187839);
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test10690() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		x.toString();
		x.enqueue(-2113321491);
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.isFull();
		x.enqueue(148377438);
    }
    @Test
    public void test10691() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test10692() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(1337674115);
		assertEquals(1337674115, x.dequeue());
		x.isEmpty();
		x.enqueue(-1825538353);
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test10693() {
		Queue variable = new Queue();
		variable.enqueue(2124400187);
		assertFalse(variable.isEmpty());
		variable.toString();
		variable.toString();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(-1222460387);
		variable.isEmpty();
		variable.enqueue(-1120302151);
		variable.isEmpty();
    }
    @Test
    public void test10694() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertFalse(x.isFull());
		x.dequeue();
		x.dequeue();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(1265690169);
		x.isFull();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test10695() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(-382878768);
    }
    @Test
    public void test10696() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(1263120481);
		assertFalse(Var.isEmpty());
		Var.enqueue(-2022905103);
		Var.dequeue();
		Var.enqueue(-1543188095);
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.toString();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test10697() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test10698() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test10699() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isFull();
		variable.enqueue(-1255946596);
		variable.toString();
		variable.enqueue(983746351);
		variable.dequeue();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test10700() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(-21492884);
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.enqueue(-2045409696);
		variable.isEmpty();
		variable.toString();
		variable.enqueue(1041556157);
		variable.enqueue(304827302);
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test10701() {
		Queue y = new Queue();
		y.enqueue(-939351241);
		y.dequeue();
		y.toString();
		y.isEmpty();
		y.toString();
		y.dequeue();
		y.enqueue(49215247);
		y.dequeue();
    }
    @Test
    public void test10702() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isEmpty();
		y.enqueue(994116547);
		y.isFull();
		y.isEmpty();
		y.isFull();
		y.isFull();
		assertEquals(994116547, y.dequeue());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test10703() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(-846951211);
		variable.isFull();
    }
    @Test
    public void test10704() {
		Queue z = new Queue();
		z.toString();
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(559356870);
		z.dequeue();
		z.dequeue();
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(-762299894);
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.enqueue(-143018759);
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test10705() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.enqueue(-1109226856);
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test10706() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test10707() {
		Queue z = new Queue();
		z.enqueue(-617707435);
		z.dequeue();
		z.isEmpty();
		z.enqueue(-2139401654);
    }
    @Test
    public void test10708() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
		x.toString();
    }
    @Test
    public void test10709() {
		Queue x = new Queue();
		x.enqueue(1038230773);
		x.isFull();
		x.dequeue();
		x.enqueue(1390090332);
		assertEquals("[1390090332]", x.toString());
		x.enqueue(-1357086490);
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test10710() {
		Queue Var = new Queue();
		Var.enqueue(-745608990);
		Var.toString();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(494711274);
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test10711() {
		Queue z = new Queue();
		z.enqueue(-550391627);
		z.enqueue(1689175311);
		assertFalse(z.isEmpty());
		z.isEmpty();
		z.isEmpty();
		assertFalse(z.isEmpty());
		z.enqueue(17083355);
		assertEquals("[1689175311, 17083355]", z.toString());
		assertEquals("[1689175311, 17083355]", z.toString());
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test10712() {
		Queue y = new Queue();
		y.enqueue(-1652955553);
		assertEquals("[]", y.toString());
		y.enqueue(-301287515);
		y.isFull();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test10713() {
		Queue y = new Queue();
		y.enqueue(956335122);
		y.enqueue(1896705736);
		y.dequeue();
		y.isFull();
		y.toString();
		y.enqueue(1412913952);
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test10714() {
		Queue z = new Queue();
		z.enqueue(-1216912739);
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.enqueue(-410218979);
    }
    @Test
    public void test10715() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		assertFalse(z.isFull());
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test10716() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test10717() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test10718() {
		Queue Var = new Queue();
		Var.enqueue(156815805);
		Var.toString();
    }
    @Test
    public void test10719() {
		Queue z = new Queue();
		z.isFull();
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test10720() {
		Queue variable = new Queue();
		variable.enqueue(1351430153);
		variable.enqueue(-2107005338);
		variable.dequeue();
		variable.enqueue(-1146177569);
		assertFalse(variable.isFull());
		variable.enqueue(-465225786);
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-1783127347);
		variable.dequeue();
    }
    @Test
    public void test10721() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test10722() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.isFull();
		assertFalse(z.isFull());
		z.isEmpty();
		z.dequeue();
		z.isFull();
		z.dequeue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		assertTrue(z.isEmpty());
		z.toString();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test10723() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(805003497);
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test10724() {
		Queue y = new Queue();
		y.enqueue(463892715);
		y.enqueue(1426503308);
		assertFalse(y.isFull());
		y.enqueue(-954692828);
		y.toString();
		y.dequeue();
		y.isFull();
		assertEquals(1426503308, y.dequeue());
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test10725() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(-1523859009);
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		variable.toString();
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test10726() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test10727() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test10728() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(1372630531);
		z.isFull();
		z.enqueue(-442522751);
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.dequeue();
    }
    @Test
    public void test10729() {
		Queue variable = new Queue();
		variable.enqueue(-1572357169);
		variable.enqueue(1044554356);
		variable.isFull();
		variable.enqueue(1360621819);
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(574739188);
		assertFalse(variable.isFull());
		variable.enqueue(-1190226782);
		variable.enqueue(-1544015826);
		variable.isFull();
    }
    @Test
    public void test10730() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1519501887);
		variable.toString();
		variable.toString();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.enqueue(1038776356);
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test10731() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(139730465);
		x.isFull();
    }
    @Test
    public void test10732() {
		Queue variable = new Queue();
		variable.enqueue(-1901154158);
		variable.isEmpty();
		variable.enqueue(-1299241732);
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(1170213113);
    }
    @Test
    public void test10733() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-1199698574);
		z.isFull();
    }
    @Test
    public void test10734() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isFull();
		assertFalse(x.isFull());
		x.isFull();
    }
    @Test
    public void test10735() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.toString();
    }
    @Test
    public void test10736() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-2015949857);
		Var.toString();
    }
    @Test
    public void test10737() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test10738() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test10739() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(2106939134);
		y.isEmpty();
		assertEquals(2106939134, y.dequeue());
		y.isFull();
		y.toString();
		y.toString();
		y.enqueue(-234848719);
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test10740() {
		Queue x = new Queue();
		x.enqueue(1444545399);
		x.isEmpty();
		assertEquals("[1444545399]", x.toString());
		assertEquals(1444545399, x.dequeue());
		x.isEmpty();
		x.enqueue(90063639);
		x.isEmpty();
		assertEquals(90063639, x.dequeue());
		x.enqueue(-1890408931);
		x.enqueue(-2022397023);
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertFalse(x.isFull());
		x.toString();
		x.dequeue();
    }
    @Test
    public void test10741() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test10742() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test10743() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.toString();
    }
    @Test
    public void test10744() {
		Queue y = new Queue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(-1968431761);
		y.isFull();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test10745() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.toString();
    }
    @Test
    public void test10746() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(504659466);
		x.dequeue();
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(-901018753);
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isFull();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.isFull();
    }
    @Test
    public void test10747() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
		y.enqueue(1288275636);
		y.dequeue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test10748() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(109442286);
		Var.isFull();
		Var.enqueue(975843016);
    }
    @Test
    public void test10749() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.enqueue(1419329076);
		x.enqueue(1256658151);
		x.isFull();
		x.isEmpty();
		x.enqueue(893108787);
		x.toString();
    }
    @Test
    public void test10750() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.isFull();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.enqueue(-1238570552);
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test10751() {
		Queue Var = new Queue();
		Var.enqueue(-1050588415);
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test10752() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(1061992324);
		assertEquals("[1061992324]", x.toString());
		x.enqueue(43801322);
    }
    @Test
    public void test10753() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(-1462146198);
		assertEquals("[]", y.toString());
		y.isFull();
		y.toString();
		y.enqueue(-598310566);
		y.toString();
		y.isFull();
		y.isFull();
		y.toString();
    }
    @Test
    public void test10754() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(2056882715);
		y.isEmpty();
    }
    @Test
    public void test10755() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test10756() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test10757() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(951741906);
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test10758() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(-50079772);
		Var.isEmpty();
    }
    @Test
    public void test10759() {
		Queue variable = new Queue();
		variable.enqueue(1378758485);
		variable.isEmpty();
		variable.enqueue(1976931374);
		assertFalse(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.toString();
		assertFalse(variable.isEmpty());
		variable.enqueue(1451132984);
		variable.isEmpty();
		variable.enqueue(-751718181);
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test10760() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.enqueue(223319113);
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test10761() {
		Queue z = new Queue();
		z.enqueue(-1211247442);
		z.toString();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.toString();
		z.toString();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-1819421459);
		z.toString();
		assertEquals(-1, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test10762() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1358406796);
		assertFalse(variable.isEmpty());
		assertEquals(1358406796, variable.dequeue());
		variable.toString();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.enqueue(1572640176);
		variable.isFull();
		variable.enqueue(-456551207);
    }
    @Test
    public void test10763() {
		Queue x = new Queue();
		x.enqueue(1378030006);
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test10764() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(-1159290395);
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.enqueue(-902926142);
		x.toString();
		x.toString();
		x.enqueue(-828554153);
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test10765() {
		Queue variable = new Queue();
		variable.enqueue(-1232148715);
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1523971758);
		variable.enqueue(1643732583);
		assertEquals("[1643732583]", variable.toString());
		assertEquals("[1643732583]", variable.toString());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test10766() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test10767() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
    }
    @Test
    public void test10768() {
		Queue y = new Queue();
		y.enqueue(-779008143);
		y.enqueue(1079160343);
		y.enqueue(-1070132712);
		y.dequeue();
		y.isFull();
		y.enqueue(1337019512);
		y.isEmpty();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(1477271508);
    }
    @Test
    public void test10769() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test10770() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		z.isFull();
    }
    @Test
    public void test10771() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test10772() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.enqueue(903124814);
    }
    @Test
    public void test10773() {
		Queue Var = new Queue();
		Var.dequeue();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.enqueue(995990110);
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(622392274);
    }
    @Test
    public void test10774() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1517916760);
    }
    @Test
    public void test10775() {
		Queue x = new Queue();
		x.enqueue(-1107887373);
		x.isEmpty();
		x.enqueue(-714743918);
		x.isFull();
    }
    @Test
    public void test10776() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(1986149294);
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-738791569);
    }
    @Test
    public void test10777() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test10778() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test10779() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.enqueue(-682756380);
		variable.toString();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test10780() {
		Queue x = new Queue();
		x.enqueue(1014104824);
		x.enqueue(965520762);
		assertEquals("[1014104824, 965520762]", x.toString());
		assertEquals(1014104824, x.dequeue());
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test10781() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isFull();
    }
    @Test
    public void test10782() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test10783() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		assertFalse(z.isFull());
		z.toString();
		z.dequeue();
		z.toString();
		z.toString();
		assertFalse(z.isFull());
		z.dequeue();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test10784() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.enqueue(-1323059332);
    }
    @Test
    public void test10785() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.enqueue(1924239918);
		assertFalse(y.isEmpty());
		assertEquals("[1924239918]", y.toString());
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
		y.isFull();
		y.toString();
    }
    @Test
    public void test10786() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(-197888624);
		x.dequeue();
    }
    @Test
    public void test10787() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(791514727);
		variable.toString();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test10788() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test10789() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.enqueue(869898356);
    }
    @Test
    public void test10790() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(2031073183);
		assertFalse(z.isEmpty());
		z.enqueue(-959063079);
		z.dequeue();
		z.enqueue(-621923150);
		z.toString();
		z.isEmpty();
		z.isFull();
		z.toString();
		z.enqueue(-1861244865);
    }
    @Test
    public void test10791() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isFull();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isFull();
		z.isFull();
		z.enqueue(1778375724);
    }
    @Test
    public void test10792() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.enqueue(-140864159);
		variable.isFull();
		variable.enqueue(1302404567);
		variable.enqueue(-499970846);
    }
    @Test
    public void test10793() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-1220005569);
		variable.enqueue(-507011390);
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test10794() {
		Queue variable = new Queue();
		variable.enqueue(-1520907883);
		variable.toString();
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test10795() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test10796() {
		Queue x = new Queue();
		x.enqueue(1115147888);
		x.dequeue();
		x.toString();
		assertFalse(x.isFull());
		x.isFull();
		x.isFull();
    }
    @Test
    public void test10797() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.toString();
		z.enqueue(113984994);
		z.isEmpty();
    }
    @Test
    public void test10798() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1605402506);
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1563567617);
		variable.isEmpty();
    }
    @Test
    public void test10799() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-2058075014);
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test10800() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(618814037);
		Var.enqueue(1049788849);
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test10801() {
		Queue Var = new Queue();
		Var.enqueue(-883225693);
		Var.enqueue(1500470850);
		Var.toString();
		Var.toString();
		assertEquals(1500470850, Var.dequeue());
		Var.isFull();
		Var.enqueue(-1000517897);
		Var.isFull();
    }
    @Test
    public void test10802() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.dequeue();
		z.toString();
		assertTrue(z.isEmpty());
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test10803() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(505460256);
		x.enqueue(1501129917);
		x.isFull();
		x.enqueue(-1675664768);
		x.enqueue(-1797391824);
    }
    @Test
    public void test10804() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test10805() {
		Queue Var = new Queue();
		Var.enqueue(393859666);
		Var.dequeue();
		Var.enqueue(727740496);
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test10806() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.enqueue(-942309305);
		x.enqueue(-1629062747);
		x.isFull();
		x.enqueue(-1184268633);
		x.enqueue(917292539);
    }
    @Test
    public void test10807() {
		Queue variable = new Queue();
		variable.enqueue(-1702682543);
		variable.toString();
		variable.enqueue(-564692665);
		variable.dequeue();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test10808() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.enqueue(-98051676);
		y.isEmpty();
		y.enqueue(1637736275);
		y.isFull();
		assertFalse(y.isEmpty());
		assertEquals(1637736275, y.dequeue());
		y.dequeue();
		y.toString();
		y.enqueue(1032396785);
    }
    @Test
    public void test10809() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(-867961600);
    }
    @Test
    public void test10810() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test10811() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test10812() {
		Queue z = new Queue();
		z.enqueue(1013506259);
    }
    @Test
    public void test10813() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.dequeue();
		y.isFull();
		y.dequeue();
		y.enqueue(1978114495);
		y.isEmpty();
    }
    @Test
    public void test10814() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test10815() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(186408098);
		variable.dequeue();
		variable.enqueue(195086444);
		variable.toString();
		assertEquals("[195086444]", variable.toString());
		variable.enqueue(-1306373080);
		variable.toString();
    }
    @Test
    public void test10816() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.enqueue(998854802);
    }
    @Test
    public void test10817() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test10818() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test10819() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test10820() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-852781309);
		z.isFull();
		z.toString();
		z.enqueue(-332143588);
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test10821() {
		Queue x = new Queue();
		x.enqueue(1340649557);
		x.dequeue();
		assertTrue(x.isEmpty());
		x.enqueue(537971213);
		assertEquals("[537971213]", x.toString());
		x.isFull();
    }
    @Test
    public void test10822() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test10823() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isFull();
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.enqueue(663400434);
    }
    @Test
    public void test10824() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(-1985866639);
		y.enqueue(62029514);
    }
    @Test
    public void test10825() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-1626939911);
		Var.enqueue(-2040207335);
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test10826() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
		y.isEmpty();
		y.dequeue();
		y.enqueue(-1016652051);
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test10827() {
		Queue x = new Queue();
		x.enqueue(459150987);
		assertEquals("[459150987]", x.toString());
		x.dequeue();
		x.enqueue(-691317161);
		x.toString();
		x.dequeue();
		x.enqueue(1994831574);
		assertFalse(x.isEmpty());
		x.enqueue(448843217);
		x.enqueue(-1207893661);
		assertEquals(1994831574, x.dequeue());
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test10828() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.toString();
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test10829() {
		Queue Var = new Queue();
		Var.enqueue(-710583615);
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test10830() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(-714445334);
		Var.enqueue(1374072142);
		assertFalse(Var.isEmpty());
		assertEquals(1374072142, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.enqueue(-1925955255);
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test10831() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(-51503635);
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test10832() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isEmpty();
		z.toString();
		z.isEmpty();
		z.toString();
		z.isFull();
    }
    @Test
    public void test10833() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test10834() {
		Queue y = new Queue();
		y.enqueue(-1192252226);
		y.isFull();
		y.isFull();
		assertTrue(y.isEmpty());
		y.toString();
		assertEquals("[]", y.toString());
		y.toString();
		y.enqueue(-2030977641);
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.isEmpty();
		assertFalse(y.isFull());
		y.isFull();
		y.isFull();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test10835() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test10836() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.toString();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isFull();
		y.enqueue(-1165278367);
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.toString();
    }
    @Test
    public void test10837() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(-1499903285);
		assertEquals(-1, x.dequeue());
		x.enqueue(1833906908);
    }
    @Test
    public void test10838() {
		Queue z = new Queue();
		z.enqueue(-32205667);
		z.dequeue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(-444543857);
		z.isEmpty();
		z.enqueue(-1726078777);
		z.isFull();
    }
    @Test
    public void test10839() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(-222938756);
		Var.enqueue(-817789439);
		Var.enqueue(1989546935);
		Var.dequeue();
    }
    @Test
    public void test10840() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(165912262);
    }
    @Test
    public void test10841() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.dequeue();
		z.enqueue(-640140649);
		z.enqueue(-1641997169);
		z.isEmpty();
		z.toString();
		z.enqueue(-407955023);
    }
    @Test
    public void test10842() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test10843() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(489159598);
		assertFalse(y.isEmpty());
		y.enqueue(1150999054);
    }
    @Test
    public void test10844() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(-1525668093);
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(1446622612);
		assertFalse(y.isEmpty());
		assertEquals(1446622612, y.dequeue());
		assertFalse(y.isFull());
		y.toString();
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(1858779358);
		y.isFull();
    }
    @Test
    public void test10845() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(-1465402902);
		y.enqueue(74514595);
		assertFalse(y.isFull());
		y.enqueue(-305985398);
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test10846() {
		Queue variable = new Queue();
		variable.enqueue(-443662821);
		variable.isFull();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-407167526);
    }
    @Test
    public void test10847() {
		Queue variable = new Queue();
		variable.enqueue(1431070886);
		assertEquals(1431070886, variable.dequeue());
		variable.enqueue(1053128199);
		variable.toString();
		assertEquals("[1053128199]", variable.toString());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test10848() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.enqueue(261000952);
		assertEquals("[261000952]", x.toString());
		assertEquals("[261000952]", x.toString());
		assertFalse(x.isEmpty());
		x.enqueue(-1808770594);
    }
    @Test
    public void test10849() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-1079659336);
    }
    @Test
    public void test10850() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(-219173141);
		x.isFull();
		assertFalse(x.isFull());
		x.toString();
		x.isFull();
		x.enqueue(-1648559168);
		x.isEmpty();
    }
    @Test
    public void test10851() {
		Queue Var = new Queue();
		Var.enqueue(1484628034);
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.dequeue();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test10852() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test10853() {
		Queue Var = new Queue();
		Var.enqueue(423597052);
		assertEquals("[423597052]", Var.toString());
		Var.toString();
		Var.enqueue(1920990972);
    }
    @Test
    public void test10854() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(1084223440);
		y.enqueue(-266797821);
    }
    @Test
    public void test10855() {
		Queue z = new Queue();
		z.enqueue(-1316399300);
		z.isFull();
		z.toString();
		z.dequeue();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.enqueue(-338942480);
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isFull();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test10856() {
		Queue variable = new Queue();
		variable.enqueue(169539817);
		variable.isEmpty();
    }
    @Test
    public void test10857() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.dequeue();
		y.enqueue(749299633);
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test10858() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.enqueue(1681031516);
		variable.enqueue(1487860407);
		variable.dequeue();
		assertEquals(1487860407, variable.dequeue());
		variable.dequeue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-843770710);
    }
    @Test
    public void test10859() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(2058794812);
		z.toString();
		z.isEmpty();
		assertEquals("[2058794812]", z.toString());
		z.dequeue();
		z.enqueue(-618928225);
		z.enqueue(1373433453);
		assertFalse(z.isFull());
		z.isFull();
		z.toString();
    }
    @Test
    public void test10860() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.enqueue(-1583761151);
		x.isEmpty();
    }
    @Test
    public void test10861() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(-1178925829);
		z.toString();
		z.isEmpty();
		z.enqueue(-1045763104);
    }
    @Test
    public void test10862() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test10863() {
		Queue y = new Queue();
		y.enqueue(1555567159);
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.enqueue(-1960008713);
    }
    @Test
    public void test10864() {
		Queue x = new Queue();
		x.enqueue(-639469927);
		x.dequeue();
		x.toString();
		x.enqueue(-62173222);
		x.toString();
		x.enqueue(404042178);
		x.toString();
    }
    @Test
    public void test10865() {
		Queue y = new Queue();
		y.enqueue(-1002754187);
		y.dequeue();
    }
    @Test
    public void test10866() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test10867() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		z.dequeue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1852732032);
    }
    @Test
    public void test10868() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-1827489426);
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test10869() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isEmpty();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.isFull();
		z.toString();
    }
    @Test
    public void test10870() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test10871() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test10872() {
		Queue variable = new Queue();
		variable.enqueue(-2040815361);
    }
    @Test
    public void test10873() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.enqueue(2066978601);
		z.enqueue(1434973670);
    }
    @Test
    public void test10874() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.toString();
    }
    @Test
    public void test10875() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.enqueue(586027635);
		z.toString();
		assertEquals(586027635, z.dequeue());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.toString();
    }
    @Test
    public void test10876() {
		Queue z = new Queue();
		z.enqueue(362218248);
		z.dequeue();
		z.toString();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test10877() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		Var.enqueue(-1959039014);
		Var.enqueue(1984748163);
		Var.dequeue();
		Var.enqueue(800431312);
		assertFalse(Var.isEmpty());
		assertEquals("[800431312]", Var.toString());
		Var.enqueue(419835866);
    }
    @Test
    public void test10878() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test10879() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(2068182256);
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.toString();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.toString();
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test10880() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(-1451633066);
		x.enqueue(-314023483);
		x.toString();
		x.isEmpty();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.dequeue();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.enqueue(-830489554);
		x.toString();
    }
    @Test
    public void test10881() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(263194401);
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test10882() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isEmpty();
		Var.enqueue(1000495446);
		Var.dequeue();
		Var.enqueue(-1862076584);
		Var.isFull();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test10883() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.isEmpty();
		z.dequeue();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.toString();
		z.isEmpty();
		z.enqueue(1410688109);
		assertFalse(z.isEmpty());
		z.enqueue(-1820027359);
		z.dequeue();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test10884() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test10885() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(-694321874);
		x.toString();
		x.enqueue(-7509598);
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(2008926882);
		assertFalse(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test10886() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test10887() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.enqueue(514903977);
		z.dequeue();
		z.dequeue();
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(224467184);
    }
    @Test
    public void test10888() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-1236700963);
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.enqueue(-2111555263);
		x.enqueue(-1557768145);
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test10889() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.toString();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.enqueue(-1642542546);
		y.isEmpty();
    }
    @Test
    public void test10890() {
		Queue z = new Queue();
		z.enqueue(1314266569);
		z.isEmpty();
		z.enqueue(-862730483);
		z.dequeue();
    }
    @Test
    public void test10891() {
		Queue y = new Queue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test10892() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test10893() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.enqueue(-1964723897);
		z.enqueue(83781895);
		z.enqueue(1827174172);
		z.isEmpty();
		z.enqueue(-1966871704);
    }
    @Test
    public void test10894() {
		Queue x = new Queue();
		x.toString();
		assertTrue(x.isEmpty());
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.enqueue(1423997776);
    }
    @Test
    public void test10895() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(723399772);
		z.enqueue(-1167223051);
		z.isFull();
    }
    @Test
    public void test10896() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test10897() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.enqueue(-2099806140);
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isFull();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test10898() {
		Queue z = new Queue();
		z.dequeue();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.enqueue(-57972291);
		z.isFull();
		z.enqueue(469745106);
		z.isEmpty();
		z.enqueue(-487814880);
		z.isFull();
		assertFalse(z.isEmpty());
		z.enqueue(922414277);
		z.enqueue(-459307245);
    }
    @Test
    public void test10899() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test10900() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test10901() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test10902() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test10903() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		assertFalse(y.isFull());
		y.isFull();
		y.isFull();
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test10904() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(1432337121);
		assertFalse(z.isEmpty());
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test10905() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.toString();
    }
    @Test
    public void test10906() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1297394743);
		Var.enqueue(-1598179226);
		Var.enqueue(-1022380404);
		Var.enqueue(-1827220746);
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.isFull();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test10907() {
		Queue x = new Queue();
		x.enqueue(134447711);
		x.toString();
		assertEquals("[134447711]", x.toString());
		assertEquals("[134447711]", x.toString());
		x.isFull();
		x.enqueue(-1225293315);
		x.enqueue(726950821);
		x.dequeue();
		x.dequeue();
		x.enqueue(1782749388);
		assertFalse(x.isFull());
		x.dequeue();
		x.toString();
    }
    @Test
    public void test10908() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(295773431);
		Var.isEmpty();
		Var.enqueue(935020756);
		Var.dequeue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(2124086852);
		Var.isFull();
    }
    @Test
    public void test10909() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isFull();
		z.enqueue(200658556);
		assertEquals(200658556, z.dequeue());
		z.dequeue();
		z.toString();
		z.dequeue();
		z.enqueue(310693840);
		z.enqueue(-2101202407);
    }
    @Test
    public void test10910() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.enqueue(-2087434693);
		x.toString();
		x.enqueue(-740454285);
		x.enqueue(1707493189);
		assertFalse(x.isEmpty());
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test10911() {
		Queue variable = new Queue();
		variable.enqueue(247220423);
		variable.dequeue();
		variable.enqueue(1380365962);
		assertEquals(1380365962, variable.dequeue());
		variable.isFull();
		variable.enqueue(-1692884293);
		variable.toString();
		variable.isFull();
		variable.enqueue(-701178572);
    }
    @Test
    public void test10912() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
    }
    @Test
    public void test10913() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test10914() {
		Queue z = new Queue();
		z.enqueue(-89351155);
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(306869402);
    }
    @Test
    public void test10915() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.enqueue(-727962173);
		Var.enqueue(1084335326);
		assertEquals("[1084335326]", Var.toString());
		assertFalse(Var.isFull());
		assertFalse(Var.isEmpty());
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test10916() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(-109408973);
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-857327495);
		variable.enqueue(-1966323930);
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test10917() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test10918() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(1293563045);
		variable.toString();
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test10919() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.dequeue();
		Var.enqueue(943453484);
		assertEquals("[943453484]", Var.toString());
		Var.enqueue(1299982628);
		Var.isFull();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test10920() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test10921() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test10922() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test10923() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test10924() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test10925() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.enqueue(1549631643);
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.enqueue(721310042);
		assertEquals(721310042, x.dequeue());
		x.isFull();
		x.enqueue(365284957);
		x.isEmpty();
    }
    @Test
    public void test10926() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test10927() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.enqueue(1292374706);
		assertFalse(x.isEmpty());
		assertFalse(x.isEmpty());
		x.toString();
		x.isEmpty();
		x.isFull();
		assertEquals("[1292374706]", x.toString());
		x.dequeue();
		x.enqueue(2038049962);
		x.dequeue();
		x.enqueue(7298295);
    }
    @Test
    public void test10928() {
		Queue y = new Queue();
		y.toString();
		y.toString();
    }
    @Test
    public void test10929() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.isEmpty();
		x.isFull();
		x.isFull();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.enqueue(-645876851);
    }
    @Test
    public void test10930() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		assertFalse(z.isFull());
		z.isEmpty();
		z.isFull();
		z.enqueue(1396300664);
		z.dequeue();
		z.toString();
		z.isFull();
		z.toString();
		z.enqueue(1986497310);
    }
    @Test
    public void test10931() {
		Queue z = new Queue();
		z.enqueue(-532406409);
		z.isFull();
		z.enqueue(-491498014);
		z.dequeue();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test10932() {
		Queue variable = new Queue();
		variable.enqueue(1409273027);
		variable.dequeue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test10933() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.enqueue(-1709580522);
    }
    @Test
    public void test10934() {
		Queue z = new Queue();
		z.isFull();
		assertFalse(z.isFull());
		z.isFull();
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		z.enqueue(80041393);
		z.toString();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test10935() {
		Queue Var = new Queue();
		Var.enqueue(336000148);
		Var.toString();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-845531641);
    }
    @Test
    public void test10936() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(-1146573081);
		Var.enqueue(672389169);
		assertFalse(Var.isEmpty());
		assertEquals(672389169, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.toString();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test10937() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.enqueue(-1090119918);
		assertTrue(y.isEmpty());
		y.isFull();
		y.toString();
    }
    @Test
    public void test10938() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(1326717867);
		assertFalse(x.isEmpty());
		x.toString();
		assertEquals("[1326717867]", x.toString());
		x.enqueue(1143192222);
		x.enqueue(1250010273);
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.dequeue();
		assertEquals(1143192222, x.dequeue());
		x.isEmpty();
		assertEquals("[1250010273]", x.toString());
		x.isEmpty();
		assertEquals(1250010273, x.dequeue());
		x.isEmpty();
		x.enqueue(1005995066);
    }
    @Test
    public void test10939() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-4762960);
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test10940() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.toString();
		Var.isFull();
		Var.dequeue();
		Var.toString();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test10941() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(235630446);
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		assertFalse(variable.isEmpty());
		variable.enqueue(-522497143);
		assertEquals("[235630446]", variable.toString());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1658356297);
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test10942() {
		Queue y = new Queue();
		y.enqueue(-1090766552);
		y.isFull();
    }
    @Test
    public void test10943() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.isFull();
		x.enqueue(1630686264);
    }
    @Test
    public void test10944() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-185322394);
		Var.enqueue(-1177563929);
		Var.dequeue();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test10945() {
		Queue x = new Queue();
		x.enqueue(-1059787660);
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(1828000189);
		assertEquals("[1828000189]", x.toString());
		assertFalse(x.isFull());
		x.enqueue(216335249);
		x.isFull();
		assertEquals("[1828000189, 216335249]", x.toString());
		x.dequeue();
		x.isFull();
		x.enqueue(489910828);
    }
    @Test
    public void test10946() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.enqueue(587521613);
		x.isFull();
		assertFalse(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test10947() {
		Queue z = new Queue();
		z.enqueue(-692952655);
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.enqueue(1276119246);
    }
    @Test
    public void test10948() {
		Queue y = new Queue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(1532945755);
		y.isFull();
    }
    @Test
    public void test10949() {
		Queue Var = new Queue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test10950() {
		Queue y = new Queue();
		y.enqueue(-1849369123);
		y.enqueue(228590551);
    }
    @Test
    public void test10951() {
		Queue Var = new Queue();
		Var.enqueue(-897134080);
    }
    @Test
    public void test10952() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-177267744);
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-670206903);
		variable.toString();
    }
    @Test
    public void test10953() {
		Queue z = new Queue();
		z.enqueue(2044265401);
		assertFalse(z.isFull());
		z.enqueue(15472320);
		z.dequeue();
		assertFalse(z.isFull());
		z.toString();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test10954() {
		Queue Var = new Queue();
		Var.enqueue(426645306);
		assertEquals("[426645306]", Var.toString());
		assertEquals("[426645306]", Var.toString());
		assertEquals("[426645306]", Var.toString());
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test10955() {
		Queue y = new Queue();
		y.enqueue(785391209);
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.toString();
		assertTrue(y.isEmpty());
		y.enqueue(-135355030);
		y.toString();
		y.isFull();
		y.enqueue(1663457802);
		assertFalse(y.isFull());
		assertEquals(1663457802, y.dequeue());
		y.toString();
    }
    @Test
    public void test10956() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isFull();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.toString();
		x.toString();
		x.enqueue(-1184995928);
		x.isEmpty();
		x.dequeue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test10957() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test10958() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-1778056268);
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(779769001);
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test10959() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(1204433411);
		assertEquals(1204433411, z.dequeue());
		z.isEmpty();
		z.dequeue();
		z.enqueue(350248034);
		z.isEmpty();
		z.toString();
		assertFalse(z.isFull());
		z.isFull();
		z.isFull();
    }
    @Test
    public void test10960() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.toString();
		y.toString();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test10961() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(952029807);
		assertFalse(y.isFull());
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(2025838753);
    }
    @Test
    public void test10962() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test10963() {
		Queue z = new Queue();
		z.enqueue(-1410837315);
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.isEmpty();
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(1764364604);
		assertFalse(z.isFull());
		z.isFull();
		assertFalse(z.isEmpty());
		assertEquals("[1764364604]", z.toString());
		assertEquals(1764364604, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test10964() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.isFull();
		y.isEmpty();
		y.toString();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.dequeue();
		y.toString();
		y.toString();
    }
    @Test
    public void test10965() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.enqueue(-849588534);
		x.dequeue();
		x.isEmpty();
		x.enqueue(1380420718);
		assertEquals("[1380420718]", x.toString());
		assertFalse(x.isEmpty());
		x.enqueue(1183505361);
    }
    @Test
    public void test10966() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test10967() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(-1278700432);
		variable.isEmpty();
    }
    @Test
    public void test10968() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.dequeue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(923935990);
		z.enqueue(-1294937766);
		z.toString();
    }
    @Test
    public void test10969() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.enqueue(-213862442);
    }
    @Test
    public void test10970() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isFull();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(408578338);
		variable.isFull();
		assertFalse(variable.isFull());
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test10971() {
		Queue y = new Queue();
		y.enqueue(-1264165312);
		y.toString();
		y.enqueue(-1696341824);
		assertTrue(y.isEmpty());
		y.dequeue();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.enqueue(976440455);
		y.toString();
		y.dequeue();
		y.enqueue(914084251);
		y.toString();
    }
    @Test
    public void test10972() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1337662615);
		Var.isFull();
		Var.enqueue(-856398971);
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(-621429752);
    }
    @Test
    public void test10973() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(719098029);
		assertFalse(y.isEmpty());
		y.enqueue(-55702311);
    }
    @Test
    public void test10974() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-809471692);
		assertFalse(Var.isFull());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1130760827);
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(-1296950395);
    }
    @Test
    public void test10975() {
		Queue Var = new Queue();
		Var.enqueue(1774100481);
		Var.enqueue(1127438746);
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test10976() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test10977() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.isEmpty();
		assertFalse(x.isFull());
		x.toString();
		x.isFull();
    }
    @Test
    public void test10978() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test10979() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.toString();
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(-1012666850);
		assertFalse(y.isFull());
		y.dequeue();
		y.toString();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test10980() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test10981() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-867632506);
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(323714192);
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(732825456);
    }
    @Test
    public void test10982() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.toString();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(-2094798759);
		variable.toString();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test10983() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test10984() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-418605154);
		assertEquals(-1, variable.dequeue());
		variable.enqueue(156693322);
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test10985() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isFull();
		z.enqueue(-1333392421);
		z.enqueue(-468137210);
		z.enqueue(1212096);
		z.isFull();
		z.enqueue(95667034);
		z.enqueue(278591266);
		assertFalse(z.isFull());
		assertEquals("[1212096, 95667034, 278591266]", z.toString());
		assertFalse(z.isEmpty());
		z.enqueue(-791764965);
    }
    @Test
    public void test10986() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.toString();
		y.toString();
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(-1368001731);
    }
    @Test
    public void test10987() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.toString();
    }
    @Test
    public void test10988() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-1536904772);
		Var.enqueue(1519363472);
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		assertEquals("[1519363472]", Var.toString());
		Var.toString();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test10989() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.enqueue(-1548305671);
		variable.enqueue(2097898542);
		variable.dequeue();
    }
    @Test
    public void test10990() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(613999718);
		variable.isEmpty();
		variable.enqueue(-279109954);
		variable.enqueue(-759648979);
		variable.toString();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.toString();
		variable.isFull();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(1993751091);
    }
    @Test
    public void test10991() {
		Queue x = new Queue();
		x.enqueue(-1952382582);
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test10992() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-982776237);
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(796508203);
		assertEquals(796508203, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isFull();
		Var.enqueue(679185429);
    }
    @Test
    public void test10993() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test10994() {
		Queue z = new Queue();
		z.enqueue(936486324);
		z.isFull();
		z.enqueue(-268889738);
    }
    @Test
    public void test10995() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-1768762619);
		z.dequeue();
		z.isFull();
		z.dequeue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test10996() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test10997() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		assertEquals("[]", y.toString());
		y.enqueue(-1800567161);
		y.enqueue(373660546);
		y.isFull();
		assertEquals(373660546, y.dequeue());
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.dequeue();
    }
    @Test
    public void test10998() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1390186612);
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(1263192246);
		variable.enqueue(-594853888);
    }
    @Test
    public void test10999() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(1731244002);
		z.isFull();
		assertEquals("[1731244002]", z.toString());
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(1957335861);
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test11000() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(-739061645);
		Var.toString();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test11001() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-1945407897);
		variable.enqueue(-684250913);
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(-1783810272);
		variable.enqueue(1325507175);
		assertFalse(variable.isEmpty());
		variable.enqueue(-777408996);
		assertEquals("[1325507175]", variable.toString());
		variable.toString();
		variable.toString();
    }
    @Test
    public void test11002() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(320846097);
		variable.isFull();
		variable.isFull();
		assertEquals(320846097, variable.dequeue());
		variable.isFull();
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test11003() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test11004() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.isFull();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.enqueue(623834630);
		x.dequeue();
		x.enqueue(1288009461);
		assertFalse(x.isEmpty());
		x.isEmpty();
		assertEquals(1288009461, x.dequeue());
		x.toString();
    }
    @Test
    public void test11005() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.toString();
		z.isFull();
		z.toString();
    }
    @Test
    public void test11006() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test11007() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test11008() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test11009() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-37712625);
    }
    @Test
    public void test11010() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-1476477170);
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test11011() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1433493642);
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isFull();
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.enqueue(319799196);
    }
    @Test
    public void test11012() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.toString();
		x.enqueue(-873441034);
		x.dequeue();
		x.toString();
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(688769458);
		x.dequeue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test11013() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test11014() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.dequeue();
    }
    @Test
    public void test11015() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.enqueue(-1442143207);
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.toString();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test11016() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(94223893);
		y.isEmpty();
		y.enqueue(-1738961576);
		assertFalse(y.isEmpty());
		y.isEmpty();
		assertEquals("[94223893]", y.toString());
		assertEquals("[94223893]", y.toString());
		y.enqueue(2140779897);
		y.isFull();
    }
    @Test
    public void test11017() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(-1549247533);
		y.isFull();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test11018() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test11019() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test11020() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.isEmpty();
		y.enqueue(1175856505);
		y.isEmpty();
		y.enqueue(-960763718);
    }
    @Test
    public void test11021() {
		Queue y = new Queue();
		y.enqueue(1115550374);
		y.enqueue(1665675535);
		y.dequeue();
		y.isFull();
		y.isEmpty();
		y.enqueue(105277546);
		y.enqueue(-2062930545);
    }
    @Test
    public void test11022() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(-1135216782);
		x.enqueue(1312913864);
		x.enqueue(1006147572);
		x.isEmpty();
		x.dequeue();
		x.enqueue(1185729229);
		assertFalse(x.isFull());
		x.isFull();
    }
    @Test
    public void test11023() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(670497505);
		assertEquals(670497505, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test11024() {
		Queue variable = new Queue();
		variable.enqueue(1191031337);
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test11025() {
		Queue x = new Queue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.dequeue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.dequeue();
    }
    @Test
    public void test11026() {
		Queue variable = new Queue();
		variable.enqueue(-1321266716);
		variable.dequeue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(-570763150);
		variable.dequeue();
    }
    @Test
    public void test11027() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(1355013848);
		variable.enqueue(-924075810);
		variable.isEmpty();
		assertEquals("[1355013848]", variable.toString());
		variable.enqueue(-2013313151);
    }
    @Test
    public void test11028() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-1961846846);
		z.toString();
		z.enqueue(-1499991502);
		z.toString();
    }
    @Test
    public void test11029() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.toString();
		z.toString();
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(1963732502);
		assertEquals(1963732502, z.dequeue());
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test11030() {
		Queue x = new Queue();
		x.enqueue(1086687152);
		assertFalse(x.isFull());
		assertEquals(1086687152, x.dequeue());
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.enqueue(-738875825);
		x.isFull();
		x.dequeue();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test11031() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.dequeue();
    }
    @Test
    public void test11032() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(597107648);
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test11033() {
		Queue z = new Queue();
		z.enqueue(861900774);
		assertFalse(z.isEmpty());
		assertEquals(861900774, z.dequeue());
		z.enqueue(-40837736);
		z.enqueue(1518013844);
		z.isFull();
		z.toString();
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(-689194972);
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test11034() {
		Queue y = new Queue();
		y.enqueue(1920250254);
		y.dequeue();
		assertEquals("[]", y.toString());
		y.toString();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.enqueue(-1629041939);
		y.enqueue(-542342517);
		y.isFull();
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test11035() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.toString();
		z.enqueue(1289892437);
		z.enqueue(-1654277417);
		z.isEmpty();
		assertEquals("[1289892437]", z.toString());
		z.dequeue();
		z.isEmpty();
		z.enqueue(-406800889);
    }
    @Test
    public void test11036() {
		Queue z = new Queue();
		z.enqueue(829789157);
		z.isFull();
		assertFalse(z.isFull());
		z.enqueue(1332270622);
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(-1103466879);
		z.toString();
		z.enqueue(1958592451);
    }
    @Test
    public void test11037() {
		Queue y = new Queue();
		y.toString();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isFull();
		y.enqueue(-852491935);
    }
    @Test
    public void test11038() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1630123167);
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test11039() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.toString();
		y.enqueue(918354849);
    }
    @Test
    public void test11040() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test11041() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test11042() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(1023882554);
		assertEquals(1023882554, y.dequeue());
		y.isEmpty();
		y.enqueue(1617085728);
		y.enqueue(-622711271);
		y.isFull();
		y.enqueue(1919617489);
		assertFalse(y.isFull());
		assertFalse(y.isEmpty());
		y.enqueue(928046754);
		y.toString();
		assertEquals(1617085728, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test11043() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-608319314);
		y.isEmpty();
		y.enqueue(-1307056907);
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.enqueue(1990309640);
    }
    @Test
    public void test11044() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test11045() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(895373883);
		Var.dequeue();
		Var.enqueue(2053229858);
    }
    @Test
    public void test11046() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isFull();
		variable.isFull();
		variable.isFull();
		variable.toString();
		variable.enqueue(-289053393);
		variable.enqueue(2070762901);
		variable.isEmpty();
    }
    @Test
    public void test11047() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1252864402);
		y.isFull();
		y.enqueue(-181028726);
		y.toString();
		y.toString();
		y.isFull();
    }
    @Test
    public void test11048() {
		Queue y = new Queue();
		y.toString();
		assertEquals("[]", y.toString());
		y.toString();
		y.isFull();
		y.dequeue();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-628868162);
		y.toString();
    }
    @Test
    public void test11049() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-151225371);
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.enqueue(1314996400);
		assertFalse(Var.isFull());
		assertFalse(Var.isEmpty());
		assertFalse(Var.isFull());
		assertEquals(1314996400, Var.dequeue());
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test11050() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.dequeue();
		z.toString();
		z.enqueue(-194750784);
    }
    @Test
    public void test11051() {
		Queue y = new Queue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.toString();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1392655366);
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isEmpty();
		y.enqueue(-618138580);
    }
    @Test
    public void test11052() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-466563585);
		x.isFull();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.toString();
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test11053() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test11054() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.toString();
		variable.enqueue(2054260025);
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test11055() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test11056() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test11057() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test11058() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-874130763);
		y.isEmpty();
    }
    @Test
    public void test11059() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test11060() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.enqueue(199911196);
		y.isFull();
		y.isFull();
		y.dequeue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test11061() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test11062() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.enqueue(1970343372);
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test11063() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.toString();
		y.isEmpty();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.isFull();
		y.isFull();
		y.toString();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test11064() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.enqueue(1404215058);
		x.isEmpty();
		assertEquals(1404215058, x.dequeue());
		x.isEmpty();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.enqueue(-736077292);
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test11065() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(393922258);
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test11066() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(64086007);
    }
    @Test
    public void test11067() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test11068() {
		Queue x = new Queue();
		x.toString();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.toString();
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(-1054704561);
		assertTrue(x.isEmpty());
		x.enqueue(-1676182970);
		x.enqueue(1974859480);
		x.toString();
    }
    @Test
    public void test11069() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.enqueue(800639459);
		assertFalse(x.isEmpty());
		assertFalse(x.isFull());
		x.enqueue(-238084691);
		x.isFull();
    }
    @Test
    public void test11070() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test11071() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(-161061606);
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(1327551841);
    }
    @Test
    public void test11072() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test11073() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.enqueue(2073466970);
		Var.isFull();
		assertFalse(Var.isFull());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.enqueue(-2146900343);
		Var.toString();
    }
    @Test
    public void test11074() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test11075() {
		Queue variable = new Queue();
		variable.enqueue(1427454813);
    }
    @Test
    public void test11076() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(-1368985143);
		assertEquals(-1, y.dequeue());
		y.toString();
		y.enqueue(77973950);
		y.isFull();
		y.enqueue(-516031149);
		y.toString();
		y.enqueue(1222829848);
    }
    @Test
    public void test11077() {
		Queue x = new Queue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.enqueue(2128978472);
		x.isEmpty();
    }
    @Test
    public void test11078() {
		Queue y = new Queue();
		y.enqueue(-978187503);
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test11079() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.enqueue(851810358);
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test11080() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test11081() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.enqueue(-1447844338);
		z.enqueue(-775823243);
		z.isEmpty();
		z.enqueue(-1602501283);
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.toString();
		z.toString();
    }
    @Test
    public void test11082() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-1200639106);
		y.toString();
		y.enqueue(-1986817562);
		y.enqueue(488204316);
		y.dequeue();
    }
    @Test
    public void test11083() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test11084() {
		Queue y = new Queue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.enqueue(-927264818);
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.isEmpty();
		y.enqueue(1785910336);
		y.dequeue();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.toString();
		y.enqueue(1904291052);
    }
    @Test
    public void test11085() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(652251960);
		z.isFull();
		z.toString();
		z.dequeue();
		z.enqueue(1466094736);
		assertEquals("[1466094736]", z.toString());
		z.dequeue();
		z.toString();
		z.isFull();
    }
    @Test
    public void test11086() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.enqueue(918888547);
		x.isEmpty();
		x.isFull();
		x.toString();
    }
    @Test
    public void test11087() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test11088() {
		Queue variable = new Queue();
		variable.enqueue(972903861);
		assertEquals("[972903861]", variable.toString());
		variable.enqueue(1069434291);
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-1929553291);
		variable.toString();
    }
    @Test
    public void test11089() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.toString();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test11090() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(1582391982);
    }
    @Test
    public void test11091() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-911202195);
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-560211707);
		y.toString();
    }
    @Test
    public void test11092() {
		Queue z = new Queue();
		z.enqueue(-1755223725);
		z.enqueue(-939443221);
		z.isFull();
		z.enqueue(-2106968170);
		z.dequeue();
		z.enqueue(1164043855);
		z.isFull();
    }
    @Test
    public void test11093() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-194002553);
		Var.isFull();
		Var.toString();
		Var.enqueue(-549400957);
		Var.toString();
		Var.isFull();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test11094() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test11095() {
		Queue x = new Queue();
		x.toString();
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test11096() {
		Queue y = new Queue();
		y.enqueue(644090826);
		y.enqueue(-840329125);
		y.dequeue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.enqueue(-502438316);
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test11097() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(1489678796);
		Var.isFull();
    }
    @Test
    public void test11098() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(2118302835);
		z.isFull();
		assertEquals("[2118302835]", z.toString());
		z.enqueue(339474837);
		z.toString();
		z.enqueue(110617132);
		assertFalse(z.isFull());
		z.enqueue(1258924890);
		assertFalse(z.isEmpty());
		z.enqueue(42318966);
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test11099() {
		Queue Var = new Queue();
		Var.enqueue(473556308);
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(770634338);
		assertFalse(Var.isEmpty());
		Var.enqueue(-1715972080);
    }
    @Test
    public void test11100() {
		Queue z = new Queue();
		z.enqueue(2041160110);
		z.toString();
		z.isFull();
    }
    @Test
    public void test11101() {
		Queue Var = new Queue();
		Var.enqueue(-939125946);
		Var.toString();
    }
    @Test
    public void test11102() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.isEmpty();
		z.isFull();
		z.dequeue();
		z.enqueue(-1881958202);
    }
    @Test
    public void test11103() {
		Queue z = new Queue();
		z.enqueue(-963583355);
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test11104() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.enqueue(-1660889599);
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test11105() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(566306561);
		Var.toString();
		Var.enqueue(671488640);
		Var.toString();
		Var.enqueue(1178827552);
		Var.enqueue(-122865820);
    }
    @Test
    public void test11106() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.toString();
    }
    @Test
    public void test11107() {
		Queue y = new Queue();
		y.enqueue(-807519078);
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.enqueue(-1943775866);
		y.enqueue(-963620051);
		y.toString();
    }
    @Test
    public void test11108() {
		Queue Var = new Queue();
		Var.enqueue(-2059894829);
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-587185028);
		Var.enqueue(-1011959617);
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test11109() {
		Queue x = new Queue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.toString();
		x.toString();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isFull();
		x.toString();
		assertTrue(x.isEmpty());
		x.toString();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test11110() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.toString();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.enqueue(-76628196);
		assertTrue(x.isEmpty());
		x.isFull();
		x.toString();
    }
    @Test
    public void test11111() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-2065831405);
		y.enqueue(-1317431381);
		y.enqueue(-1522838028);
		y.toString();
		y.isFull();
    }
    @Test
    public void test11112() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test11113() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.enqueue(-205530762);
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test11114() {
		Queue Var = new Queue();
		Var.enqueue(-1033209178);
		Var.isEmpty();
		Var.toString();
		Var.enqueue(1454362156);
		assertFalse(Var.isFull());
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test11115() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isFull();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test11116() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(-1724838551);
		x.enqueue(-1974342569);
		x.dequeue();
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test11117() {
		Queue x = new Queue();
		x.enqueue(-1165190897);
		x.isEmpty();
		x.toString();
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.toString();
		assertEquals("[]", x.toString());
		x.isFull();
		x.isEmpty();
		x.enqueue(412860735);
		x.dequeue();
    }
    @Test
    public void test11118() {
		Queue x = new Queue();
		x.enqueue(239027241);
		x.enqueue(1089991110);
		x.toString();
		x.isFull();
    }
    @Test
    public void test11119() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test11120() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(1788674450);
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test11121() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test11122() {
		Queue Var = new Queue();
		Var.enqueue(-349150546);
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.toString();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(283723791);
		Var.dequeue();
		Var.enqueue(740872949);
    }
    @Test
    public void test11123() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.toString();
		x.enqueue(-1743791189);
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.enqueue(902495962);
    }
    @Test
    public void test11124() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test11125() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(424012122);
		z.enqueue(1345294151);
		assertEquals(424012122, z.dequeue());
		z.isFull();
		z.dequeue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.dequeue();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test11126() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test11127() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(1599354405);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(2072608137);
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.toString();
		Var.enqueue(179517090);
		Var.enqueue(704558297);
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test11128() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test11129() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(49258100);
		y.isEmpty();
		assertEquals(49258100, y.dequeue());
		y.enqueue(927215043);
		y.enqueue(377256315);
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(-336599282);
		y.enqueue(837018097);
		y.isEmpty();
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test11130() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.toString();
		variable.toString();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test11131() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-1385491808);
    }
    @Test
    public void test11132() {
		Queue variable = new Queue();
		variable.enqueue(-1729450673);
		variable.isFull();
		variable.enqueue(-4925897);
		variable.isFull();
		variable.enqueue(-341718430);
		variable.isEmpty();
    }
    @Test
    public void test11133() {
		Queue Var = new Queue();
		Var.enqueue(-227536021);
		Var.enqueue(-90825130);
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-441301299);
		Var.dequeue();
    }
    @Test
    public void test11134() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-1754359476);
		z.isFull();
		z.isFull();
		z.enqueue(1757404966);
		z.enqueue(1808621701);
		z.dequeue();
		assertFalse(z.isFull());
		z.dequeue();
		z.enqueue(-601485750);
		z.toString();
    }
    @Test
    public void test11135() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test11136() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1348509929);
		z.isEmpty();
		z.enqueue(575265335);
    }
    @Test
    public void test11137() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.toString();
		x.enqueue(-403468966);
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test11138() {
		Queue x = new Queue();
		x.enqueue(-565012906);
    }
    @Test
    public void test11139() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test11140() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.enqueue(-1030184623);
		z.enqueue(1243555218);
		z.dequeue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(368535105);
		z.isEmpty();
		z.toString();
		z.toString();
		z.dequeue();
		z.enqueue(1391117912);
    }
    @Test
    public void test11141() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test11142() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(1166900152);
		variable.enqueue(1687590507);
		variable.enqueue(-35815995);
		variable.toString();
		variable.dequeue();
		assertEquals(1687590507, variable.dequeue());
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test11143() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.toString();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test11144() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(1249020827);
		x.isEmpty();
		x.isFull();
		assertEquals(1249020827, x.dequeue());
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(212925468);
    }
    @Test
    public void test11145() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(2088905947);
    }
    @Test
    public void test11146() {
		Queue variable = new Queue();
		variable.enqueue(539363106);
    }
    @Test
    public void test11147() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(-2136016178);
		variable.isFull();
		variable.enqueue(381345899);
		variable.dequeue();
    }
    @Test
    public void test11148() {
		Queue y = new Queue();
		y.enqueue(-1937346973);
		assertFalse(y.isFull());
		y.enqueue(-1517481245);
		y.dequeue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.enqueue(1653856840);
		y.dequeue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test11149() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(-1414031966);
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test11150() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.enqueue(-1254221385);
		variable.dequeue();
		variable.enqueue(35581118);
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test11151() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1353819357);
		variable.dequeue();
		variable.toString();
		variable.enqueue(-1636519180);
    }
    @Test
    public void test11152() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(1927232008);
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test11153() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
		y.isFull();
		y.dequeue();
		y.toString();
		y.enqueue(-1334881679);
		y.enqueue(1825025043);
    }
    @Test
    public void test11154() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.enqueue(1881422211);
		assertEquals("[1881422211]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test11155() {
		Queue y = new Queue();
		y.enqueue(-1471917705);
		y.enqueue(1491656111);
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test11156() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(1773971941);
    }
    @Test
    public void test11157() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test11158() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.toString();
		x.toString();
		x.enqueue(-1747274856);
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.enqueue(-1085745106);
		x.dequeue();
    }
    @Test
    public void test11159() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test11160() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(571605113);
    }
    @Test
    public void test11161() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.toString();
		variable.enqueue(450882278);
		variable.isEmpty();
		variable.toString();
		variable.enqueue(131699506);
		variable.isFull();
    }
    @Test
    public void test11162() {
		Queue y = new Queue();
		y.enqueue(574273690);
		y.toString();
		y.enqueue(822409178);
    }
    @Test
    public void test11163() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(26408723);
		assertFalse(y.isEmpty());
		y.toString();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.dequeue();
		y.enqueue(1922358292);
    }
    @Test
    public void test11164() {
		Queue y = new Queue();
		y.enqueue(-1551750046);
		y.toString();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.enqueue(-929713500);
		assertFalse(y.isFull());
		y.isFull();
		y.isFull();
    }
    @Test
    public void test11165() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.enqueue(456786833);
		Var.dequeue();
    }
    @Test
    public void test11166() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.isFull();
		z.dequeue();
		z.enqueue(802038502);
		z.dequeue();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(1271195885);
		z.isFull();
		assertFalse(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test11167() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(-647730975);
		variable.enqueue(2044232532);
    }
    @Test
    public void test11168() {
		Queue z = new Queue();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.enqueue(-1816345845);
    }
    @Test
    public void test11169() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.enqueue(2018435359);
		Var.isFull();
		Var.enqueue(669258282);
		Var.isFull();
		Var.enqueue(-2141249925);
		Var.enqueue(-1385609161);
		assertFalse(Var.isEmpty());
		Var.enqueue(86320370);
    }
    @Test
    public void test11170() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
		x.isFull();
		x.enqueue(1680179630);
		x.isFull();
    }
    @Test
    public void test11171() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-122118978);
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isFull();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.toString();
		x.toString();
		x.isFull();
    }
    @Test
    public void test11172() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1807776108);
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test11173() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		assertFalse(variable.isFull());
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test11174() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test11175() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-1837649884);
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test11176() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(905113058);
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.enqueue(-1064977005);
		Var.isFull();
    }
    @Test
    public void test11177() {
		Queue Var = new Queue();
		Var.enqueue(1596917193);
		assertEquals(1596917193, Var.dequeue());
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(2018911798);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(1234147777);
		Var.toString();
		assertEquals(2018911798, Var.dequeue());
		Var.dequeue();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test11178() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test11179() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
		assertFalse(y.isFull());
		y.toString();
		y.enqueue(-1946726605);
    }
    @Test
    public void test11180() {
		Queue z = new Queue();
		z.isFull();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
		z.isFull();
		z.isFull();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test11181() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(159622176);
		variable.isEmpty();
    }
    @Test
    public void test11182() {
		Queue x = new Queue();
		x.enqueue(1060049543);
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
		x.enqueue(-493496533);
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test11183() {
		Queue Var = new Queue();
		Var.enqueue(518851555);
		Var.enqueue(1784037673);
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test11184() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.toString();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isFull();
		y.toString();
		y.toString();
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test11185() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(689537801);
		Var.enqueue(460752349);
    }
    @Test
    public void test11186() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test11187() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1334823191);
		Var.isEmpty();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(880302687);
    }
    @Test
    public void test11188() {
		Queue Var = new Queue();
		Var.enqueue(2023710882);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(373853035);
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test11189() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isFull();
    }
    @Test
    public void test11190() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(-1926576623);
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test11191() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-2145802963);
    }
    @Test
    public void test11192() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(1538711791);
		y.isFull();
    }
    @Test
    public void test11193() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(1927706258);
		variable.enqueue(-908178129);
    }
    @Test
    public void test11194() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.enqueue(-2087282393);
    }
    @Test
    public void test11195() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(475656855);
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(618273622);
    }
    @Test
    public void test11196() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
		x.enqueue(822768791);
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test11197() {
		Queue x = new Queue();
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.toString();
		x.enqueue(-1365624710);
    }
    @Test
    public void test11198() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isEmpty();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-1231399493);
		Var.isFull();
    }
    @Test
    public void test11199() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.dequeue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.enqueue(-1199099581);
		y.isFull();
		y.enqueue(-1147837144);
    }
    @Test
    public void test11200() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(408840990);
		y.isEmpty();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test11201() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test11202() {
		Queue z = new Queue();
		z.enqueue(-940222155);
		z.enqueue(97530927);
		z.isFull();
		z.toString();
		z.isFull();
		z.toString();
		assertFalse(z.isFull());
		z.isFull();
		z.toString();
		assertEquals(97530927, z.dequeue());
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test11203() {
		Queue y = new Queue();
		y.enqueue(-1073826445);
		y.enqueue(1517684802);
		y.enqueue(-2042643908);
		y.enqueue(544945219);
		y.isEmpty();
		assertEquals(1517684802, y.dequeue());
		y.enqueue(-1403867485);
		assertEquals(544945219, y.dequeue());
		y.enqueue(1498796787);
    }
    @Test
    public void test11204() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.enqueue(1255751635);
		y.dequeue();
		y.toString();
    }
    @Test
    public void test11205() {
		Queue y = new Queue();
		y.enqueue(-421418446);
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(-1178101279);
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.toString();
		y.isEmpty();
		y.enqueue(-1934465524);
		y.toString();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test11206() {
		Queue variable = new Queue();
		variable.enqueue(-1802740933);
		variable.enqueue(86259660);
		variable.toString();
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		variable.toString();
		variable.isFull();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.toString();
    }
    @Test
    public void test11207() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test11208() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test11209() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.enqueue(-44506423);
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test11210() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test11211() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(2134664494);
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test11212() {
		Queue x = new Queue();
		x.enqueue(-790901416);
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.enqueue(-1390412359);
		x.enqueue(-1475535801);
		x.enqueue(-379018846);
		x.isEmpty();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test11213() {
		Queue x = new Queue();
		x.enqueue(-487043008);
		assertTrue(x.isEmpty());
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(-2020161025);
		x.dequeue();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test11214() {
		Queue z = new Queue();
		z.dequeue();
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test11215() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.toString();
		z.enqueue(692553349);
    }
    @Test
    public void test11216() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.isFull();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.dequeue();
    }
    @Test
    public void test11217() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-221886718);
		assertEquals("[]", variable.toString());
		variable.toString();
    }
    @Test
    public void test11218() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.enqueue(1443084864);
    }
    @Test
    public void test11219() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-2133761441);
		x.isEmpty();
		x.enqueue(1939830562);
		assertEquals("[1939830562]", x.toString());
		assertEquals("[1939830562]", x.toString());
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test11220() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.dequeue();
		variable.enqueue(798795810);
		variable.enqueue(-133063729);
		assertEquals(798795810, variable.dequeue());
		variable.toString();
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(-1321127976);
    }
    @Test
    public void test11221() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-1818199420);
		Var.enqueue(1374840005);
		assertFalse(Var.isEmpty());
		assertEquals("[1374840005]", Var.toString());
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test11222() {
		Queue variable = new Queue();
		variable.enqueue(160673791);
		variable.isFull();
		variable.toString();
		variable.enqueue(-1516300052);
		variable.enqueue(-992038097);
		variable.toString();
    }
    @Test
    public void test11223() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.enqueue(1701972001);
		assertFalse(z.isEmpty());
		z.enqueue(1551414392);
		assertEquals(1701972001, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test11224() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test11225() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test11226() {
		Queue y = new Queue();
		y.enqueue(146210124);
    }
    @Test
    public void test11227() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(-1286251936);
		z.dequeue();
		z.toString();
		z.dequeue();
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(-309952056);
		assertTrue(z.isEmpty());
		z.enqueue(-1327724529);
		z.enqueue(1295666962);
    }
    @Test
    public void test11228() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.enqueue(2101437627);
    }
    @Test
    public void test11229() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(-1008578820);
		variable.isFull();
		variable.toString();
		variable.toString();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test11230() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test11231() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-1724690784);
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(-230313786);
    }
    @Test
    public void test11232() {
		Queue z = new Queue();
		z.enqueue(1249378629);
		assertEquals("[1249378629]", z.toString());
		assertEquals("[1249378629]", z.toString());
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(721457948);
		z.enqueue(-1125951040);
		z.isFull();
		z.enqueue(-275787156);
		z.enqueue(-1441262020);
		z.isEmpty();
		z.dequeue();
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test11233() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.dequeue();
		x.enqueue(-1550340505);
    }
    @Test
    public void test11234() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.toString();
		x.enqueue(447434657);
		x.isFull();
		assertEquals(447434657, x.dequeue());
		x.enqueue(-105753866);
		assertTrue(x.isEmpty());
		x.toString();
		x.toString();
		x.isFull();
    }
    @Test
    public void test11235() {
		Queue y = new Queue();
		y.enqueue(-239853858);
		assertEquals(-1, y.dequeue());
		y.enqueue(1615514075);
		y.isEmpty();
		y.toString();
		assertFalse(y.isEmpty());
		y.isEmpty();
		y.enqueue(1972790167);
		assertFalse(y.isEmpty());
		y.enqueue(-1732741842);
    }
    @Test
    public void test11236() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test11237() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test11238() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.isEmpty();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(-664332511);
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test11239() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.isFull();
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(-1602043293);
		z.enqueue(-329107863);
		z.dequeue();
    }
    @Test
    public void test11240() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.toString();
		z.toString();
		z.isEmpty();
		z.toString();
		z.isFull();
		z.isFull();
		z.enqueue(1524488167);
		z.enqueue(-589643873);
		z.enqueue(97897266);
		z.enqueue(676122010);
    }
    @Test
    public void test11241() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-1800455062);
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(1717931893);
		Var.isEmpty();
    }
    @Test
    public void test11242() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(1193688138);
		Var.dequeue();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.enqueue(-735166488);
		Var.isEmpty();
    }
    @Test
    public void test11243() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.enqueue(-395628742);
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(-125192454);
		x.enqueue(-2047896389);
		x.enqueue(1647164018);
		x.isEmpty();
    }
    @Test
    public void test11244() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(-297137299);
		assertEquals(-1, y.dequeue());
		y.toString();
		y.toString();
		y.isFull();
    }
    @Test
    public void test11245() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.enqueue(481697284);
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test11246() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(295039332);
		assertFalse(x.isFull());
		assertFalse(x.isEmpty());
		x.toString();
		x.isEmpty();
		x.toString();
		x.enqueue(1744666226);
		x.toString();
		x.enqueue(72533193);
		x.dequeue();
    }
    @Test
    public void test11247() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test11248() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(1194690084);
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.enqueue(-75781477);
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test11249() {
		Queue z = new Queue();
		z.enqueue(294812593);
		z.isFull();
    }
    @Test
    public void test11250() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.enqueue(1369406991);
		x.enqueue(-1617389324);
		x.dequeue();
    }
    @Test
    public void test11251() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(666325282);
		assertEquals(666325282, variable.dequeue());
		variable.enqueue(577161298);
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test11252() {
		Queue variable = new Queue();
		variable.enqueue(-1816690121);
		variable.isEmpty();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(-1552390974);
    }
    @Test
    public void test11253() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test11254() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.enqueue(1147878039);
		x.toString();
		assertFalse(x.isFull());
		assertEquals(1147878039, x.dequeue());
		x.toString();
    }
    @Test
    public void test11255() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test11256() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test11257() {
		Queue y = new Queue();
		y.enqueue(678739741);
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.enqueue(-552978454);
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test11258() {
		Queue Var = new Queue();
		Var.enqueue(1466679161);
    }
    @Test
    public void test11259() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
    }
    @Test
    public void test11260() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.enqueue(-633499038);
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.enqueue(-962958147);
    }
    @Test
    public void test11261() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(59587087);
		variable.toString();
		variable.enqueue(1798962397);
		variable.toString();
		assertFalse(variable.isFull());
		assertFalse(variable.isEmpty());
		variable.isFull();
		assertEquals("[59587087, 1798962397]", variable.toString());
		variable.enqueue(519788076);
    }
    @Test
    public void test11262() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(161957884);
		y.dequeue();
		y.enqueue(1570333037);
		y.isFull();
    }
    @Test
    public void test11263() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.enqueue(-185020515);
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.enqueue(509695346);
		z.isFull();
		z.toString();
		z.isEmpty();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test11264() {
		Queue x = new Queue();
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
		x.enqueue(1187765130);
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.dequeue();
    }
    @Test
    public void test11265() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isFull();
		z.enqueue(-837881683);
		z.isFull();
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test11266() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-1215266858);
    }
    @Test
    public void test11267() {
		Queue z = new Queue();
		z.enqueue(-472022589);
		z.isFull();
		assertFalse(z.isFull());
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.enqueue(1388792024);
		z.toString();
		z.toString();
		assertFalse(z.isFull());
		z.toString();
		z.isFull();
    }
    @Test
    public void test11268() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(757368761);
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(624088847);
		x.toString();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test11269() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.isFull();
		assertTrue(y.isEmpty());
		y.enqueue(-954356698);
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test11270() {
		Queue z = new Queue();
		z.enqueue(1078554757);
		z.toString();
		z.isFull();
		assertEquals("[1078554757]", z.toString());
		assertEquals("[1078554757]", z.toString());
		z.enqueue(-2124348563);
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test11271() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test11272() {
		Queue y = new Queue();
		y.enqueue(-407630652);
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.toString();
    }
    @Test
    public void test11273() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.toString();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-1039977700);
    }
    @Test
    public void test11274() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.isFull();
		y.isFull();
		assertTrue(y.isEmpty());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(-1118292210);
		assertFalse(y.isFull());
		y.isEmpty();
		y.enqueue(529182272);
    }
    @Test
    public void test11275() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(-1698020621);
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(449852324);
		Var.enqueue(808210292);
		Var.enqueue(-918720990);
		assertFalse(Var.isEmpty());
		assertFalse(Var.isEmpty());
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test11276() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.isFull();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.toString();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test11277() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(1338409533);
		variable.enqueue(-1416263999);
		variable.dequeue();
		variable.enqueue(-39053689);
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test11278() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.isFull();
		z.toString();
    }
    @Test
    public void test11279() {
		Queue x = new Queue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isFull();
		x.toString();
		x.enqueue(1136054067);
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		assertEquals("[1136054067]", x.toString());
		assertEquals(1136054067, x.dequeue());
		x.toString();
    }
    @Test
    public void test11280() {
		Queue z = new Queue();
		z.isFull();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(1967473191);
		z.dequeue();
		z.dequeue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test11281() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.dequeue();
		y.isFull();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(944882082);
    }
    @Test
    public void test11282() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.dequeue();
		y.isFull();
		y.isEmpty();
		y.isFull();
		assertFalse(y.isFull());
		y.dequeue();
		y.toString();
		y.isFull();
    }
    @Test
    public void test11283() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.enqueue(1573805517);
    }
    @Test
    public void test11284() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.enqueue(1055139610);
    }
    @Test
    public void test11285() {
		Queue z = new Queue();
		z.enqueue(-1322526575);
		z.enqueue(1176823919);
		assertFalse(z.isEmpty());
		z.toString();
    }
    @Test
    public void test11286() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.isEmpty();
		z.toString();
		z.dequeue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.dequeue();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test11287() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
    }
    @Test
    public void test11288() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-1168026630);
		variable.enqueue(-1004661887);
		assertEquals("[]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test11289() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test11290() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.isFull();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1733587083);
		Var.enqueue(-705237173);
    }
    @Test
    public void test11291() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test11292() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.enqueue(-229361072);
		z.toString();
		z.dequeue();
		z.isEmpty();
		z.enqueue(-1265095884);
    }
    @Test
    public void test11293() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(360903018);
		x.isFull();
		x.dequeue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test11294() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(1373913662);
		assertEquals("[1373913662]", y.toString());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.dequeue();
		y.toString();
		y.isFull();
		y.toString();
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test11295() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(-1895095336);
		variable.enqueue(-6679256);
		variable.isFull();
		variable.toString();
		variable.isFull();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test11296() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.toString();
    }
    @Test
    public void test11297() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(426578738);
		assertEquals(426578738, x.dequeue());
		x.isEmpty();
		x.dequeue();
		x.enqueue(-1153172821);
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.enqueue(-165381208);
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test11298() {
		Queue x = new Queue();
		x.enqueue(-2125062576);
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(-1778384219);
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test11299() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test11300() {
		Queue z = new Queue();
		z.enqueue(1708160063);
		z.isEmpty();
		z.toString();
		z.isFull();
    }
    @Test
    public void test11301() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-988547643);
		y.dequeue();
    }
    @Test
    public void test11302() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(-1324893337);
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.toString();
		variable.enqueue(-1496211692);
    }
    @Test
    public void test11303() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.enqueue(1090242336);
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(-312592595);
		x.dequeue();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.enqueue(-974164575);
    }
    @Test
    public void test11304() {
		Queue y = new Queue();
		y.toString();
		assertTrue(y.isEmpty());
		y.enqueue(1975639991);
		y.enqueue(-298139980);
		assertFalse(y.isEmpty());
		assertFalse(y.isFull());
		assertEquals(1975639991, y.dequeue());
		y.dequeue();
		y.enqueue(504554088);
		y.toString();
    }
    @Test
    public void test11305() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.toString();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1745938256);
		Var.enqueue(127560323);
		assertEquals("[127560323]", Var.toString());
		Var.enqueue(-924113398);
		Var.enqueue(-1319180675);
		Var.enqueue(-132443525);
		assertEquals("[127560323]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test11306() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(2018533694);
    }
    @Test
    public void test11307() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.isEmpty();
		z.isFull();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(624568467);
		assertFalse(z.isFull());
		assertEquals(624568467, z.dequeue());
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(-2029065849);
		z.toString();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test11308() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.enqueue(915481346);
		x.isFull();
    }
    @Test
    public void test11309() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test11310() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(-1262576419);
    }
    @Test
    public void test11311() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test11312() {
		Queue y = new Queue();
		y.enqueue(-504898301);
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.toString();
		y.toString();
    }
    @Test
    public void test11313() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test11314() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.toString();
		Var.enqueue(-639317280);
		Var.toString();
    }
    @Test
    public void test11315() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(1540236418);
		assertEquals("[1540236418]", x.toString());
		x.toString();
		x.isEmpty();
		x.isEmpty();
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test11316() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test11317() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isFull();
		Var.enqueue(-2017356090);
    }
    @Test
    public void test11318() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
    }
    @Test
    public void test11319() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test11320() {
		Queue variable = new Queue();
		variable.enqueue(1427681574);
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.toString();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test11321() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test11322() {
		Queue Var = new Queue();
		Var.enqueue(118544792);
		Var.enqueue(-2095498191);
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test11323() {
		Queue x = new Queue();
		x.enqueue(940991153);
		assertFalse(x.isEmpty());
		assertFalse(x.isEmpty());
		x.enqueue(1360568876);
		assertFalse(x.isEmpty());
		x.toString();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test11324() {
		Queue x = new Queue();
		x.enqueue(-1129170879);
		x.enqueue(-1281452107);
		x.enqueue(1499091187);
		assertEquals(1499091187, x.dequeue());
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.enqueue(508320957);
		assertFalse(x.isFull());
		x.enqueue(-542842812);
		x.dequeue();
    }
    @Test
    public void test11325() {
		Queue z = new Queue();
		z.enqueue(579083189);
		z.dequeue();
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test11326() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test11327() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isFull();
		x.enqueue(-60955568);
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.toString();
		x.toString();
		x.isFull();
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test11328() {
		Queue x = new Queue();
		x.enqueue(501509309);
		x.toString();
		x.enqueue(2045272326);
		x.dequeue();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test11329() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1375264698);
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test11330() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-1335450713);
		variable.dequeue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(1036724654);
		assertEquals("[1036724654]", variable.toString());
		assertFalse(variable.isFull());
		assertEquals(1036724654, variable.dequeue());
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test11331() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test11332() {
		Queue Var = new Queue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1770657444);
		Var.isFull();
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.enqueue(551225499);
    }
    @Test
    public void test11333() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.dequeue();
		y.enqueue(-110035880);
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.toString();
		y.dequeue();
    }
    @Test
    public void test11334() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.toString();
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(-1567058964);
		x.dequeue();
		x.toString();
		x.enqueue(-427646506);
    }
    @Test
    public void test11335() {
		Queue Var = new Queue();
		Var.enqueue(-844669577);
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(1505033097);
		Var.enqueue(-1680970054);
		assertEquals(1505033097, Var.dequeue());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test11336() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.enqueue(-1314963468);
		z.dequeue();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test11337() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test11338() {
		Queue z = new Queue();
		z.enqueue(-1198481535);
		assertEquals(-1, z.dequeue());
		z.enqueue(382655453);
		z.enqueue(-784913348);
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test11339() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test11340() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.toString();
		y.toString();
    }
    @Test
    public void test11341() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.enqueue(-606028664);
		x.toString();
		x.toString();
    }
    @Test
    public void test11342() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test11343() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.enqueue(692450929);
		x.isEmpty();
		assertFalse(x.isFull());
		x.isFull();
		x.isFull();
		assertEquals(692450929, x.dequeue());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test11344() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test11345() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test11346() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(-1411776915);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.enqueue(872298500);
		Var.isEmpty();
		assertEquals(872298500, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test11347() {
		Queue z = new Queue();
		z.enqueue(-270704682);
		z.enqueue(1032386726);
		assertFalse(z.isEmpty());
		z.isFull();
		assertEquals("[1032386726]", z.toString());
		z.enqueue(1407794594);
		z.toString();
		assertEquals("[1032386726, 1407794594]", z.toString());
		assertFalse(z.isFull());
		assertEquals("[1032386726, 1407794594]", z.toString());
		assertEquals(1032386726, z.dequeue());
		assertFalse(z.isFull());
		assertFalse(z.isEmpty());
		z.toString();
		z.dequeue();
    }
    @Test
    public void test11348() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(2085198866);
		variable.enqueue(-1318925004);
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-624081899);
		variable.isEmpty();
    }
    @Test
    public void test11349() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(1862425181);
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(1693183433);
		Var.enqueue(2046359868);
		assertFalse(Var.isEmpty());
		assertFalse(Var.isEmpty());
		assertEquals(1693183433, Var.dequeue());
		Var.toString();
		Var.toString();
		Var.enqueue(1155057671);
		assertEquals(2046359868, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test11350() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-243818826);
    }
    @Test
    public void test11351() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(1727698700);
		assertFalse(Var.isEmpty());
		Var.enqueue(1166464076);
		Var.isFull();
		assertEquals(1727698700, Var.dequeue());
		Var.enqueue(1748850234);
		assertEquals("[1166464076, 1748850234]", Var.toString());
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test11352() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(506363672);
		assertEquals(506363672, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test11353() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test11354() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.dequeue();
		assertFalse(x.isFull());
		x.isFull();
    }
    @Test
    public void test11355() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(853916263);
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		assertEquals("[853916263]", Var.toString());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.enqueue(-200867153);
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test11356() {
		Queue x = new Queue();
		x.enqueue(382215946);
		assertEquals(382215946, x.dequeue());
		x.dequeue();
		x.isFull();
		x.toString();
		x.enqueue(-649820086);
		x.toString();
    }
    @Test
    public void test11357() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(940537264);
		z.toString();
		z.isFull();
		z.enqueue(-1729640151);
		assertFalse(z.isEmpty());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.toString();
		z.enqueue(1924780481);
    }
    @Test
    public void test11358() {
		Queue z = new Queue();
		z.enqueue(-585518251);
		assertFalse(z.isFull());
		z.toString();
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
		z.isFull();
		z.isEmpty();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test11359() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test11360() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(-816229292);
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-253072423);
		Var.enqueue(1259253735);
		Var.enqueue(-233389772);
		Var.toString();
    }
    @Test
    public void test11361() {
		Queue y = new Queue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		assertTrue(y.isEmpty());
		y.toString();
		assertTrue(y.isEmpty());
		y.enqueue(-2147243043);
		y.enqueue(-457174540);
    }
    @Test
    public void test11362() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test11363() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(1675288971);
		y.isFull();
		assertEquals("[1675288971]", y.toString());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isFull();
		assertTrue(y.isEmpty());
		y.enqueue(1903598535);
		y.isEmpty();
    }
    @Test
    public void test11364() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test11365() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(753291278);
		y.dequeue();
		y.enqueue(-560517508);
		y.enqueue(-902002421);
		y.enqueue(1522317139);
		y.toString();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test11366() {
		Queue x = new Queue();
		x.enqueue(-1604068165);
		x.enqueue(1093084030);
		assertEquals(1093084030, x.dequeue());
		x.enqueue(-2095145927);
		assertFalse(x.isFull());
		x.enqueue(-261962119);
		assertEquals("[]", x.toString());
		x.isFull();
		x.isFull();
    }
    @Test
    public void test11367() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isFull();
		Var.enqueue(-1973305481);
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test11368() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-1532023433);
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(1908803258);
		variable.isFull();
    }
    @Test
    public void test11369() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.enqueue(-1589635720);
		x.enqueue(127278059);
		x.enqueue(1613061459);
		assertFalse(x.isEmpty());
		x.isFull();
		x.toString();
		x.enqueue(-58207445);
    }
    @Test
    public void test11370() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test11371() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.enqueue(1365251181);
		variable.toString();
		variable.toString();
		variable.isFull();
		variable.enqueue(105139509);
		variable.toString();
    }
    @Test
    public void test11372() {
		Queue Var = new Queue();
		Var.enqueue(-1891968704);
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1889495348);
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(701968852);
    }
    @Test
    public void test11373() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-624989992);
		assertEquals("[]", z.toString());
		z.isFull();
		z.dequeue();
		z.isFull();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test11374() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.dequeue();
		x.toString();
		x.toString();
		x.dequeue();
		x.isFull();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.toString();
		x.dequeue();
    }
    @Test
    public void test11375() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.enqueue(1628780063);
		assertEquals("[1628780063]", x.toString());
		x.isFull();
    }
    @Test
    public void test11376() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.enqueue(-933386974);
		x.enqueue(-1016803066);
		x.dequeue();
		x.isEmpty();
		x.enqueue(634977931);
    }
    @Test
    public void test11377() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(-92988941);
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isFull();
		variable.toString();
		assertFalse(variable.isFull());
		variable.toString();
		variable.toString();
    }
    @Test
    public void test11378() {
		Queue Var = new Queue();
		Var.enqueue(-1312909330);
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test11379() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-275755922);
		variable.isEmpty();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test11380() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.toString();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		y.toString();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test11381() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.toString();
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test11382() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(1602257927);
		variable.dequeue();
		variable.enqueue(-1179903215);
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1844533500);
		variable.isEmpty();
		variable.enqueue(697740656);
		variable.isEmpty();
    }
    @Test
    public void test11383() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isEmpty();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test11384() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(-2007290405);
		y.isFull();
		y.enqueue(541775396);
		y.enqueue(-520483857);
    }
    @Test
    public void test11385() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isFull();
		variable.toString();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test11386() {
		Queue variable = new Queue();
		variable.enqueue(-1438626294);
    }
    @Test
    public void test11387() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test11388() {
		Queue x = new Queue();
		x.enqueue(-399871730);
    }
    @Test
    public void test11389() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.toString();
    }
    @Test
    public void test11390() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-1680034071);
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test11391() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-320678281);
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isEmpty();
		x.enqueue(-2017091528);
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test11392() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.toString();
		y.isEmpty();
		y.dequeue();
		y.toString();
		y.isEmpty();
		y.enqueue(506150323);
    }
    @Test
    public void test11393() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(1109548076);
		assertEquals("[1109548076]", Var.toString());
		Var.isFull();
		assertFalse(Var.isFull());
		Var.toString();
		assertFalse(Var.isEmpty());
		assertFalse(Var.isEmpty());
		Var.enqueue(-1022757162);
		Var.toString();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test11394() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(1476110171);
		y.isFull();
		y.isFull();
		assertFalse(y.isFull());
		y.isEmpty();
		assertEquals(1476110171, y.dequeue());
		y.isFull();
		y.toString();
		y.toString();
    }
    @Test
    public void test11395() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test11396() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-1367184963);
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.enqueue(-139691225);
		Var.toString();
		Var.toString();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test11397() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1670240045);
		variable.dequeue();
    }
    @Test
    public void test11398() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-1869094961);
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(2036608524);
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test11399() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.isFull();
    }
    @Test
    public void test11400() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.dequeue();
		z.isEmpty();
		z.toString();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test11401() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
		Var.enqueue(-1852481555);
		Var.enqueue(834036722);
		Var.isEmpty();
		Var.enqueue(1460832061);
    }
    @Test
    public void test11402() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.dequeue();
    }
    @Test
    public void test11403() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(1960424929);
    }
    @Test
    public void test11404() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		x.isFull();
		x.isFull();
    }
    @Test
    public void test11405() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-1390849439);
    }
    @Test
    public void test11406() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(785650114);
		variable.toString();
		variable.enqueue(-1251650917);
		variable.enqueue(1163282453);
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(-1676945077);
		variable.enqueue(912990639);
		assertFalse(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.enqueue(813776289);
		assertEquals(1163282453, variable.dequeue());
		assertEquals("[912990639, 813776289]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test11407() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1899383887);
		variable.enqueue(1510620217);
		variable.isFull();
		assertEquals(1510620217, variable.dequeue());
		variable.enqueue(1859150999);
		variable.dequeue();
		variable.toString();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test11408() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test11409() {
		Queue y = new Queue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.enqueue(107847827);
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test11410() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.enqueue(1682069247);
    }
    @Test
    public void test11411() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-495876575);
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(-206303632);
		x.isFull();
		x.toString();
		x.dequeue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.enqueue(-1028008414);
    }
    @Test
    public void test11412() {
		Queue x = new Queue();
		x.enqueue(-142685487);
		x.enqueue(620451860);
		x.toString();
		x.toString();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test11413() {
		Queue z = new Queue();
		z.enqueue(1747470236);
		z.enqueue(1641208660);
		z.dequeue();
		z.enqueue(2043981569);
    }
    @Test
    public void test11414() {
		Queue x = new Queue();
		x.enqueue(1142660902);
		x.enqueue(404924740);
		x.isEmpty();
		x.toString();
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(860640963);
		x.enqueue(-2142415456);
    }
    @Test
    public void test11415() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
    }
    @Test
    public void test11416() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test11417() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.isFull();
		x.enqueue(1231322256);
		x.enqueue(-1288456803);
		x.isFull();
    }
    @Test
    public void test11418() {
		Queue z = new Queue();
		z.enqueue(-39209189);
		assertEquals("[]", z.toString());
		z.toString();
		z.enqueue(1930136276);
		assertEquals(1930136276, z.dequeue());
		z.enqueue(-484569974);
    }
    @Test
    public void test11419() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-1588639584);
		y.enqueue(-1977771943);
		y.enqueue(-512540394);
    }
    @Test
    public void test11420() {
		Queue y = new Queue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.enqueue(1748897107);
		y.isEmpty();
    }
    @Test
    public void test11421() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-60575673);
		variable.enqueue(-673410388);
    }
    @Test
    public void test11422() {
		Queue variable = new Queue();
		variable.enqueue(-1983311936);
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(176468943);
		variable.enqueue(-1052683213);
		variable.isFull();
    }
    @Test
    public void test11423() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(-1281995182);
		y.toString();
		y.enqueue(1494903456);
		assertFalse(y.isFull());
		y.toString();
		y.enqueue(-349930542);
    }
    @Test
    public void test11424() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.toString();
		variable.enqueue(956538846);
		variable.enqueue(-1876130145);
		variable.toString();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test11425() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(-784450395);
    }
    @Test
    public void test11426() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(501978703);
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test11427() {
		Queue y = new Queue();
		y.enqueue(1692891146);
    }
    @Test
    public void test11428() {
		Queue y = new Queue();
		y.enqueue(1657407066);
    }
    @Test
    public void test11429() {
		Queue z = new Queue();
		z.enqueue(-254431089);
		z.enqueue(-1451123385);
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.enqueue(2120266312);
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(-100668737);
    }
    @Test
    public void test11430() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-1068275408);
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.enqueue(-2095293410);
		Var.enqueue(507136285);
		assertEquals(507136285, Var.dequeue());
		Var.enqueue(153328145);
		Var.enqueue(579960021);
		Var.toString();
		Var.isFull();
		Var.enqueue(1140855234);
    }
    @Test
    public void test11431() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		assertTrue(z.isEmpty());
		z.toString();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(1546110150);
		assertEquals(1546110150, z.dequeue());
		z.enqueue(-1481923837);
		z.enqueue(473153492);
		z.isEmpty();
    }
    @Test
    public void test11432() {
		Queue y = new Queue();
		y.enqueue(1109479734);
		y.toString();
		y.isEmpty();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test11433() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(1621542022);
		x.isFull();
		assertFalse(x.isEmpty());
		x.dequeue();
		x.enqueue(1220959630);
		x.toString();
    }
    @Test
    public void test11434() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-403421535);
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-1650056553);
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(1015856511);
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test11435() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test11436() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-1973646058);
		z.isFull();
		z.isFull();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.dequeue();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test11437() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(242723993);
		z.isFull();
		z.isFull();
    }
    @Test
    public void test11438() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.toString();
		y.enqueue(-25594970);
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.enqueue(-862061809);
		y.enqueue(160093461);
		y.isFull();
		y.enqueue(-709656079);
    }
    @Test
    public void test11439() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test11440() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test11441() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test11442() {
		Queue y = new Queue();
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(-1039655997);
		y.toString();
    }
    @Test
    public void test11443() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1041208260);
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test11444() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(1197180240);
		z.enqueue(808085045);
		z.enqueue(648277157);
		z.enqueue(-880876069);
    }
    @Test
    public void test11445() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-143395518);
		Var.toString();
		Var.dequeue();
		Var.toString();
		Var.enqueue(-1347949235);
		Var.toString();
		Var.toString();
    }
    @Test
    public void test11446() {
		Queue y = new Queue();
		y.enqueue(1647741888);
    }
    @Test
    public void test11447() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.isFull();
    }
    @Test
    public void test11448() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-1882279751);
		assertFalse(variable.isFull());
		variable.enqueue(-762876189);
		variable.enqueue(2047187452);
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test11449() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-1161801701);
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1430331875);
		Var.toString();
		assertEquals(1430331875, Var.dequeue());
		Var.enqueue(-689485413);
		assertTrue(Var.isEmpty());
		Var.enqueue(275543590);
		assertEquals(275543590, Var.dequeue());
		Var.enqueue(-1675168729);
    }
    @Test
    public void test11450() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.toString();
		x.dequeue();
		x.isFull();
		x.enqueue(-1009760017);
		x.enqueue(-183470825);
    }
    @Test
    public void test11451() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(-2091087113);
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isEmpty();
		variable.toString();
		variable.enqueue(182695321);
		assertEquals("[182695321]", variable.toString());
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test11452() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.enqueue(-1178781592);
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(766724954);
    }
    @Test
    public void test11453() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test11454() {
		Queue z = new Queue();
		z.enqueue(-140255877);
		z.isEmpty();
    }
    @Test
    public void test11455() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-7130121);
    }
    @Test
    public void test11456() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test11457() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.toString();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		variable.enqueue(332571968);
		variable.dequeue();
    }
    @Test
    public void test11458() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isFull();
		assertEquals("[]", z.toString());
		z.enqueue(1281598600);
    }
    @Test
    public void test11459() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(2133485365);
		assertEquals(2133485365, Var.dequeue());
		Var.isFull();
		Var.enqueue(2043336706);
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.toString();
		Var.enqueue(-110510176);
    }
    @Test
    public void test11460() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.enqueue(145411436);
    }
    @Test
    public void test11461() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(2011631529);
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		variable.enqueue(-1312400029);
		assertEquals(2011631529, variable.dequeue());
		variable.toString();
		variable.enqueue(-972896439);
    }
    @Test
    public void test11462() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(986246727);
		variable.isEmpty();
    }
    @Test
    public void test11463() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.dequeue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(-897286385);
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(1262060976);
		variable.isEmpty();
    }
    @Test
    public void test11464() {
		Queue z = new Queue();
		z.enqueue(986488012);
		assertFalse(z.isEmpty());
		assertFalse(z.isEmpty());
		z.dequeue();
		z.isFull();
		z.toString();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test11465() {
		Queue y = new Queue();
		y.enqueue(-837364739);
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test11466() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.toString();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.enqueue(267703660);
		assertFalse(y.isEmpty());
		y.isFull();
		y.isFull();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test11467() {
		Queue z = new Queue();
		z.enqueue(1047328756);
		z.isEmpty();
		z.toString();
		assertFalse(z.isEmpty());
		assertFalse(z.isEmpty());
		z.enqueue(-910062741);
    }
    @Test
    public void test11468() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-1071934420);
		Var.isEmpty();
		Var.enqueue(1074812529);
		Var.enqueue(1543092068);
    }
    @Test
    public void test11469() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(2085689282);
		assertFalse(z.isFull());
		z.isFull();
		z.isFull();
		z.enqueue(409966461);
		z.isFull();
    }
    @Test
    public void test11470() {
		Queue z = new Queue();
		z.toString();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.enqueue(328804898);
		z.dequeue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test11471() {
		Queue x = new Queue();
		x.dequeue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.enqueue(-1002866446);
		x.dequeue();
    }
    @Test
    public void test11472() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test11473() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.enqueue(1383709152);
    }
    @Test
    public void test11474() {
		Queue z = new Queue();
		z.enqueue(494006861);
		z.isEmpty();
		z.isEmpty();
		z.toString();
		z.isEmpty();
		z.toString();
		z.enqueue(-1954867171);
    }
    @Test
    public void test11475() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-1377570367);
		x.isFull();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.enqueue(-1452574109);
		x.enqueue(-1658185659);
		assertEquals("[]", x.toString());
		x.enqueue(-7112802);
		x.isFull();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.enqueue(1327574830);
		x.enqueue(-418585079);
		x.dequeue();
    }
    @Test
    public void test11476() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(1263211547);
		x.dequeue();
		x.enqueue(-2084178367);
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test11477() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.dequeue();
		y.enqueue(757383113);
		y.isFull();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test11478() {
		Queue variable = new Queue();
		variable.enqueue(-1755238607);
		variable.enqueue(1864040252);
		variable.enqueue(2071223473);
		assertEquals("[1864040252, 2071223473]", variable.toString());
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-1024925352);
		assertEquals(1864040252, variable.dequeue());
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test11479() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test11480() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(-337265881);
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test11481() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test11482() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(526245733);
		y.enqueue(1483534677);
		y.enqueue(2083638504);
		y.toString();
		y.enqueue(-673541837);
		assertFalse(y.isEmpty());
		assertEquals(526245733, y.dequeue());
		assertEquals(1483534677, y.dequeue());
		y.enqueue(968971745);
		y.enqueue(-658046704);
		y.toString();
		y.enqueue(1084706398);
    }
    @Test
    public void test11483() {
		Queue variable = new Queue();
		variable.enqueue(574143395);
		variable.enqueue(1729788720);
		variable.toString();
		assertEquals("[574143395, 1729788720]", variable.toString());
		assertFalse(variable.isEmpty());
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test11484() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test11485() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test11486() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.toString();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isEmpty();
		z.isFull();
		z.isFull();
		z.enqueue(422132326);
    }
    @Test
    public void test11487() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(1239692935);
		variable.toString();
		assertEquals(1239692935, variable.dequeue());
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(-581158806);
		variable.dequeue();
		variable.enqueue(-1185158753);
		variable.enqueue(-1482317152);
    }
    @Test
    public void test11488() {
		Queue z = new Queue();
		z.enqueue(-242159798);
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.dequeue();
		z.toString();
		z.dequeue();
		z.isEmpty();
		z.toString();
		z.enqueue(-98472727);
		z.enqueue(518282375);
    }
    @Test
    public void test11489() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test11490() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test11491() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.enqueue(-781694892);
		Var.isFull();
    }
    @Test
    public void test11492() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.toString();
		x.dequeue();
		x.enqueue(1121985289);
		x.isFull();
		x.enqueue(-2013103532);
		assertEquals("[1121985289]", x.toString());
		x.dequeue();
		x.enqueue(-131234244);
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test11493() {
		Queue variable = new Queue();
		variable.enqueue(-340491755);
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(931893680);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
		assertEquals(931893680, variable.dequeue());
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(1367742673);
		assertFalse(variable.isEmpty());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test11494() {
		Queue x = new Queue();
		x.enqueue(887511704);
		x.dequeue();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test11495() {
		Queue Var = new Queue();
		Var.enqueue(344389032);
		assertFalse(Var.isEmpty());
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test11496() {
		Queue y = new Queue();
		y.enqueue(-1351196611);
    }
    @Test
    public void test11497() {
		Queue Var = new Queue();
		Var.enqueue(809872672);
		Var.toString();
		assertEquals(809872672, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test11498() {
		Queue z = new Queue();
		z.enqueue(660228627);
		z.enqueue(-2087107832);
		z.isEmpty();
		z.toString();
		z.enqueue(1497453532);
		z.enqueue(-282187736);
		z.toString();
    }
    @Test
    public void test11499() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-1751838783);
		x.isFull();
		x.enqueue(-1224843575);
		assertEquals("[]", x.toString());
		x.dequeue();
		x.enqueue(1180609094);
		assertFalse(x.isFull());
		assertFalse(x.isEmpty());
		x.isFull();
		x.dequeue();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test11500() {
		Queue x = new Queue();
		x.enqueue(1171442672);
		x.enqueue(588138706);
		x.isFull();
		x.isEmpty();
		assertEquals(1171442672, x.dequeue());
		assertFalse(x.isFull());
		x.dequeue();
		x.isFull();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test11501() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.enqueue(1080517403);
		x.isFull();
		x.isFull();
		x.enqueue(-2061081885);
		x.toString();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test11502() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
		y.isEmpty();
		y.enqueue(-1618447909);
		assertEquals(-1, y.dequeue());
		y.toString();
    }
    @Test
    public void test11503() {
		Queue Var = new Queue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.toString();
		Var.dequeue();
		Var.enqueue(-176279150);
		Var.isFull();
		Var.enqueue(1887564140);
    }
    @Test
    public void test11504() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(-1937432295);
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.isFull();
		z.isFull();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.dequeue();
    }
    @Test
    public void test11505() {
		Queue y = new Queue();
		y.enqueue(-907743729);
		assertEquals("[]", y.toString());
		y.enqueue(1453511124);
		y.toString();
		y.enqueue(2060861418);
		assertFalse(y.isEmpty());
		y.isFull();
		y.enqueue(269933074);
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test11506() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.enqueue(1370246092);
		assertEquals("[1370246092]", x.toString());
		x.isFull();
    }
    @Test
    public void test11507() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isFull();
		z.toString();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test11508() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test11509() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(953758712);
		x.enqueue(2019502987);
		assertFalse(x.isEmpty());
		x.enqueue(509191490);
		assertFalse(x.isFull());
		assertFalse(x.isEmpty());
		x.isFull();
		x.enqueue(641359026);
		x.toString();
		assertFalse(x.isEmpty());
		x.dequeue();
		x.isFull();
		x.toString();
		x.enqueue(-1500242832);
    }
    @Test
    public void test11510() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test11511() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(-93624482);
		y.isFull();
    }
    @Test
    public void test11512() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.isFull();
		y.isFull();
		y.toString();
    }
    @Test
    public void test11513() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(880258380);
		z.isFull();
		z.enqueue(-1844825600);
		z.isFull();
		z.dequeue();
		z.isFull();
		z.isFull();
		z.enqueue(-219927868);
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test11514() {
		Queue x = new Queue();
		x.enqueue(2014328698);
		x.isEmpty();
		assertEquals("[2014328698]", x.toString());
		x.isFull();
		x.enqueue(-1159685897);
		x.toString();
		assertEquals("[2014328698]", x.toString());
		x.toString();
		x.toString();
		assertEquals(2014328698, x.dequeue());
		x.isEmpty();
		x.enqueue(-1602207460);
    }
    @Test
    public void test11515() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(455771750);
    }
    @Test
    public void test11516() {
		Queue x = new Queue();
		x.enqueue(-530981108);
		x.isFull();
    }
    @Test
    public void test11517() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test11518() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-1344986712);
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(-214261280);
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test11519() {
		Queue variable = new Queue();
		variable.enqueue(-733515105);
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test11520() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(159137251);
		Var.dequeue();
		Var.enqueue(-1124516581);
		Var.isFull();
    }
    @Test
    public void test11521() {
		Queue z = new Queue();
		z.enqueue(-671089845);
    }
    @Test
    public void test11522() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(552346017);
		assertEquals(552346017, z.dequeue());
		z.dequeue();
		z.enqueue(-1383943664);
		z.isEmpty();
		z.dequeue();
		z.enqueue(-1772182486);
    }
    @Test
    public void test11523() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-2024118347);
    }
    @Test
    public void test11524() {
		Queue z = new Queue();
		z.enqueue(646129210);
		z.isEmpty();
		assertFalse(z.isFull());
		z.isEmpty();
		assertEquals(646129210, z.dequeue());
		assertEquals("[]", z.toString());
		z.dequeue();
		z.toString();
		z.enqueue(-617264134);
		assertFalse(z.isFull());
		z.enqueue(-362774249);
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test11525() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test11526() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.enqueue(2015471184);
		y.isFull();
		assertFalse(y.isEmpty());
		y.dequeue();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.enqueue(-1979378826);
		y.dequeue();
		y.isFull();
		y.enqueue(-898296253);
		y.enqueue(395949410);
    }
    @Test
    public void test11527() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test11528() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.enqueue(1473952782);
		assertEquals("[1473952782]", y.toString());
		y.isFull();
		y.isEmpty();
		y.isFull();
		assertEquals("[1473952782]", y.toString());
		y.dequeue();
    }
    @Test
    public void test11529() {
		Queue Var = new Queue();
		Var.enqueue(-1619124229);
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(1519550120);
		Var.isFull();
		Var.isEmpty();
		assertEquals(1519550120, Var.dequeue());
		Var.toString();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test11530() {
		Queue Var = new Queue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.enqueue(-572931827);
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.enqueue(1427166868);
		assertEquals("[1427166868]", Var.toString());
		Var.isEmpty();
		assertEquals("[1427166868]", Var.toString());
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.enqueue(-721790465);
    }
    @Test
    public void test11531() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(686389734);
		assertEquals(686389734, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test11532() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(13965443);
		assertEquals("[13965443]", variable.toString());
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-2065155908);
    }
    @Test
    public void test11533() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-275400929);
		z.isEmpty();
    }
    @Test
    public void test11534() {
		Queue x = new Queue();
		x.enqueue(2001004463);
		x.dequeue();
		assertEquals("[]", x.toString());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(1359863929);
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(-81074711);
		x.isFull();
    }
    @Test
    public void test11535() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test11536() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.enqueue(-607516977);
    }
    @Test
    public void test11537() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(1568291040);
		y.enqueue(860583438);
		y.enqueue(-1889806134);
		y.isEmpty();
		assertEquals("[1568291040, 860583438]", y.toString());
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		y.enqueue(-1945476742);
		y.dequeue();
    }
    @Test
    public void test11538() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(1596835089);
		Var.enqueue(1920105790);
    }
    @Test
    public void test11539() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		z.isEmpty();
		z.isFull();
		z.isFull();
		z.dequeue();
		z.enqueue(1540140781);
    }
    @Test
    public void test11540() {
		Queue z = new Queue();
		z.enqueue(-1235831771);
		z.dequeue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(-124935432);
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test11541() {
		Queue Var = new Queue();
		Var.enqueue(-1977062429);
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test11542() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.isFull();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test11543() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.dequeue();
		assertFalse(x.isFull());
		x.isFull();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test11544() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.enqueue(1499068700);
		x.isFull();
		x.isEmpty();
		assertFalse(x.isEmpty());
		assertEquals(1499068700, x.dequeue());
		x.isEmpty();
		x.enqueue(-8352490);
    }
    @Test
    public void test11545() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.enqueue(-95633585);
		y.isFull();
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test11546() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(1557438894);
		Var.enqueue(-1353064721);
		assertEquals(1557438894, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.enqueue(1384106074);
		Var.enqueue(-158637314);
		Var.isFull();
    }
    @Test
    public void test11547() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.enqueue(1581129888);
		y.enqueue(1025105089);
		y.enqueue(-1292481712);
		assertEquals(1581129888, y.dequeue());
		y.isEmpty();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(-1916234107);
		y.toString();
    }
    @Test
    public void test11548() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(1290750621);
		Var.enqueue(-1937150807);
    }
    @Test
    public void test11549() {
		Queue variable = new Queue();
		variable.enqueue(-1999158730);
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.enqueue(1517159220);
		variable.dequeue();
		variable.isFull();
		variable.enqueue(2003327521);
		variable.dequeue();
		variable.enqueue(-1139851243);
    }
    @Test
    public void test11550() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(1923448756);
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(1751980369);
		assertFalse(variable.isEmpty());
		variable.enqueue(758639971);
		assertFalse(variable.isFull());
		variable.enqueue(-2116867687);
    }
    @Test
    public void test11551() {
		Queue variable = new Queue();
		variable.enqueue(109721081);
    }
    @Test
    public void test11552() {
		Queue x = new Queue();
		x.enqueue(760049883);
		assertFalse(x.isFull());
		x.isFull();
		assertFalse(x.isEmpty());
		x.isFull();
		x.toString();
		x.toString();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.isEmpty();
		x.enqueue(837487388);
    }
    @Test
    public void test11553() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(1613384011);
		variable.isFull();
		assertFalse(variable.isEmpty());
		variable.isFull();
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(19700158);
		assertFalse(variable.isEmpty());
		variable.enqueue(1493161215);
		variable.dequeue();
		variable.enqueue(-1400442072);
		variable.isFull();
    }
    @Test
    public void test11554() {
		Queue z = new Queue();
		z.enqueue(-878760396);
		z.isFull();
		assertTrue(z.isEmpty());
		z.toString();
		z.isEmpty();
		z.toString();
		z.dequeue();
		z.enqueue(-688783345);
    }
    @Test
    public void test11555() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test11556() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1236461249);
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(263616218);
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test11557() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(-445597402);
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-411513914);
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test11558() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test11559() {
		Queue x = new Queue();
		x.enqueue(430894480);
		assertFalse(x.isEmpty());
		x.toString();
		x.toString();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isEmpty();
    }
    @Test
    public void test11560() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		variable.enqueue(914502245);
		assertFalse(variable.isFull());
		variable.enqueue(-298402062);
    }
    @Test
    public void test11561() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.toString();
		z.enqueue(-744965262);
		z.dequeue();
		assertFalse(z.isFull());
		z.toString();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test11562() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.isFull();
		z.isFull();
		z.isFull();
		z.dequeue();
		z.isFull();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test11563() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test11564() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(-1319334522);
		y.enqueue(575567128);
		y.enqueue(-104817612);
		y.isEmpty();
    }
    @Test
    public void test11565() {
		Queue z = new Queue();
		z.enqueue(42031356);
		z.isFull();
		z.enqueue(-470416453);
		z.isEmpty();
		z.enqueue(809099132);
		z.toString();
		z.toString();
    }
    @Test
    public void test11566() {
		Queue z = new Queue();
		z.toString();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.dequeue();
		z.toString();
		z.toString();
		z.isEmpty();
		z.isFull();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test11567() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test11568() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(452929119);
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test11569() {
		Queue variable = new Queue();
		variable.enqueue(15138040);
    }
    @Test
    public void test11570() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertFalse(z.isFull());
		z.toString();
		z.toString();
		z.isFull();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test11571() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(467112346);
		assertFalse(x.isFull());
		x.isEmpty();
		x.enqueue(49241861);
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test11572() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isFull();
		x.toString();
		assertTrue(x.isEmpty());
		x.toString();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test11573() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test11574() {
		Queue x = new Queue();
		x.enqueue(-787499853);
		assertFalse(x.isFull());
		x.isEmpty();
		x.enqueue(1929346981);
		assertFalse(x.isEmpty());
		x.enqueue(-1699222529);
		x.enqueue(-846221141);
		x.toString();
		x.isFull();
		x.enqueue(-682630817);
    }
    @Test
    public void test11575() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(-1976979414);
		x.toString();
    }
    @Test
    public void test11576() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		assertTrue(z.isEmpty());
		z.toString();
		z.isEmpty();
		z.dequeue();
		z.enqueue(232049510);
		assertEquals("[232049510]", z.toString());
		z.isFull();
		z.enqueue(1190875380);
    }
    @Test
    public void test11577() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(-2105458898);
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.enqueue(-1803734737);
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(1273739276);
		assertEquals(1273739276, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test11578() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-125892467);
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.enqueue(-338369039);
		Var.enqueue(-1779506420);
    }
    @Test
    public void test11579() {
		Queue Var = new Queue();
		Var.enqueue(-717587242);
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-57037685);
    }
    @Test
    public void test11580() {
		Queue Var = new Queue();
		Var.enqueue(806191920);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.toString();
		assertFalse(Var.isFull());
		assertEquals(806191920, Var.dequeue());
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test11581() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(912627014);
		x.isFull();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test11582() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-766132669);
		Var.dequeue();
    }
    @Test
    public void test11583() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test11584() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(1539277929);
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(1011744351);
    }
    @Test
    public void test11585() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(103204828);
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test11586() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.toString();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test11587() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(328065507);
		z.enqueue(1548029446);
		z.isEmpty();
		z.dequeue();
		assertEquals("[1548029446]", z.toString());
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(1157498699);
    }
    @Test
    public void test11588() {
		Queue z = new Queue();
		z.enqueue(1193130547);
		z.isEmpty();
		z.enqueue(-1038284051);
		z.isFull();
		z.isEmpty();
		z.toString();
		z.isFull();
    }
    @Test
    public void test11589() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.isFull();
    }
    @Test
    public void test11590() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.toString();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test11591() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(-2071737314);
		x.enqueue(-21452531);
    }
    @Test
    public void test11592() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.isFull();
		z.toString();
		z.isFull();
		assertFalse(z.isFull());
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test11593() {
		Queue z = new Queue();
		z.enqueue(-1142711271);
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.toString();
		z.isFull();
		assertEquals("[]", z.toString());
		z.enqueue(2006146209);
    }
    @Test
    public void test11594() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test11595() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-1982017463);
		Var.toString();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(43875104);
		assertFalse(Var.isFull());
		Var.enqueue(67859951);
    }
    @Test
    public void test11596() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(839540923);
		assertEquals("[839540923]", x.toString());
		assertEquals("[839540923]", x.toString());
		x.isFull();
    }
    @Test
    public void test11597() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.isFull();
		z.toString();
		z.enqueue(-780139725);
		z.toString();
		z.toString();
    }
    @Test
    public void test11598() {
		Queue y = new Queue();
		y.enqueue(-738037583);
		assertTrue(y.isEmpty());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(131511961);
    }
    @Test
    public void test11599() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-1698424686);
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.enqueue(119858082);
    }
    @Test
    public void test11600() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(1854026827);
		assertEquals(1854026827, variable.dequeue());
		variable.enqueue(239014601);
		variable.isEmpty();
    }
    @Test
    public void test11601() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.dequeue();
		Var.enqueue(-1870046152);
		Var.enqueue(-603358859);
		Var.toString();
		Var.isFull();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test11602() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(639733325);
		z.isEmpty();
		z.toString();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test11603() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.isFull();
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.dequeue();
		y.enqueue(1567097233);
    }
    @Test
    public void test11604() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test11605() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.enqueue(285350610);
		z.toString();
		z.toString();
		z.isFull();
		z.dequeue();
		z.isEmpty();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test11606() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test11607() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.dequeue();
		z.enqueue(254194320);
		assertFalse(z.isEmpty());
		z.isEmpty();
		z.dequeue();
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.toString();
    }
    @Test
    public void test11608() {
		Queue y = new Queue();
		y.enqueue(-1098952028);
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isEmpty();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.enqueue(230546636);
		y.enqueue(1989610074);
    }
    @Test
    public void test11609() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test11610() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
		variable.dequeue();
		variable.enqueue(2110908315);
		variable.enqueue(-1103506323);
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		variable.dequeue();
		variable.enqueue(-1892831864);
    }
    @Test
    public void test11611() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(652437507);
		x.enqueue(159602391);
		assertFalse(x.isFull());
		x.isEmpty();
		assertEquals(652437507, x.dequeue());
		x.enqueue(738235340);
		x.dequeue();
    }
    @Test
    public void test11612() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(973024912);
		variable.enqueue(363548416);
		assertFalse(variable.isFull());
		variable.enqueue(1085470510);
		variable.toString();
		assertEquals("[973024912, 363548416, 1085470510]", variable.toString());
		variable.enqueue(908348434);
		variable.isEmpty();
    }
    @Test
    public void test11613() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(132161575);
		x.toString();
		x.dequeue();
		x.enqueue(-635883801);
		assertEquals("[]", x.toString());
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(-1473896578);
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.enqueue(-976274916);
		x.enqueue(-1537720382);
		x.isEmpty();
    }
    @Test
    public void test11614() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test11615() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-1602221920);
		variable.enqueue(-1564926048);
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test11616() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(1518516780);
		y.isFull();
		y.isEmpty();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test11617() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(1359520887);
		assertEquals("[1359520887]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test11618() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(11451042);
		z.isFull();
    }
    @Test
    public void test11619() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-1300161753);
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(495445782);
    }
    @Test
    public void test11620() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.enqueue(-618466718);
		y.enqueue(640918278);
		y.enqueue(-861557123);
    }
    @Test
    public void test11621() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(1866054386);
		assertEquals(1866054386, y.dequeue());
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
    }
    @Test
    public void test11622() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-2136593106);
    }
    @Test
    public void test11623() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1256951361);
		y.dequeue();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.toString();
		y.enqueue(-1982666311);
		y.isFull();
		y.enqueue(-1490526401);
    }
    @Test
    public void test11624() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.enqueue(-325150134);
		y.toString();
		y.toString();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(1303699585);
		y.isEmpty();
		y.enqueue(1612369851);
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test11625() {
		Queue variable = new Queue();
		variable.enqueue(357173646);
    }
    @Test
    public void test11626() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(-499822255);
		z.isEmpty();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.enqueue(-86183830);
		z.enqueue(-911095328);
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.enqueue(-496333354);
		z.enqueue(359242051);
    }
    @Test
    public void test11627() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(-1001763031);
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test11628() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1596435880);
		variable.dequeue();
    }
    @Test
    public void test11629() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.isEmpty();
		z.toString();
		z.enqueue(267331280);
		z.isEmpty();
		z.dequeue();
		z.toString();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test11630() {
		Queue variable = new Queue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(18578278);
		assertEquals("[18578278]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test11631() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test11632() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.dequeue();
		x.isFull();
		assertFalse(x.isFull());
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.dequeue();
		x.enqueue(469753111);
    }
    @Test
    public void test11633() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.isFull();
		x.isFull();
		x.enqueue(-265323679);
		x.toString();
		x.dequeue();
    }
    @Test
    public void test11634() {
		Queue z = new Queue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isFull();
		z.enqueue(-1396434793);
		assertFalse(z.isFull());
		z.toString();
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(-1979148435);
    }
    @Test
    public void test11635() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test11636() {
		Queue y = new Queue();
		y.toString();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.enqueue(611691912);
		y.isEmpty();
		assertEquals("[611691912]", y.toString());
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.enqueue(894292380);
    }
    @Test
    public void test11637() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.toString();
		x.dequeue();
		x.isFull();
		x.enqueue(1458214513);
    }
    @Test
    public void test11638() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.dequeue();
    }
    @Test
    public void test11639() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		y.enqueue(651295985);
		y.isFull();
		y.dequeue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.toString();
		y.toString();
		y.enqueue(-44295127);
    }
    @Test
    public void test11640() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.dequeue();
		z.enqueue(-990313775);
		z.isFull();
    }
    @Test
    public void test11641() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test11642() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test11643() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.isFull();
		x.dequeue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test11644() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test11645() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isFull();
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
		variable.enqueue(-1249856045);
		variable.isFull();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test11646() {
		Queue variable = new Queue();
		variable.enqueue(-727645027);
		assertFalse(variable.isFull());
		variable.enqueue(542633147);
		variable.isFull();
		variable.enqueue(-803383631);
		variable.enqueue(1033063320);
		variable.enqueue(-1313256781);
		variable.enqueue(-590842354);
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test11647() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test11648() {
		Queue z = new Queue();
		z.enqueue(-1401225551);
		z.enqueue(1435807761);
    }
    @Test
    public void test11649() {
		Queue z = new Queue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.toString();
		assertTrue(z.isEmpty());
		z.isFull();
		z.toString();
		assertEquals("[]", z.toString());
		z.toString();
		z.isFull();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test11650() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.enqueue(74714663);
		assertFalse(x.isEmpty());
		assertEquals("[74714663]", x.toString());
		assertEquals(74714663, x.dequeue());
		x.toString();
		x.toString();
    }
    @Test
    public void test11651() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-669424783);
    }
    @Test
    public void test11652() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.enqueue(-784078271);
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.enqueue(-2033358532);
		x.isFull();
    }
    @Test
    public void test11653() {
		Queue x = new Queue();
		x.toString();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isEmpty();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(-196590398);
    }
    @Test
    public void test11654() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-31711020);
		z.dequeue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(-317995986);
		z.isFull();
		assertEquals("[]", z.toString());
		z.enqueue(-1519155885);
    }
    @Test
    public void test11655() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.toString();
		Var.isFull();
		Var.enqueue(1567030674);
    }
    @Test
    public void test11656() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(-1532324616);
		Var.dequeue();
    }
    @Test
    public void test11657() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.toString();
		y.isFull();
		y.toString();
    }
    @Test
    public void test11658() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.dequeue();
		y.toString();
		y.toString();
		y.toString();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.enqueue(700146598);
    }
    @Test
    public void test11659() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(-1083082173);
		z.dequeue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isFull();
		assertEquals("[]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test11660() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test11661() {
		Queue x = new Queue();
		x.enqueue(-658481805);
		x.dequeue();
    }
    @Test
    public void test11662() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.toString();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.enqueue(159163841);
		x.enqueue(-1791678888);
		assertFalse(x.isFull());
		x.dequeue();
		x.enqueue(-553434500);
    }
    @Test
    public void test11663() {
		Queue z = new Queue();
		z.enqueue(349407224);
		z.dequeue();
		z.enqueue(1005616237);
		z.isFull();
		z.toString();
		z.toString();
		z.dequeue();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test11664() {
		Queue z = new Queue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test11665() {
		Queue x = new Queue();
		x.enqueue(-1108326127);
		x.toString();
		x.enqueue(-1418397408);
		x.enqueue(-609544347);
		x.enqueue(582067929);
		x.isFull();
		x.toString();
    }
    @Test
    public void test11666() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.enqueue(989837962);
		x.enqueue(-2052953798);
		x.enqueue(-1202658021);
		x.isFull();
		x.enqueue(1727054388);
		x.isEmpty();
    }
    @Test
    public void test11667() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.enqueue(-722726267);
    }
    @Test
    public void test11668() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isFull();
    }
    @Test
    public void test11669() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(1760527642);
		x.dequeue();
		x.enqueue(-1140616487);
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(22138006);
    }
    @Test
    public void test11670() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.toString();
		y.dequeue();
    }
    @Test
    public void test11671() {
		Queue Var = new Queue();
		Var.enqueue(-227464838);
		Var.isFull();
    }
    @Test
    public void test11672() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-482512587);
		z.enqueue(-63371513);
		assertEquals(-1, z.dequeue());
		z.toString();
    }
    @Test
    public void test11673() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.isEmpty();
		z.toString();
		z.isFull();
		z.dequeue();
		z.enqueue(-292240080);
		z.isEmpty();
		z.isEmpty();
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test11674() {
		Queue variable = new Queue();
		variable.enqueue(-903345184);
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(-1564702506);
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test11675() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		z.toString();
		z.enqueue(-819417832);
    }
    @Test
    public void test11676() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(15777556);
		Var.enqueue(-1414019630);
		assertEquals(15777556, Var.dequeue());
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.enqueue(-323416230);
		assertTrue(Var.isEmpty());
		Var.enqueue(2080028541);
		Var.enqueue(-950086527);
		Var.isEmpty();
    }
    @Test
    public void test11677() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test11678() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test11679() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.toString();
		z.isFull();
		z.isFull();
		z.toString();
		z.enqueue(-1397692184);
    }
    @Test
    public void test11680() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
		x.toString();
		x.isFull();
		assertEquals("[]", x.toString());
		x.isFull();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.enqueue(-1327293032);
		x.toString();
    }
    @Test
    public void test11681() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(343566069);
		assertEquals(343566069, variable.dequeue());
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test11682() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.enqueue(1957266441);
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test11683() {
		Queue y = new Queue();
		y.enqueue(63098762);
		y.isFull();
		y.enqueue(1261949145);
		y.enqueue(18431766);
		y.toString();
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test11684() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(-1661435868);
		z.isEmpty();
    }
    @Test
    public void test11685() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(1095632146);
		Var.toString();
    }
    @Test
    public void test11686() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.dequeue();
		z.toString();
    }
    @Test
    public void test11687() {
		Queue z = new Queue();
		z.toString();
		assertTrue(z.isEmpty());
		z.toString();
		z.dequeue();
		z.enqueue(-1762886712);
		assertFalse(z.isFull());
		z.enqueue(197887962);
		z.dequeue();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(-1912970592);
		z.enqueue(477665290);
    }
    @Test
    public void test11688() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(820240573);
		z.enqueue(-2079721851);
    }
    @Test
    public void test11689() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(-557433855);
		x.dequeue();
		assertEquals("[]", x.toString());
		x.toString();
		x.enqueue(-1338115018);
    }
    @Test
    public void test11690() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.toString();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.enqueue(1207109394);
		z.dequeue();
		z.isFull();
		z.toString();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.enqueue(-2033159969);
    }
    @Test
    public void test11691() {
		Queue z = new Queue();
		z.enqueue(1292185238);
    }
    @Test
    public void test11692() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(870638630);
    }
    @Test
    public void test11693() {
		Queue x = new Queue();
		x.enqueue(-1019957298);
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.enqueue(1316933964);
    }
    @Test
    public void test11694() {
		Queue z = new Queue();
		z.enqueue(-705461950);
		z.isFull();
		z.dequeue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.enqueue(1410737113);
		z.enqueue(-915863728);
    }
    @Test
    public void test11695() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(-308927443);
		variable.enqueue(-2037643527);
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(979730723);
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test11696() {
		Queue Var = new Queue();
		Var.enqueue(-2075581165);
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.enqueue(-1878278772);
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(759808321);
		Var.isFull();
    }
    @Test
    public void test11697() {
		Queue x = new Queue();
		x.enqueue(-1610739216);
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.enqueue(1325556126);
    }
    @Test
    public void test11698() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test11699() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isEmpty();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test11700() {
		Queue variable = new Queue();
		variable.enqueue(206520671);
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(471232901);
		variable.toString();
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test11701() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(-358780741);
		z.enqueue(64864713);
		z.isFull();
		assertEquals("[64864713]", z.toString());
		assertFalse(z.isEmpty());
		z.isEmpty();
		z.toString();
		z.toString();
		z.enqueue(744847183);
		z.enqueue(-1939363728);
		z.enqueue(1124509070);
    }
    @Test
    public void test11702() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.enqueue(472560744);
		Var.isEmpty();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertEquals(472560744, Var.dequeue());
		Var.isFull();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test11703() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.enqueue(1413608018);
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		variable.enqueue(1346779938);
    }
    @Test
    public void test11704() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.enqueue(-241868013);
		Var.dequeue();
		Var.enqueue(1330410338);
    }
    @Test
    public void test11705() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-1241541462);
		x.enqueue(-1775160914);
		x.isFull();
		x.enqueue(382690847);
		x.isFull();
		x.enqueue(1081336573);
		x.enqueue(709239656);
		x.toString();
		x.toString();
    }
    @Test
    public void test11706() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.enqueue(99744528);
		assertEquals("[99744528]", y.toString());
		assertEquals(99744528, y.dequeue());
		y.enqueue(164505082);
		y.dequeue();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test11707() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test11708() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(1116927000);
		variable.toString();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test11709() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1128254024);
    }
    @Test
    public void test11710() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test11711() {
		Queue x = new Queue();
		x.enqueue(623798257);
    }
    @Test
    public void test11712() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.enqueue(-535157209);
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.isFull();
		z.isEmpty();
		z.enqueue(2002230570);
		z.enqueue(1781318373);
		z.isEmpty();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test11713() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1880547572);
		Var.enqueue(-1703387980);
		Var.isFull();
		Var.enqueue(-1710202531);
    }
    @Test
    public void test11714() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test11715() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.toString();
		y.dequeue();
		y.dequeue();
		y.isFull();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isFull();
		y.enqueue(1582524587);
		y.toString();
    }
    @Test
    public void test11716() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(2088754424);
		z.dequeue();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test11717() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.toString();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test11718() {
		Queue x = new Queue();
		x.enqueue(-76863805);
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(-1842651762);
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test11719() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.enqueue(-1978771729);
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.dequeue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test11720() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(2079225360);
		x.enqueue(-284343071);
		x.enqueue(1181559439);
    }
    @Test
    public void test11721() {
		Queue Var = new Queue();
		Var.enqueue(-1534524049);
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test11722() {
		Queue z = new Queue();
		z.enqueue(1476137564);
		z.toString();
		z.isFull();
		z.isFull();
		z.isFull();
		assertFalse(z.isFull());
		z.enqueue(268415825);
    }
    @Test
    public void test11723() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test11724() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(1370155768);
		assertFalse(x.isEmpty());
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(1022044770);
		x.isEmpty();
    }
    @Test
    public void test11725() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(-1884695138);
		assertEquals(-1, x.dequeue());
		x.isFull();
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test11726() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.enqueue(-304706416);
		variable.toString();
		variable.toString();
		variable.enqueue(1060139565);
		variable.isEmpty();
    }
    @Test
    public void test11727() {
		Queue z = new Queue();
		z.toString();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.isEmpty();
		z.isFull();
		z.enqueue(-1180530529);
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.enqueue(-267671205);
    }
    @Test
    public void test11728() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.enqueue(985583685);
		z.isEmpty();
		z.enqueue(-1559439935);
		z.enqueue(-630895173);
		z.dequeue();
		z.isFull();
		assertFalse(z.isFull());
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test11729() {
		Queue z = new Queue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.dequeue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isFull();
		assertEquals("[]", z.toString());
		z.enqueue(1781860452);
		z.toString();
		z.dequeue();
    }
    @Test
    public void test11730() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.enqueue(506684531);
		x.toString();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test11731() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(1759544120);
    }
    @Test
    public void test11732() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.toString();
		z.isFull();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.enqueue(-2008968346);
    }
    @Test
    public void test11733() {
		Queue z = new Queue();
		z.enqueue(-854997044);
		z.isFull();
    }
    @Test
    public void test11734() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isFull();
		variable.toString();
		variable.enqueue(-360032414);
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test11735() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
    }
    @Test
    public void test11736() {
		Queue y = new Queue();
		y.toString();
		assertFalse(y.isFull());
		y.isEmpty();
		y.enqueue(-582864234);
		y.toString();
		y.dequeue();
		y.enqueue(1840024428);
		y.dequeue();
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test11737() {
		Queue z = new Queue();
		z.enqueue(1168968896);
		z.dequeue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isFull();
		z.toString();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test11738() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test11739() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.enqueue(1700054370);
		assertFalse(z.isFull());
		z.toString();
		assertEquals(1700054370, z.dequeue());
		assertEquals("[]", z.toString());
		z.enqueue(1099817163);
		assertEquals("[1099817163]", z.toString());
		assertEquals("[1099817163]", z.toString());
		z.enqueue(-1617366774);
		z.dequeue();
		z.enqueue(-151295298);
    }
    @Test
    public void test11740() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test11741() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-1974378931);
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
		x.enqueue(-951819422);
    }
    @Test
    public void test11742() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(1798560789);
		z.enqueue(-1073787605);
		assertEquals("[1798560789]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test11743() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.enqueue(-55078963);
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test11744() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.toString();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test11745() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isFull();
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test11746() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test11747() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(-199611373);
		assertEquals("[]", z.toString());
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isFull();
		assertEquals("[]", z.toString());
		z.dequeue();
    }
    @Test
    public void test11748() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(1626019734);
		y.dequeue();
    }
    @Test
    public void test11749() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test11750() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test11751() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
		variable.toString();
		variable.enqueue(1792928402);
		variable.enqueue(289200315);
		assertEquals(1792928402, variable.dequeue());
		variable.toString();
		variable.enqueue(805123811);
    }
    @Test
    public void test11752() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test11753() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.enqueue(-98998693);
		y.enqueue(716878074);
		assertFalse(y.isEmpty());
		assertEquals(716878074, y.dequeue());
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.toString();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.enqueue(1661668006);
		y.enqueue(1049461607);
    }
    @Test
    public void test11754() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test11755() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.isFull();
		z.toString();
		z.isFull();
    }
    @Test
    public void test11756() {
		Queue Var = new Queue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.isEmpty();
		Var.enqueue(328944560);
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test11757() {
		Queue Var = new Queue();
		Var.enqueue(417263986);
		assertEquals("[417263986]", Var.toString());
		Var.enqueue(143153764);
		assertFalse(Var.isEmpty());
		assertFalse(Var.isEmpty());
		Var.enqueue(-1169263430);
		Var.isEmpty();
    }
    @Test
    public void test11758() {
		Queue z = new Queue();
		z.enqueue(929643867);
		assertEquals(929643867, z.dequeue());
		z.toString();
		z.enqueue(820651331);
		z.isFull();
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test11759() {
		Queue z = new Queue();
		z.enqueue(2058686730);
		z.dequeue();
		z.toString();
		z.isEmpty();
		z.enqueue(1190086973);
		z.enqueue(-298442036);
    }
    @Test
    public void test11760() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test11761() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test11762() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test11763() {
		Queue variable = new Queue();
		variable.enqueue(2061188581);
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test11764() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(1059851991);
		assertFalse(variable.isEmpty());
		variable.enqueue(889516075);
		variable.dequeue();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test11765() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.toString();
		x.toString();
		x.isEmpty();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test11766() {
		Queue variable = new Queue();
		variable.enqueue(-1947786644);
		variable.enqueue(-1951003198);
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(1377490461);
		assertEquals(1377490461, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-2311354);
		variable.isEmpty();
    }
    @Test
    public void test11767() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.enqueue(-1013075841);
    }
    @Test
    public void test11768() {
		Queue Var = new Queue();
		Var.enqueue(-617112522);
		Var.dequeue();
		Var.enqueue(1499014786);
		assertFalse(Var.isFull());
		Var.enqueue(-180481036);
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test11769() {
		Queue Var = new Queue();
		Var.enqueue(1102892461);
		assertEquals("[1102892461]", Var.toString());
		Var.toString();
		Var.toString();
		Var.toString();
		assertEquals(1102892461, Var.dequeue());
		Var.toString();
		Var.toString();
		Var.isEmpty();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(-786037079);
		Var.isFull();
    }
    @Test
    public void test11770() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.enqueue(2107090161);
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test11771() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.enqueue(558219092);
		z.dequeue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.enqueue(-1131802537);
		z.isFull();
		z.toString();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test11772() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(-2101659455);
    }
    @Test
    public void test11773() {
		Queue x = new Queue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.enqueue(931093107);
		x.dequeue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(-1960657883);
		x.enqueue(1328731457);
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test11774() {
		Queue Var = new Queue();
		Var.enqueue(-1552168758);
		Var.dequeue();
		Var.enqueue(2103838905);
		Var.enqueue(-117120774);
		Var.enqueue(1529798596);
		assertEquals("[2103838905, 1529798596]", Var.toString());
		assertFalse(Var.isFull());
		assertEquals("[2103838905, 1529798596]", Var.toString());
		assertEquals(2103838905, Var.dequeue());
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test11775() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isEmpty();
    }
    @Test
    public void test11776() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test11777() {
		Queue variable = new Queue();
		variable.enqueue(-328720066);
		variable.isFull();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.enqueue(1100195600);
		variable.enqueue(-546160864);
		assertFalse(variable.isEmpty());
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(-1332569065);
    }
    @Test
    public void test11778() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		variable.enqueue(-1571362333);
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.enqueue(-1774914507);
		variable.enqueue(-961628176);
		assertFalse(variable.isFull());
		variable.enqueue(28761886);
    }
    @Test
    public void test11779() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.isFull();
		assertEquals("[]", y.toString());
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.toString();
    }
    @Test
    public void test11780() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-600234388);
		assertTrue(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test11781() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(450709629);
    }
    @Test
    public void test11782() {
		Queue x = new Queue();
		x.enqueue(999718480);
		assertFalse(x.isFull());
		x.enqueue(-41379645);
		x.isEmpty();
		x.isEmpty();
		assertEquals(999718480, x.dequeue());
		x.enqueue(1494346495);
		x.toString();
    }
    @Test
    public void test11783() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(1668704969);
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test11784() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.enqueue(-297352672);
		Var.toString();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.enqueue(863772724);
    }
    @Test
    public void test11785() {
		Queue x = new Queue();
		x.enqueue(436652921);
		x.enqueue(887298534);
		assertEquals(436652921, x.dequeue());
		assertEquals(887298534, x.dequeue());
		x.toString();
		x.dequeue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.enqueue(1652702187);
		x.toString();
    }
    @Test
    public void test11786() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.toString();
		y.toString();
    }
    @Test
    public void test11787() {
		Queue variable = new Queue();
		variable.enqueue(-48106313);
		variable.dequeue();
		variable.enqueue(1894829882);
		assertFalse(variable.isEmpty());
		variable.enqueue(-1962350049);
		variable.toString();
		assertEquals(1894829882, variable.dequeue());
		assertFalse(variable.isFull());
		variable.enqueue(447674994);
    }
    @Test
    public void test11788() {
		Queue z = new Queue();
		z.enqueue(-130749659);
		z.enqueue(-1524066364);
		z.enqueue(-1397596373);
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(1177440200);
		z.isEmpty();
    }
    @Test
    public void test11789() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(197593816);
    }
    @Test
    public void test11790() {
		Queue x = new Queue();
		x.enqueue(1330546913);
		assertEquals("[1330546913]", x.toString());
		x.isFull();
		x.enqueue(1516822735);
		x.toString();
		assertEquals(1330546913, x.dequeue());
		x.isFull();
		x.isEmpty();
		x.enqueue(-1050191209);
		x.toString();
    }
    @Test
    public void test11791() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test11792() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test11793() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(-671040186);
    }
    @Test
    public void test11794() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.enqueue(-1084062815);
		z.enqueue(439383416);
    }
    @Test
    public void test11795() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.toString();
    }
    @Test
    public void test11796() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(-1837593345);
    }
    @Test
    public void test11797() {
		Queue z = new Queue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(1529035980);
		z.enqueue(493930629);
		z.dequeue();
		z.isEmpty();
		z.isFull();
		z.toString();
    }
    @Test
    public void test11798() {
		Queue z = new Queue();
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(-1288760254);
		z.toString();
    }
    @Test
    public void test11799() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test11800() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.isEmpty();
		y.toString();
		y.isFull();
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test11801() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(1528110232);
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test11802() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test11803() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.isFull();
		x.enqueue(685967835);
    }
    @Test
    public void test11804() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-374628492);
		variable.toString();
		variable.dequeue();
		variable.enqueue(-815102441);
    }
    @Test
    public void test11805() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test11806() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(256171365);
		assertEquals("[256171365]", z.toString());
		z.isFull();
    }
    @Test
    public void test11807() {
		Queue Var = new Queue();
		Var.enqueue(1934905672);
		Var.toString();
		assertEquals("[1934905672]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-931494207);
		assertEquals("[1934905672]", Var.toString());
		Var.toString();
		Var.enqueue(-1205552290);
		Var.isEmpty();
		assertEquals("[1934905672]", Var.toString());
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test11808() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(102483335);
		variable.isFull();
		assertEquals(102483335, variable.dequeue());
		variable.isFull();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test11809() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1771681336);
		variable.enqueue(417492237);
		variable.isFull();
		variable.enqueue(1987048077);
		variable.isEmpty();
		variable.isFull();
		assertFalse(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test11810() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test11811() {
		Queue x = new Queue();
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(-1589641286);
		x.toString();
		x.dequeue();
		x.toString();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test11812() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(1214917501);
		z.enqueue(-1999020514);
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.isEmpty();
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test11813() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(-785957391);
		variable.toString();
    }
    @Test
    public void test11814() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-495318336);
		y.toString();
		y.dequeue();
		y.enqueue(645970148);
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test11815() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.toString();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.enqueue(1286273231);
		z.toString();
    }
    @Test
    public void test11816() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.enqueue(475462511);
		assertEquals(475462511, x.dequeue());
		x.enqueue(-1105258052);
		x.isFull();
		x.toString();
		x.isFull();
		x.enqueue(-2102517530);
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(555938846);
    }
    @Test
    public void test11817() {
		Queue Var = new Queue();
		Var.toString();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isFull();
		Var.enqueue(2039794634);
		Var.enqueue(1958442774);
    }
    @Test
    public void test11818() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.toString();
		assertTrue(y.isEmpty());
		y.isFull();
		y.dequeue();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.enqueue(-272704934);
    }
    @Test
    public void test11819() {
		Queue variable = new Queue();
		variable.enqueue(2090914943);
		variable.enqueue(-215723637);
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(-783287504);
		variable.isFull();
		variable.enqueue(17430776);
		variable.enqueue(596025472);
		assertFalse(variable.isEmpty());
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test11820() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(-1076684044);
		assertEquals("[]", x.toString());
		x.isFull();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test11821() {
		Queue Var = new Queue();
		Var.enqueue(-331426137);
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(1208336991);
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(-1716200174);
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test11822() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(-545068174);
		assertTrue(y.isEmpty());
		y.enqueue(1856311088);
		y.dequeue();
		y.enqueue(2142269442);
		assertEquals(2142269442, y.dequeue());
		y.enqueue(-2063500184);
		y.isEmpty();
		y.enqueue(1132451081);
    }
    @Test
    public void test11823() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(1331730150);
		x.toString();
		assertEquals("[1331730150]", x.toString());
		assertEquals("[1331730150]", x.toString());
		x.isFull();
    }
    @Test
    public void test11824() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(1507582637);
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test11825() {
		Queue x = new Queue();
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(1650212543);
    }
    @Test
    public void test11826() {
		Queue y = new Queue();
		y.enqueue(1638144174);
    }
    @Test
    public void test11827() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(1519820506);
		Var.isFull();
		Var.enqueue(1782633069);
		Var.enqueue(1316839979);
    }
    @Test
    public void test11828() {
		Queue x = new Queue();
		x.enqueue(497364955);
		assertEquals("[497364955]", x.toString());
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(1115138584);
		assertEquals(497364955, x.dequeue());
		x.isEmpty();
		x.enqueue(-1391554375);
    }
    @Test
    public void test11829() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test11830() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(-1169455138);
		z.dequeue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.toString();
		z.enqueue(1821637075);
		z.enqueue(200196519);
		assertEquals("[1821637075, 200196519]", z.toString());
		z.toString();
		assertFalse(z.isFull());
		assertEquals(1821637075, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test11831() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-1537431890);
    }
    @Test
    public void test11832() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.dequeue();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.enqueue(-905951236);
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(-530709774);
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test11833() {
		Queue variable = new Queue();
		variable.enqueue(1842767367);
    }
    @Test
    public void test11834() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.toString();
    }
    @Test
    public void test11835() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test11836() {
		Queue Var = new Queue();
		Var.enqueue(1185653108);
		Var.toString();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
		Var.enqueue(-1019530383);
		Var.enqueue(-2104852321);
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1404295955);
		Var.isEmpty();
    }
    @Test
    public void test11837() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.dequeue();
		z.dequeue();
		z.enqueue(1698372487);
		assertEquals(1698372487, z.dequeue());
		z.enqueue(1681852459);
		z.isEmpty();
		z.toString();
		z.enqueue(1866271238);
		z.enqueue(895655308);
    }
    @Test
    public void test11838() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(-861785975);
    }
    @Test
    public void test11839() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(1526824674);
		assertEquals(1526824674, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(582971607);
		z.dequeue();
    }
    @Test
    public void test11840() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test11841() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test11842() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(572174396);
		x.toString();
		assertFalse(x.isEmpty());
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test11843() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.isFull();
		x.toString();
    }
    @Test
    public void test11844() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.dequeue();
		y.toString();
		y.isFull();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test11845() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test11846() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test11847() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test11848() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.enqueue(-284451433);
		z.isEmpty();
		z.isFull();
		assertFalse(z.isFull());
		z.enqueue(1822653863);
		assertFalse(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test11849() {
		Queue z = new Queue();
		z.enqueue(979422400);
		z.dequeue();
		z.toString();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.enqueue(-1676692472);
		z.dequeue();
		z.isFull();
		z.enqueue(1282200070);
    }
    @Test
    public void test11850() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.toString();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test11851() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.isFull();
		Var.isFull();
		Var.enqueue(848992991);
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test11852() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-416334852);
		assertEquals(-1, x.dequeue());
		x.enqueue(-2145708638);
		x.toString();
		x.dequeue();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test11853() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.toString();
		y.toString();
		y.isEmpty();
		y.isFull();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.isFull();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.enqueue(-61325516);
    }
    @Test
    public void test11854() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(1327860553);
		assertEquals("[1327860553]", y.toString());
		y.dequeue();
		y.dequeue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.enqueue(1090385385);
    }
    @Test
    public void test11855() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(949047754);
		z.isFull();
    }
    @Test
    public void test11856() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.toString();
		Var.toString();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test11857() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.enqueue(-940537190);
		z.toString();
		z.toString();
    }
    @Test
    public void test11858() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.dequeue();
		z.enqueue(-659915788);
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(1370777168);
		assertFalse(z.isEmpty());
		z.toString();
    }
    @Test
    public void test11859() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-2009407434);
		Var.enqueue(1262255738);
    }
    @Test
    public void test11860() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(633933664);
    }
    @Test
    public void test11861() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(1096352396);
		z.isFull();
		z.isFull();
    }
    @Test
    public void test11862() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.enqueue(290056905);
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.enqueue(-992260084);
		y.isEmpty();
		assertFalse(y.isEmpty());
		y.toString();
    }
    @Test
    public void test11863() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.enqueue(-2101224571);
		x.isFull();
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
		x.enqueue(1157966458);
		x.dequeue();
		x.toString();
    }
    @Test
    public void test11864() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test11865() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.enqueue(-1781596676);
		variable.enqueue(-1820032741);
		variable.enqueue(-27937622);
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test11866() {
		Queue variable = new Queue();
		variable.enqueue(-1604849564);
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test11867() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		z.isFull();
		z.dequeue();
		z.enqueue(-1962306675);
		z.isEmpty();
		z.toString();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test11868() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(309383526);
    }
    @Test
    public void test11869() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test11870() {
		Queue z = new Queue();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.enqueue(689840783);
		assertEquals("[689840783]", z.toString());
		assertFalse(z.isFull());
		z.isEmpty();
		z.isFull();
		z.toString();
		assertEquals("[689840783]", z.toString());
		z.dequeue();
    }
    @Test
    public void test11871() {
		Queue x = new Queue();
		x.enqueue(-1343953755);
    }
    @Test
    public void test11872() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test11873() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.toString();
		z.isFull();
		z.toString();
		z.toString();
		z.dequeue();
		z.toString();
		z.isFull();
    }
    @Test
    public void test11874() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.enqueue(-63754952);
    }
    @Test
    public void test11875() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(430354502);
		Var.enqueue(-1410207542);
		Var.enqueue(-289555030);
		Var.isFull();
		Var.enqueue(-1792538293);
		Var.enqueue(-382619925);
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test11876() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1116598564);
		x.dequeue();
		x.dequeue();
		x.enqueue(-1571177591);
		assertFalse(x.isFull());
		x.enqueue(1494211368);
    }
    @Test
    public void test11877() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(2116024745);
		z.dequeue();
		z.enqueue(-517776726);
		z.enqueue(-456405666);
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test11878() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-1974635703);
    }
    @Test
    public void test11879() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isFull();
		y.dequeue();
		y.toString();
		y.dequeue();
		y.enqueue(1236543547);
		y.enqueue(-1049260166);
		assertFalse(y.isEmpty());
		y.dequeue();
		y.enqueue(1324309058);
		assertEquals(1324309058, y.dequeue());
		y.isFull();
    }
    @Test
    public void test11880() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isFull();
		x.isFull();
		assertTrue(x.isEmpty());
		x.enqueue(-60273697);
		assertFalse(x.isFull());
		x.isFull();
		x.isFull();
		assertFalse(x.isFull());
		x.isEmpty();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test11881() {
		Queue Var = new Queue();
		Var.enqueue(1374887683);
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test11882() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test11883() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isFull();
		z.isEmpty();
		z.isFull();
		z.enqueue(-742492328);
		z.dequeue();
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isFull();
    }
    @Test
    public void test11884() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test11885() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test11886() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test11887() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.toString();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.toString();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(1184223498);
    }
    @Test
    public void test11888() {
		Queue variable = new Queue();
		variable.enqueue(-2124578135);
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test11889() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test11890() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.dequeue();
		x.toString();
		x.toString();
    }
    @Test
    public void test11891() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.isFull();
		y.dequeue();
		y.toString();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test11892() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test11893() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.enqueue(-859136701);
		z.toString();
    }
    @Test
    public void test11894() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.enqueue(1884527664);
		x.dequeue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.toString();
		x.toString();
		x.toString();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isEmpty();
		x.enqueue(1316757862);
		x.toString();
    }
    @Test
    public void test11895() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test11896() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		x.isFull();
		assertEquals("[]", x.toString());
		x.toString();
    }
    @Test
    public void test11897() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(1223339413);
		Var.isFull();
		Var.enqueue(1179655017);
		assertEquals("[1223339413, 1179655017]", Var.toString());
		Var.toString();
    }
    @Test
    public void test11898() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-1076546189);
		x.isFull();
		x.enqueue(961745356);
		x.isEmpty();
		x.enqueue(-1829668146);
		x.toString();
    }
    @Test
    public void test11899() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.enqueue(-519651065);
		Var.enqueue(-977965314);
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test11900() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1698375531);
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(2009760247);
		Var.isEmpty();
    }
    @Test
    public void test11901() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test11902() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test11903() {
		Queue y = new Queue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isFull();
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		y.isFull();
		assertFalse(y.isFull());
		y.enqueue(-1377638072);
		y.isFull();
    }
    @Test
    public void test11904() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.enqueue(228484379);
		variable.enqueue(1137065341);
		variable.enqueue(-1881415908);
		variable.dequeue();
		variable.enqueue(1798685322);
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test11905() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(1534790599);
		variable.dequeue();
		variable.enqueue(1050131345);
		variable.dequeue();
    }
    @Test
    public void test11906() {
		Queue x = new Queue();
		x.enqueue(-1435803243);
		x.enqueue(1527472465);
    }
    @Test
    public void test11907() {
		Queue x = new Queue();
		x.enqueue(-1623417692);
		x.isEmpty();
		x.enqueue(1409598487);
    }
    @Test
    public void test11908() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-1484876044);
    }
    @Test
    public void test11909() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-196243858);
		assertFalse(x.isFull());
		x.enqueue(1028032926);
		x.dequeue();
    }
    @Test
    public void test11910() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test11911() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.enqueue(-1539857299);
		z.isEmpty();
		z.isFull();
		z.enqueue(144883426);
    }
    @Test
    public void test11912() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test11913() {
		Queue Var = new Queue();
		Var.enqueue(-852340443);
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test11914() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(-438152928);
		Var.dequeue();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test11915() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test11916() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.dequeue();
		y.enqueue(1104717531);
		y.enqueue(-2132708448);
		y.isFull();
		y.isFull();
    }
    @Test
    public void test11917() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-362166379);
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(1725756077);
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-1149167923);
		variable.enqueue(1346387965);
    }
    @Test
    public void test11918() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.enqueue(-1129331456);
		y.enqueue(-495517092);
		y.dequeue();
		y.isFull();
		y.enqueue(-142832505);
    }
    @Test
    public void test11919() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test11920() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-615594264);
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test11921() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test11922() {
		Queue Var = new Queue();
		Var.enqueue(1309757088);
		Var.enqueue(1085861117);
		assertEquals(1309757088, Var.dequeue());
		assertFalse(Var.isFull());
		Var.toString();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test11923() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-2017175166);
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-844855712);
		variable.dequeue();
    }
    @Test
    public void test11924() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(1533956583);
    }
    @Test
    public void test11925() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test11926() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(-1591951544);
		Var.toString();
		Var.enqueue(1522638428);
    }
    @Test
    public void test11927() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(1263582149);
		assertEquals(1263582149, Var.dequeue());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test11928() {
		Queue x = new Queue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isFull();
		x.isFull();
		x.isFull();
		x.toString();
		x.isFull();
		x.isEmpty();
		x.enqueue(-739529366);
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test11929() {
		Queue z = new Queue();
		z.enqueue(-470782473);
		z.toString();
		z.isFull();
		assertFalse(z.isFull());
		z.enqueue(-207633013);
		assertTrue(z.isEmpty());
		z.dequeue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.enqueue(1850915936);
		assertFalse(z.isEmpty());
		z.isEmpty();
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test11930() {
		Queue z = new Queue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
		z.enqueue(1797714728);
		z.dequeue();
    }
    @Test
    public void test11931() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test11932() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1551571278);
		Var.isFull();
		Var.enqueue(-884459823);
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(2109990026);
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(-397582419);
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test11933() {
		Queue x = new Queue();
		x.enqueue(-115773785);
    }
    @Test
    public void test11934() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test11935() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isFull();
		z.isFull();
		z.dequeue();
		z.enqueue(1085285881);
		z.dequeue();
		assertEquals("[]", z.toString());
		z.toString();
		z.isFull();
    }
    @Test
    public void test11936() {
		Queue Var = new Queue();
		Var.enqueue(-1579898387);
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-71574557);
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-714279581);
    }
    @Test
    public void test11937() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test11938() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(-1872353139);
		z.isFull();
		z.enqueue(-218671608);
    }
    @Test
    public void test11939() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(1861042488);
		assertEquals("[1861042488]", z.toString());
		z.dequeue();
    }
    @Test
    public void test11940() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test11941() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-247009373);
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		x.isFull();
		x.enqueue(2073108153);
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test11942() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.isFull();
		assertTrue(x.isEmpty());
		x.enqueue(1442881356);
		x.isFull();
		assertFalse(x.isEmpty());
		assertEquals(1442881356, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test11943() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-200846957);
		x.isFull();
		x.toString();
		x.isEmpty();
		x.dequeue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.isEmpty();
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test11944() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test11945() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.toString();
		y.enqueue(207640377);
    }
    @Test
    public void test11946() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.toString();
		y.enqueue(1432411913);
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test11947() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isEmpty();
		assertFalse(z.isFull());
		z.isFull();
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(235174880);
		z.toString();
		assertFalse(z.isFull());
		z.isFull();
		z.dequeue();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.dequeue();
		z.enqueue(1141791706);
    }
    @Test
    public void test11948() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.isFull();
		z.enqueue(428296437);
		z.isEmpty();
		assertFalse(z.isEmpty());
		z.isEmpty();
		assertEquals(428296437, z.dequeue());
		z.isFull();
		z.toString();
		z.isFull();
    }
    @Test
    public void test11949() {
		Queue z = new Queue();
		z.enqueue(1576966273);
		z.isEmpty();
		z.enqueue(1976507122);
		assertEquals(1576966273, z.dequeue());
		assertFalse(z.isEmpty());
		z.isFull();
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test11950() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test11951() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.enqueue(-1916261862);
		x.dequeue();
    }
    @Test
    public void test11952() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test11953() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test11954() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.isFull();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(-682423924);
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.toString();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.enqueue(1844323250);
		x.toString();
    }
    @Test
    public void test11955() {
		Queue z = new Queue();
		z.enqueue(1819197047);
		z.dequeue();
		z.isEmpty();
		z.isFull();
		z.isFull();
		z.isFull();
		z.isEmpty();
		z.enqueue(1944387709);
		z.dequeue();
    }
    @Test
    public void test11956() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(2125216067);
		assertEquals("[2125216067]", x.toString());
		x.enqueue(-815628894);
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-1000346402);
    }
    @Test
    public void test11957() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.isFull();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.enqueue(486813659);
		y.toString();
    }
    @Test
    public void test11958() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test11959() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.enqueue(-212911076);
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1645350903);
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-1604557222);
    }
    @Test
    public void test11960() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(437724262);
		assertFalse(Var.isFull());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(1679656657);
    }
    @Test
    public void test11961() {
		Queue Var = new Queue();
		Var.enqueue(-2119633955);
		Var.toString();
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(1073228410);
		assertFalse(Var.isEmpty());
		Var.toString();
		assertEquals("[1073228410]", Var.toString());
		Var.toString();
		assertEquals(1073228410, Var.dequeue());
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test11962() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1407118224);
    }
    @Test
    public void test11963() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.enqueue(-419006378);
		x.enqueue(671024010);
		x.isFull();
		x.enqueue(-789112427);
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test11964() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test11965() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-1366239662);
		z.isFull();
		z.isFull();
		z.dequeue();
		z.enqueue(-1784699277);
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test11966() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.enqueue(1416130443);
    }
    @Test
    public void test11967() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-665762538);
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test11968() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-188145023);
		assertEquals("[]", variable.toString());
		variable.enqueue(-631652229);
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-1470835001);
		variable.isEmpty();
		variable.enqueue(1059839576);
    }
    @Test
    public void test11969() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.dequeue();
		Var.enqueue(-590028330);
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test11970() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(763626825);
		variable.dequeue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test11971() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.enqueue(-507505231);
		z.isEmpty();
		z.isFull();
		z.dequeue();
		z.toString();
		z.isFull();
		assertFalse(z.isFull());
		z.enqueue(1181947360);
		z.dequeue();
    }
    @Test
    public void test11972() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-1314301536);
		assertTrue(x.isEmpty());
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test11973() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-426410345);
    }
    @Test
    public void test11974() {
		Queue z = new Queue();
		z.enqueue(1594846028);
		z.enqueue(-606312305);
		z.enqueue(680072658);
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test11975() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test11976() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(411697773);
		Var.isEmpty();
    }
    @Test
    public void test11977() {
		Queue Var = new Queue();
		Var.enqueue(-756941733);
    }
    @Test
    public void test11978() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test11979() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-1257192643);
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.enqueue(-847289381);
    }
    @Test
    public void test11980() {
		Queue y = new Queue();
		y.enqueue(-1680536008);
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.toString();
		y.isFull();
		assertFalse(y.isFull());
		y.enqueue(1994484863);
		y.enqueue(-232810792);
		y.isFull();
		y.enqueue(1187484199);
		y.enqueue(1276781763);
		assertEquals(1994484863, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test11981() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test11982() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.enqueue(324281743);
		y.enqueue(1849036773);
    }
    @Test
    public void test11983() {
		Queue Var = new Queue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test11984() {
		Queue y = new Queue();
		y.enqueue(-1604933162);
		y.toString();
		y.toString();
		y.enqueue(-1280946508);
		y.isEmpty();
		assertFalse(y.isFull());
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.toString();
    }
    @Test
    public void test11985() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test11986() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test11987() {
		Queue z = new Queue();
		z.enqueue(1696430390);
		z.enqueue(-1018385595);
		z.dequeue();
		z.enqueue(-514504436);
		z.enqueue(-508217810);
		z.enqueue(525329818);
		assertFalse(z.isEmpty());
		z.dequeue();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test11988() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(139068278);
		Var.isFull();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test11989() {
		Queue z = new Queue();
		z.enqueue(-455030047);
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(302713814);
		assertEquals(302713814, z.dequeue());
		z.dequeue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test11990() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.enqueue(-1118304600);
		x.isEmpty();
		x.enqueue(-2045257545);
		x.isEmpty();
		x.enqueue(-1384401298);
		x.enqueue(462901460);
		x.isFull();
		x.toString();
    }
    @Test
    public void test11991() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test11992() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isFull();
		z.dequeue();
		z.enqueue(-854032342);
		z.dequeue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test11993() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.toString();
    }
    @Test
    public void test11994() {
		Queue x = new Queue();
		x.enqueue(1139991649);
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test11995() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-1024081399);
		y.enqueue(270170582);
		y.enqueue(-779115073);
		y.isFull();
		y.toString();
    }
    @Test
    public void test11996() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.enqueue(-1660441511);
		z.dequeue();
		z.enqueue(-1344721873);
		z.toString();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test11997() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.enqueue(-457813800);
		x.enqueue(-64824580);
    }
    @Test
    public void test11998() {
		Queue x = new Queue();
		x.toString();
		x.toString();
    }
    @Test
    public void test11999() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.enqueue(-831451690);
		Var.isFull();
		Var.isFull();
		Var.enqueue(-1987914737);
		assertEquals("[]", Var.toString());
		Var.enqueue(-1051488238);
		Var.toString();
    }
    @Test
    public void test12000() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(1245145950);
		variable.toString();
		variable.enqueue(-82953572);
		variable.isEmpty();
		variable.enqueue(1579051090);
		variable.enqueue(-975499150);
		variable.dequeue();
    }
    @Test
    public void test12001() {
		Queue z = new Queue();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test12002() {
		Queue Var = new Queue();
		Var.enqueue(-1133038931);
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test12003() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.toString();
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(-465320892);
		assertEquals("[]", y.toString());
		y.dequeue();
		y.enqueue(1808475570);
		assertFalse(y.isEmpty());
		assertFalse(y.isFull());
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test12004() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(1197010264);
		assertEquals(1197010264, Var.dequeue());
		assertFalse(Var.isFull());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test12005() {
		Queue x = new Queue();
		x.enqueue(-872713827);
		x.enqueue(-355796401);
		x.enqueue(905168439);
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test12006() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test12007() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(-514400503);
		x.isEmpty();
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
		x.isFull();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
		x.toString();
		x.toString();
    }
    @Test
    public void test12008() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.dequeue();
		x.enqueue(-289348196);
		x.enqueue(-890440307);
		x.isFull();
		x.enqueue(1793619135);
		x.enqueue(2123604640);
		x.dequeue();
    }
    @Test
    public void test12009() {
		Queue z = new Queue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.enqueue(184448487);
    }
    @Test
    public void test12010() {
		Queue z = new Queue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(2083073621);
		assertEquals(2083073621, z.dequeue());
		z.isEmpty();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.enqueue(-1558961325);
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test12011() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(858301695);
		variable.toString();
		variable.enqueue(594301571);
    }
    @Test
    public void test12012() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.isFull();
		y.isEmpty();
		y.enqueue(999704588);
		assertFalse(y.isFull());
		y.isEmpty();
		y.enqueue(657673094);
		y.isEmpty();
		y.enqueue(-829694489);
		y.enqueue(281290167);
    }
    @Test
    public void test12013() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(989007385);
		y.dequeue();
    }
    @Test
    public void test12014() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(1181349408);
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test12015() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.toString();
		x.isEmpty();
		x.enqueue(1279006616);
    }
    @Test
    public void test12016() {
		Queue x = new Queue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.toString();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test12017() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1721621707);
		assertEquals("[1721621707]", x.toString());
		x.isEmpty();
		x.toString();
		assertFalse(x.isEmpty());
		assertFalse(x.isFull());
		assertEquals(1721621707, x.dequeue());
		x.enqueue(1423005670);
		x.enqueue(303112892);
		x.dequeue();
		x.enqueue(1607713339);
		x.isFull();
    }
    @Test
    public void test12018() {
		Queue variable = new Queue();
		variable.enqueue(1131775062);
		assertEquals("[1131775062]", variable.toString());
		variable.enqueue(236377609);
		variable.toString();
		variable.toString();
    }
    @Test
    public void test12019() {
		Queue variable = new Queue();
		variable.enqueue(-1284981304);
		variable.isFull();
		assertFalse(variable.isFull());
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.enqueue(1941914952);
		variable.enqueue(-1490845108);
		variable.enqueue(-274955513);
    }
    @Test
    public void test12020() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.toString();
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test12021() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test12022() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-1245516011);
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test12023() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		y.toString();
		y.dequeue();
		y.toString();
		y.enqueue(-1861120550);
		y.isFull();
		y.enqueue(1878239169);
		y.toString();
    }
    @Test
    public void test12024() {
		Queue x = new Queue();
		x.toString();
		x.toString();
    }
    @Test
    public void test12025() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.enqueue(2002869483);
		assertFalse(x.isEmpty());
		x.enqueue(-1534311710);
    }
    @Test
    public void test12026() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1946627542);
		Var.isFull();
		assertEquals(1946627542, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test12027() {
		Queue Var = new Queue();
		Var.enqueue(-1986666823);
		Var.dequeue();
		Var.enqueue(1786440060);
    }
    @Test
    public void test12028() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.enqueue(1467989386);
    }
    @Test
    public void test12029() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.toString();
		y.dequeue();
		y.enqueue(842417035);
		assertFalse(y.isEmpty());
		y.isFull();
		y.toString();
		y.enqueue(-853941580);
		y.isFull();
    }
    @Test
    public void test12030() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test12031() {
		Queue Var = new Queue();
		Var.enqueue(-615643357);
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.enqueue(-2053648439);
		Var.enqueue(-179222792);
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test12032() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test12033() {
		Queue y = new Queue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.enqueue(-114414218);
    }
    @Test
    public void test12034() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		assertEquals("[]", z.toString());
		z.toString();
		z.toString();
		z.isFull();
    }
    @Test
    public void test12035() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.enqueue(585634694);
    }
    @Test
    public void test12036() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-994556080);
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test12037() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test12038() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-1297577965);
		Var.isFull();
    }
    @Test
    public void test12039() {
		Queue variable = new Queue();
		variable.enqueue(-1104210850);
		variable.enqueue(871104575);
		variable.enqueue(1535764653);
		variable.dequeue();
		assertFalse(variable.isEmpty());
		variable.isFull();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(-210099670);
    }
    @Test
    public void test12040() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(1259743250);
		Var.enqueue(-1039220771);
		Var.enqueue(405351724);
		Var.dequeue();
    }
    @Test
    public void test12041() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1500750534);
		variable.enqueue(-799449083);
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(1878201201);
		variable.toString();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test12042() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1195755695);
		assertFalse(x.isFull());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(-1276468212);
		assertFalse(x.isFull());
		x.enqueue(-91459991);
		x.dequeue();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test12043() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.toString();
		x.enqueue(1343097024);
		x.isFull();
		x.enqueue(-2064130607);
		x.toString();
    }
    @Test
    public void test12044() {
		Queue Var = new Queue();
		Var.enqueue(2088007686);
		Var.isEmpty();
		Var.toString();
		Var.enqueue(184647571);
		Var.enqueue(323568967);
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
		assertEquals("[2088007686, 184647571, 323568967]", Var.toString());
		assertEquals("[2088007686, 184647571, 323568967]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test12045() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test12046() {
		Queue Var = new Queue();
		Var.enqueue(-2044660206);
		Var.enqueue(-1410110009);
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.enqueue(-238795089);
		Var.isFull();
    }
    @Test
    public void test12047() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test12048() {
		Queue y = new Queue();
		y.enqueue(1673160805);
		y.isFull();
		y.toString();
    }
    @Test
    public void test12049() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test12050() {
		Queue z = new Queue();
		z.enqueue(-1732517912);
		z.enqueue(-1504198483);
		z.enqueue(-1333394163);
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(-972166514);
		assertFalse(z.isFull());
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test12051() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.enqueue(-507867982);
    }
    @Test
    public void test12052() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test12053() {
		Queue z = new Queue();
		z.enqueue(-2140447967);
		z.toString();
		z.toString();
		assertTrue(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test12054() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test12055() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(-2102405200);
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test12056() {
		Queue Var = new Queue();
		Var.enqueue(-2055277909);
		Var.enqueue(-1572457394);
		Var.enqueue(802859629);
		assertEquals("[802859629]", Var.toString());
		Var.toString();
		Var.enqueue(953483993);
		Var.isFull();
    }
    @Test
    public void test12057() {
		Queue z = new Queue();
		z.enqueue(-682106182);
		z.dequeue();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.enqueue(-683358078);
		z.dequeue();
		z.dequeue();
		z.enqueue(1099875077);
    }
    @Test
    public void test12058() {
		Queue z = new Queue();
		z.enqueue(-2137957706);
		z.toString();
		z.enqueue(-1983369871);
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isFull();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.enqueue(1823979075);
		z.enqueue(2134861909);
		z.toString();
    }
    @Test
    public void test12059() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(1694059937);
    }
    @Test
    public void test12060() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.enqueue(1112346362);
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(1892241337);
		variable.enqueue(496556061);
    }
    @Test
    public void test12061() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test12062() {
		Queue y = new Queue();
		y.enqueue(-206916755);
		y.toString();
		y.isFull();
    }
    @Test
    public void test12063() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(1331996046);
		variable.isEmpty();
		variable.enqueue(-829779709);
		variable.enqueue(-2056175024);
		variable.isFull();
		assertEquals("[1331996046]", variable.toString());
		variable.enqueue(-1713998138);
    }
    @Test
    public void test12064() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(633756872);
		x.isFull();
		assertFalse(x.isFull());
		x.toString();
		x.dequeue();
		x.toString();
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test12065() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(1462365233);
		variable.isFull();
		variable.isFull();
		variable.isFull();
		variable.enqueue(-521701745);
    }
    @Test
    public void test12066() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		z.toString();
		z.dequeue();
		z.enqueue(-1920645967);
    }
    @Test
    public void test12067() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1589617121);
		variable.dequeue();
		variable.enqueue(-477789080);
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(-1464668345);
		variable.dequeue();
    }
    @Test
    public void test12068() {
		Queue y = new Queue();
		y.enqueue(525740428);
		y.toString();
		y.isFull();
		y.isEmpty();
		assertFalse(y.isEmpty());
		y.enqueue(460764020);
		assertFalse(y.isFull());
		assertEquals("[525740428, 460764020]", y.toString());
		y.dequeue();
    }
    @Test
    public void test12069() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test12070() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(-799152874);
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-428575093);
		variable.isFull();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test12071() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test12072() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test12073() {
		Queue y = new Queue();
		y.enqueue(246817287);
		y.isFull();
		assertEquals("[246817287]", y.toString());
		y.enqueue(1057627687);
		assertFalse(y.isFull());
		y.enqueue(1773265707);
		assertEquals("[246817287, 1057627687, 1773265707]", y.toString());
		y.isFull();
    }
    @Test
    public void test12074() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test12075() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.isFull();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.dequeue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.enqueue(-6555109);
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test12076() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-670223080);
		Var.enqueue(-1952336492);
    }
    @Test
    public void test12077() {
		Queue variable = new Queue();
		variable.enqueue(2141045391);
		variable.enqueue(67703458);
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.toString();
		assertFalse(variable.isEmpty());
		variable.toString();
		variable.isFull();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test12078() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.enqueue(1409615107);
		z.isEmpty();
		z.isFull();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test12079() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(1390735407);
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(1343561802);
		assertFalse(variable.isFull());
		assertEquals(1343561802, variable.dequeue());
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isEmpty();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test12080() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test12081() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.toString();
		y.isFull();
    }
    @Test
    public void test12082() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		assertFalse(z.isFull());
		z.toString();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.dequeue();
		z.toString();
		z.dequeue();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test12083() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.toString();
		x.dequeue();
		x.toString();
		x.enqueue(-787895177);
    }
    @Test
    public void test12084() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.enqueue(1326647179);
		variable.enqueue(-1829593819);
		variable.isFull();
    }
    @Test
    public void test12085() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.enqueue(-1769534423);
		z.enqueue(-1193980682);
		z.enqueue(1391811368);
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test12086() {
		Queue Var = new Queue();
		Var.enqueue(1679556759);
		assertFalse(Var.isFull());
		Var.enqueue(-1055242306);
		assertEquals("[1679556759]", Var.toString());
		Var.isEmpty();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test12087() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.isEmpty();
		z.enqueue(1726653158);
		z.toString();
		z.isFull();
		z.enqueue(132466432);
    }
    @Test
    public void test12088() {
		Queue y = new Queue();
		y.enqueue(961323635);
		y.enqueue(-1429985116);
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.dequeue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.toString();
		y.dequeue();
    }
    @Test
    public void test12089() {
		Queue y = new Queue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(607940858);
		y.enqueue(2036045721);
		y.toString();
		assertFalse(y.isEmpty());
		y.isEmpty();
		y.enqueue(-756331082);
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(971601006);
		y.enqueue(428071273);
    }
    @Test
    public void test12090() {
		Queue variable = new Queue();
		variable.enqueue(-122914718);
    }
    @Test
    public void test12091() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.enqueue(571073963);
		x.isEmpty();
		assertFalse(x.isFull());
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test12092() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isFull();
		variable.enqueue(473060418);
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(-1746741033);
    }
    @Test
    public void test12093() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-500983365);
		Var.dequeue();
    }
    @Test
    public void test12094() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.enqueue(-146944488);
    }
    @Test
    public void test12095() {
		Queue z = new Queue();
		z.enqueue(1273613916);
		assertFalse(z.isFull());
		z.enqueue(1123666031);
		assertFalse(z.isEmpty());
		z.isFull();
		assertEquals("[1273613916, 1123666031]", z.toString());
		assertFalse(z.isFull());
		z.dequeue();
		z.isFull();
		z.enqueue(-370411843);
		z.toString();
    }
    @Test
    public void test12096() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(1167459719);
    }
    @Test
    public void test12097() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-627878818);
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(-1990517408);
		z.dequeue();
		z.isFull();
		z.enqueue(1324140170);
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test12098() {
		Queue z = new Queue();
		z.enqueue(-1314264893);
		z.enqueue(1059196436);
		z.enqueue(-1844593438);
		z.isFull();
		assertEquals("[1059196436]", z.toString());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.enqueue(840911779);
		z.isEmpty();
		z.enqueue(1687568682);
		assertEquals("[840911779, 1687568682]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test12099() {
		Queue y = new Queue();
		y.enqueue(623578976);
		y.toString();
		y.enqueue(972958879);
    }
    @Test
    public void test12100() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(-713449295);
		assertFalse(z.isFull());
		z.toString();
		z.enqueue(-2060441329);
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.toString();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test12101() {
		Queue y = new Queue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test12102() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.enqueue(-2115243262);
    }
    @Test
    public void test12103() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(1404493476);
		x.dequeue();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test12104() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(584478017);
    }
    @Test
    public void test12105() {
		Queue variable = new Queue();
		variable.enqueue(1913409285);
		assertEquals("[1913409285]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test12106() {
		Queue x = new Queue();
		x.dequeue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.enqueue(340322052);
		assertFalse(x.isFull());
		x.dequeue();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test12107() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.isFull();
		y.isFull();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test12108() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isFull();
		assertFalse(x.isFull());
		x.isEmpty();
		x.isEmpty();
		x.enqueue(1710002363);
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.isFull();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test12109() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(1570868971);
		Var.isFull();
    }
    @Test
    public void test12110() {
		Queue y = new Queue();
		y.toString();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test12111() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test12112() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test12113() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(-322169276);
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test12114() {
		Queue y = new Queue();
		y.enqueue(1260740051);
		y.isEmpty();
		y.isEmpty();
		y.enqueue(1314393821);
		y.isEmpty();
    }
    @Test
    public void test12115() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.enqueue(1748600142);
		Var.dequeue();
    }
    @Test
    public void test12116() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(1552304256);
		variable.isEmpty();
		variable.isFull();
		assertEquals(1552304256, variable.dequeue());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test12117() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.toString();
		x.isFull();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
		assertFalse(x.isFull());
		x.isFull();
		x.isFull();
		x.toString();
		x.isFull();
    }
    @Test
    public void test12118() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.toString();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test12119() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.enqueue(-1366861441);
		y.isFull();
		y.enqueue(2124872539);
		y.toString();
    }
    @Test
    public void test12120() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(-120667844);
		z.dequeue();
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test12121() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(1218727101);
		x.isFull();
		x.isFull();
		x.toString();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test12122() {
		Queue y = new Queue();
		y.enqueue(-1866125288);
		assertFalse(y.isFull());
		y.dequeue();
		y.toString();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isEmpty();
		y.enqueue(763860688);
    }
    @Test
    public void test12123() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
    }
    @Test
    public void test12124() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test12125() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(-1843429450);
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(-1232068651);
		Var.enqueue(1832048072);
		Var.toString();
    }
    @Test
    public void test12126() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.enqueue(-1295795961);
		x.isFull();
		x.toString();
    }
    @Test
    public void test12127() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(-1196955801);
		y.isFull();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.enqueue(-1401049916);
		y.enqueue(-1256533479);
		y.isEmpty();
    }
    @Test
    public void test12128() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.toString();
		x.enqueue(593740610);
		x.dequeue();
		x.enqueue(-543993751);
    }
    @Test
    public void test12129() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test12130() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(2106188173);
		x.enqueue(-1937217530);
		assertEquals("[2106188173]", x.toString());
		x.enqueue(1804706729);
    }
    @Test
    public void test12131() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(412943615);
		variable.enqueue(1442647534);
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test12132() {
		Queue variable = new Queue();
		variable.enqueue(1863769130);
    }
    @Test
    public void test12133() {
		Queue x = new Queue();
		x.enqueue(191854307);
		x.isEmpty();
		x.toString();
		x.isEmpty();
		x.toString();
		x.isFull();
    }
    @Test
    public void test12134() {
		Queue Var = new Queue();
		Var.enqueue(-800646925);
		Var.enqueue(-639198528);
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(1009929507);
		assertEquals(1009929507, Var.dequeue());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test12135() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(478162181);
		z.toString();
		z.isFull();
		z.isEmpty();
		z.isFull();
		z.dequeue();
		z.toString();
		z.toString();
    }
    @Test
    public void test12136() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		y.enqueue(-1003091725);
    }
    @Test
    public void test12137() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.toString();
		z.toString();
		z.toString();
		z.isFull();
		z.enqueue(-2067041865);
    }
    @Test
    public void test12138() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isEmpty();
		y.enqueue(1435455372);
		y.toString();
		y.enqueue(-562556086);
		y.enqueue(1192374239);
		y.isFull();
		y.enqueue(1656715103);
		y.isEmpty();
    }
    @Test
    public void test12139() {
		Queue y = new Queue();
		y.enqueue(-808488314);
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test12140() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.enqueue(1251001198);
		assertFalse(x.isFull());
		assertEquals("[1251001198]", x.toString());
		x.isEmpty();
		x.isFull();
		x.toString();
		assertFalse(x.isFull());
		x.isFull();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test12141() {
		Queue Var = new Queue();
		Var.enqueue(-1712703817);
		Var.toString();
		Var.isEmpty();
		Var.enqueue(-1626908441);
		Var.dequeue();
		Var.enqueue(-619373796);
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1432666722);
		Var.dequeue();
    }
    @Test
    public void test12142() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.enqueue(790646465);
		Var.enqueue(-302400109);
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test12143() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(990167741);
		assertEquals("[990167741]", y.toString());
		y.toString();
		y.enqueue(-1814741225);
		y.enqueue(-2092713581);
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test12144() {
		Queue variable = new Queue();
		variable.enqueue(-254063252);
		assertTrue(variable.isEmpty());
		variable.enqueue(1492619221);
    }
    @Test
    public void test12145() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(-73255978);
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.enqueue(-1349288412);
		y.isFull();
		y.enqueue(640045282);
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test12146() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test12147() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		Var.enqueue(-888732707);
		Var.dequeue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(1626720890);
    }
    @Test
    public void test12148() {
		Queue z = new Queue();
		z.enqueue(-1657902912);
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test12149() {
		Queue variable = new Queue();
		variable.enqueue(1059069205);
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.toString();
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test12150() {
		Queue y = new Queue();
		y.toString();
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test12151() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.enqueue(1378833020);
		variable.isEmpty();
		assertEquals(1378833020, variable.dequeue());
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test12152() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(-575873152);
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-2135613568);
    }
    @Test
    public void test12153() {
		Queue y = new Queue();
		y.enqueue(-840746624);
		y.enqueue(1445085842);
		y.enqueue(1057477222);
		assertFalse(y.isEmpty());
		y.isEmpty();
		y.isFull();
		assertFalse(y.isEmpty());
		y.toString();
		y.isFull();
		y.toString();
    }
    @Test
    public void test12154() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.toString();
		x.isFull();
		x.toString();
		x.toString();
    }
    @Test
    public void test12155() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		variable.enqueue(1570343749);
		assertFalse(variable.isFull());
		variable.toString();
		assertEquals("[1570343749]", variable.toString());
		variable.toString();
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-800228722);
		assertEquals(1570343749, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test12156() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(-1890257219);
		Var.isFull();
    }
    @Test
    public void test12157() {
		Queue y = new Queue();
		y.enqueue(418663829);
		y.dequeue();
		y.dequeue();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test12158() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.toString();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test12159() {
		Queue x = new Queue();
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(-33467854);
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test12160() {
		Queue y = new Queue();
		y.toString();
		assertEquals("[]", y.toString());
		y.toString();
		y.enqueue(-635730568);
		y.isFull();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.enqueue(604790373);
    }
    @Test
    public void test12161() {
		Queue y = new Queue();
		y.enqueue(227203194);
		assertFalse(y.isFull());
		y.dequeue();
		y.dequeue();
		y.enqueue(-1574778373);
    }
    @Test
    public void test12162() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test12163() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.enqueue(1705596865);
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(-961638592);
		x.enqueue(-1970344651);
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(-1841842338);
		x.isFull();
		x.toString();
    }
    @Test
    public void test12164() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(1338489954);
    }
    @Test
    public void test12165() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.enqueue(-2138560133);
		x.enqueue(-1587745379);
		x.toString();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.toString();
    }
    @Test
    public void test12166() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test12167() {
		Queue Var = new Queue();
		Var.enqueue(282014972);
		Var.dequeue();
		Var.enqueue(2117430941);
		Var.enqueue(-268088262);
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1292190752);
    }
    @Test
    public void test12168() {
		Queue x = new Queue();
		x.enqueue(-119347951);
    }
    @Test
    public void test12169() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(1863504156);
		variable.enqueue(-712572726);
		variable.enqueue(187064901);
		assertEquals("[1863504156, 187064901]", variable.toString());
		assertFalse(variable.isFull());
		assertEquals(1863504156, variable.dequeue());
		variable.enqueue(-1300587901);
		variable.dequeue();
    }
    @Test
    public void test12170() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(515357359);
		z.enqueue(-2125755207);
		assertEquals(515357359, z.dequeue());
		z.enqueue(1976572882);
		assertEquals(1976572882, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.enqueue(-1968352041);
    }
    @Test
    public void test12171() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test12172() {
		Queue y = new Queue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isFull();
		y.toString();
    }
    @Test
    public void test12173() {
		Queue variable = new Queue();
		variable.enqueue(2002051691);
		variable.enqueue(-1705189948);
		assertFalse(variable.isFull());
		variable.enqueue(1902718744);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(1884832915);
		variable.isEmpty();
		variable.enqueue(-1786157044);
		variable.dequeue();
    }
    @Test
    public void test12174() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(449051242);
		Var.enqueue(725569793);
		assertEquals("[449051242, 725569793]", Var.toString());
		Var.isFull();
		Var.dequeue();
		assertEquals("[725569793]", Var.toString());
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(230718510);
		Var.isFull();
    }
    @Test
    public void test12175() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test12176() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test12177() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.isFull();
		z.isFull();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.enqueue(1262295115);
		z.toString();
		z.dequeue();
		z.enqueue(529003802);
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test12178() {
		Queue variable = new Queue();
		variable.enqueue(1311856261);
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(1891618183);
    }
    @Test
    public void test12179() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(1544572129);
    }
    @Test
    public void test12180() {
		Queue Var = new Queue();
		Var.enqueue(355621122);
		Var.enqueue(265960186);
		Var.isFull();
    }
    @Test
    public void test12181() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test12182() {
		Queue y = new Queue();
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(-1660568339);
    }
    @Test
    public void test12183() {
		Queue variable = new Queue();
		variable.enqueue(-339960434);
		variable.isEmpty();
		variable.toString();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.toString();
		variable.enqueue(-1655841761);
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(-12347130);
		variable.toString();
    }
    @Test
    public void test12184() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(-50592437);
		z.isEmpty();
		z.toString();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test12185() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.dequeue();
		variable.enqueue(-1668977906);
    }
    @Test
    public void test12186() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-1206788291);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(-889248923);
		Var.dequeue();
    }
    @Test
    public void test12187() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test12188() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(893451299);
		Var.isEmpty();
    }
    @Test
    public void test12189() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.enqueue(-2116592335);
		assertFalse(variable.isFull());
		variable.enqueue(1473341079);
		variable.toString();
		assertFalse(variable.isEmpty());
		assertEquals(1473341079, variable.dequeue());
		variable.toString();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test12190() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test12191() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test12192() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test12193() {
		Queue y = new Queue();
		y.enqueue(-1191261122);
		y.dequeue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(932200484);
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test12194() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-1331181597);
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(1764147178);
		assertFalse(Var.isFull());
		Var.enqueue(-56271068);
    }
    @Test
    public void test12195() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.enqueue(1573397398);
		assertFalse(y.isFull());
		assertFalse(y.isEmpty());
		y.isEmpty();
		y.toString();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test12196() {
		Queue z = new Queue();
		z.toString();
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(734004456);
		z.isFull();
		assertEquals(734004456, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.enqueue(1165377821);
		z.enqueue(-1203406832);
		z.toString();
		z.enqueue(1534246359);
    }
    @Test
    public void test12197() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(-398644012);
		variable.enqueue(550160264);
    }
    @Test
    public void test12198() {
		Queue y = new Queue();
		y.enqueue(-621132413);
		assertEquals(-1, y.dequeue());
		y.enqueue(-644277492);
		y.isEmpty();
    }
    @Test
    public void test12199() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(1798304588);
		z.enqueue(-635200480);
		z.isFull();
		z.dequeue();
		z.toString();
		z.enqueue(-861132039);
		z.toString();
		z.dequeue();
    }
    @Test
    public void test12200() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test12201() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test12202() {
		Queue x = new Queue();
		x.enqueue(1725939492);
		assertEquals(1725939492, x.dequeue());
		assertFalse(x.isFull());
		x.toString();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.isFull();
		x.enqueue(1712465784);
		assertFalse(x.isEmpty());
		assertEquals(1712465784, x.dequeue());
		x.isEmpty();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test12203() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(1570603469);
		x.isEmpty();
    }
    @Test
    public void test12204() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test12205() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.dequeue();
		x.isFull();
		x.toString();
		x.isEmpty();
		x.enqueue(512654235);
		x.dequeue();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test12206() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isFull();
		y.enqueue(-500250709);
		y.dequeue();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.dequeue();
		y.toString();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test12207() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(343287432);
		assertEquals(343287432, y.dequeue());
		y.enqueue(-976089238);
    }
    @Test
    public void test12208() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test12209() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(1561433025);
		assertFalse(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.toString();
		variable.enqueue(-1418417947);
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.toString();
		variable.enqueue(-1407564678);
    }
    @Test
    public void test12210() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1376497637);
		variable.enqueue(-1070520056);
		variable.isFull();
    }
    @Test
    public void test12211() {
		Queue variable = new Queue();
		variable.isFull();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test12212() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isEmpty();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(-1851602553);
		x.toString();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.toString();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.toString();
    }
    @Test
    public void test12213() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(1530688500);
		variable.toString();
    }
    @Test
    public void test12214() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test12215() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-987805162);
    }
    @Test
    public void test12216() {
		Queue z = new Queue();
		z.enqueue(1809831523);
		z.enqueue(1244413212);
		z.dequeue();
		assertEquals(1244413212, z.dequeue());
		z.dequeue();
		z.enqueue(-1471651655);
		z.toString();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test12217() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test12218() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(2057171256);
		assertEquals(2057171256, variable.dequeue());
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test12219() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(88084973);
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test12220() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.dequeue();
		z.toString();
		z.toString();
		assertFalse(z.isFull());
		z.toString();
		z.isFull();
		z.enqueue(1454174339);
    }
    @Test
    public void test12221() {
		Queue Var = new Queue();
		Var.enqueue(1943042071);
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(-923415226);
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test12222() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.isFull();
		assertFalse(z.isFull());
		z.enqueue(-815403904);
    }
    @Test
    public void test12223() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test12224() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(-1117700116);
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test12225() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.enqueue(1512209237);
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test12226() {
		Queue z = new Queue();
		z.enqueue(342528432);
    }
    @Test
    public void test12227() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(-1948799246);
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.dequeue();
		assertFalse(z.isFull());
		z.isFull();
		assertTrue(z.isEmpty());
		z.isFull();
		z.dequeue();
		z.enqueue(1654995764);
    }
    @Test
    public void test12228() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.isEmpty();
		y.enqueue(-1912837267);
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test12229() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test12230() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.enqueue(1656330962);
		y.dequeue();
    }
    @Test
    public void test12231() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(393872943);
		variable.isFull();
		variable.isEmpty();
		assertEquals(393872943, variable.dequeue());
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(1987139425);
    }
    @Test
    public void test12232() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(1952486518);
		Var.toString();
		Var.enqueue(-1236459948);
		Var.enqueue(-1143201441);
		Var.enqueue(-1034594496);
		assertEquals(1952486518, Var.dequeue());
		Var.toString();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test12233() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-1689579486);
		z.dequeue();
		z.enqueue(-870344457);
    }
    @Test
    public void test12234() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(-916700579);
		Var.isFull();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.enqueue(2052299729);
		assertEquals(2052299729, Var.dequeue());
		Var.dequeue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test12235() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(27676627);
		assertFalse(z.isEmpty());
		z.dequeue();
		z.isEmpty();
		z.toString();
		z.enqueue(2143451104);
		z.enqueue(-1791072107);
		z.isFull();
		z.enqueue(-1724625363);
    }
    @Test
    public void test12236() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test12237() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.enqueue(-1679123615);
		variable.dequeue();
		variable.enqueue(-399491400);
    }
    @Test
    public void test12238() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.toString();
		z.isEmpty();
		z.dequeue();
		z.isFull();
		z.enqueue(1436718349);
		z.toString();
    }
    @Test
    public void test12239() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(813986631);
		z.dequeue();
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(-45136596);
		z.toString();
		z.enqueue(-46902997);
    }
    @Test
    public void test12240() {
		Queue x = new Queue();
		x.enqueue(-1752590482);
		x.toString();
		x.dequeue();
		x.enqueue(1693792498);
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test12241() {
		Queue y = new Queue();
		y.enqueue(98214220);
		assertEquals(98214220, y.dequeue());
		y.enqueue(277972339);
    }
    @Test
    public void test12242() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test12243() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-1174525386);
		z.toString();
    }
    @Test
    public void test12244() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-1226222155);
    }
    @Test
    public void test12245() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test12246() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.enqueue(-258868986);
		y.isEmpty();
		y.isFull();
		y.dequeue();
		y.enqueue(-1703399683);
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(-1717988267);
		y.toString();
    }
    @Test
    public void test12247() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(1086066712);
		assertEquals("[1086066712]", y.toString());
		assertEquals(1086066712, y.dequeue());
		y.dequeue();
    }
    @Test
    public void test12248() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test12249() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(96460491);
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(1633113456);
		variable.dequeue();
    }
    @Test
    public void test12250() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test12251() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-1658779687);
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(-1137043454);
    }
    @Test
    public void test12252() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.toString();
		x.isEmpty();
		x.dequeue();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test12253() {
		Queue z = new Queue();
		z.isFull();
		assertEquals("[]", z.toString());
		z.toString();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.toString();
		z.isFull();
		z.isEmpty();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test12254() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(-1053842370);
    }
    @Test
    public void test12255() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test12256() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(-442688455);
    }
    @Test
    public void test12257() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test12258() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-1752248550);
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.toString();
		z.enqueue(-1740330692);
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.enqueue(346315080);
    }
    @Test
    public void test12259() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		z.isEmpty();
		z.enqueue(1588118160);
		z.isEmpty();
		z.enqueue(70415851);
		z.isFull();
		z.isEmpty();
		assertFalse(z.isEmpty());
		assertFalse(z.isEmpty());
		z.isFull();
		z.toString();
    }
    @Test
    public void test12260() {
		Queue y = new Queue();
		y.enqueue(-1822550866);
		assertTrue(y.isEmpty());
		y.dequeue();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test12261() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.enqueue(739314804);
		variable.enqueue(-2071104281);
		variable.isFull();
		assertEquals(739314804, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test12262() {
		Queue y = new Queue();
		y.isFull();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.enqueue(-1480825896);
		y.isEmpty();
		y.isEmpty();
		y.enqueue(940602241);
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test12263() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.isEmpty();
		x.toString();
		x.enqueue(-1606130628);
		assertFalse(x.isFull());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.enqueue(1974271962);
		assertEquals(1974271962, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test12264() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.enqueue(348373046);
		variable.toString();
    }
    @Test
    public void test12265() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test12266() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.enqueue(355774395);
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.toString();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test12267() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.toString();
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test12268() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test12269() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.enqueue(459612578);
		x.dequeue();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test12270() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.isEmpty();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test12271() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test12272() {
		Queue z = new Queue();
		z.enqueue(1753495836);
    }
    @Test
    public void test12273() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test12274() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(-1804237715);
		x.toString();
    }
    @Test
    public void test12275() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test12276() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(1758050636);
		assertFalse(y.isEmpty());
		y.toString();
    }
    @Test
    public void test12277() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.toString();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(91410252);
		assertFalse(variable.isFull());
		variable.enqueue(-364598474);
		variable.enqueue(-1558820011);
		variable.isEmpty();
		assertEquals(91410252, variable.dequeue());
		variable.enqueue(491190270);
    }
    @Test
    public void test12278() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.isFull();
		x.isFull();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isFull();
		x.enqueue(-2037633457);
    }
    @Test
    public void test12279() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
		x.toString();
		x.enqueue(-1731754264);
    }
    @Test
    public void test12280() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(905797419);
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-1083882648);
		Var.enqueue(-872903768);
		Var.enqueue(520582005);
    }
    @Test
    public void test12281() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(1680819847);
		variable.enqueue(-1101258893);
		variable.isFull();
		variable.toString();
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test12282() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-2004654640);
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test12283() {
		Queue z = new Queue();
		z.enqueue(1196880845);
    }
    @Test
    public void test12284() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-174327579);
		assertEquals(-1, x.dequeue());
		x.enqueue(-978590622);
		x.enqueue(-2065655296);
		x.toString();
		x.dequeue();
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test12285() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test12286() {
		Queue y = new Queue();
		y.enqueue(890753627);
		y.toString();
		y.dequeue();
		y.enqueue(1315602285);
		y.enqueue(1099879389);
		y.isFull();
    }
    @Test
    public void test12287() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test12288() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(-795005499);
		y.toString();
		y.dequeue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.toString();
		y.dequeue();
		y.toString();
		y.enqueue(1379937079);
		y.toString();
    }
    @Test
    public void test12289() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isFull();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.enqueue(-808074418);
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test12290() {
		Queue Var = new Queue();
		Var.enqueue(1663389338);
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-2044102460);
    }
    @Test
    public void test12291() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(-589939321);
		z.toString();
		z.dequeue();
    }
    @Test
    public void test12292() {
		Queue Var = new Queue();
		Var.enqueue(1207975747);
		Var.toString();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-750787021);
		Var.dequeue();
		Var.enqueue(322939645);
		Var.dequeue();
    }
    @Test
    public void test12293() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test12294() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(1828807656);
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(1417173449);
		y.dequeue();
		y.enqueue(-1396036385);
		assertFalse(y.isFull());
		y.isEmpty();
		y.enqueue(687609268);
		y.isEmpty();
    }
    @Test
    public void test12295() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test12296() {
		Queue Var = new Queue();
		Var.enqueue(-513572254);
		Var.dequeue();
		Var.enqueue(-608784463);
    }
    @Test
    public void test12297() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test12298() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.toString();
		assertEquals("[]", z.toString());
		z.dequeue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(526950149);
		z.dequeue();
		z.toString();
    }
    @Test
    public void test12299() {
		Queue y = new Queue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.isFull();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.toString();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test12300() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isFull();
		y.isEmpty();
		y.enqueue(-1701729263);
		y.dequeue();
		y.isFull();
		y.enqueue(836921428);
    }
    @Test
    public void test12301() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isFull();
		y.isFull();
		y.enqueue(1915596370);
		assertEquals("[1915596370]", y.toString());
		assertFalse(y.isEmpty());
		y.toString();
    }
    @Test
    public void test12302() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(-450241831);
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test12303() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.isEmpty();
		x.enqueue(1396937940);
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test12304() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(2053441928);
    }
    @Test
    public void test12305() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test12306() {
		Queue y = new Queue();
		y.enqueue(-624257974);
    }
    @Test
    public void test12307() {
		Queue Var = new Queue();
		Var.enqueue(555817451);
		Var.isEmpty();
    }
    @Test
    public void test12308() {
		Queue x = new Queue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.toString();
		x.isFull();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.enqueue(455792124);
		x.isFull();
    }
    @Test
    public void test12309() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(349128155);
		Var.toString();
    }
    @Test
    public void test12310() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(588805891);
		Var.isFull();
		Var.enqueue(1916741171);
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		assertFalse(Var.isEmpty());
		assertFalse(Var.isFull());
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test12311() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.toString();
		y.dequeue();
		y.toString();
		y.isFull();
		assertEquals("[]", y.toString());
		y.toString();
		y.toString();
		y.enqueue(-938837248);
		y.enqueue(-475309761);
    }
    @Test
    public void test12312() {
		Queue y = new Queue();
		y.enqueue(-1514856398);
		y.toString();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.dequeue();
		y.toString();
		y.enqueue(-1495150116);
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test12313() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test12314() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.toString();
		z.dequeue();
		z.toString();
		z.isEmpty();
		z.toString();
		z.isFull();
    }
    @Test
    public void test12315() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1774014589);
		variable.isFull();
		variable.enqueue(1650635103);
		variable.isEmpty();
		variable.enqueue(556006561);
		variable.enqueue(-1236999852);
    }
    @Test
    public void test12316() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.toString();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isFull();
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(-2132807078);
		z.enqueue(1472621543);
		assertEquals("[1472621543]", z.toString());
		z.dequeue();
		z.toString();
    }
    @Test
    public void test12317() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.enqueue(-336778742);
		assertFalse(Var.isFull());
		Var.enqueue(-946614754);
		Var.enqueue(942848159);
		Var.toString();
    }
    @Test
    public void test12318() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-1146073007);
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test12319() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test12320() {
		Queue Var = new Queue();
		Var.enqueue(1643156443);
		Var.enqueue(-2081616459);
		Var.isEmpty();
    }
    @Test
    public void test12321() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test12322() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test12323() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.toString();
		assertTrue(y.isEmpty());
		y.enqueue(-464728661);
    }
    @Test
    public void test12324() {
		Queue x = new Queue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.dequeue();
    }
    @Test
    public void test12325() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1096016944);
		Var.isEmpty();
    }
    @Test
    public void test12326() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isFull();
		assertFalse(x.isFull());
		x.enqueue(950422201);
		x.isFull();
    }
    @Test
    public void test12327() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.toString();
		variable.enqueue(-705544558);
		variable.enqueue(1366110901);
		variable.enqueue(857294938);
		variable.enqueue(-830270327);
		assertEquals("[1366110901, 857294938]", variable.toString());
		variable.dequeue();
		variable.enqueue(-580477116);
    }
    @Test
    public void test12328() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.isFull();
		variable.enqueue(1827105272);
		variable.toString();
		variable.toString();
		variable.toString();
		assertEquals("[1827105272]", variable.toString());
		assertEquals(1827105272, variable.dequeue());
		variable.enqueue(206799940);
    }
    @Test
    public void test12329() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-746785758);
		Var.enqueue(376588238);
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test12330() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test12331() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test12332() {
		Queue y = new Queue();
		y.enqueue(965531452);
		y.toString();
		y.isFull();
		y.enqueue(-1242951460);
		y.enqueue(1990767764);
		assertFalse(y.isFull());
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test12333() {
		Queue x = new Queue();
		x.enqueue(-1553296225);
		x.isFull();
		x.toString();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isFull();
		x.isFull();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test12334() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(-278553061);
		Var.isEmpty();
    }
    @Test
    public void test12335() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test12336() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(1212816253);
		assertEquals(1212816253, Var.dequeue());
		Var.toString();
		Var.isFull();
		Var.enqueue(744103493);
		Var.toString();
		Var.enqueue(-1679216723);
		Var.toString();
    }
    @Test
    public void test12337() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(-1145336890);
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(1809557227);
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test12338() {
		Queue z = new Queue();
		z.enqueue(2135132029);
		assertEquals("[2135132029]", z.toString());
		z.dequeue();
		assertTrue(z.isEmpty());
		z.enqueue(-1111711909);
    }
    @Test
    public void test12339() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test12340() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test12341() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test12342() {
		Queue variable = new Queue();
		variable.enqueue(-356665712);
		variable.toString();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.toString();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test12343() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(611738436);
		variable.isFull();
		assertEquals(611738436, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test12344() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test12345() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(1356194221);
		assertFalse(variable.isEmpty());
		variable.enqueue(1387563345);
		assertFalse(variable.isEmpty());
		assertEquals(1356194221, variable.dequeue());
		variable.enqueue(1816257707);
		variable.toString();
		assertEquals("[1387563345, 1816257707]", variable.toString());
		variable.enqueue(-215331787);
		variable.enqueue(-1421561738);
    }
    @Test
    public void test12346() {
		Queue variable = new Queue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(2138799117);
		variable.toString();
    }
    @Test
    public void test12347() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(1745955971);
    }
    @Test
    public void test12348() {
		Queue Var = new Queue();
		Var.enqueue(-1075808023);
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.enqueue(-1638169550);
		Var.enqueue(1654950026);
		Var.isEmpty();
		Var.enqueue(1694502423);
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test12349() {
		Queue variable = new Queue();
		variable.enqueue(1572089149);
		variable.toString();
		variable.isEmpty();
		variable.enqueue(786565439);
		variable.toString();
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		variable.toString();
		assertEquals(1572089149, variable.dequeue());
		variable.enqueue(-537029937);
		assertFalse(variable.isEmpty());
		variable.enqueue(-661824850);
		variable.dequeue();
    }
    @Test
    public void test12350() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		y.enqueue(912025598);
		y.toString();
		y.isEmpty();
		y.enqueue(-103143002);
    }
    @Test
    public void test12351() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(2004053558);
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test12352() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.enqueue(-1027825824);
		Var.isEmpty();
    }
    @Test
    public void test12353() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(369532724);
		variable.enqueue(-1051356263);
		variable.toString();
    }
    @Test
    public void test12354() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-980001488);
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.enqueue(228655038);
		assertFalse(Var.isEmpty());
		Var.enqueue(637544473);
		Var.isFull();
		Var.enqueue(-437831751);
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test12355() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.enqueue(1370423177);
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-943815497);
		x.dequeue();
		x.enqueue(-2051324603);
		x.toString();
		assertEquals(-1, x.dequeue());
		x.toString();
    }
    @Test
    public void test12356() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.toString();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(-376895037);
		y.toString();
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test12357() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test12358() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-1082994788);
		Var.enqueue(-1471746936);
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-303999258);
		Var.enqueue(-1902462365);
		Var.isFull();
    }
    @Test
    public void test12359() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.enqueue(351216303);
    }
    @Test
    public void test12360() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(1351597998);
		x.isEmpty();
		x.toString();
		x.toString();
    }
    @Test
    public void test12361() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1565259251);
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test12362() {
		Queue y = new Queue();
		y.enqueue(1049425780);
		y.isEmpty();
		assertFalse(y.isFull());
		y.isFull();
		y.toString();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test12363() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.toString();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.enqueue(-72527510);
		Var.dequeue();
    }
    @Test
    public void test12364() {
		Queue z = new Queue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.toString();
		z.dequeue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.isFull();
		z.dequeue();
		z.toString();
		z.toString();
    }
    @Test
    public void test12365() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-1226539624);
    }
    @Test
    public void test12366() {
		Queue x = new Queue();
		x.enqueue(114464929);
		x.isFull();
		assertEquals(114464929, x.dequeue());
		x.isFull();
    }
    @Test
    public void test12367() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test12368() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.toString();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(921507770);
		x.isEmpty();
		assertEquals(921507770, x.dequeue());
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.enqueue(1684855794);
    }
    @Test
    public void test12369() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test12370() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.enqueue(1957206751);
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test12371() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-450337995);
		assertFalse(z.isFull());
		z.enqueue(69722384);
		z.isEmpty();
		z.isFull();
		assertFalse(z.isFull());
		assertEquals(69722384, z.dequeue());
		z.isFull();
		z.isFull();
		z.toString();
    }
    @Test
    public void test12372() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.toString();
		y.dequeue();
		y.isFull();
		y.enqueue(996428999);
		assertEquals(996428999, y.dequeue());
		assertTrue(y.isEmpty());
		y.dequeue();
    }
    @Test
    public void test12373() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isFull();
		x.enqueue(2137754656);
		assertEquals("[2137754656]", x.toString());
		x.isFull();
		x.toString();
		assertFalse(x.isEmpty());
		x.toString();
		x.isFull();
    }
    @Test
    public void test12374() {
		Queue Var = new Queue();
		Var.enqueue(-2016266964);
		Var.dequeue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.enqueue(1839473634);
		Var.enqueue(-1718732517);
		assertEquals(1839473634, Var.dequeue());
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test12375() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(900329567);
    }
    @Test
    public void test12376() {
		Queue y = new Queue();
		y.enqueue(1935417069);
		y.isFull();
    }
    @Test
    public void test12377() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(-943187951);
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(331411892);
    }
    @Test
    public void test12378() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-506234189);
		variable.enqueue(-136829441);
		variable.toString();
    }
    @Test
    public void test12379() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		variable.toString();
		variable.enqueue(731113212);
		variable.isFull();
		assertEquals("[731113212]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test12380() {
		Queue y = new Queue();
		y.enqueue(-1436520396);
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test12381() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test12382() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(266291137);
		y.isEmpty();
		assertEquals(266291137, y.dequeue());
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test12383() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.enqueue(237032927);
		y.dequeue();
		y.toString();
    }
    @Test
    public void test12384() {
		Queue Var = new Queue();
		Var.enqueue(-1499115974);
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(1205201293);
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test12385() {
		Queue variable = new Queue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(516061238);
		assertEquals("[516061238]", variable.toString());
		variable.enqueue(911176393);
		assertEquals("[516061238, 911176393]", variable.toString());
		variable.dequeue();
		variable.enqueue(-1296663380);
    }
    @Test
    public void test12386() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.dequeue();
		variable.enqueue(1076429613);
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test12387() {
		Queue variable = new Queue();
		variable.enqueue(-1586885533);
    }
    @Test
    public void test12388() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test12389() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.dequeue();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(-2112717005);
    }
    @Test
    public void test12390() {
		Queue z = new Queue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.dequeue();
		z.isFull();
		z.isFull();
		z.isFull();
		z.enqueue(242958410);
    }
    @Test
    public void test12391() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test12392() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(1330070437);
    }
    @Test
    public void test12393() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(1504319411);
		assertFalse(z.isFull());
		z.enqueue(1520085825);
    }
    @Test
    public void test12394() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1515261405);
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(-1622885361);
		variable.dequeue();
		variable.enqueue(-1045848266);
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test12395() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(-765405600);
		variable.toString();
    }
    @Test
    public void test12396() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test12397() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test12398() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(1517110606);
    }
    @Test
    public void test12399() {
		Queue y = new Queue();
		y.enqueue(-332838089);
		y.enqueue(1539993705);
    }
    @Test
    public void test12400() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.toString();
		x.dequeue();
		x.toString();
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(-1603450968);
		x.enqueue(-1193227037);
    }
    @Test
    public void test12401() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test12402() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test12403() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(1819742912);
		z.dequeue();
		assertFalse(z.isFull());
		z.toString();
		z.dequeue();
    }
    @Test
    public void test12404() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		z.toString();
		z.isFull();
		z.dequeue();
		z.isFull();
		z.toString();
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.enqueue(-1139764034);
		z.isFull();
		z.enqueue(-763429087);
    }
    @Test
    public void test12405() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isFull();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test12406() {
		Queue variable = new Queue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test12407() {
		Queue x = new Queue();
		x.enqueue(696118674);
		assertEquals(696118674, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test12408() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-2124064327);
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.enqueue(1777698927);
		variable.toString();
    }
    @Test
    public void test12409() {
		Queue x = new Queue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.enqueue(686069055);
		x.dequeue();
		x.enqueue(-1409396992);
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test12410() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(112061220);
		y.toString();
		y.isFull();
		y.enqueue(1221304854);
		y.enqueue(1506652535);
		y.isEmpty();
		y.isEmpty();
		assertFalse(y.isEmpty());
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test12411() {
		Queue z = new Queue();
		z.toString();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.isEmpty();
		z.isFull();
		z.dequeue();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test12412() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-1710879324);
		x.dequeue();
		x.enqueue(807124421);
		x.toString();
		x.enqueue(-168971667);
		x.toString();
    }
    @Test
    public void test12413() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.dequeue();
		variable.enqueue(1286787620);
		assertEquals(1286787620, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(414782260);
    }
    @Test
    public void test12414() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-1389086351);
		variable.enqueue(359295261);
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test12415() {
		Queue z = new Queue();
		z.enqueue(-177097922);
		z.isFull();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.enqueue(1721219222);
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test12416() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(325844859);
		assertEquals(325844859, z.dequeue());
		assertFalse(z.isFull());
		z.dequeue();
		z.toString();
		z.isFull();
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test12417() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isFull();
		z.enqueue(527147839);
		z.enqueue(-1119433616);
		assertFalse(z.isFull());
		z.toString();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test12418() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-299660137);
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.toString();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test12419() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(1925399079);
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test12420() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.enqueue(-1735684336);
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test12421() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test12422() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.enqueue(1942898732);
		variable.enqueue(400241442);
		variable.enqueue(-763092933);
		assertFalse(variable.isEmpty());
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-741760184);
		assertFalse(variable.isFull());
		assertEquals(400241442, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test12423() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(-1696344786);
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(-261052977);
		z.isEmpty();
    }
    @Test
    public void test12424() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test12425() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.enqueue(-224991160);
    }
    @Test
    public void test12426() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isFull();
		Var.enqueue(396386786);
    }
    @Test
    public void test12427() {
		Queue Var = new Queue();
		Var.enqueue(37865584);
		Var.enqueue(955021755);
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.enqueue(-1644187058);
		Var.enqueue(-1516259182);
		Var.enqueue(-330917166);
		Var.dequeue();
    }
    @Test
    public void test12428() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		assertEquals("[]", x.toString());
		x.enqueue(-49040896);
    }
    @Test
    public void test12429() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isEmpty();
		y.enqueue(847095037);
		y.isFull();
		assertFalse(y.isFull());
		y.dequeue();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.enqueue(1128122025);
    }
    @Test
    public void test12430() {
		Queue x = new Queue();
		x.enqueue(-903495039);
		x.dequeue();
		x.enqueue(913944226);
		assertFalse(x.isEmpty());
		x.dequeue();
		x.enqueue(-1156465856);
		x.enqueue(325639290);
		x.enqueue(1222312783);
		x.toString();
    }
    @Test
    public void test12431() {
		Queue z = new Queue();
		z.enqueue(1860698977);
		z.dequeue();
		z.enqueue(-760227582);
		z.isEmpty();
    }
    @Test
    public void test12432() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(1500772073);
		z.enqueue(-883248288);
		z.enqueue(-847265753);
		z.enqueue(-1572632284);
		z.dequeue();
    }
    @Test
    public void test12433() {
		Queue x = new Queue();
		x.enqueue(-1453407351);
		x.isEmpty();
		x.enqueue(176620302);
    }
    @Test
    public void test12434() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(1213376871);
		variable.isFull();
		assertEquals("[1213376871]", variable.toString());
		assertEquals("[1213376871]", variable.toString());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.enqueue(-1777811644);
		variable.isFull();
		variable.enqueue(-440189131);
    }
    @Test
    public void test12435() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test12436() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(1045247818);
		y.isFull();
		y.enqueue(140651746);
		y.dequeue();
    }
    @Test
    public void test12437() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test12438() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(622789812);
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-731182459);
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(646314732);
    }
    @Test
    public void test12439() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.enqueue(-803223367);
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-1478433212);
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test12440() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test12441() {
		Queue y = new Queue();
		y.enqueue(1328208878);
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.isEmpty();
		assertEquals("[1328208878]", y.toString());
		y.toString();
    }
    @Test
    public void test12442() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(-1494122820);
		z.enqueue(1536292528);
		z.enqueue(319847768);
		z.isFull();
    }
    @Test
    public void test12443() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(948773500);
		z.isFull();
		assertFalse(z.isEmpty());
		z.enqueue(629760259);
		assertFalse(z.isFull());
		z.isFull();
		assertEquals(948773500, z.dequeue());
		z.enqueue(-777766507);
    }
    @Test
    public void test12444() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(1929091684);
    }
    @Test
    public void test12445() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(661252228);
		x.isFull();
		x.enqueue(-528775634);
		assertEquals("[661252228]", x.toString());
		x.toString();
		x.dequeue();
		x.enqueue(-2009446152);
		x.isEmpty();
		x.enqueue(1594310937);
		x.isFull();
		x.isFull();
    }
    @Test
    public void test12446() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test12447() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-901071644);
    }
    @Test
    public void test12448() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(331585066);
		x.enqueue(-504856847);
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test12449() {
		Queue x = new Queue();
		x.enqueue(2135102478);
		x.toString();
		x.enqueue(6311763);
		x.dequeue();
		assertEquals(6311763, x.dequeue());
		x.dequeue();
		x.enqueue(-1493707742);
		x.toString();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isFull();
    }
    @Test
    public void test12450() {
		Queue y = new Queue();
		y.enqueue(906399205);
		y.isEmpty();
    }
    @Test
    public void test12451() {
		Queue z = new Queue();
		z.dequeue();
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-455617305);
		z.isFull();
		z.enqueue(-1813887808);
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.enqueue(1604867452);
    }
    @Test
    public void test12452() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.dequeue();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.enqueue(1868436331);
		y.toString();
		y.isFull();
		y.enqueue(260733633);
		y.isFull();
		y.enqueue(1746662677);
		y.toString();
		y.toString();
    }
    @Test
    public void test12453() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.toString();
		x.dequeue();
    }
    @Test
    public void test12454() {
		Queue x = new Queue();
		x.enqueue(1637851426);
		assertEquals(1637851426, x.dequeue());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-119105072);
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(399604732);
    }
    @Test
    public void test12455() {
		Queue Var = new Queue();
		Var.enqueue(-903545531);
    }
    @Test
    public void test12456() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		variable.enqueue(-1429836426);
		variable.toString();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.enqueue(1099020861);
    }
    @Test
    public void test12457() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-231397057);
		Var.isFull();
    }
    @Test
    public void test12458() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.isFull();
		assertEquals("[]", z.toString());
		z.enqueue(1955210138);
		assertEquals("[1955210138]", z.toString());
		z.isFull();
		z.toString();
		z.isEmpty();
		assertEquals("[1955210138]", z.toString());
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(2124349205);
		z.toString();
    }
    @Test
    public void test12459() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.enqueue(270243701);
		variable.toString();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test12460() {
		Queue z = new Queue();
		z.enqueue(-296092059);
    }
    @Test
    public void test12461() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.enqueue(-644181540);
		assertEquals(-1, x.dequeue());
		x.toString();
		x.toString();
		x.isEmpty();
		x.isFull();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test12462() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(1079910343);
		y.isFull();
		y.toString();
		y.enqueue(-889150143);
		y.enqueue(-1142239797);
		assertEquals(1079910343, y.dequeue());
		y.isFull();
    }
    @Test
    public void test12463() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-816521239);
		Var.toString();
		Var.enqueue(-1085465967);
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test12464() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isFull();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.enqueue(922379458);
		z.isEmpty();
		z.dequeue();
		z.enqueue(-1430352574);
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test12465() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.enqueue(1108680079);
		assertFalse(y.isEmpty());
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test12466() {
		Queue x = new Queue();
		x.enqueue(-418995180);
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test12467() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		assertTrue(y.isEmpty());
		y.dequeue();
		assertTrue(y.isEmpty());
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test12468() {
		Queue y = new Queue();
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(1462298609);
		y.isEmpty();
		y.enqueue(838276706);
		y.toString();
    }
    @Test
    public void test12469() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(-560193953);
    }
    @Test
    public void test12470() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isFull();
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test12471() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.enqueue(-412195299);
		Var.dequeue();
    }
    @Test
    public void test12472() {
		Queue x = new Queue();
		x.enqueue(1918301803);
		assertEquals("[1918301803]", x.toString());
		x.enqueue(-206031427);
		x.toString();
		x.toString();
		x.dequeue();
		x.toString();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test12473() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test12474() {
		Queue y = new Queue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.toString();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test12475() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test12476() {
		Queue x = new Queue();
		x.enqueue(207366916);
    }
    @Test
    public void test12477() {
		Queue z = new Queue();
		z.enqueue(-1420743553);
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(-2100194607);
		z.dequeue();
		z.toString();
    }
    @Test
    public void test12478() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isFull();
		variable.enqueue(1995490970);
		variable.dequeue();
		variable.enqueue(-2069830909);
		variable.isEmpty();
    }
    @Test
    public void test12479() {
		Queue Var = new Queue();
		Var.enqueue(-888674624);
    }
    @Test
    public void test12480() {
		Queue x = new Queue();
		x.enqueue(2039717370);
		x.toString();
		x.isFull();
		assertFalse(x.isEmpty());
		x.enqueue(-2097712867);
		x.isEmpty();
		assertEquals("[2039717370]", x.toString());
		assertEquals("[2039717370]", x.toString());
		x.isFull();
		x.enqueue(-1920710353);
		x.enqueue(-915136897);
		x.enqueue(779547258);
    }
    @Test
    public void test12481() {
		Queue Var = new Queue();
		Var.enqueue(1407805588);
		Var.isFull();
    }
    @Test
    public void test12482() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.dequeue();
		z.dequeue();
		z.enqueue(-540806295);
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test12483() {
		Queue x = new Queue();
		x.toString();
		assertEquals("[]", x.toString());
		x.toString();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isFull();
		x.toString();
		x.enqueue(236164269);
		x.isFull();
		assertEquals("[236164269]", x.toString());
		x.enqueue(2120194888);
		assertFalse(x.isFull());
		x.isFull();
    }
    @Test
    public void test12484() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		assertTrue(z.isEmpty());
		z.toString();
		assertTrue(z.isEmpty());
		z.isFull();
		assertEquals("[]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test12485() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.enqueue(-1499652499);
		y.enqueue(-1133318445);
		y.enqueue(1108978225);
		y.isFull();
    }
    @Test
    public void test12486() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(-194191110);
		y.dequeue();
		y.isFull();
		y.isFull();
		y.dequeue();
		y.isFull();
		y.enqueue(-1597565988);
    }
    @Test
    public void test12487() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test12488() {
		Queue Var = new Queue();
		Var.enqueue(-2044002480);
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test12489() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.isEmpty();
		y.enqueue(1659671591);
    }
    @Test
    public void test12490() {
		Queue z = new Queue();
		z.enqueue(1888711062);
		z.dequeue();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test12491() {
		Queue Var = new Queue();
		Var.enqueue(-1965822767);
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test12492() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		y.enqueue(1936388979);
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test12493() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-959677447);
    }
    @Test
    public void test12494() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-133881487);
		assertFalse(z.isFull());
		z.dequeue();
		z.dequeue();
		z.enqueue(-1644193906);
		z.toString();
		z.enqueue(1298855272);
    }
    @Test
    public void test12495() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.enqueue(-1027874572);
		Var.isFull();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test12496() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(1865212821);
		x.isEmpty();
    }
    @Test
    public void test12497() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test12498() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(2019695728);
    }
    @Test
    public void test12499() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(-1306896295);
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test12500() {
		Queue x = new Queue();
		x.toString();
		assertEquals("[]", x.toString());
		x.isFull();
		x.toString();
		x.enqueue(1082821222);
		x.enqueue(-129492328);
		x.isFull();
		assertEquals(1082821222, x.dequeue());
		x.enqueue(70088617);
		x.isEmpty();
		assertEquals("[70088617]", x.toString());
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test12501() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(688857581);
    }
    @Test
    public void test12502() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.toString();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test12503() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1063925232);
		variable.enqueue(907934482);
		variable.toString();
		variable.enqueue(1304184560);
    }
    @Test
    public void test12504() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.isFull();
		z.dequeue();
		z.toString();
		z.isFull();
		z.isFull();
		z.toString();
    }
    @Test
    public void test12505() {
		Queue variable = new Queue();
		variable.enqueue(1207721657);
		variable.toString();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(-1754520002);
		variable.enqueue(1299987897);
		variable.isFull();
		variable.toString();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test12506() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.isFull();
		y.enqueue(-1723560945);
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.enqueue(2013731190);
		assertEquals(2013731190, y.dequeue());
		y.dequeue();
		y.enqueue(-1170195252);
		assertFalse(y.isFull());
		y.enqueue(-532260650);
		assertEquals("[]", y.toString());
		y.enqueue(1239283644);
    }
    @Test
    public void test12507() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.enqueue(-1286483866);
		x.enqueue(1916557415);
		x.enqueue(1594875318);
    }
    @Test
    public void test12508() {
		Queue x = new Queue();
		x.enqueue(457496449);
		assertFalse(x.isFull());
		x.isFull();
		assertEquals(457496449, x.dequeue());
		x.dequeue();
		x.toString();
		x.toString();
    }
    @Test
    public void test12509() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test12510() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.toString();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(415594107);
		assertEquals(415594107, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test12511() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(-842022127);
		variable.enqueue(1640888002);
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test12512() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(1125197870);
    }
    @Test
    public void test12513() {
		Queue Var = new Queue();
		Var.enqueue(264139392);
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test12514() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.enqueue(544425251);
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(43172327);
    }
    @Test
    public void test12515() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(361477554);
    }
    @Test
    public void test12516() {
		Queue y = new Queue();
		y.enqueue(1943727213);
		y.isFull();
    }
    @Test
    public void test12517() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.dequeue();
		y.enqueue(1938089076);
		y.toString();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test12518() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-401953910);
		x.isFull();
		x.enqueue(-899445855);
		x.dequeue();
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(1676726241);
		x.isEmpty();
		x.enqueue(-36145573);
		x.isEmpty();
    }
    @Test
    public void test12519() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		z.enqueue(-335340048);
		z.dequeue();
		z.enqueue(1725801318);
		z.isEmpty();
		assertEquals(1725801318, z.dequeue());
		z.toString();
    }
    @Test
    public void test12520() {
		Queue z = new Queue();
		z.enqueue(-387801250);
    }
    @Test
    public void test12521() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-1112282235);
		y.enqueue(-498048013);
		y.dequeue();
		y.isFull();
		assertFalse(y.isFull());
		y.enqueue(-276062482);
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test12522() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.dequeue();
		z.enqueue(8428292);
		z.dequeue();
		z.isFull();
		z.enqueue(-2007968765);
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(-1577282155);
		z.dequeue();
    }
    @Test
    public void test12523() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(2057124194);
		assertEquals(2057124194, Var.dequeue());
		Var.isFull();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test12524() {
		Queue Var = new Queue();
		Var.enqueue(-707188782);
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(349330723);
		Var.isEmpty();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test12525() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.toString();
		y.isEmpty();
		y.enqueue(-265926040);
		y.isFull();
		y.enqueue(-407540153);
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(-767325513);
		y.isEmpty();
    }
    @Test
    public void test12526() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1331694217);
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.enqueue(1509626952);
		assertFalse(Var.isFull());
		Var.enqueue(-2128194816);
    }
    @Test
    public void test12527() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.enqueue(1508445816);
		assertEquals("[1508445816]", x.toString());
		x.isFull();
		x.isFull();
		x.dequeue();
		x.dequeue();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.toString();
		x.isFull();
		x.toString();
    }
    @Test
    public void test12528() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
    }
    @Test
    public void test12529() {
		Queue z = new Queue();
		z.enqueue(-549968037);
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test12530() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.isFull();
    }
    @Test
    public void test12531() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(1381512795);
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-2051051169);
    }
    @Test
    public void test12532() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(1548702466);
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-271996363);
    }
    @Test
    public void test12533() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(712715825);
		x.enqueue(1572070910);
		x.enqueue(1077530195);
		assertFalse(x.isFull());
		assertEquals(712715825, x.dequeue());
		x.isEmpty();
		assertEquals(1572070910, x.dequeue());
		x.toString();
		assertEquals("[1077530195]", x.toString());
		x.enqueue(-661400547);
    }
    @Test
    public void test12534() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-828538582);
    }
    @Test
    public void test12535() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-671352413);
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-2107347066);
		assertEquals(-1, Var.dequeue());
		Var.enqueue(230720100);
		Var.enqueue(224191806);
		Var.isFull();
    }
    @Test
    public void test12536() {
		Queue z = new Queue();
		z.enqueue(-571019650);
		z.isFull();
    }
    @Test
    public void test12537() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1020019946);
		Var.enqueue(178748819);
		Var.enqueue(-1240314576);
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.enqueue(-1461539339);
		Var.dequeue();
    }
    @Test
    public void test12538() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test12539() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.isFull();
		y.isFull();
		y.isFull();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test12540() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.enqueue(-691738999);
		variable.dequeue();
		variable.toString();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test12541() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(1870111425);
		assertEquals(1870111425, variable.dequeue());
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test12542() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(1218342818);
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test12543() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.dequeue();
		x.enqueue(-636523444);
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.enqueue(-1296329754);
    }
    @Test
    public void test12544() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test12545() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(1259818276);
		z.toString();
		z.isFull();
		z.isFull();
		z.isEmpty();
		assertEquals("[1259818276]", z.toString());
		assertEquals("[1259818276]", z.toString());
		z.isFull();
		z.isFull();
		assertFalse(z.isEmpty());
		z.enqueue(-884103195);
		z.isFull();
    }
    @Test
    public void test12546() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test12547() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.enqueue(-1962796203);
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test12548() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
    }
    @Test
    public void test12549() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		assertFalse(y.isFull());
		y.isFull();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.enqueue(1329294460);
		y.isEmpty();
		y.isEmpty();
		y.enqueue(1852419589);
		y.toString();
		assertEquals(1329294460, y.dequeue());
		y.enqueue(1885639304);
    }
    @Test
    public void test12550() {
		Queue x = new Queue();
		x.enqueue(-462162943);
		x.toString();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.enqueue(741102359);
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test12551() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.enqueue(-441423964);
		y.enqueue(-1062060399);
		y.isEmpty();
		y.enqueue(-463015796);
		y.enqueue(-1064568783);
    }
    @Test
    public void test12552() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test12553() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test12554() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.toString();
		y.isFull();
		y.toString();
		y.isFull();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isEmpty();
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(1333088508);
		y.isFull();
    }
    @Test
    public void test12555() {
		Queue z = new Queue();
		z.enqueue(1782591403);
		z.enqueue(-710722198);
		z.enqueue(-1425992953);
		z.toString();
		z.enqueue(-1823035306);
    }
    @Test
    public void test12556() {
		Queue z = new Queue();
		z.enqueue(1436178083);
    }
    @Test
    public void test12557() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(354104856);
    }
    @Test
    public void test12558() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-1174118487);
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(-2023143329);
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test12559() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.toString();
		variable.enqueue(1069078273);
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(1698123758);
		variable.toString();
    }
    @Test
    public void test12560() {
		Queue z = new Queue();
		z.isFull();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.dequeue();
		z.enqueue(1566343169);
		z.isEmpty();
		z.isFull();
		z.isFull();
		z.toString();
    }
    @Test
    public void test12561() {
		Queue x = new Queue();
		x.enqueue(-1332448064);
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.enqueue(-1827828932);
		x.toString();
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(-467055262);
		assertFalse(x.isFull());
		x.enqueue(-1392804470);
		x.isFull();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.toString();
		assertEquals("[]", x.toString());
		x.toString();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.enqueue(127737768);
    }
    @Test
    public void test12562() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(-2078169730);
		variable.isEmpty();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test12563() {
		Queue y = new Queue();
		y.enqueue(2131462481);
		y.isFull();
		y.enqueue(254019918);
		y.dequeue();
    }
    @Test
    public void test12564() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.enqueue(-1221310882);
		z.dequeue();
		z.isFull();
		z.enqueue(-271873050);
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test12565() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.toString();
		z.enqueue(1596503796);
		z.isFull();
    }
    @Test
    public void test12566() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test12567() {
		Queue variable = new Queue();
		variable.enqueue(-524127022);
		variable.isFull();
		variable.dequeue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test12568() {
		Queue variable = new Queue();
		variable.enqueue(-1539508652);
		assertEquals("[]", variable.toString());
		variable.toString();
    }
    @Test
    public void test12569() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.enqueue(-1990327988);
		y.enqueue(1185128963);
		y.toString();
		y.enqueue(521195889);
		y.toString();
		y.isFull();
    }
    @Test
    public void test12570() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1049223921);
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test12571() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test12572() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(-1825260692);
		variable.enqueue(571676513);
		variable.toString();
		variable.isEmpty();
		variable.enqueue(1658815330);
		assertFalse(variable.isFull());
		assertEquals("[571676513, 1658815330]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test12573() {
		Queue y = new Queue();
		y.enqueue(661796847);
		y.dequeue();
		y.toString();
		assertTrue(y.isEmpty());
		y.toString();
		y.isFull();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test12574() {
		Queue variable = new Queue();
		variable.enqueue(-1542227557);
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test12575() {
		Queue Var = new Queue();
		Var.enqueue(-972954487);
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.enqueue(1202795421);
		Var.toString();
    }
    @Test
    public void test12576() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(856293042);
		x.toString();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test12577() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test12578() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.enqueue(1835091470);
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.enqueue(1456521644);
    }
    @Test
    public void test12579() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.enqueue(1681309271);
		x.dequeue();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.enqueue(-1688356625);
    }
    @Test
    public void test12580() {
		Queue x = new Queue();
		x.enqueue(-2093268634);
		x.isFull();
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test12581() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.dequeue();
		y.dequeue();
		y.toString();
		y.enqueue(-1752479300);
		y.toString();
		y.isFull();
		y.enqueue(-163846929);
		y.enqueue(1827907296);
		y.enqueue(-694354843);
    }
    @Test
    public void test12582() {
		Queue y = new Queue();
		y.enqueue(-2142974558);
		y.enqueue(-1190487536);
		y.isEmpty();
		y.toString();
		y.enqueue(-567282004);
    }
    @Test
    public void test12583() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.enqueue(-159508653);
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(1194352214);
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test12584() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.enqueue(393130044);
		assertFalse(x.isEmpty());
		assertFalse(x.isFull());
		x.enqueue(25493394);
		x.toString();
    }
    @Test
    public void test12585() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(1125806343);
    }
    @Test
    public void test12586() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test12587() {
		Queue y = new Queue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test12588() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(922016011);
		assertFalse(variable.isEmpty());
		variable.toString();
		variable.enqueue(60035868);
		assertEquals("[922016011, 60035868]", variable.toString());
		variable.toString();
		variable.toString();
		assertEquals("[922016011, 60035868]", variable.toString());
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test12589() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(1765976763);
		Var.toString();
    }
    @Test
    public void test12590() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-1560420281);
		y.toString();
		y.dequeue();
    }
    @Test
    public void test12591() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.isEmpty();
		z.enqueue(-420527284);
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.dequeue();
		z.isFull();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.toString();
    }
    @Test
    public void test12592() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.toString();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test12593() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test12594() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.enqueue(-2033408288);
		variable.enqueue(28793058);
		variable.isFull();
		assertEquals(28793058, variable.dequeue());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(611124390);
    }
    @Test
    public void test12595() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isFull();
		assertTrue(z.isEmpty());
		z.isFull();
		z.isEmpty();
		z.toString();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.enqueue(-481657645);
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test12596() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.toString();
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(-1108511617);
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test12597() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
		x.enqueue(1022133440);
		assertEquals(1022133440, x.dequeue());
		x.enqueue(-1764340001);
    }
    @Test
    public void test12598() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.toString();
		variable.enqueue(-1341670922);
    }
    @Test
    public void test12599() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test12600() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-643777182);
		variable.enqueue(879288448);
		variable.toString();
		variable.dequeue();
		variable.enqueue(-1443664698);
    }
    @Test
    public void test12601() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(582202096);
    }
    @Test
    public void test12602() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.toString();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.toString();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isFull();
    }
    @Test
    public void test12603() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.toString();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.enqueue(347112695);
		y.isFull();
		y.enqueue(2058448120);
    }
    @Test
    public void test12604() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(2146672568);
		variable.enqueue(775719917);
		assertEquals("[2146672568, 775719917]", variable.toString());
		variable.isFull();
		assertFalse(variable.isEmpty());
		variable.dequeue();
		assertEquals(775719917, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test12605() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test12606() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test12607() {
		Queue y = new Queue();
		y.enqueue(-1921083502);
		assertFalse(y.isFull());
		y.dequeue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test12608() {
		Queue x = new Queue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.toString();
		x.isFull();
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
		x.toString();
		x.enqueue(-507832141);
		x.isEmpty();
    }
    @Test
    public void test12609() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
		z.isFull();
		z.enqueue(-1022799768);
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.isFull();
    }
    @Test
    public void test12610() {
		Queue variable = new Queue();
		variable.enqueue(716021581);
		variable.isFull();
    }
    @Test
    public void test12611() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test12612() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-490793476);
    }
    @Test
    public void test12613() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(436361236);
		x.isFull();
		x.enqueue(969168774);
		x.isEmpty();
    }
    @Test
    public void test12614() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test12615() {
		Queue x = new Queue();
		x.enqueue(1129746973);
		x.dequeue();
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(-895225612);
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test12616() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1217642471);
		z.isFull();
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test12617() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(162920914);
    }
    @Test
    public void test12618() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.enqueue(1946824224);
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test12619() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test12620() {
		Queue z = new Queue();
		z.enqueue(251172750);
		assertEquals("[251172750]", z.toString());
		z.enqueue(-1361474034);
		assertEquals("[251172750]", z.toString());
		assertFalse(z.isFull());
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(69812795);
    }
    @Test
    public void test12621() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-1649274824);
		Var.toString();
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test12622() {
		Queue z = new Queue();
		z.enqueue(2003776239);
		z.enqueue(-1067876756);
		z.enqueue(90103597);
    }
    @Test
    public void test12623() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-656476601);
		Var.isFull();
    }
    @Test
    public void test12624() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.toString();
		x.isFull();
		assertFalse(x.isFull());
		x.isFull();
    }
    @Test
    public void test12625() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test12626() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.enqueue(1152614671);
		y.dequeue();
    }
    @Test
    public void test12627() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test12628() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test12629() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		z.isFull();
		z.enqueue(1644608443);
		z.isFull();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test12630() {
		Queue variable = new Queue();
		variable.enqueue(-1588988146);
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test12631() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.enqueue(1004463818);
    }
    @Test
    public void test12632() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-535621087);
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(36341481);
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test12633() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-631540381);
    }
    @Test
    public void test12634() {
		Queue Var = new Queue();
		Var.enqueue(1002647397);
    }
    @Test
    public void test12635() {
		Queue x = new Queue();
		x.enqueue(-1588857460);
		assertFalse(x.isFull());
		x.isFull();
		assertFalse(x.isFull());
		x.isFull();
		assertEquals("[]", x.toString());
		x.toString();
    }
    @Test
    public void test12636() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(-842552211);
		z.enqueue(-1362969323);
		z.enqueue(207957034);
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test12637() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.enqueue(1737438810);
		assertEquals(1737438810, x.dequeue());
		x.isEmpty();
		x.enqueue(-48036976);
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.enqueue(1310970057);
		x.enqueue(539257896);
    }
    @Test
    public void test12638() {
		Queue y = new Queue();
		y.enqueue(295417944);
		y.isEmpty();
    }
    @Test
    public void test12639() {
		Queue z = new Queue();
		z.enqueue(1998271083);
		z.toString();
		z.enqueue(-1519643618);
		assertEquals("[1998271083]", z.toString());
		assertEquals("[1998271083]", z.toString());
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test12640() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(548728343);
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test12641() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(2003509868);
		assertEquals("[2003509868]", y.toString());
		y.toString();
		y.enqueue(631380370);
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
    }
    @Test
    public void test12642() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test12643() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(1963728001);
		assertEquals(1963728001, Var.dequeue());
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test12644() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(889083388);
		Var.isFull();
    }
    @Test
    public void test12645() {
		Queue z = new Queue();
		z.enqueue(-1520045633);
		assertEquals(-1, z.dequeue());
		z.enqueue(-547464928);
    }
    @Test
    public void test12646() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test12647() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(1843184670);
		y.enqueue(1701761231);
		y.isFull();
		y.isFull();
    }
    @Test
    public void test12648() {
		Queue z = new Queue();
		z.isFull();
		assertFalse(z.isFull());
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.enqueue(2055483948);
		assertEquals("[2055483948]", z.toString());
		assertEquals("[2055483948]", z.toString());
		z.enqueue(60265533);
		z.dequeue();
		z.enqueue(921253944);
		z.enqueue(1609073195);
    }
    @Test
    public void test12649() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(-839840976);
		y.enqueue(-852204911);
    }
    @Test
    public void test12650() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.enqueue(879480447);
		z.isEmpty();
		assertFalse(z.isEmpty());
		z.enqueue(-103593937);
		z.toString();
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test12651() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isEmpty();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(316797832);
    }
    @Test
    public void test12652() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test12653() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.isFull();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.enqueue(2048783284);
    }
    @Test
    public void test12654() {
		Queue Var = new Queue();
		Var.enqueue(-51255505);
		Var.isFull();
		Var.isFull();
		Var.enqueue(-170417104);
		Var.enqueue(592687589);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test12655() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.isFull();
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test12656() {
		Queue x = new Queue();
		x.enqueue(2146894946);
		x.dequeue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.dequeue();
		x.enqueue(1635749109);
    }
    @Test
    public void test12657() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.dequeue();
		y.enqueue(-579285202);
		y.isFull();
    }
    @Test
    public void test12658() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.isFull();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isFull();
		z.isFull();
		z.enqueue(1806794935);
		z.isFull();
    }
    @Test
    public void test12659() {
		Queue z = new Queue();
		z.enqueue(275154171);
		assertEquals("[275154171]", z.toString());
		assertFalse(z.isFull());
		z.dequeue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.dequeue();
		z.enqueue(-21397643);
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(1329330621);
    }
    @Test
    public void test12660() {
		Queue y = new Queue();
		y.enqueue(-1845679747);
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test12661() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.enqueue(-410188810);
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isFull();
		assertEquals("[]", z.toString());
		z.isFull();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test12662() {
		Queue z = new Queue();
		z.enqueue(484585430);
		z.enqueue(-1477982540);
    }
    @Test
    public void test12663() {
		Queue z = new Queue();
		z.enqueue(289559895);
		z.isFull();
		assertFalse(z.isEmpty());
		z.enqueue(-1031898149);
		z.dequeue();
		z.toString();
		z.dequeue();
		z.enqueue(2051529454);
		z.toString();
    }
    @Test
    public void test12664() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.isFull();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.toString();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.dequeue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test12665() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(986853308);
		assertEquals(986853308, variable.dequeue());
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-712796203);
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(-1241373254);
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test12666() {
		Queue z = new Queue();
		z.enqueue(1211438190);
		z.isFull();
		z.toString();
    }
    @Test
    public void test12667() {
		Queue z = new Queue();
		z.enqueue(760583567);
		assertFalse(z.isEmpty());
		z.toString();
		z.enqueue(1595862079);
    }
    @Test
    public void test12668() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-2015828173);
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		Var.enqueue(963909486);
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test12669() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.toString();
    }
    @Test
    public void test12670() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-1961243569);
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.enqueue(1701922366);
		Var.toString();
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		Var.enqueue(-250532907);
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test12671() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.isFull();
		z.enqueue(1864371330);
		z.isEmpty();
		assertEquals(1864371330, z.dequeue());
		assertFalse(z.isFull());
		z.enqueue(166984960);
		z.isFull();
		z.enqueue(-371300347);
		z.enqueue(-1502032987);
    }
    @Test
    public void test12672() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test12673() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.enqueue(-2075979692);
		assertEquals(-1, y.dequeue());
		y.enqueue(-1146382153);
		y.isFull();
    }
    @Test
    public void test12674() {
		Queue y = new Queue();
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(1258215301);
		y.enqueue(714127940);
		y.enqueue(-1709520100);
		y.enqueue(1708113507);
		assertEquals("[1258215301, 714127940, 1708113507]", y.toString());
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test12675() {
		Queue Var = new Queue();
		Var.enqueue(366561385);
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1370469067);
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.toString();
		Var.enqueue(-624482581);
		Var.enqueue(125499340);
		Var.enqueue(1726748398);
    }
    @Test
    public void test12676() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		assertTrue(z.isEmpty());
		z.isFull();
		assertEquals("[]", z.toString());
		z.isFull();
		z.dequeue();
		z.enqueue(354969187);
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test12677() {
		Queue x = new Queue();
		x.enqueue(2143915930);
		x.toString();
		x.toString();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test12678() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1533985078);
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(399173123);
		y.enqueue(1600736049);
		y.dequeue();
		assertEquals(1600736049, y.dequeue());
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test12679() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(2098843241);
		z.dequeue();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isFull();
		z.toString();
    }
    @Test
    public void test12680() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.enqueue(1200322408);
    }
    @Test
    public void test12681() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test12682() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1002796556);
		x.enqueue(-1017966331);
		x.toString();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.toString();
    }
    @Test
    public void test12683() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.enqueue(-277499247);
		z.enqueue(-1809030499);
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test12684() {
		Queue variable = new Queue();
		variable.enqueue(-2140415295);
		variable.toString();
		variable.enqueue(2033236833);
    }
    @Test
    public void test12685() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.enqueue(-438670454);
		assertFalse(Var.isFull());
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(1182068084);
		Var.enqueue(-163609481);
		Var.toString();
    }
    @Test
    public void test12686() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.enqueue(-65573954);
		y.dequeue();
		y.isFull();
		y.isFull();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.toString();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test12687() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test12688() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test12689() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-683306249);
		assertTrue(y.isEmpty());
		y.isFull();
		assertEquals("[]", y.toString());
		y.isFull();
		y.enqueue(-1155779104);
		y.isEmpty();
    }
    @Test
    public void test12690() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.dequeue();
		z.enqueue(-432770694);
		z.enqueue(813159235);
    }
    @Test
    public void test12691() {
		Queue x = new Queue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isFull();
		assertTrue(x.isEmpty());
		x.enqueue(654297611);
		x.isFull();
		x.toString();
    }
    @Test
    public void test12692() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(1362399074);
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test12693() {
		Queue variable = new Queue();
		variable.enqueue(-996985118);
    }
    @Test
    public void test12694() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-922908426);
		y.toString();
		y.isFull();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.enqueue(75275734);
		assertEquals(75275734, y.dequeue());
		y.isFull();
    }
    @Test
    public void test12695() {
		Queue variable = new Queue();
		variable.enqueue(-1421055966);
		variable.isEmpty();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(-756907464);
		variable.dequeue();
		variable.toString();
		variable.enqueue(1616550989);
		variable.toString();
    }
    @Test
    public void test12696() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test12697() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-211850446);
		z.isEmpty();
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test12698() {
		Queue z = new Queue();
		z.enqueue(254906906);
		z.dequeue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.enqueue(-581317065);
    }
    @Test
    public void test12699() {
		Queue x = new Queue();
		x.isFull();
		assertFalse(x.isFull());
		x.isEmpty();
		x.enqueue(-979547333);
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.enqueue(926593989);
    }
    @Test
    public void test12700() {
		Queue y = new Queue();
		y.enqueue(1523822603);
		y.isFull();
		y.toString();
		y.enqueue(839157271);
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test12701() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1586705228);
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test12702() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.enqueue(1468431970);
		Var.dequeue();
		Var.enqueue(-470815424);
		Var.enqueue(1085836379);
    }
    @Test
    public void test12703() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test12704() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(964477091);
		variable.isFull();
    }
    @Test
    public void test12705() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-872315861);
    }
    @Test
    public void test12706() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test12707() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1208522149);
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test12708() {
		Queue variable = new Queue();
		variable.enqueue(-1607965572);
		variable.isFull();
    }
    @Test
    public void test12709() {
		Queue Var = new Queue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(205737294);
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test12710() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(1409914664);
    }
    @Test
    public void test12711() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test12712() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isFull();
		z.enqueue(739536020);
		z.enqueue(442785256);
		assertEquals(739536020, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test12713() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(70711153);
		y.isFull();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test12714() {
		Queue y = new Queue();
		y.enqueue(-698519169);
		y.enqueue(-392901360);
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.enqueue(-1329317969);
		y.isEmpty();
		y.isFull();
		y.dequeue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.toString();
    }
    @Test
    public void test12715() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(651467950);
		Var.isEmpty();
		assertEquals(651467950, Var.dequeue());
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test12716() {
		Queue variable = new Queue();
		variable.enqueue(1280650496);
		variable.enqueue(-1796243299);
		variable.enqueue(1252187665);
		variable.toString();
		variable.enqueue(-2077909447);
		variable.enqueue(672490443);
		variable.dequeue();
    }
    @Test
    public void test12717() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test12718() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(1099378693);
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test12719() {
		Queue z = new Queue();
		z.enqueue(982667544);
		z.enqueue(-2047695378);
    }
    @Test
    public void test12720() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(839013569);
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test12721() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.enqueue(-1403724634);
		x.toString();
		x.dequeue();
		x.toString();
		assertTrue(x.isEmpty());
		x.toString();
		x.isEmpty();
		x.enqueue(-1182291688);
    }
    @Test
    public void test12722() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.dequeue();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test12723() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.enqueue(-1998994810);
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test12724() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(249431046);
    }
    @Test
    public void test12725() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test12726() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test12727() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-606524488);
		z.toString();
		z.toString();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(1083322465);
    }
    @Test
    public void test12728() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.enqueue(-427622935);
		x.enqueue(702335674);
		x.isEmpty();
		x.enqueue(-354661836);
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(1736762240);
		assertEquals("[702335674, 1736762240]", x.toString());
		assertFalse(x.isFull());
		x.isFull();
    }
    @Test
    public void test12729() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.toString();
		assertFalse(x.isFull());
		x.toString();
		x.dequeue();
		x.toString();
		x.toString();
		x.enqueue(-111666398);
		x.isEmpty();
		x.isFull();
		assertEquals("[]", x.toString());
		x.enqueue(-372823726);
		x.dequeue();
    }
    @Test
    public void test12730() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test12731() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test12732() {
		Queue y = new Queue();
		y.enqueue(-398682183);
		y.dequeue();
		y.isFull();
		y.isFull();
		y.dequeue();
		y.isFull();
		assertFalse(y.isFull());
		y.dequeue();
		y.toString();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test12733() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test12734() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-369234909);
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.enqueue(-1935034026);
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(-1172418672);
		assertEquals(-1, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test12735() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.toString();
		assertFalse(y.isFull());
		y.toString();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test12736() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(-40248932);
    }
    @Test
    public void test12737() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.enqueue(752846661);
		x.toString();
		x.dequeue();
    }
    @Test
    public void test12738() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isFull();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isFull();
		x.isFull();
		x.isFull();
		assertTrue(x.isEmpty());
		x.enqueue(2087327247);
    }
    @Test
    public void test12739() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test12740() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.enqueue(304473458);
		variable.dequeue();
		variable.enqueue(2014314788);
		assertFalse(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test12741() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test12742() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.dequeue();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.isFull();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test12743() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(1240676021);
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-330758514);
		z.toString();
		z.dequeue();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test12744() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.enqueue(1402598974);
		x.toString();
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test12745() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test12746() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1230334762);
		x.isFull();
		x.isEmpty();
		x.toString();
		assertFalse(x.isFull());
		assertEquals("[1230334762]", x.toString());
		x.enqueue(1712855267);
		x.enqueue(30828549);
    }
    @Test
    public void test12747() {
		Queue Var = new Queue();
		Var.enqueue(1974367896);
		Var.isFull();
		Var.enqueue(-337635872);
		Var.toString();
		assertEquals("[1974367896]", Var.toString());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-461436529);
		Var.isEmpty();
		Var.enqueue(-1496311885);
		Var.isFull();
    }
    @Test
    public void test12748() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-677259921);
		z.toString();
		z.enqueue(-1488547554);
		z.isFull();
		z.enqueue(-1356562199);
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test12749() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-417377383);
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test12750() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.enqueue(-465846937);
    }
    @Test
    public void test12751() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isEmpty();
		x.enqueue(-1420666629);
		x.isFull();
		x.toString();
		x.isFull();
		x.enqueue(-105589497);
		x.enqueue(-294297862);
		x.dequeue();
    }
    @Test
    public void test12752() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(1109690293);
		variable.enqueue(2123688242);
		variable.isFull();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
		assertEquals(2123688242, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(-1803159862);
		variable.isFull();
    }
    @Test
    public void test12753() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-4250745);
		Var.enqueue(-1459173717);
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test12754() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(1766521329);
		Var.enqueue(-933276522);
		assertFalse(Var.isEmpty());
		Var.enqueue(-1087213948);
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test12755() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(2089326794);
		z.toString();
    }
    @Test
    public void test12756() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.toString();
    }
    @Test
    public void test12757() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test12758() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(531017420);
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test12759() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-707571069);
		assertEquals("[]", z.toString());
		z.dequeue();
		z.dequeue();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		z.isFull();
		z.enqueue(611894175);
		assertEquals("[611894175]", z.toString());
		z.toString();
    }
    @Test
    public void test12760() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.toString();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.toString();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test12761() {
		Queue Var = new Queue();
		Var.enqueue(-946835222);
    }
    @Test
    public void test12762() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test12763() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-764271267);
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.dequeue();
		z.isEmpty();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test12764() {
		Queue y = new Queue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test12765() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.enqueue(1491932362);
		x.isFull();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test12766() {
		Queue z = new Queue();
		z.enqueue(-744957597);
		z.toString();
		z.dequeue();
		z.isFull();
		z.enqueue(1014175201);
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test12767() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-1888086997);
		variable.isEmpty();
		variable.enqueue(-553313016);
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test12768() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.enqueue(-522713700);
		x.enqueue(-960829768);
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.dequeue();
		x.enqueue(317748750);
    }
    @Test
    public void test12769() {
		Queue Var = new Queue();
		Var.enqueue(745894960);
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test12770() {
		Queue variable = new Queue();
		variable.enqueue(-937679827);
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.dequeue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(235339665);
    }
    @Test
    public void test12771() {
		Queue Var = new Queue();
		Var.enqueue(621115227);
		Var.enqueue(-1948703983);
		Var.enqueue(-1340999073);
		Var.enqueue(7670102);
    }
    @Test
    public void test12772() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-1691690346);
		Var.isEmpty();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(-130953478);
		assertTrue(Var.isEmpty());
		Var.enqueue(656589778);
    }
    @Test
    public void test12773() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.enqueue(-193315869);
    }
    @Test
    public void test12774() {
		Queue Var = new Queue();
		Var.enqueue(-1551370286);
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.enqueue(-705666687);
		Var.enqueue(1802455501);
		Var.isFull();
    }
    @Test
    public void test12775() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.toString();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test12776() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.enqueue(6670276);
		variable.enqueue(857488039);
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test12777() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.enqueue(2096477596);
		assertEquals(2096477596, x.dequeue());
		x.enqueue(-612809528);
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.enqueue(2069075422);
    }
    @Test
    public void test12778() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.enqueue(-1969531258);
		y.enqueue(-1412723186);
		y.enqueue(-1191589245);
		assertEquals("[]", y.toString());
		y.toString();
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(280305047);
		y.enqueue(-995786321);
		y.enqueue(-1547746809);
    }
    @Test
    public void test12779() {
		Queue x = new Queue();
		x.enqueue(-2130499984);
		x.isFull();
		x.isFull();
		x.isFull();
		assertTrue(x.isEmpty());
		x.dequeue();
		assertFalse(x.isFull());
		x.dequeue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.toString();
		x.toString();
    }
    @Test
    public void test12780() {
		Queue x = new Queue();
		x.enqueue(-814099262);
		x.isEmpty();
		x.isEmpty();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(1288319601);
		x.isEmpty();
		x.toString();
		x.toString();
    }
    @Test
    public void test12781() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(-2071806512);
		x.enqueue(-1841334793);
		x.isEmpty();
    }
    @Test
    public void test12782() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.enqueue(-1423468778);
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.toString();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(265114340);
    }
    @Test
    public void test12783() {
		Queue variable = new Queue();
		variable.enqueue(1857205620);
		assertEquals("[1857205620]", variable.toString());
		variable.dequeue();
		variable.enqueue(-999107423);
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test12784() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-670307733);
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-373297940);
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-942984069);
    }
    @Test
    public void test12785() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test12786() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.enqueue(948948696);
		assertEquals(948948696, z.dequeue());
		z.enqueue(494219614);
		assertEquals("[494219614]", z.toString());
		z.isEmpty();
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test12787() {
		Queue y = new Queue();
		y.enqueue(-25641145);
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.enqueue(-1077114625);
		y.enqueue(-1772864526);
		y.enqueue(29054131);
		assertFalse(y.isEmpty());
		assertFalse(y.isFull());
		assertEquals("[29054131]", y.toString());
		y.isEmpty();
		y.enqueue(-832395767);
		assertFalse(y.isEmpty());
		y.isEmpty();
		assertFalse(y.isEmpty());
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test12788() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		z.toString();
		z.isFull();
		z.isFull();
		z.toString();
    }
    @Test
    public void test12789() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-1690595443);
		z.enqueue(1997708728);
		z.isEmpty();
		assertEquals(1997708728, z.dequeue());
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.enqueue(807161088);
		assertEquals("[807161088]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test12790() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(1732532277);
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		variable.enqueue(-1811785162);
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test12791() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.enqueue(128206808);
		x.isEmpty();
		x.enqueue(1361640240);
		x.toString();
		x.dequeue();
    }
    @Test
    public void test12792() {
		Queue x = new Queue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test12793() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.dequeue();
		y.enqueue(-1365544399);
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.enqueue(-474002113);
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.enqueue(-1777104481);
    }
    @Test
    public void test12794() {
		Queue z = new Queue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.enqueue(1247011798);
		assertEquals(1247011798, z.dequeue());
		z.isEmpty();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test12795() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test12796() {
		Queue x = new Queue();
		x.enqueue(-1286140665);
		x.isFull();
		x.isEmpty();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test12797() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(939133112);
		z.toString();
    }
    @Test
    public void test12798() {
		Queue z = new Queue();
		z.enqueue(-703023077);
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.toString();
		z.toString();
    }
    @Test
    public void test12799() {
		Queue y = new Queue();
		y.enqueue(-712013448);
		y.enqueue(1048676663);
		assertEquals("[1048676663]", y.toString());
		assertFalse(y.isFull());
		y.toString();
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
		y.toString();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(1489347715);
		y.dequeue();
    }
    @Test
    public void test12800() {
		Queue y = new Queue();
		y.enqueue(616693351);
		assertEquals(616693351, y.dequeue());
		y.toString();
		y.toString();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test12801() {
		Queue variable = new Queue();
		variable.enqueue(2050058258);
		variable.toString();
		variable.enqueue(-11689141);
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test12802() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(-1437866989);
    }
    @Test
    public void test12803() {
		Queue Var = new Queue();
		Var.enqueue(-1152084367);
		Var.toString();
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(549215725);
		Var.toString();
		Var.enqueue(-487127829);
		assertFalse(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test12804() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.enqueue(2055772628);
		y.isEmpty();
		y.dequeue();
		y.isFull();
		y.isFull();
		y.isEmpty();
		y.isFull();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test12805() {
		Queue z = new Queue();
		z.enqueue(1034768239);
		assertEquals("[1034768239]", z.toString());
		z.enqueue(-834830602);
		z.toString();
		z.dequeue();
    }
    @Test
    public void test12806() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.isFull();
		assertTrue(x.isEmpty());
		x.enqueue(-607258880);
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(-84685762);
		assertTrue(x.isEmpty());
		x.enqueue(-753987357);
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.toString();
    }
    @Test
    public void test12807() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test12808() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.enqueue(1082226713);
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(2010754656);
		assertFalse(variable.isEmpty());
		variable.enqueue(-413195547);
		variable.dequeue();
    }
    @Test
    public void test12809() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-287830974);
		variable.isEmpty();
		variable.toString();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test12810() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test12811() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test12812() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test12813() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(973378461);
		assertEquals(973378461, variable.dequeue());
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test12814() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(955875010);
		x.enqueue(1327278972);
		assertEquals("[955875010, 1327278972]", x.toString());
		x.enqueue(810095047);
		x.enqueue(-1254721131);
		x.toString();
		x.isEmpty();
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(771953401);
		x.isEmpty();
    }
    @Test
    public void test12815() {
		Queue Var = new Queue();
		Var.enqueue(1373418186);
		Var.enqueue(-1806046565);
		assertEquals("[1373418186]", Var.toString());
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test12816() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.enqueue(-889232704);
		y.isEmpty();
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(-281768277);
		y.isEmpty();
		y.dequeue();
		y.enqueue(1354105604);
    }
    @Test
    public void test12817() {
		Queue y = new Queue();
		y.enqueue(-1222953850);
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.isEmpty();
		y.toString();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.enqueue(-214153201);
		y.toString();
		y.enqueue(-137061463);
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(-663165513);
		y.isEmpty();
    }
    @Test
    public void test12818() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(-897802927);
		y.dequeue();
		y.enqueue(1932390071);
		y.toString();
		assertEquals("[1932390071]", y.toString());
		y.dequeue();
		y.isEmpty();
		y.enqueue(-1462119834);
		y.isFull();
		y.enqueue(-29613135);
    }
    @Test
    public void test12819() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(1765393979);
    }
    @Test
    public void test12820() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.enqueue(-536914992);
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
		assertEquals("[]", y.toString());
		y.enqueue(2067779871);
		assertFalse(y.isEmpty());
		y.enqueue(-920350588);
		y.enqueue(932467123);
		assertEquals(2067779871, y.dequeue());
		y.dequeue();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test12821() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.enqueue(1329721364);
		assertEquals("[1329721364]", variable.toString());
		assertFalse(variable.isFull());
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test12822() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(-1072612338);
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.enqueue(53019205);
		assertFalse(z.isFull());
		z.enqueue(1248317945);
		z.enqueue(77115903);
		z.toString();
    }
    @Test
    public void test12823() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isEmpty();
		y.enqueue(21499812);
		y.isEmpty();
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test12824() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.toString();
    }
    @Test
    public void test12825() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(743330019);
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test12826() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test12827() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(2146312871);
		assertFalse(z.isEmpty());
		assertFalse(z.isFull());
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test12828() {
		Queue variable = new Queue();
		variable.enqueue(1989392967);
		variable.dequeue();
    }
    @Test
    public void test12829() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test12830() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.isFull();
		assertFalse(y.isFull());
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test12831() {
		Queue z = new Queue();
		z.isFull();
		assertEquals("[]", z.toString());
		z.enqueue(-754896378);
		assertEquals("[]", z.toString());
		z.isFull();
		z.toString();
		z.enqueue(996399884);
		z.isEmpty();
    }
    @Test
    public void test12832() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-186701465);
		z.dequeue();
		z.enqueue(1822547760);
		z.toString();
    }
    @Test
    public void test12833() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(-2023221612);
    }
    @Test
    public void test12834() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.enqueue(-1585088502);
		Var.dequeue();
		Var.enqueue(717277804);
		assertEquals(717277804, Var.dequeue());
		Var.isEmpty();
		Var.enqueue(1168024219);
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test12835() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.enqueue(-2123445439);
		variable.toString();
		variable.isEmpty();
		variable.enqueue(1925495823);
		variable.dequeue();
    }
    @Test
    public void test12836() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.enqueue(-858642226);
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.toString();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test12837() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test12838() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(970404195);
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
    }
    @Test
    public void test12839() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(-429850544);
		variable.isFull();
    }
    @Test
    public void test12840() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		Var.enqueue(1829368551);
    }
    @Test
    public void test12841() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(114188301);
		variable.isFull();
    }
    @Test
    public void test12842() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.isFull();
		z.toString();
    }
    @Test
    public void test12843() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.toString();
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test12844() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1408238417);
		variable.enqueue(-1520017496);
		variable.isEmpty();
    }
    @Test
    public void test12845() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.enqueue(-102353370);
		z.dequeue();
		z.enqueue(-1301709618);
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test12846() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(1807957015);
		z.toString();
		z.enqueue(-1408109089);
		z.dequeue();
		z.toString();
		z.toString();
    }
    @Test
    public void test12847() {
		Queue variable = new Queue();
		variable.enqueue(-1032099277);
		variable.enqueue(588336521);
		assertEquals(588336521, variable.dequeue());
		assertFalse(variable.isFull());
		variable.enqueue(375185916);
		assertEquals("[375185916]", variable.toString());
		variable.isFull();
		variable.toString();
		variable.isFull();
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test12848() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test12849() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(464914927);
		Var.enqueue(-235360032);
		assertFalse(Var.isEmpty());
		assertFalse(Var.isFull());
		assertEquals(464914927, Var.dequeue());
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.enqueue(560537151);
		Var.dequeue();
    }
    @Test
    public void test12850() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(957373478);
    }
    @Test
    public void test12851() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isFull();
		y.enqueue(280244949);
		y.enqueue(-1321166991);
		assertEquals("[280244949]", y.toString());
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test12852() {
		Queue y = new Queue();
		y.enqueue(-1825094783);
		y.isFull();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.enqueue(1952534741);
		assertEquals(1952534741, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isFull();
		y.dequeue();
		y.dequeue();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test12853() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(649016520);
		x.toString();
		x.isFull();
    }
    @Test
    public void test12854() {
		Queue y = new Queue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test12855() {
		Queue z = new Queue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.enqueue(502325266);
		assertEquals(502325266, z.dequeue());
		z.isEmpty();
		assertFalse(z.isFull());
		z.toString();
		z.isFull();
    }
    @Test
    public void test12856() {
		Queue variable = new Queue();
		variable.enqueue(-2002558666);
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isEmpty();
		variable.enqueue(62974825);
		variable.enqueue(-874185335);
		assertEquals("[62974825]", variable.toString());
		variable.dequeue();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test12857() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.enqueue(1966953240);
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test12858() {
		Queue Var = new Queue();
		Var.enqueue(-1168388232);
		Var.isFull();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(1882596589);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(-945210124);
		Var.enqueue(586583704);
    }
    @Test
    public void test12859() {
		Queue Var = new Queue();
		Var.enqueue(1305415216);
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test12860() {
		Queue x = new Queue();
		x.enqueue(995232933);
		x.toString();
		assertEquals("[995232933]", x.toString());
		assertFalse(x.isEmpty());
		assertFalse(x.isFull());
		x.enqueue(2084631431);
		x.isFull();
		x.enqueue(-700488685);
    }
    @Test
    public void test12861() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(1697187289);
		variable.isFull();
		variable.toString();
		variable.dequeue();
		variable.enqueue(977007755);
		variable.dequeue();
    }
    @Test
    public void test12862() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.enqueue(2101205822);
		x.toString();
		x.isEmpty();
		x.dequeue();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.enqueue(2127713274);
		x.isFull();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test12863() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test12864() {
		Queue y = new Queue();
		y.enqueue(1259728155);
		y.enqueue(665547232);
		y.enqueue(4495025);
		y.isEmpty();
		assertEquals(1259728155, y.dequeue());
		y.dequeue();
		y.isFull();
		assertEquals(4495025, y.dequeue());
		assertEquals("[]", y.toString());
		y.enqueue(1945637843);
		assertEquals(1945637843, y.dequeue());
		assertEquals("[]", y.toString());
		y.dequeue();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test12865() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test12866() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		x.enqueue(-1370711396);
		x.dequeue();
		x.enqueue(1168037405);
		x.toString();
		assertFalse(x.isEmpty());
		x.isEmpty();
		x.toString();
		x.enqueue(-164612643);
		x.toString();
    }
    @Test
    public void test12867() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-1190016991);
		z.dequeue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test12868() {
		Queue x = new Queue();
		x.enqueue(-1647579535);
		x.isEmpty();
		x.dequeue();
		x.toString();
		x.enqueue(1948881228);
    }
    @Test
    public void test12869() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.enqueue(-1552334674);
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test12870() {
		Queue x = new Queue();
		x.enqueue(1560535969);
		x.isFull();
    }
    @Test
    public void test12871() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test12872() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
		z.isEmpty();
		z.enqueue(1507163417);
		z.enqueue(-183152700);
		z.isEmpty();
    }
    @Test
    public void test12873() {
		Queue variable = new Queue();
		variable.enqueue(2098260122);
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test12874() {
		Queue z = new Queue();
		z.toString();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test12875() {
		Queue Var = new Queue();
		Var.enqueue(1664445919);
    }
    @Test
    public void test12876() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(-1303657958);
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1676991229);
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1226009433);
		assertEquals("[1226009433]", variable.toString());
		variable.enqueue(-2097135741);
		variable.enqueue(-420969678);
		variable.enqueue(5039316);
		variable.isEmpty();
    }
    @Test
    public void test12877() {
		Queue y = new Queue();
		y.enqueue(-829318561);
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isFull();
		y.enqueue(2079067251);
		y.isEmpty();
		y.toString();
		assertEquals(2079067251, y.dequeue());
		y.enqueue(1687390851);
		y.isFull();
    }
    @Test
    public void test12878() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test12879() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(-799180533);
    }
    @Test
    public void test12880() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(-1038801669);
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test12881() {
		Queue z = new Queue();
		z.enqueue(-1337516645);
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isFull();
		assertFalse(z.isFull());
		z.isFull();
		assertTrue(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test12882() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test12883() {
		Queue Var = new Queue();
		Var.enqueue(587962410);
		Var.dequeue();
		Var.enqueue(895083173);
		Var.toString();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test12884() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isFull();
		y.toString();
		y.toString();
		y.toString();
    }
    @Test
    public void test12885() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test12886() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-1859458643);
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.enqueue(1331189259);
		z.isFull();
		z.enqueue(913156821);
		z.enqueue(1282936264);
		z.isEmpty();
    }
    @Test
    public void test12887() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(-1047308585);
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		assertFalse(y.isFull());
		y.isFull();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.enqueue(832886259);
    }
    @Test
    public void test12888() {
		Queue z = new Queue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(446559591);
		assertFalse(z.isEmpty());
		z.enqueue(278333041);
    }
    @Test
    public void test12889() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.toString();
		y.enqueue(-1298899474);
    }
    @Test
    public void test12890() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test12891() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.toString();
		y.isEmpty();
		y.enqueue(4699094);
		y.isFull();
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test12892() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(1234401086);
		assertEquals("[1234401086]", variable.toString());
		variable.enqueue(1802875746);
		variable.enqueue(1161544246);
		assertEquals(1234401086, variable.dequeue());
		variable.toString();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test12893() {
		Queue y = new Queue();
		y.isFull();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.enqueue(-186505734);
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test12894() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(1589752900);
    }
    @Test
    public void test12895() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(197328286);
		assertEquals(197328286, variable.dequeue());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test12896() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(1568751711);
		assertFalse(y.isFull());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.enqueue(637036569);
    }
    @Test
    public void test12897() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
		z.isFull();
		z.toString();
		z.enqueue(1459972185);
		z.isEmpty();
    }
    @Test
    public void test12898() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test12899() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.toString();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		x.enqueue(352850100);
    }
    @Test
    public void test12900() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test12901() {
		Queue z = new Queue();
		z.enqueue(2084544029);
		z.isFull();
		z.isFull();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test12902() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.enqueue(1068813734);
		z.isFull();
		assertFalse(z.isEmpty());
		assertEquals(1068813734, z.dequeue());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.toString();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test12903() {
		Queue x = new Queue();
		x.enqueue(-1968282309);
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.dequeue();
		x.isFull();
		x.enqueue(1667179698);
		x.isEmpty();
		x.enqueue(1110805094);
		assertEquals(1667179698, x.dequeue());
		x.toString();
    }
    @Test
    public void test12904() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-790681203);
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test12905() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.isFull();
		variable.isFull();
		variable.toString();
		variable.enqueue(-1254264508);
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1989589190);
    }
    @Test
    public void test12906() {
		Queue variable = new Queue();
		variable.enqueue(964935089);
		variable.dequeue();
		variable.enqueue(1407300617);
		variable.isFull();
		variable.enqueue(-1649994822);
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test12907() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(1610024239);
		assertFalse(Var.isEmpty());
		assertFalse(Var.isEmpty());
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.enqueue(-1015696766);
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(1986082362);
		Var.dequeue();
    }
    @Test
    public void test12908() {
		Queue y = new Queue();
		y.enqueue(-578393131);
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.enqueue(-1323748847);
    }
    @Test
    public void test12909() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test12910() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test12911() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(1868415372);
		x.enqueue(-477218535);
		x.enqueue(-357234721);
		x.toString();
		assertEquals(1868415372, x.dequeue());
		x.isFull();
		x.enqueue(-982158701);
		x.toString();
    }
    @Test
    public void test12912() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.enqueue(-1322332074);
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.enqueue(-1766304360);
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test12913() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.isFull();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test12914() {
		Queue Var = new Queue();
		Var.enqueue(50594169);
		assertEquals("[50594169]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test12915() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test12916() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test12917() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-1886390894);
		variable.toString();
    }
    @Test
    public void test12918() {
		Queue y = new Queue();
		y.enqueue(390178750);
		y.enqueue(1811147306);
		y.isFull();
		y.isFull();
    }
    @Test
    public void test12919() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.enqueue(-745012012);
		x.isFull();
    }
    @Test
    public void test12920() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test12921() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-1665270027);
		Var.isFull();
		Var.toString();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.enqueue(-1365947385);
    }
    @Test
    public void test12922() {
		Queue Var = new Queue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1394823227);
    }
    @Test
    public void test12923() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test12924() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(-558804718);
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test12925() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(126500002);
    }
    @Test
    public void test12926() {
		Queue Var = new Queue();
		Var.enqueue(-982094131);
		Var.toString();
		Var.dequeue();
		Var.enqueue(1961966206);
		assertEquals(1961966206, Var.dequeue());
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(-519517923);
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(1396568097);
    }
    @Test
    public void test12927() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isFull();
		z.isFull();
		z.toString();
		z.enqueue(-1749806290);
		z.isFull();
    }
    @Test
    public void test12928() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test12929() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test12930() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(-634840462);
		variable.dequeue();
		variable.enqueue(454672904);
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test12931() {
		Queue y = new Queue();
		y.enqueue(-947182612);
		y.enqueue(-1062690011);
    }
    @Test
    public void test12932() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test12933() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test12934() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(-177614559);
		x.toString();
    }
    @Test
    public void test12935() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(10532526);
		Var.enqueue(370073010);
		Var.dequeue();
		Var.enqueue(-558364913);
		Var.enqueue(515180654);
		Var.isEmpty();
		Var.enqueue(2058421472);
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test12936() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(2054164831);
		assertEquals("[2054164831]", Var.toString());
		Var.enqueue(-1438867348);
		assertFalse(Var.isFull());
		Var.enqueue(774773131);
		assertEquals(2054164831, Var.dequeue());
		Var.enqueue(-2033829441);
		assertFalse(Var.isFull());
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test12937() {
		Queue Var = new Queue();
		Var.enqueue(-1094107245);
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test12938() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-80955337);
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.enqueue(-1677572037);
		z.dequeue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(-184012167);
    }
    @Test
    public void test12939() {
		Queue z = new Queue();
		z.enqueue(639462470);
    }
    @Test
    public void test12940() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.toString();
		x.toString();
		x.isFull();
    }
    @Test
    public void test12941() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-128971408);
		assertTrue(Var.isEmpty());
		Var.enqueue(-160069224);
		Var.isEmpty();
		Var.enqueue(-1197162372);
		Var.enqueue(-829451193);
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test12942() {
		Queue z = new Queue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.enqueue(1834968993);
		z.isEmpty();
		z.isFull();
		z.dequeue();
		z.enqueue(1359917300);
		z.enqueue(-378200558);
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test12943() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test12944() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test12945() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isFull();
		z.dequeue();
		z.dequeue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.toString();
		z.toString();
		z.toString();
    }
    @Test
    public void test12946() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.toString();
		y.enqueue(1913978953);
		assertFalse(y.isEmpty());
		y.isEmpty();
		y.enqueue(-1802943146);
    }
    @Test
    public void test12947() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.isFull();
		x.toString();
		x.toString();
		x.toString();
		x.toString();
		assertEquals("[]", x.toString());
		x.toString();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test12948() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.enqueue(1868402070);
		x.dequeue();
		assertEquals("[]", x.toString());
		x.toString();
		x.isEmpty();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isFull();
    }
    @Test
    public void test12949() {
		Queue x = new Queue();
		x.enqueue(745692663);
		assertEquals(745692663, x.dequeue());
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.isFull();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertFalse(x.isFull());
		x.dequeue();
		x.isFull();
		x.toString();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test12950() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
		assertEquals("[]", y.toString());
		y.isFull();
		y.enqueue(576844048);
		y.enqueue(-1811674019);
		y.enqueue(-515460055);
		y.isFull();
		assertFalse(y.isEmpty());
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
		y.toString();
		y.enqueue(-1514634136);
    }
    @Test
    public void test12951() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(2007612235);
		assertFalse(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test12952() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.isFull();
		y.toString();
		y.toString();
    }
    @Test
    public void test12953() {
		Queue variable = new Queue();
		variable.enqueue(684914195);
		assertEquals("[684914195]", variable.toString());
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.toString();
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test12954() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test12955() {
		Queue y = new Queue();
		y.enqueue(344627113);
		assertFalse(y.isFull());
		y.isEmpty();
		y.dequeue();
		y.enqueue(-1333576737);
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.isFull();
		y.isFull();
		y.isFull();
		y.toString();
    }
    @Test
    public void test12956() {
		Queue y = new Queue();
		y.enqueue(-2104092521);
    }
    @Test
    public void test12957() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test12958() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(1061571844);
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test12959() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-1671536951);
    }
    @Test
    public void test12960() {
		Queue variable = new Queue();
		variable.enqueue(-562846442);
		variable.enqueue(662737348);
		variable.toString();
    }
    @Test
    public void test12961() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.toString();
		z.dequeue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.enqueue(1005278502);
		z.dequeue();
		z.isEmpty();
		z.isFull();
		z.enqueue(1479654212);
    }
    @Test
    public void test12962() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(-1937139281);
    }
    @Test
    public void test12963() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.toString();
		variable.enqueue(-369211220);
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.enqueue(-815682610);
		variable.dequeue();
    }
    @Test
    public void test12964() {
		Queue y = new Queue();
		y.enqueue(1663452237);
		y.enqueue(-1754325307);
		y.isEmpty();
		y.isFull();
		y.toString();
		y.toString();
		y.enqueue(-2013036677);
		assertEquals("[1663452237]", y.toString());
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test12965() {
		Queue Var = new Queue();
		Var.enqueue(-1945077220);
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(202510293);
		Var.enqueue(-1023908239);
		assertEquals(202510293, Var.dequeue());
		Var.enqueue(1305984239);
    }
    @Test
    public void test12966() {
		Queue x = new Queue();
		x.enqueue(-626748766);
		assertFalse(x.isFull());
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test12967() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.toString();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(-756764457);
		x.toString();
		x.enqueue(291788099);
		assertEquals(291788099, x.dequeue());
		x.enqueue(-304254645);
    }
    @Test
    public void test12968() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-1431474913);
		variable.enqueue(2016235476);
		assertFalse(variable.isFull());
		assertEquals("[2016235476]", variable.toString());
		assertEquals(2016235476, variable.dequeue());
		variable.enqueue(1113026509);
    }
    @Test
    public void test12969() {
		Queue x = new Queue();
		x.toString();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test12970() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-610104208);
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test12971() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.enqueue(767918945);
		x.isEmpty();
		assertEquals("[767918945]", x.toString());
		x.isEmpty();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test12972() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-1176668489);
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-929335383);
		variable.dequeue();
		variable.enqueue(-254339260);
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test12973() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.enqueue(-1087732909);
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.toString();
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test12974() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.enqueue(1799428798);
		Var.toString();
    }
    @Test
    public void test12975() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.isEmpty();
		z.enqueue(1909057181);
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test12976() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isFull();
		variable.isFull();
		variable.toString();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test12977() {
		Queue z = new Queue();
		z.enqueue(1827260908);
    }
    @Test
    public void test12978() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-724781692);
		Var.isEmpty();
		Var.toString();
		Var.enqueue(1948771904);
    }
    @Test
    public void test12979() {
		Queue Var = new Queue();
		Var.enqueue(879353147);
		Var.dequeue();
		Var.enqueue(1211197906);
		Var.enqueue(583560746);
		assertEquals(1211197906, Var.dequeue());
		Var.enqueue(2024988638);
		Var.enqueue(-535906231);
    }
    @Test
    public void test12980() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.toString();
		variable.enqueue(1953979043);
		assertFalse(variable.isEmpty());
		variable.enqueue(-1053451147);
		assertFalse(variable.isEmpty());
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test12981() {
		Queue z = new Queue();
		z.enqueue(1434708081);
		z.isFull();
		z.isFull();
		assertEquals("[1434708081]", z.toString());
		z.enqueue(807140013);
    }
    @Test
    public void test12982() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.toString();
		z.enqueue(1272503988);
		z.enqueue(-1227061275);
    }
    @Test
    public void test12983() {
		Queue x = new Queue();
		x.enqueue(81457963);
		assertFalse(x.isFull());
		assertFalse(x.isEmpty());
		x.isEmpty();
		assertEquals(81457963, x.dequeue());
		x.enqueue(-2133128823);
    }
    @Test
    public void test12984() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(1513396469);
		Var.toString();
    }
    @Test
    public void test12985() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
    }
    @Test
    public void test12986() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-1052130964);
		z.enqueue(779761155);
		z.toString();
		z.isFull();
    }
    @Test
    public void test12987() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		assertFalse(x.isFull());
		x.dequeue();
		x.dequeue();
		x.isFull();
		x.toString();
		x.toString();
		x.enqueue(1289271548);
    }
    @Test
    public void test12988() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-2015077020);
		variable.enqueue(32415214);
		variable.toString();
		variable.toString();
		variable.dequeue();
		variable.enqueue(600015714);
    }
    @Test
    public void test12989() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test12990() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-1284234949);
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.dequeue();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.toString();
		Var.enqueue(150510271);
    }
    @Test
    public void test12991() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.toString();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test12992() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-1823118221);
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.toString();
		y.enqueue(-1378751729);
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.isFull();
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test12993() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.toString();
		y.dequeue();
		y.isFull();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test12994() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.enqueue(-2049287462);
		x.dequeue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.toString();
		x.isEmpty();
		x.enqueue(334318801);
    }
    @Test
    public void test12995() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test12996() {
		Queue Var = new Queue();
		Var.enqueue(-408727107);
		assertEquals(-1, Var.dequeue());
		Var.enqueue(809561048);
		assertFalse(Var.isEmpty());
		assertEquals("[809561048]", Var.toString());
		assertEquals("[809561048]", Var.toString());
		Var.toString();
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test12997() {
		Queue variable = new Queue();
		variable.enqueue(-2072349089);
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-1005745);
		variable.isFull();
		variable.enqueue(-1674114117);
		variable.enqueue(-1887156058);
		variable.toString();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test12998() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.enqueue(-278529854);
		Var.enqueue(925517620);
    }
    @Test
    public void test12999() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.enqueue(-944763472);
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test13000() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test13001() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test13002() {
		Queue y = new Queue();
		y.enqueue(-1417690496);
		y.dequeue();
		y.isEmpty();
		y.enqueue(656583329);
		y.dequeue();
		y.toString();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.dequeue();
		y.enqueue(-1738609028);
		assertEquals(-1, y.dequeue());
		y.enqueue(-284380628);
    }
    @Test
    public void test13003() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.enqueue(-239347035);
		y.isFull();
		y.dequeue();
		y.toString();
		y.isFull();
    }
    @Test
    public void test13004() {
		Queue z = new Queue();
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(2137479290);
		z.isFull();
		z.isFull();
		z.isEmpty();
		z.enqueue(-118281667);
		z.toString();
		assertFalse(z.isEmpty());
		z.toString();
		z.isFull();
    }
    @Test
    public void test13005() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.toString();
		Var.toString();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test13006() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-815479564);
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.toString();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test13007() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(954626460);
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(155183974);
		Var.enqueue(661771804);
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test13008() {
		Queue Var = new Queue();
		Var.enqueue(2059596509);
		Var.isFull();
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.enqueue(-1139311858);
    }
    @Test
    public void test13009() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(-925127026);
    }
    @Test
    public void test13010() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isFull();
		z.isFull();
		z.isFull();
		z.enqueue(-1364134541);
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test13011() {
		Queue y = new Queue();
		y.isFull();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(-734510169);
		y.dequeue();
		y.isFull();
		y.toString();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test13012() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.toString();
		z.isFull();
    }
    @Test
    public void test13013() {
		Queue Var = new Queue();
		Var.enqueue(-497542524);
    }
    @Test
    public void test13014() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(1662958707);
		assertFalse(y.isEmpty());
		y.toString();
		y.isFull();
    }
    @Test
    public void test13015() {
		Queue x = new Queue();
		x.enqueue(-1940951195);
		x.toString();
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(-1920923379);
		x.enqueue(2079618063);
		x.enqueue(1313886080);
		x.enqueue(-2054050822);
    }
    @Test
    public void test13016() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test13017() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.toString();
		x.enqueue(1166374911);
		assertEquals(1166374911, x.dequeue());
		x.toString();
		x.enqueue(-607630992);
		x.toString();
		x.isFull();
		x.enqueue(-1166128872);
		x.enqueue(1549288151);
    }
    @Test
    public void test13018() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.enqueue(-1147911086);
    }
    @Test
    public void test13019() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.toString();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.isFull();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.enqueue(1920758489);
		z.isEmpty();
    }
    @Test
    public void test13020() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(1542131811);
		assertEquals("[1542131811]", variable.toString());
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test13021() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(2028578542);
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(-802346573);
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test13022() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.enqueue(1156671272);
    }
    @Test
    public void test13023() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(328224649);
		x.isFull();
		x.dequeue();
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
		x.toString();
		assertTrue(x.isEmpty());
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.enqueue(-1380812805);
		x.isEmpty();
    }
    @Test
    public void test13024() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
		z.isFull();
		z.toString();
		z.isEmpty();
		z.toString();
		z.dequeue();
		z.isEmpty();
		z.enqueue(1802544410);
		assertEquals("[1802544410]", z.toString());
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test13025() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test13026() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test13027() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-103509068);
    }
    @Test
    public void test13028() {
		Queue y = new Queue();
		y.enqueue(-1900001357);
		assertTrue(y.isEmpty());
		y.enqueue(-329669141);
		y.dequeue();
		y.toString();
		y.toString();
    }
    @Test
    public void test13029() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test13030() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-400546902);
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(-144403026);
		assertTrue(z.isEmpty());
		z.enqueue(-725345036);
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test13031() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.enqueue(935663082);
    }
    @Test
    public void test13032() {
		Queue Var = new Queue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-2088423353);
		Var.isEmpty();
    }
    @Test
    public void test13033() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.enqueue(-382312053);
    }
    @Test
    public void test13034() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(1845426019);
		assertEquals(1845426019, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test13035() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.isEmpty();
		y.dequeue();
		y.enqueue(1382376217);
		y.toString();
		assertEquals(1382376217, y.dequeue());
		y.toString();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test13036() {
		Queue variable = new Queue();
		variable.enqueue(1885816384);
		assertFalse(variable.isEmpty());
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-21487863);
    }
    @Test
    public void test13037() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(741297787);
		x.isEmpty();
    }
    @Test
    public void test13038() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-446453444);
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.enqueue(-1090688978);
    }
    @Test
    public void test13039() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(-1402506230);
		assertEquals("[]", z.toString());
		z.isFull();
		assertEquals("[]", z.toString());
		z.enqueue(382881358);
    }
    @Test
    public void test13040() {
		Queue z = new Queue();
		z.enqueue(290787662);
		z.toString();
		assertEquals(290787662, z.dequeue());
		z.isFull();
		z.toString();
		z.enqueue(-2130148004);
    }
    @Test
    public void test13041() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test13042() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test13043() {
		Queue z = new Queue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isFull();
		z.enqueue(-1395619274);
    }
    @Test
    public void test13044() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.toString();
    }
    @Test
    public void test13045() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.toString();
		z.isFull();
		z.dequeue();
		z.enqueue(-2121389723);
		assertFalse(z.isFull());
		z.isFull();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test13046() {
		Queue y = new Queue();
		y.enqueue(-1410780519);
		y.toString();
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test13047() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.enqueue(-1523919394);
    }
    @Test
    public void test13048() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test13049() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test13050() {
		Queue variable = new Queue();
		variable.enqueue(-1504522404);
		variable.enqueue(-2128471559);
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(-1569242609);
		variable.dequeue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test13051() {
		Queue x = new Queue();
		x.enqueue(576024258);
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(16637021);
		x.toString();
		x.isEmpty();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test13052() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.enqueue(-1454893986);
		y.enqueue(912223912);
		y.dequeue();
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test13053() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test13054() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1459764025);
		assertTrue(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test13055() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test13056() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test13057() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.enqueue(253797266);
		y.toString();
		assertFalse(y.isEmpty());
		assertFalse(y.isFull());
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(-398646634);
    }
    @Test
    public void test13058() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-1639098705);
		z.enqueue(1796316241);
		z.isFull();
		z.dequeue();
		z.isEmpty();
		z.enqueue(-1889011160);
		z.isFull();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test13059() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
		y.dequeue();
		y.enqueue(-1515843439);
		y.isFull();
		y.enqueue(-202699671);
    }
    @Test
    public void test13060() {
		Queue y = new Queue();
		y.enqueue(-1670132200);
		y.isFull();
		y.isFull();
		y.dequeue();
		y.isFull();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test13061() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(-169227230);
		y.enqueue(-1346447967);
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.enqueue(-413350037);
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test13062() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.isFull();
		y.enqueue(2129466568);
		y.enqueue(1557643545);
    }
    @Test
    public void test13063() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(-56249749);
		variable.isFull();
    }
    @Test
    public void test13064() {
		Queue z = new Queue();
		z.enqueue(-2032420783);
		z.dequeue();
		z.dequeue();
		z.enqueue(1593725561);
		assertEquals(1593725561, z.dequeue());
		z.isFull();
		assertFalse(z.isFull());
		z.isEmpty();
		z.isFull();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test13065() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.isEmpty();
		y.isFull();
		y.enqueue(-1273666198);
		y.isFull();
		y.toString();
		y.isFull();
		y.enqueue(-886135793);
    }
    @Test
    public void test13066() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.toString();
		Var.enqueue(779896897);
    }
    @Test
    public void test13067() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-1366438449);
    }
    @Test
    public void test13068() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test13069() {
		Queue z = new Queue();
		z.enqueue(2131285504);
		assertEquals(2131285504, z.dequeue());
		assertTrue(z.isEmpty());
		z.enqueue(1794354238);
		assertFalse(z.isEmpty());
		z.isFull();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.dequeue();
		z.enqueue(1757425905);
		z.isFull();
		z.enqueue(580844107);
    }
    @Test
    public void test13070() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test13071() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		z.isEmpty();
		z.enqueue(2118538494);
		z.enqueue(-178248724);
		z.toString();
    }
    @Test
    public void test13072() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isEmpty();
    }
    @Test
    public void test13073() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test13074() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.enqueue(-1814413305);
		x.isFull();
		x.isFull();
		x.enqueue(1323616753);
		x.dequeue();
		x.enqueue(-509687842);
		x.isFull();
		x.toString();
		x.enqueue(97786978);
    }
    @Test
    public void test13075() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.enqueue(1145435023);
		assertEquals("[1145435023]", x.toString());
		x.isFull();
    }
    @Test
    public void test13076() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(847483393);
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertEquals(847483393, variable.dequeue());
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.enqueue(-682747164);
		variable.enqueue(2110780148);
		variable.enqueue(-825603939);
    }
    @Test
    public void test13077() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.dequeue();
		z.dequeue();
		z.dequeue();
		z.isFull();
		z.enqueue(-2087405476);
    }
    @Test
    public void test13078() {
		Queue x = new Queue();
		x.enqueue(-1690820027);
		x.toString();
		x.dequeue();
		x.toString();
		assertFalse(x.isFull());
		x.dequeue();
		x.isEmpty();
		x.isFull();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test13079() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test13080() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-1342054312);
		z.isEmpty();
		z.toString();
		z.toString();
		z.enqueue(269904984);
    }
    @Test
    public void test13081() {
		Queue y = new Queue();
		y.enqueue(-85231404);
		y.isFull();
		y.isFull();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test13082() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test13083() {
		Queue variable = new Queue();
		variable.enqueue(839278859);
		variable.dequeue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-873283597);
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test13084() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.enqueue(-1323331665);
		z.enqueue(-970321638);
		z.enqueue(-1267649940);
		z.isEmpty();
		z.dequeue();
		z.enqueue(345288322);
		z.isFull();
		z.enqueue(-629954953);
		z.enqueue(1230178606);
    }
    @Test
    public void test13085() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.toString();
		x.dequeue();
		x.enqueue(-1609119923);
    }
    @Test
    public void test13086() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.enqueue(-447466989);
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.enqueue(1642942945);
		Var.dequeue();
    }
    @Test
    public void test13087() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.enqueue(1366856672);
		assertEquals("[1366856672]", y.toString());
		y.isFull();
		y.toString();
		y.dequeue();
		y.toString();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test13088() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test13089() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(-33156361);
		z.enqueue(1698783398);
    }
    @Test
    public void test13090() {
		Queue x = new Queue();
		x.enqueue(1001403352);
		x.enqueue(121305484);
		assertEquals(1001403352, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test13091() {
		Queue variable = new Queue();
		variable.enqueue(468417268);
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test13092() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.toString();
		y.enqueue(-1202674309);
		y.dequeue();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test13093() {
		Queue Var = new Queue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1837795194);
		Var.isEmpty();
    }
    @Test
    public void test13094() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.isFull();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test13095() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.enqueue(-1632065967);
		variable.toString();
		variable.dequeue();
		variable.enqueue(129412068);
		variable.enqueue(-1538586851);
    }
    @Test
    public void test13096() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1194531732);
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-2041410303);
    }
    @Test
    public void test13097() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isEmpty();
		variable.enqueue(674283058);
		variable.toString();
		variable.isFull();
		assertEquals("[674283058]", variable.toString());
		assertFalse(variable.isFull());
		variable.enqueue(-253791581);
		variable.enqueue(872441345);
    }
    @Test
    public void test13098() {
		Queue z = new Queue();
		z.isFull();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.toString();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test13099() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.enqueue(299457788);
		variable.isEmpty();
    }
    @Test
    public void test13100() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.enqueue(-658643474);
		x.enqueue(615965982);
		x.dequeue();
    }
    @Test
    public void test13101() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-366708518);
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test13102() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.dequeue();
		y.enqueue(439976117);
		assertEquals("[439976117]", y.toString());
		y.isFull();
    }
    @Test
    public void test13103() {
		Queue z = new Queue();
		z.enqueue(1428210926);
		z.isEmpty();
    }
    @Test
    public void test13104() {
		Queue Var = new Queue();
		Var.enqueue(-619070867);
    }
    @Test
    public void test13105() {
		Queue z = new Queue();
		z.enqueue(1772487742);
		assertEquals(1772487742, z.dequeue());
		z.enqueue(1834693555);
    }
    @Test
    public void test13106() {
		Queue variable = new Queue();
		variable.enqueue(-826574822);
		variable.toString();
		variable.enqueue(-256770776);
		variable.toString();
		variable.toString();
		variable.enqueue(-1291963389);
		variable.toString();
		variable.enqueue(-163286071);
    }
    @Test
    public void test13107() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(-948958594);
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.toString();
		Var.enqueue(-1117674757);
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test13108() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.enqueue(-1727994791);
		x.toString();
		x.enqueue(-509561755);
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.enqueue(-503268314);
    }
    @Test
    public void test13109() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.enqueue(1381363066);
    }
    @Test
    public void test13110() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(943735754);
    }
    @Test
    public void test13111() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(-1316978660);
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test13112() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1169711976);
		variable.isEmpty();
    }
    @Test
    public void test13113() {
		Queue z = new Queue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.enqueue(-424305937);
    }
    @Test
    public void test13114() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.enqueue(1856792477);
		x.isFull();
		x.toString();
    }
    @Test
    public void test13115() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-2020829348);
    }
    @Test
    public void test13116() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-441707068);
		z.dequeue();
		z.isFull();
		z.toString();
    }
    @Test
    public void test13117() {
		Queue z = new Queue();
		z.enqueue(2043626194);
		assertFalse(z.isFull());
		z.enqueue(-60252307);
		z.isEmpty();
		z.isFull();
		z.toString();
		z.isEmpty();
		assertFalse(z.isFull());
		z.isEmpty();
		z.dequeue();
		z.enqueue(1971311666);
    }
    @Test
    public void test13118() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(1772329281);
		assertFalse(Var.isEmpty());
		Var.enqueue(-2107094430);
		assertFalse(Var.isEmpty());
		Var.enqueue(-861805604);
    }
    @Test
    public void test13119() {
		Queue x = new Queue();
		x.enqueue(2124820701);
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test13120() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-1367581685);
		Var.enqueue(-496432542);
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(155460355);
		assertEquals(155460355, Var.dequeue());
		Var.isEmpty();
    }
    @Test
    public void test13121() {
		Queue variable = new Queue();
		variable.enqueue(466147524);
		variable.toString();
		variable.toString();
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-1302108974);
		variable.isEmpty();
    }
    @Test
    public void test13122() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test13123() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isFull();
    }
    @Test
    public void test13124() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(-1681548780);
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test13125() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test13126() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(-1328902842);
    }
    @Test
    public void test13127() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test13128() {
		Queue variable = new Queue();
		variable.enqueue(-1417078789);
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.enqueue(1436836023);
		variable.isEmpty();
    }
    @Test
    public void test13129() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.toString();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test13130() {
		Queue Var = new Queue();
		Var.enqueue(-1927819896);
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1749627376);
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test13131() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(-260907774);
		x.dequeue();
		x.enqueue(817453769);
		x.enqueue(-72817796);
		x.dequeue();
    }
    @Test
    public void test13132() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.enqueue(-1589121579);
    }
    @Test
    public void test13133() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test13134() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-2061389869);
		variable.dequeue();
		variable.enqueue(191845407);
    }
    @Test
    public void test13135() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.dequeue();
		Var.enqueue(-1700239703);
		assertEquals("[]", Var.toString());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test13136() {
		Queue y = new Queue();
		y.enqueue(159890074);
		y.isFull();
		y.dequeue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.isEmpty();
		y.enqueue(-1166323755);
		y.enqueue(-107411864);
		y.toString();
		y.toString();
    }
    @Test
    public void test13137() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.enqueue(1059166530);
		y.enqueue(1135666865);
		y.isFull();
    }
    @Test
    public void test13138() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.toString();
		z.enqueue(1356647239);
		z.toString();
		z.toString();
		assertFalse(z.isFull());
		z.isEmpty();
		z.toString();
		z.enqueue(-2084250726);
    }
    @Test
    public void test13139() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-940765389);
		Var.enqueue(-2009393530);
		Var.toString();
		Var.toString();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.enqueue(2083550142);
		Var.isFull();
		Var.enqueue(916075987);
		Var.enqueue(-413132845);
		Var.dequeue();
    }
    @Test
    public void test13140() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-2021336486);
		y.enqueue(-263018309);
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test13141() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(-1560600611);
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test13142() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.enqueue(-350335433);
		assertEquals(-1, y.dequeue());
		y.enqueue(834028373);
		y.isEmpty();
		y.enqueue(2128138644);
		y.dequeue();
    }
    @Test
    public void test13143() {
		Queue Var = new Queue();
		Var.enqueue(-1553273342);
		Var.toString();
		Var.enqueue(630809150);
		Var.isFull();
		Var.toString();
		Var.enqueue(-1642391528);
		Var.enqueue(1190326048);
		assertEquals(630809150, Var.dequeue());
		Var.enqueue(1815244803);
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test13144() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-1433722497);
		Var.toString();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test13145() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-2075924205);
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test13146() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test13147() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.dequeue();
		z.enqueue(1541147253);
		z.isEmpty();
    }
    @Test
    public void test13148() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.enqueue(-2075541332);
		assertEquals("[]", Var.toString());
		Var.enqueue(-1633913299);
    }
    @Test
    public void test13149() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test13150() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test13151() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.enqueue(-146036409);
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(1930163719);
		Var.toString();
    }
    @Test
    public void test13152() {
		Queue x = new Queue();
		x.enqueue(-1263162032);
		assertTrue(x.isEmpty());
		x.enqueue(741058218);
		x.isEmpty();
    }
    @Test
    public void test13153() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test13154() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1155038026);
		variable.isFull();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test13155() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(-307606051);
		z.isFull();
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(2067988175);
		z.enqueue(-1837999880);
		z.isFull();
		assertEquals(2067988175, z.dequeue());
		z.isFull();
		z.isFull();
    }
    @Test
    public void test13156() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
		variable.enqueue(1035740088);
		assertEquals("[1035740088]", variable.toString());
		variable.isFull();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test13157() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.enqueue(-1793670865);
    }
    @Test
    public void test13158() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test13159() {
		Queue Var = new Queue();
		Var.enqueue(1202823338);
		assertFalse(Var.isEmpty());
		Var.enqueue(-1215827855);
		Var.isFull();
		assertEquals("[1202823338]", Var.toString());
		Var.isFull();
		Var.enqueue(1226382524);
		Var.enqueue(-14320345);
		Var.dequeue();
		Var.enqueue(1354510029);
		assertFalse(Var.isFull());
		assertEquals("[1226382524, 1354510029]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test13160() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test13161() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test13162() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-1691131871);
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.toString();
		y.toString();
    }
    @Test
    public void test13163() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(289123575);
		assertEquals(289123575, Var.dequeue());
		Var.enqueue(-1374661006);
		Var.enqueue(-909595483);
    }
    @Test
    public void test13164() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(1088430898);
		y.toString();
		assertEquals(1088430898, y.dequeue());
		y.toString();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test13165() {
		Queue variable = new Queue();
		variable.enqueue(-1026586126);
		variable.dequeue();
    }
    @Test
    public void test13166() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test13167() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(-1433372383);
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test13168() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.toString();
		y.enqueue(637420834);
		y.isFull();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test13169() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(-768748016);
		x.isFull();
		x.enqueue(2018379541);
		assertFalse(x.isFull());
		assertEquals(2018379541, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test13170() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test13171() {
		Queue y = new Queue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isFull();
		y.toString();
		y.toString();
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test13172() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1544443876);
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test13173() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(-1651361726);
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.dequeue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test13174() {
		Queue x = new Queue();
		x.enqueue(1091342703);
		x.enqueue(2129376131);
		x.enqueue(-1031530063);
		x.toString();
    }
    @Test
    public void test13175() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1624167695);
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(500010041);
		variable.enqueue(1150235802);
    }
    @Test
    public void test13176() {
		Queue variable = new Queue();
		variable.enqueue(-319019128);
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-2136652511);
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test13177() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(-1045646787);
		y.enqueue(-1104785434);
		y.toString();
		assertEquals(-1, y.dequeue());
		y.toString();
    }
    @Test
    public void test13178() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-878606895);
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.dequeue();
		z.enqueue(411915177);
		z.enqueue(-1229400845);
		assertEquals(411915177, z.dequeue());
		z.toString();
		z.enqueue(1189695911);
		z.isEmpty();
    }
    @Test
    public void test13179() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.toString();
		x.isFull();
		assertTrue(x.isEmpty());
		x.toString();
		x.toString();
		assertEquals("[]", x.toString());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test13180() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isFull();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(65842073);
		Var.isFull();
    }
    @Test
    public void test13181() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.toString();
		Var.enqueue(-886114211);
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test13182() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.enqueue(2064181800);
		x.enqueue(-2026658419);
		x.toString();
		x.enqueue(-1584355558);
		assertFalse(x.isEmpty());
		x.dequeue();
		x.isFull();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test13183() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-977177152);
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(2051224921);
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test13184() {
		Queue z = new Queue();
		z.enqueue(-516263700);
		z.enqueue(-998713662);
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test13185() {
		Queue variable = new Queue();
		variable.enqueue(1122217068);
		assertEquals(1122217068, variable.dequeue());
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(-669306776);
		variable.isEmpty();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test13186() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.enqueue(-1933527214);
		x.isFull();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.toString();
		x.isFull();
		x.toString();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test13187() {
		Queue variable = new Queue();
		variable.enqueue(1106925674);
		variable.toString();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1108826621);
    }
    @Test
    public void test13188() {
		Queue y = new Queue();
		y.enqueue(990444590);
		y.toString();
		y.enqueue(1458454987);
		y.dequeue();
    }
    @Test
    public void test13189() {
		Queue x = new Queue();
		x.enqueue(-878545072);
		x.enqueue(-489859627);
		x.dequeue();
		x.enqueue(1402398212);
		x.enqueue(507425046);
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test13190() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(-1990952028);
		variable.enqueue(1115369927);
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test13191() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(951066064);
		variable.enqueue(1669700201);
		assertFalse(variable.isEmpty());
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test13192() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isFull();
		assertFalse(z.isFull());
		z.toString();
		z.toString();
    }
    @Test
    public void test13193() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.toString();
		Var.dequeue();
		Var.enqueue(773312833);
		assertEquals("[773312833]", Var.toString());
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.enqueue(1369076622);
		Var.toString();
		assertEquals("[773312833, 1369076622]", Var.toString());
		Var.enqueue(-1898329306);
    }
    @Test
    public void test13194() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.isFull();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test13195() {
		Queue z = new Queue();
		z.enqueue(-948538679);
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isFull();
		z.isFull();
		z.isEmpty();
		z.isFull();
		z.enqueue(2004006464);
    }
    @Test
    public void test13196() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test13197() {
		Queue z = new Queue();
		z.toString();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test13198() {
		Queue x = new Queue();
		x.enqueue(344201249);
		assertFalse(x.isEmpty());
		assertFalse(x.isFull());
		x.toString();
		x.dequeue();
		x.isFull();
		x.toString();
		x.dequeue();
		x.enqueue(1410623667);
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test13199() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(-217747494);
		variable.dequeue();
    }
    @Test
    public void test13200() {
		Queue y = new Queue();
		y.isEmpty();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.toString();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.isFull();
		assertEquals("[]", y.toString());
		y.enqueue(-1919283655);
		y.isEmpty();
    }
    @Test
    public void test13201() {
		Queue y = new Queue();
		y.enqueue(943523553);
		assertFalse(y.isEmpty());
		assertEquals(943523553, y.dequeue());
		y.isEmpty();
		assertFalse(y.isFull());
		y.isEmpty();
		y.enqueue(1318503746);
    }
    @Test
    public void test13202() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(964210066);
    }
    @Test
    public void test13203() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(-50846049);
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.enqueue(-950371545);
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.isFull();
		y.toString();
		y.dequeue();
		y.enqueue(1074865321);
    }
    @Test
    public void test13204() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.isFull();
		x.isFull();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test13205() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test13206() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1468284213);
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test13207() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test13208() {
		Queue x = new Queue();
		x.enqueue(-1410191008);
		x.dequeue();
    }
    @Test
    public void test13209() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1098378294);
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test13210() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.enqueue(338202351);
		z.enqueue(-546598865);
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.toString();
		z.enqueue(-332450642);
		z.dequeue();
		z.toString();
		z.isFull();
		z.toString();
		z.isFull();
    }
    @Test
    public void test13211() {
		Queue x = new Queue();
		x.isFull();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.enqueue(-1356220057);
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test13212() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.toString();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-810474697);
		Var.enqueue(-1182497373);
		Var.toString();
    }
    @Test
    public void test13213() {
		Queue x = new Queue();
		x.toString();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.enqueue(1169172171);
		x.isFull();
    }
    @Test
    public void test13214() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test13215() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test13216() {
		Queue variable = new Queue();
		variable.enqueue(1198101082);
		variable.enqueue(-1737750200);
    }
    @Test
    public void test13217() {
		Queue x = new Queue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(-111464866);
		x.enqueue(-1010134700);
		x.isFull();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test13218() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.toString();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test13219() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.dequeue();
		z.enqueue(-21282100);
		z.isEmpty();
		z.isEmpty();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test13220() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(-1131441985);
		x.dequeue();
		assertTrue(x.isEmpty());
		x.enqueue(-2046728805);
		x.enqueue(259964860);
    }
    @Test
    public void test13221() {
		Queue z = new Queue();
		z.enqueue(-565539062);
		z.enqueue(-172380017);
    }
    @Test
    public void test13222() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.isEmpty();
		assertFalse(y.isFull());
		y.dequeue();
		y.toString();
		y.enqueue(-1404310477);
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test13223() {
		Queue z = new Queue();
		z.enqueue(-79940753);
		z.dequeue();
		z.dequeue();
		z.enqueue(-1960322030);
		z.isFull();
		z.isEmpty();
		z.enqueue(-1497393844);
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(1045452310);
    }
    @Test
    public void test13224() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-180523702);
		assertEquals("[]", x.toString());
		x.toString();
		x.isFull();
		x.enqueue(2144327827);
		x.dequeue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isFull();
		assertEquals("[]", x.toString());
		x.toString();
    }
    @Test
    public void test13225() {
		Queue z = new Queue();
		z.enqueue(1660455124);
		assertFalse(z.isEmpty());
		z.enqueue(-795924369);
		z.isFull();
		assertFalse(z.isEmpty());
		z.dequeue();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test13226() {
		Queue variable = new Queue();
		variable.enqueue(1298990532);
		variable.enqueue(225071395);
		variable.dequeue();
		assertEquals("[225071395]", variable.toString());
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test13227() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.isFull();
		y.dequeue();
		y.isEmpty();
		y.enqueue(59573064);
		assertEquals("[59573064]", y.toString());
		y.isFull();
		y.enqueue(-1920366727);
		y.isEmpty();
    }
    @Test
    public void test13228() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(734631500);
    }
    @Test
    public void test13229() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test13230() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.enqueue(-613211064);
		variable.dequeue();
    }
    @Test
    public void test13231() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-1140775951);
    }
    @Test
    public void test13232() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.dequeue();
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(-652204095);
    }
    @Test
    public void test13233() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.toString();
		z.enqueue(1210737565);
		z.toString();
    }
    @Test
    public void test13234() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test13235() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.toString();
    }
    @Test
    public void test13236() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.toString();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.enqueue(146915618);
		variable.isFull();
		variable.isFull();
		assertEquals("[146915618]", variable.toString());
		assertEquals(146915618, variable.dequeue());
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.enqueue(-775729143);
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test13237() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test13238() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isFull();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.isFull();
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test13239() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test13240() {
		Queue y = new Queue();
		y.enqueue(-1953470909);
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
		y.enqueue(-2100672793);
		y.isFull();
		y.isFull();
		y.enqueue(-1221251310);
		y.enqueue(875821556);
		assertFalse(y.isFull());
		y.enqueue(-1627408295);
    }
    @Test
    public void test13241() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test13242() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(382792435);
		y.enqueue(-255462293);
    }
    @Test
    public void test13243() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test13244() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test13245() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(-125307993);
		y.dequeue();
		y.isFull();
		y.isFull();
		y.enqueue(-1498018152);
		y.toString();
    }
    @Test
    public void test13246() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.enqueue(1380271522);
		assertFalse(x.isEmpty());
		x.isEmpty();
		x.toString();
		x.enqueue(-228759803);
		x.isEmpty();
		x.isFull();
		x.enqueue(489036889);
		x.toString();
    }
    @Test
    public void test13247() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(-967425464);
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.enqueue(813603231);
		assertEquals("[813603231]", variable.toString());
		variable.toString();
		variable.enqueue(-48386946);
		variable.toString();
    }
    @Test
    public void test13248() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test13249() {
		Queue variable = new Queue();
		variable.enqueue(1881898613);
		assertEquals(1881898613, variable.dequeue());
		variable.enqueue(-1601913139);
		variable.isFull();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(627608805);
		assertEquals("[627608805]", variable.toString());
		variable.toString();
    }
    @Test
    public void test13250() {
		Queue y = new Queue();
		y.enqueue(-1253528832);
    }
    @Test
    public void test13251() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(1647262926);
		x.dequeue();
		x.enqueue(-471228310);
		x.isFull();
		x.enqueue(-1638801249);
		x.isFull();
    }
    @Test
    public void test13252() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isEmpty();
		assertFalse(y.isFull());
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.enqueue(491703996);
		y.isFull();
		y.enqueue(1536949864);
    }
    @Test
    public void test13253() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(327481399);
    }
    @Test
    public void test13254() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test13255() {
		Queue Var = new Queue();
		Var.enqueue(-1870636877);
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-198485903);
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test13256() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.enqueue(-1567912304);
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(890527975);
    }
    @Test
    public void test13257() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.enqueue(-631871374);
		variable.toString();
		variable.toString();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test13258() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(1216674057);
		z.isEmpty();
		z.enqueue(-144118766);
		z.isFull();
		z.isFull();
    }
    @Test
    public void test13259() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test13260() {
		Queue x = new Queue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.toString();
		x.isEmpty();
		assertFalse(x.isFull());
		x.toString();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.enqueue(2090906396);
		assertEquals("[2090906396]", x.toString());
		x.toString();
    }
    @Test
    public void test13261() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.enqueue(1873607142);
		z.enqueue(280010512);
		z.enqueue(507505307);
		z.toString();
		z.isFull();
		assertFalse(z.isEmpty());
		z.dequeue();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test13262() {
		Queue z = new Queue();
		z.enqueue(-1781179291);
		z.enqueue(1001892089);
		assertFalse(z.isEmpty());
		z.enqueue(1803715712);
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
		assertFalse(z.isFull());
		z.isFull();
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test13263() {
		Queue x = new Queue();
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(-1495440623);
		x.dequeue();
		x.enqueue(-1111844480);
		x.isFull();
		x.enqueue(-1348480759);
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test13264() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(255385809);
		Var.dequeue();
		Var.toString();
		Var.enqueue(1742078741);
		assertEquals("[1742078741]", Var.toString());
		Var.enqueue(66049224);
		assertEquals("[1742078741, 66049224]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test13265() {
		Queue Var = new Queue();
		Var.enqueue(-936327798);
		Var.toString();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isFull();
		Var.enqueue(124618639);
		Var.toString();
		Var.enqueue(1509352666);
		Var.enqueue(1583473283);
		Var.toString();
    }
    @Test
    public void test13266() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test13267() {
		Queue y = new Queue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.enqueue(-247695858);
		y.isEmpty();
    }
    @Test
    public void test13268() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.toString();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.toString();
    }
    @Test
    public void test13269() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test13270() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-2055703116);
		x.isFull();
		assertTrue(x.isEmpty());
		x.enqueue(-905134650);
    }
    @Test
    public void test13271() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test13272() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.enqueue(-489685828);
		z.toString();
		z.isFull();
		z.enqueue(451838551);
    }
    @Test
    public void test13273() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isEmpty();
		z.dequeue();
		z.enqueue(-1959326436);
		z.toString();
		z.toString();
    }
    @Test
    public void test13274() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.enqueue(-2022600906);
		y.isFull();
		y.toString();
    }
    @Test
    public void test13275() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(1252457686);
    }
    @Test
    public void test13276() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(-1343658343);
		y.enqueue(-631838770);
		y.enqueue(1874960788);
		assertFalse(y.isEmpty());
		y.enqueue(1374887175);
		y.toString();
		y.enqueue(-317508718);
    }
    @Test
    public void test13277() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test13278() {
		Queue x = new Queue();
		x.enqueue(1790284683);
		x.dequeue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.enqueue(-851832683);
		x.enqueue(-1946573683);
		x.enqueue(1153109106);
    }
    @Test
    public void test13279() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.isEmpty();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test13280() {
		Queue y = new Queue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(1809811967);
		assertFalse(y.isEmpty());
		assertFalse(y.isFull());
		y.isFull();
		y.isFull();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test13281() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test13282() {
		Queue Var = new Queue();
		Var.enqueue(-1694852740);
		Var.toString();
		Var.toString();
		Var.enqueue(1263047155);
		assertEquals("[1263047155]", Var.toString());
		Var.isFull();
		Var.enqueue(-1499808829);
		Var.isEmpty();
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test13283() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.toString();
		x.toString();
		x.dequeue();
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(-603881749);
		x.toString();
    }
    @Test
    public void test13284() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
    }
    @Test
    public void test13285() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-1176968784);
		variable.enqueue(1132099300);
		variable.enqueue(1914224989);
		variable.toString();
		assertFalse(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test13286() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.enqueue(409510602);
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.toString();
		y.enqueue(1300138398);
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test13287() {
		Queue y = new Queue();
		y.toString();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isFull();
		y.dequeue();
		y.enqueue(1404173415);
		assertEquals("[1404173415]", y.toString());
		y.enqueue(540694996);
    }
    @Test
    public void test13288() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-1435593292);
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(-1189716424);
		Var.enqueue(848500772);
    }
    @Test
    public void test13289() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test13290() {
		Queue z = new Queue();
		z.enqueue(-1017550075);
		z.dequeue();
    }
    @Test
    public void test13291() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(835612816);
		z.enqueue(-704053449);
		z.dequeue();
    }
    @Test
    public void test13292() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(1858837848);
		y.dequeue();
		assertFalse(y.isFull());
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.toString();
		y.isEmpty();
		y.enqueue(-285875117);
		y.isEmpty();
    }
    @Test
    public void test13293() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
    }
    @Test
    public void test13294() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.enqueue(-648684569);
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test13295() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test13296() {
		Queue z = new Queue();
		z.toString();
		assertTrue(z.isEmpty());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test13297() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test13298() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.toString();
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test13299() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(-294720401);
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.enqueue(1220959890);
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test13300() {
		Queue x = new Queue();
		x.enqueue(-1888555618);
		assertTrue(x.isEmpty());
		x.isFull();
		x.isFull();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test13301() {
		Queue variable = new Queue();
		variable.enqueue(-1496911130);
		variable.enqueue(486310129);
		variable.enqueue(-2045200918);
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test13302() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(11753556);
		variable.isEmpty();
		variable.enqueue(1160526323);
    }
    @Test
    public void test13303() {
		Queue variable = new Queue();
		variable.enqueue(-738382121);
    }
    @Test
    public void test13304() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.enqueue(-634350435);
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(326945895);
    }
    @Test
    public void test13305() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test13306() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-1496852661);
		variable.enqueue(742594649);
		assertFalse(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test13307() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test13308() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.toString();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.enqueue(-63533798);
		x.toString();
		x.toString();
    }
    @Test
    public void test13309() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test13310() {
		Queue variable = new Queue();
		variable.enqueue(1853247787);
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(1465319613);
		variable.isFull();
		variable.toString();
		assertEquals(1853247787, variable.dequeue());
		variable.enqueue(953519699);
    }
    @Test
    public void test13311() {
		Queue y = new Queue();
		y.enqueue(-509296099);
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test13312() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test13313() {
		Queue Var = new Queue();
		Var.toString();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.enqueue(697817371);
		Var.isFull();
    }
    @Test
    public void test13314() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(321166960);
		assertFalse(x.isFull());
		x.enqueue(-1248748566);
		x.enqueue(1612875239);
    }
    @Test
    public void test13315() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test13316() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		y.toString();
    }
    @Test
    public void test13317() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.toString();
		x.isFull();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.enqueue(1731581770);
		x.isFull();
		x.isFull();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test13318() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-442536157);
		variable.toString();
    }
    @Test
    public void test13319() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-790003358);
		z.enqueue(2138777448);
		z.enqueue(-1699663569);
		z.enqueue(1824192581);
		z.toString();
		z.enqueue(305647501);
		assertEquals("[2138777448, 1824192581, 305647501]", z.toString());
		z.isFull();
		z.dequeue();
		z.enqueue(-458338339);
    }
    @Test
    public void test13320() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isFull();
		x.enqueue(-143614522);
		x.isEmpty();
    }
    @Test
    public void test13321() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.enqueue(-1473821791);
		y.isFull();
		assertTrue(y.isEmpty());
		y.enqueue(-1555483652);
		y.toString();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.enqueue(-1255404914);
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test13322() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.enqueue(853519432);
		x.enqueue(1571959009);
    }
    @Test
    public void test13323() {
		Queue Var = new Queue();
		Var.enqueue(-1812884498);
		Var.enqueue(909192504);
		assertEquals(909192504, Var.dequeue());
		Var.enqueue(-1710102479);
		Var.isFull();
		Var.isFull();
		Var.enqueue(-2001799116);
		Var.enqueue(-1271409014);
		Var.isFull();
    }
    @Test
    public void test13324() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-336235997);
		assertEquals(-1, Var.dequeue());
		Var.enqueue(600590685);
		Var.isFull();
    }
    @Test
    public void test13325() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(1850364890);
		z.enqueue(-863171220);
		z.isFull();
		z.isEmpty();
		z.dequeue();
		z.enqueue(485735624);
    }
    @Test
    public void test13326() {
		Queue variable = new Queue();
		variable.enqueue(-1805512309);
    }
    @Test
    public void test13327() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.isFull();
		z.enqueue(-1588579305);
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test13328() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test13329() {
		Queue Var = new Queue();
		Var.enqueue(326238133);
		Var.dequeue();
    }
    @Test
    public void test13330() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(-1462620996);
		x.enqueue(-271944473);
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test13331() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.dequeue();
		x.enqueue(-2127749219);
		x.isFull();
		x.toString();
		x.isFull();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test13332() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test13333() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.enqueue(1764912219);
		Var.toString();
		Var.toString();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test13334() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.dequeue();
		x.enqueue(-1532032315);
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.dequeue();
		x.toString();
		x.toString();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test13335() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test13336() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1023149033);
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(-2075140106);
		variable.toString();
    }
    @Test
    public void test13337() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.enqueue(288102556);
		z.enqueue(-461047897);
		z.isFull();
		z.toString();
		z.enqueue(-974387249);
    }
    @Test
    public void test13338() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(1058217480);
		Var.toString();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test13339() {
		Queue x = new Queue();
		x.enqueue(1025750701);
		assertFalse(x.isFull());
		x.enqueue(1240439904);
    }
    @Test
    public void test13340() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-1314586297);
		Var.isFull();
		Var.isFull();
		Var.enqueue(-454891299);
    }
    @Test
    public void test13341() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(1664054603);
		y.isFull();
		assertEquals("[1664054603]", y.toString());
		y.isFull();
		y.isEmpty();
		assertEquals("[1664054603]", y.toString());
		y.isEmpty();
		y.isFull();
		y.enqueue(1175553232);
		assertEquals("[1664054603, 1175553232]", y.toString());
		y.dequeue();
		y.enqueue(1042629072);
    }
    @Test
    public void test13342() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.enqueue(286436663);
		z.toString();
		assertFalse(z.isEmpty());
		assertEquals(286436663, z.dequeue());
		z.isEmpty();
		z.enqueue(-1964093425);
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.toString();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test13343() {
		Queue Var = new Queue();
		Var.enqueue(-1185048032);
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.enqueue(-822112044);
		Var.toString();
    }
    @Test
    public void test13344() {
		Queue x = new Queue();
		x.enqueue(-1483384797);
		x.isEmpty();
    }
    @Test
    public void test13345() {
		Queue y = new Queue();
		y.enqueue(1877876399);
		assertEquals(1877876399, y.dequeue());
		y.isFull();
		assertFalse(y.isFull());
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test13346() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.toString();
		x.enqueue(-1014664730);
		x.enqueue(949352294);
		assertEquals(949352294, x.dequeue());
		x.enqueue(-921649670);
		x.enqueue(1498821023);
		x.isEmpty();
		x.dequeue();
		x.enqueue(-913589022);
    }
    @Test
    public void test13347() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(462429011);
		z.dequeue();
		z.enqueue(1756564336);
    }
    @Test
    public void test13348() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.enqueue(1000336593);
		y.isEmpty();
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(1861672974);
		y.isEmpty();
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test13349() {
		Queue z = new Queue();
		z.enqueue(1490560754);
		z.toString();
		z.enqueue(1756869625);
		z.isFull();
		z.isFull();
		z.toString();
		z.isEmpty();
		z.isEmpty();
		z.toString();
		z.isFull();
    }
    @Test
    public void test13350() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(1504360529);
		assertFalse(Var.isEmpty());
		Var.enqueue(-1282953425);
		Var.enqueue(583046011);
    }
    @Test
    public void test13351() {
		Queue x = new Queue();
		x.enqueue(2128884485);
		assertEquals("[2128884485]", x.toString());
		assertEquals("[2128884485]", x.toString());
		x.dequeue();
		x.isFull();
		x.enqueue(-501690364);
		x.dequeue();
    }
    @Test
    public void test13352() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(195224292);
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test13353() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test13354() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.toString();
		y.isFull();
		y.dequeue();
		y.enqueue(-418410382);
		y.toString();
		y.isEmpty();
		y.isEmpty();
		y.toString();
		assertFalse(y.isFull());
		y.isFull();
		assertTrue(y.isEmpty());
		y.dequeue();
    }
    @Test
    public void test13355() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test13356() {
		Queue z = new Queue();
		z.enqueue(1054958545);
		z.isFull();
    }
    @Test
    public void test13357() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test13358() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.enqueue(1033295754);
		Var.isFull();
		Var.enqueue(-1623696758);
		Var.isFull();
		assertEquals("[1033295754]", Var.toString());
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.enqueue(1482159676);
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test13359() {
		Queue Var = new Queue();
		Var.enqueue(1479551373);
		Var.enqueue(-678575505);
    }
    @Test
    public void test13360() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.enqueue(1576637248);
		z.isEmpty();
		z.isFull();
		z.enqueue(-1947286297);
		assertEquals("[1576637248]", z.toString());
		z.isFull();
		z.isFull();
		z.enqueue(-417404146);
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test13361() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(-618184797);
		y.dequeue();
		y.isEmpty();
		y.isFull();
		y.enqueue(-681277168);
		y.isFull();
    }
    @Test
    public void test13362() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(2061175860);
		y.enqueue(-2106557253);
		y.isEmpty();
		y.isEmpty();
		y.toString();
		y.isFull();
    }
    @Test
    public void test13363() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(-672437407);
		assertEquals(-1, z.dequeue());
		z.enqueue(1513342927);
		z.isEmpty();
		z.isFull();
		z.toString();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test13364() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test13365() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isFull();
    }
    @Test
    public void test13366() {
		Queue x = new Queue();
		x.enqueue(236078793);
    }
    @Test
    public void test13367() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.dequeue();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isEmpty();
		x.enqueue(1752841834);
		x.isEmpty();
		assertEquals(1752841834, x.dequeue());
		assertFalse(x.isFull());
		x.enqueue(1308743230);
    }
    @Test
    public void test13368() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test13369() {
		Queue z = new Queue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.enqueue(-1470704397);
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test13370() {
		Queue variable = new Queue();
		variable.enqueue(885812831);
		variable.enqueue(1775402166);
		variable.isEmpty();
		assertFalse(variable.isEmpty());
		assertEquals(885812831, variable.dequeue());
		variable.isFull();
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(722419114);
		variable.enqueue(-194786262);
		variable.isEmpty();
    }
    @Test
    public void test13371() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-589002681);
		Var.toString();
		Var.isFull();
		Var.isFull();
		Var.enqueue(956204288);
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test13372() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test13373() {
		Queue x = new Queue();
		x.enqueue(1053511145);
    }
    @Test
    public void test13374() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.enqueue(-402197785);
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(1452863706);
		variable.isFull();
    }
    @Test
    public void test13375() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(-163582288);
		y.isEmpty();
    }
    @Test
    public void test13376() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test13377() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.enqueue(-1047706339);
		assertTrue(z.isEmpty());
		z.enqueue(-798366248);
		z.dequeue();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.enqueue(-87283888);
		z.dequeue();
    }
    @Test
    public void test13378() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-2010293230);
    }
    @Test
    public void test13379() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(2030115931);
    }
    @Test
    public void test13380() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(1873389831);
		variable.isFull();
    }
    @Test
    public void test13381() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-384271429);
		assertEquals("[]", variable.toString());
		variable.enqueue(329236442);
    }
    @Test
    public void test13382() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(1757468999);
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test13383() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.dequeue();
		x.toString();
		x.isFull();
		x.dequeue();
		assertFalse(x.isFull());
		x.isFull();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.enqueue(1254759827);
		x.enqueue(1723756965);
		assertFalse(x.isFull());
		x.enqueue(-981752948);
    }
    @Test
    public void test13384() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(1983326769);
		assertFalse(variable.isEmpty());
		variable.toString();
		variable.enqueue(1510706098);
		assertFalse(variable.isFull());
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		assertEquals("[1510706098]", variable.toString());
		variable.isFull();
		assertEquals(1510706098, variable.dequeue());
		variable.enqueue(1645543786);
		variable.dequeue();
    }
    @Test
    public void test13385() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(-1078280513);
		x.enqueue(1261082866);
    }
    @Test
    public void test13386() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(1747131917);
		y.enqueue(-1938397149);
		y.dequeue();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.enqueue(-1233489897);
    }
    @Test
    public void test13387() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.toString();
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test13388() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test13389() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.enqueue(-908677046);
		y.enqueue(575909741);
		y.enqueue(841908588);
    }
    @Test
    public void test13390() {
		Queue variable = new Queue();
		variable.enqueue(-175991870);
		variable.isFull();
		variable.enqueue(762657665);
		variable.isEmpty();
		variable.enqueue(799396361);
		variable.toString();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test13391() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test13392() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(124793844);
		z.toString();
		z.isFull();
		assertEquals(124793844, z.dequeue());
		z.isFull();
		z.isEmpty();
		z.toString();
		z.isFull();
    }
    @Test
    public void test13393() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.toString();
    }
    @Test
    public void test13394() {
		Queue x = new Queue();
		x.enqueue(-1563991531);
		x.dequeue();
		x.enqueue(1386045107);
    }
    @Test
    public void test13395() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.enqueue(215658204);
		assertEquals(215658204, x.dequeue());
		assertFalse(x.isFull());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.toString();
    }
    @Test
    public void test13396() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-852006900);
		y.enqueue(265567433);
		y.toString();
		y.enqueue(-1493727493);
		y.dequeue();
		y.enqueue(1247023753);
		assertEquals("[1247023753]", y.toString());
		y.dequeue();
		y.toString();
		y.enqueue(1179431663);
    }
    @Test
    public void test13397() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.enqueue(-1106260872);
		y.isFull();
		y.toString();
		y.dequeue();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.enqueue(282756523);
		y.isEmpty();
    }
    @Test
    public void test13398() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.enqueue(258329893);
		Var.enqueue(-926898022);
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test13399() {
		Queue x = new Queue();
		x.toString();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test13400() {
		Queue y = new Queue();
		y.enqueue(1104979878);
		assertFalse(y.isFull());
		y.enqueue(1677354900);
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.enqueue(-530268932);
		y.enqueue(403842062);
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test13401() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(-1877946974);
		assertFalse(y.isFull());
		y.isFull();
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
		y.isEmpty();
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test13402() {
		Queue variable = new Queue();
		variable.enqueue(898744607);
		assertEquals("[898744607]", variable.toString());
		assertEquals(898744607, variable.dequeue());
		variable.dequeue();
		variable.enqueue(-1930298679);
		variable.enqueue(-2122445893);
		variable.isFull();
		variable.toString();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test13403() {
		Queue Var = new Queue();
		Var.enqueue(476841698);
    }
    @Test
    public void test13404() {
		Queue variable = new Queue();
		variable.enqueue(-141011146);
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-1944592556);
		variable.toString();
		variable.enqueue(-1323859525);
    }
    @Test
    public void test13405() {
		Queue x = new Queue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.enqueue(-2006201823);
		x.isFull();
		x.enqueue(-942209729);
		x.toString();
		x.isFull();
		x.enqueue(-489642650);
    }
    @Test
    public void test13406() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(1198010050);
		variable.isFull();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(533591567);
    }
    @Test
    public void test13407() {
		Queue z = new Queue();
		z.enqueue(-1691802645);
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isFull();
		assertTrue(z.isEmpty());
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(-1773124800);
		assertEquals("[]", z.toString());
		z.enqueue(-1930887005);
    }
    @Test
    public void test13408() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test13409() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test13410() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test13411() {
		Queue x = new Queue();
		x.enqueue(1628030311);
		x.enqueue(-394561542);
		x.enqueue(170291238);
		x.enqueue(1726609987);
		x.dequeue();
		x.enqueue(-1282114562);
    }
    @Test
    public void test13412() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.isFull();
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-441758393);
		y.isFull();
    }
    @Test
    public void test13413() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.enqueue(1497114741);
		y.toString();
		y.dequeue();
    }
    @Test
    public void test13414() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-312824445);
    }
    @Test
    public void test13415() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-332559709);
    }
    @Test
    public void test13416() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.toString();
		x.toString();
		x.dequeue();
		x.enqueue(-772877137);
		assertFalse(x.isFull());
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test13417() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(-339596337);
    }
    @Test
    public void test13418() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test13419() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
		y.dequeue();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test13420() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.enqueue(851973725);
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test13421() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(2025634270);
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.enqueue(-948394532);
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test13422() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(2018587501);
		y.enqueue(-2086891963);
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test13423() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test13424() {
		Queue x = new Queue();
		x.enqueue(1344487662);
		x.enqueue(-573272444);
		x.isEmpty();
		x.isEmpty();
		assertEquals("[1344487662]", x.toString());
		x.isFull();
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(-768170195);
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.toString();
		x.enqueue(1736586522);
    }
    @Test
    public void test13425() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.isEmpty();
		x.toString();
		x.toString();
    }
    @Test
    public void test13426() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test13427() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.dequeue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test13428() {
		Queue y = new Queue();
		y.dequeue();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isFull();
		y.toString();
		y.dequeue();
		y.enqueue(1412414216);
		y.toString();
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
		y.toString();
    }
    @Test
    public void test13429() {
		Queue Var = new Queue();
		Var.enqueue(1646852607);
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(219206919);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(-1577012828);
    }
    @Test
    public void test13430() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		assertFalse(y.isFull());
		y.toString();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.toString();
		y.enqueue(231654659);
		y.dequeue();
		y.toString();
		y.isEmpty();
		y.enqueue(438361389);
    }
    @Test
    public void test13431() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test13432() {
		Queue Var = new Queue();
		Var.enqueue(1530029706);
		Var.toString();
		assertEquals(1530029706, Var.dequeue());
		Var.isFull();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test13433() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test13434() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test13435() {
		Queue x = new Queue();
		x.enqueue(-1383264065);
		x.isFull();
		x.enqueue(1156060322);
		x.isEmpty();
		x.enqueue(-25769339);
		assertFalse(x.isEmpty());
		x.toString();
		x.enqueue(-1263051252);
    }
    @Test
    public void test13436() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.enqueue(679068141);
		assertEquals(679068141, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.enqueue(1429659888);
		Var.toString();
    }
    @Test
    public void test13437() {
		Queue x = new Queue();
		x.enqueue(486814843);
		assertFalse(x.isEmpty());
		x.dequeue();
		x.enqueue(1135425214);
		x.enqueue(-2096344687);
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test13438() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(954444333);
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test13439() {
		Queue y = new Queue();
		y.enqueue(1670992860);
		assertFalse(y.isFull());
		assertFalse(y.isEmpty());
		y.toString();
		y.enqueue(-1853660117);
		y.toString();
		y.isEmpty();
		y.toString();
		y.toString();
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(1475856093);
		y.dequeue();
    }
    @Test
    public void test13440() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(-561807680);
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test13441() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.enqueue(402497095);
		x.isFull();
    }
    @Test
    public void test13442() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.enqueue(1944735368);
		x.enqueue(2023305664);
    }
    @Test
    public void test13443() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-380653962);
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test13444() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test13445() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.enqueue(-256042068);
		variable.isEmpty();
		variable.enqueue(871328511);
    }
    @Test
    public void test13446() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-81597249);
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.enqueue(376683700);
		x.toString();
		x.isFull();
		x.enqueue(-1788410361);
		x.isFull();
    }
    @Test
    public void test13447() {
		Queue x = new Queue();
		x.enqueue(-1614020311);
		x.isFull();
		x.enqueue(750169408);
		x.dequeue();
    }
    @Test
    public void test13448() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test13449() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.toString();
		x.dequeue();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.toString();
		x.toString();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.enqueue(-851759079);
    }
    @Test
    public void test13450() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.isFull();
		z.dequeue();
		z.isEmpty();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test13451() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(612409612);
		z.toString();
		z.isEmpty();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test13452() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test13453() {
		Queue z = new Queue();
		z.enqueue(-8844118);
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.enqueue(741698666);
		z.enqueue(947273851);
		assertFalse(z.isFull());
		z.toString();
		z.dequeue();
		z.enqueue(1963630275);
		assertEquals("[947273851, 1963630275]", z.toString());
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(-649159941);
		assertFalse(z.isEmpty());
		z.dequeue();
		z.toString();
    }
    @Test
    public void test13454() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(-1644837530);
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(1454834200);
		assertEquals(1454834200, x.dequeue());
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(330937305);
		assertFalse(x.isEmpty());
		x.isEmpty();
		x.enqueue(1098789898);
		x.isEmpty();
		assertFalse(x.isEmpty());
		assertFalse(x.isEmpty());
		x.enqueue(703375106);
    }
    @Test
    public void test13455() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.enqueue(-639248475);
		z.enqueue(871408263);
		z.enqueue(2113668793);
		assertEquals(871408263, z.dequeue());
		z.isEmpty();
		assertEquals("[2113668793]", z.toString());
		z.toString();
		z.dequeue();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isFull();
    }
    @Test
    public void test13456() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertTrue(x.isEmpty());
		x.enqueue(-755777608);
    }
    @Test
    public void test13457() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(123359317);
		x.dequeue();
		x.dequeue();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test13458() {
		Queue z = new Queue();
		z.enqueue(-1753226397);
		z.enqueue(-2138477997);
		z.toString();
    }
    @Test
    public void test13459() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test13460() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.toString();
		y.isFull();
		y.enqueue(1690564044);
		y.isFull();
		y.isFull();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test13461() {
		Queue z = new Queue();
		z.enqueue(-1169050592);
		z.enqueue(-1365440294);
		assertFalse(z.isFull());
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test13462() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(-2037294749);
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1992848229);
		Var.toString();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test13463() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.isEmpty();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test13464() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test13465() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test13466() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test13467() {
		Queue Var = new Queue();
		Var.enqueue(-278344058);
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test13468() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-1924630722);
		assertTrue(z.isEmpty());
		z.enqueue(-1415708170);
		z.dequeue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.enqueue(1284134597);
    }
    @Test
    public void test13469() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.enqueue(478432823);
		z.dequeue();
		z.enqueue(-1768954495);
    }
    @Test
    public void test13470() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test13471() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test13472() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test13473() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(-587510944);
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isFull();
		y.enqueue(2066599009);
		y.enqueue(1357819866);
		y.dequeue();
		y.enqueue(-600450478);
		y.enqueue(-1900784785);
    }
    @Test
    public void test13474() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.enqueue(-1696700418);
		Var.toString();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test13475() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test13476() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.enqueue(31392726);
		x.isFull();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test13477() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.isFull();
		z.enqueue(1730479360);
		z.isFull();
		assertFalse(z.isFull());
		z.toString();
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test13478() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.toString();
		Var.isFull();
		Var.enqueue(1451094162);
		Var.enqueue(1754324147);
		Var.enqueue(-1824944125);
    }
    @Test
    public void test13479() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(-1281120215);
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.enqueue(-945497779);
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test13480() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test13481() {
		Queue Var = new Queue();
		Var.enqueue(-291497973);
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.toString();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test13482() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test13483() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(817927690);
    }
    @Test
    public void test13484() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.enqueue(18144250);
		Var.isEmpty();
    }
    @Test
    public void test13485() {
		Queue z = new Queue();
		z.enqueue(1145190435);
		z.isEmpty();
		assertEquals(1145190435, z.dequeue());
		z.enqueue(-665548244);
		z.enqueue(-976611653);
    }
    @Test
    public void test13486() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(183061505);
		variable.enqueue(-951166470);
    }
    @Test
    public void test13487() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test13488() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.dequeue();
		z.enqueue(1650864695);
		z.isFull();
		assertFalse(z.isEmpty());
		assertEquals(1650864695, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test13489() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(-2070573204);
		Var.toString();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test13490() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test13491() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.enqueue(791544018);
    }
    @Test
    public void test13492() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.enqueue(772145114);
		y.toString();
		assertFalse(y.isEmpty());
		assertFalse(y.isEmpty());
		y.enqueue(2018937519);
    }
    @Test
    public void test13493() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test13494() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.enqueue(-370263429);
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test13495() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(702704965);
		z.isFull();
		z.isFull();
    }
    @Test
    public void test13496() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		variable.toString();
		variable.enqueue(-682201243);
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test13497() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(-4266359);
		Var.enqueue(-1826005355);
		Var.isEmpty();
    }
    @Test
    public void test13498() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-1275497883);
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.toString();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test13499() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.enqueue(-1533015298);
		Var.enqueue(-521184031);
		Var.enqueue(1719539063);
		Var.isEmpty();
    }
    @Test
    public void test13500() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1332075926);
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.toString();
		variable.enqueue(-121304493);
		variable.enqueue(-1978226790);
		variable.enqueue(1369930521);
		variable.enqueue(1330325985);
		variable.enqueue(662487774);
    }
    @Test
    public void test13501() {
		Queue x = new Queue();
		x.enqueue(834110916);
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test13502() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test13503() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
		y.enqueue(1495710605);
		y.enqueue(1150718671);
    }
    @Test
    public void test13504() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1586367706);
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(-1344729814);
    }
    @Test
    public void test13505() {
		Queue y = new Queue();
		y.enqueue(-755694376);
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test13506() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test13507() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-978451908);
		z.dequeue();
		z.enqueue(-1180370962);
		z.enqueue(1498597273);
		z.enqueue(-1805378890);
		z.dequeue();
		z.enqueue(1598744978);
		z.dequeue();
    }
    @Test
    public void test13508() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.toString();
		z.toString();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.toString();
		z.enqueue(1655557691);
    }
    @Test
    public void test13509() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(369113996);
		Var.enqueue(-1818900107);
		Var.isEmpty();
		Var.enqueue(560301038);
		Var.enqueue(1123488894);
		assertFalse(Var.isFull());
		Var.isFull();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test13510() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(696992275);
		z.enqueue(-644026340);
		assertFalse(z.isFull());
		z.enqueue(1554703971);
		z.toString();
		z.isFull();
		assertEquals("[696992275, 1554703971]", z.toString());
		z.isFull();
		z.isEmpty();
		z.enqueue(192422873);
    }
    @Test
    public void test13511() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(667171596);
		assertFalse(Var.isEmpty());
		Var.enqueue(-1867272128);
		Var.toString();
		Var.isEmpty();
		Var.enqueue(-454570918);
    }
    @Test
    public void test13512() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-1778749947);
		assertEquals(-1, y.dequeue());
		y.enqueue(1174373933);
		assertEquals("[1174373933]", y.toString());
		assertEquals("[1174373933]", y.toString());
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isFull();
		assertEquals("[]", y.toString());
		y.toString();
		y.enqueue(471031381);
		y.dequeue();
    }
    @Test
    public void test13513() {
		Queue z = new Queue();
		z.enqueue(1460703771);
		assertFalse(z.isFull());
		z.isEmpty();
		assertFalse(z.isEmpty());
		z.enqueue(1389157182);
		z.dequeue();
		z.enqueue(-73089853);
		z.isFull();
    }
    @Test
    public void test13514() {
		Queue Var = new Queue();
		Var.enqueue(1395154198);
		Var.toString();
		Var.toString();
		Var.toString();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test13515() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.isFull();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(1989643498);
		y.isFull();
		assertEquals(1989643498, y.dequeue());
		y.dequeue();
		y.toString();
		y.toString();
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test13516() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(1395577470);
		x.isEmpty();
		assertEquals("[1395577470]", x.toString());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(59162104);
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test13517() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test13518() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.toString();
		Var.enqueue(-617522405);
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test13519() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test13520() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isEmpty();
		z.isFull();
		assertTrue(z.isEmpty());
		z.toString();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test13521() {
		Queue y = new Queue();
		y.enqueue(-1251447408);
		y.enqueue(1643841871);
		y.isEmpty();
		y.isEmpty();
		y.dequeue();
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isFull();
		y.enqueue(1315765022);
    }
    @Test
    public void test13522() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.isFull();
		y.isFull();
    }
    @Test
    public void test13523() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.isEmpty();
		y.enqueue(39794501);
		y.toString();
		y.dequeue();
		y.toString();
		y.enqueue(-558151636);
		y.isFull();
		y.isFull();
    }
    @Test
    public void test13524() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(287155505);
    }
    @Test
    public void test13525() {
		Queue x = new Queue();
		x.enqueue(900389147);
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.enqueue(997485904);
		x.dequeue();
		x.enqueue(1564536486);
		x.enqueue(879332191);
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test13526() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test13527() {
		Queue y = new Queue();
		y.enqueue(-1957275404);
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(-471636164);
		y.toString();
		y.toString();
		y.dequeue();
		y.toString();
		y.enqueue(-551509233);
		y.isFull();
    }
    @Test
    public void test13528() {
		Queue y = new Queue();
		y.enqueue(1269072923);
		y.enqueue(-1886957214);
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
		y.toString();
		y.enqueue(-566565778);
		y.enqueue(-1270666287);
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test13529() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-639385796);
		assertEquals("[]", variable.toString());
		variable.enqueue(-935584897);
		assertEquals("[]", variable.toString());
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(1904492772);
    }
    @Test
    public void test13530() {
		Queue z = new Queue();
		z.enqueue(730528317);
		z.toString();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test13531() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test13532() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.enqueue(-501273748);
		x.enqueue(15695958);
		x.dequeue();
		x.enqueue(1107701879);
		x.isFull();
		x.isEmpty();
		x.enqueue(-861172375);
		x.isEmpty();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test13533() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.enqueue(-85650424);
    }
    @Test
    public void test13534() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-1193047798);
		variable.isFull();
		variable.enqueue(-1784475936);
		variable.enqueue(-496159173);
		variable.toString();
    }
    @Test
    public void test13535() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.toString();
    }
    @Test
    public void test13536() {
		Queue Var = new Queue();
		Var.enqueue(-1069760706);
		Var.isFull();
    }
    @Test
    public void test13537() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-902270345);
		x.enqueue(-1468853414);
		x.toString();
		x.isFull();
		x.dequeue();
		x.enqueue(1213639416);
    }
    @Test
    public void test13538() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.toString();
		x.dequeue();
		x.dequeue();
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test13539() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test13540() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.enqueue(-327244877);
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(-83656495);
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.enqueue(878073565);
    }
    @Test
    public void test13541() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		variable.enqueue(2062177156);
		variable.toString();
		variable.toString();
		variable.dequeue();
		variable.isFull();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test13542() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.toString();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test13543() {
		Queue y = new Queue();
		y.enqueue(-1168207900);
		y.isEmpty();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.enqueue(-1484088872);
    }
    @Test
    public void test13544() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.toString();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test13545() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1216880769);
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(1949878911);
		Var.toString();
		Var.dequeue();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test13546() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test13547() {
		Queue y = new Queue();
		y.toString();
		assertTrue(y.isEmpty());
		y.toString();
		y.dequeue();
		y.isFull();
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(-1863996937);
    }
    @Test
    public void test13548() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.isFull();
		Var.enqueue(-1143217291);
    }
    @Test
    public void test13549() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.toString();
		variable.enqueue(725730650);
		variable.enqueue(1350808083);
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test13550() {
		Queue Var = new Queue();
		Var.dequeue();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test13551() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test13552() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.toString();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.dequeue();
		Var.enqueue(1599631867);
    }
    @Test
    public void test13553() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.enqueue(1818465750);
    }
    @Test
    public void test13554() {
		Queue y = new Queue();
		y.enqueue(-1056824068);
		assertEquals(-1, y.dequeue());
		y.enqueue(-2142649465);
    }
    @Test
    public void test13555() {
		Queue z = new Queue();
		z.enqueue(-944953970);
		assertEquals("[]", z.toString());
		z.toString();
		z.isFull();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.enqueue(-322019472);
		assertFalse(z.isFull());
		z.enqueue(1036013717);
		assertEquals(1036013717, z.dequeue());
		z.isFull();
    }
    @Test
    public void test13556() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.dequeue();
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		assertFalse(z.isFull());
		z.toString();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.isFull();
		z.enqueue(-1463095673);
		z.enqueue(1378042855);
    }
    @Test
    public void test13557() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.enqueue(245047851);
		z.dequeue();
		z.enqueue(1578373688);
		z.isFull();
		z.toString();
		z.enqueue(1735814637);
		z.toString();
    }
    @Test
    public void test13558() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(1973283347);
		assertEquals(1973283347, z.dequeue());
		z.isEmpty();
		z.enqueue(1586228277);
		z.isFull();
		assertFalse(z.isFull());
		assertEquals(1586228277, z.dequeue());
		z.dequeue();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.enqueue(-1113134706);
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test13559() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.enqueue(187787228);
		Var.isEmpty();
		Var.enqueue(2064907978);
		Var.isFull();
		Var.isFull();
		assertEquals("[187787228, 2064907978]", Var.toString());
		assertEquals(187787228, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test13560() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.toString();
		z.isFull();
		z.isFull();
		z.isFull();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test13561() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-2111450177);
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test13562() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(-1078315699);
		variable.enqueue(-1742416927);
		variable.enqueue(271155447);
		assertFalse(variable.isFull());
		assertFalse(variable.isEmpty());
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		assertEquals(271155447, variable.dequeue());
		variable.dequeue();
    }
    @Test
    public void test13563() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(2023195636);
		x.isFull();
		x.dequeue();
		x.enqueue(-1470646330);
		x.toString();
    }
    @Test
    public void test13564() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.dequeue();
		y.isFull();
		y.enqueue(-1217659211);
		assertEquals("[]", y.toString());
		y.enqueue(890901902);
		y.enqueue(1371984824);
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test13565() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test13566() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test13567() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(-60081037);
		z.isFull();
		z.isEmpty();
		z.enqueue(-2072838591);
		z.toString();
		z.dequeue();
		z.enqueue(-807990764);
		assertFalse(z.isFull());
		z.enqueue(-1220554992);
		z.toString();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test13568() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.enqueue(-622179063);
		z.enqueue(1671974988);
		z.toString();
		z.enqueue(-811435041);
		assertEquals("[1671974988]", z.toString());
		assertFalse(z.isEmpty());
		z.dequeue();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isEmpty();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test13569() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1540073858);
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test13570() {
		Queue y = new Queue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(1198156379);
    }
    @Test
    public void test13571() {
		Queue x = new Queue();
		x.enqueue(-852276114);
		x.enqueue(1913800922);
		x.isEmpty();
		x.dequeue();
		x.toString();
		x.toString();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.toString();
		x.isFull();
    }
    @Test
    public void test13572() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1421623928);
		variable.enqueue(-449066832);
    }
    @Test
    public void test13573() {
		Queue z = new Queue();
		z.enqueue(-528118290);
		z.enqueue(870897707);
		z.enqueue(-180809464);
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-1831066697);
    }
    @Test
    public void test13574() {
		Queue y = new Queue();
		y.toString();
		y.toString();
    }
    @Test
    public void test13575() {
		Queue variable = new Queue();
		variable.enqueue(1074267415);
		variable.enqueue(-819291955);
    }
    @Test
    public void test13576() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.toString();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.dequeue();
		z.enqueue(-1548142686);
    }
    @Test
    public void test13577() {
		Queue Var = new Queue();
		Var.enqueue(-81598849);
		Var.enqueue(1268287923);
		Var.isEmpty();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test13578() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(1113060016);
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test13579() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(-1316335599);
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test13580() {
		Queue z = new Queue();
		z.enqueue(2108553491);
		z.toString();
		z.isFull();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test13581() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.enqueue(1565407827);
		x.dequeue();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.enqueue(-980528760);
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(1197040468);
    }
    @Test
    public void test13582() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(2126401968);
		x.isEmpty();
    }
    @Test
    public void test13583() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isEmpty();
		x.isFull();
		x.enqueue(-1181843684);
		x.enqueue(-711128696);
		x.dequeue();
    }
    @Test
    public void test13584() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.isFull();
		z.isEmpty();
		z.enqueue(-1429246151);
		z.toString();
    }
    @Test
    public void test13585() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.isEmpty();
		z.isFull();
		assertFalse(z.isFull());
		z.enqueue(966028777);
		z.dequeue();
		z.toString();
		z.dequeue();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test13586() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
		z.isFull();
		z.isEmpty();
		z.isFull();
		z.isFull();
		z.enqueue(227753850);
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test13587() {
		Queue z = new Queue();
		z.enqueue(-738839903);
		z.dequeue();
		assertTrue(z.isEmpty());
		z.enqueue(-1662515607);
		z.enqueue(264265954);
		z.isFull();
		z.enqueue(-621600804);
		z.enqueue(1410481267);
		z.dequeue();
		z.enqueue(489064910);
		z.isEmpty();
    }
    @Test
    public void test13588() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
		variable.enqueue(741917437);
		assertEquals("[741917437]", variable.toString());
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test13589() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(1071487598);
		x.toString();
		assertFalse(x.isEmpty());
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test13590() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.enqueue(-638982247);
		x.dequeue();
		x.enqueue(-1714509479);
		assertEquals("[]", x.toString());
		x.enqueue(-1965431420);
		x.enqueue(1266784510);
		x.enqueue(-429681131);
		x.toString();
    }
    @Test
    public void test13591() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.dequeue();
		x.enqueue(-678489213);
    }
    @Test
    public void test13592() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(1532436399);
		Var.enqueue(-569571145);
		Var.toString();
		Var.enqueue(-1509114522);
		Var.dequeue();
		Var.isFull();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test13593() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.toString();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.toString();
		z.isEmpty();
		z.isFull();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test13594() {
		Queue y = new Queue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test13595() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test13596() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.toString();
		z.enqueue(-570171650);
		z.enqueue(-1847713256);
		z.isFull();
		assertEquals("[]", z.toString());
		z.enqueue(-1244620489);
		z.isEmpty();
		z.enqueue(652442413);
		z.toString();
		z.isEmpty();
		z.enqueue(-449390358);
    }
    @Test
    public void test13597() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(118153017);
		Var.enqueue(-1488688136);
		Var.dequeue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(266895377);
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test13598() {
		Queue Var = new Queue();
		Var.enqueue(1146745790);
		assertEquals("[1146745790]", Var.toString());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.enqueue(1335133847);
		Var.toString();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test13599() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-1011840326);
		assertEquals("[]", x.toString());
		x.dequeue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test13600() {
		Queue variable = new Queue();
		variable.enqueue(172606960);
		variable.enqueue(1035024618);
		variable.isEmpty();
		assertEquals(172606960, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test13601() {
		Queue variable = new Queue();
		variable.enqueue(1251788007);
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test13602() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(1884440733);
    }
    @Test
    public void test13603() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(2131628319);
    }
    @Test
    public void test13604() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test13605() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(1458702735);
		Var.enqueue(-1851016413);
		Var.isFull();
		Var.enqueue(-2079823770);
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test13606() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(1659239758);
		variable.isFull();
		variable.toString();
		assertFalse(variable.isFull());
		variable.toString();
		assertEquals("[1659239758]", variable.toString());
		variable.enqueue(-240359393);
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test13607() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test13608() {
		Queue Var = new Queue();
		Var.toString();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test13609() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(-540770458);
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test13610() {
		Queue y = new Queue();
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(1018535014);
		y.dequeue();
    }
    @Test
    public void test13611() {
		Queue variable = new Queue();
		variable.enqueue(-1927900523);
		variable.enqueue(-365221623);
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test13612() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.isFull();
		y.enqueue(-1237428887);
    }
    @Test
    public void test13613() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.enqueue(859594047);
		x.enqueue(-1560353659);
		x.isEmpty();
		x.isEmpty();
		assertEquals(859594047, x.dequeue());
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test13614() {
		Queue y = new Queue();
		y.enqueue(-1985385073);
    }
    @Test
    public void test13615() {
		Queue z = new Queue();
		z.enqueue(-33580929);
    }
    @Test
    public void test13616() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test13617() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test13618() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.enqueue(-982828907);
		y.dequeue();
		y.enqueue(1344775572);
		y.isFull();
		assertFalse(y.isEmpty());
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test13619() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(1154290199);
		y.enqueue(-948873638);
		assertEquals("[1154290199]", y.toString());
		assertFalse(y.isEmpty());
		y.dequeue();
		y.isFull();
		y.toString();
    }
    @Test
    public void test13620() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test13621() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.isFull();
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.isFull();
    }
    @Test
    public void test13622() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(-602278628);
		x.toString();
    }
    @Test
    public void test13623() {
		Queue variable = new Queue();
		variable.enqueue(-1769743817);
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(-548208245);
		variable.enqueue(923131306);
    }
    @Test
    public void test13624() {
		Queue y = new Queue();
		y.enqueue(-1741461940);
		y.dequeue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.enqueue(751892198);
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test13625() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(-308952015);
		z.isEmpty();
		z.enqueue(2124505326);
		z.isEmpty();
    }
    @Test
    public void test13626() {
		Queue Var = new Queue();
		Var.enqueue(-639094476);
    }
    @Test
    public void test13627() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test13628() {
		Queue Var = new Queue();
		Var.enqueue(624620154);
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test13629() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(1335319627);
		z.enqueue(-337662662);
		z.isFull();
		z.enqueue(-1936062962);
		z.dequeue();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.enqueue(1448980734);
		assertFalse(z.isEmpty());
		assertEquals(1448980734, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.toString();
    }
    @Test
    public void test13630() {
		Queue z = new Queue();
		z.enqueue(67127035);
		z.isFull();
		z.dequeue();
		z.toString();
		z.toString();
		z.enqueue(-934970756);
		z.dequeue();
    }
    @Test
    public void test13631() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(1422918215);
		x.isEmpty();
		x.enqueue(19610499);
		x.enqueue(-805487657);
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test13632() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.toString();
		Var.toString();
		Var.isFull();
		Var.toString();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test13633() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.isEmpty();
    }
    @Test
    public void test13634() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(894257710);
		assertFalse(z.isEmpty());
		z.isEmpty();
		z.enqueue(75536588);
		assertFalse(z.isEmpty());
		z.isEmpty();
		z.isFull();
		z.toString();
		z.isEmpty();
		z.toString();
		assertFalse(z.isEmpty());
		z.enqueue(158485867);
    }
    @Test
    public void test13635() {
		Queue variable = new Queue();
		variable.enqueue(-1541547864);
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.enqueue(-1253328525);
		variable.isFull();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.toString();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test13636() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test13637() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-1638351489);
		y.isFull();
		y.isFull();
		y.toString();
		y.enqueue(-785479154);
		y.dequeue();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isFull();
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test13638() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test13639() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		z.enqueue(894491383);
		z.enqueue(-252334249);
		z.isFull();
    }
    @Test
    public void test13640() {
		Queue z = new Queue();
		z.enqueue(-485537591);
    }
    @Test
    public void test13641() {
		Queue x = new Queue();
		x.toString();
		assertTrue(x.isEmpty());
		x.toString();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(-716537100);
		x.enqueue(1100891148);
		x.isEmpty();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test13642() {
		Queue Var = new Queue();
		Var.enqueue(-714309264);
    }
    @Test
    public void test13643() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isEmpty();
    }
    @Test
    public void test13644() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.isEmpty();
		z.enqueue(1654209411);
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test13645() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test13646() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.toString();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test13647() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(143092212);
		assertEquals(143092212, z.dequeue());
		z.enqueue(751599973);
		assertFalse(z.isFull());
		z.toString();
    }
    @Test
    public void test13648() {
		Queue x = new Queue();
		x.enqueue(281553902);
		assertEquals("[281553902]", x.toString());
		x.enqueue(205769526);
		x.dequeue();
		x.enqueue(-861334547);
		assertFalse(x.isFull());
		assertFalse(x.isEmpty());
		x.isFull();
		x.enqueue(-636664514);
		assertEquals("[205769526]", x.toString());
		assertEquals(205769526, x.dequeue());
		x.enqueue(630475816);
		x.isEmpty();
    }
    @Test
    public void test13649() {
		Queue variable = new Queue();
		variable.enqueue(-1472675695);
		variable.enqueue(-982500271);
		variable.dequeue();
		variable.toString();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(2060300787);
		assertFalse(variable.isFull());
		variable.enqueue(140151638);
		variable.toString();
		variable.isEmpty();
		assertEquals("[2060300787, 140151638]", variable.toString());
		assertFalse(variable.isFull());
		assertEquals("[2060300787, 140151638]", variable.toString());
		variable.toString();
    }
    @Test
    public void test13650() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(-35751779);
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test13651() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-1507666606);
		z.isEmpty();
		z.enqueue(218660908);
		assertEquals("[218660908]", z.toString());
		assertEquals("[218660908]", z.toString());
		z.dequeue();
		z.toString();
		z.enqueue(-1611562088);
    }
    @Test
    public void test13652() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test13653() {
		Queue x = new Queue();
		x.isFull();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.isEmpty();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(-574195505);
		x.isFull();
    }
    @Test
    public void test13654() {
		Queue x = new Queue();
		x.enqueue(-1400429791);
		x.enqueue(-665482446);
		assertEquals("[]", x.toString());
		x.enqueue(851214201);
		assertEquals("[851214201]", x.toString());
		x.toString();
		x.toString();
		x.isEmpty();
		x.toString();
		assertEquals(851214201, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test13655() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.enqueue(-56450972);
		y.dequeue();
    }
    @Test
    public void test13656() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1622350598);
		variable.dequeue();
		variable.enqueue(24993017);
    }
    @Test
    public void test13657() {
		Queue y = new Queue();
		y.enqueue(1221625087);
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		assertEquals(1221625087, y.dequeue());
		y.isFull();
		y.isFull();
		assertTrue(y.isEmpty());
		y.toString();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.enqueue(69433457);
		assertFalse(y.isEmpty());
		y.isFull();
		assertFalse(y.isEmpty());
		assertEquals(69433457, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
		y.enqueue(-2128384426);
    }
    @Test
    public void test13658() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-2101003197);
		variable.enqueue(1725885173);
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test13659() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test13660() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-1078436419);
		y.enqueue(-877926169);
		y.enqueue(2012306158);
		assertFalse(y.isFull());
		assertEquals(2012306158, y.dequeue());
		y.dequeue();
		y.enqueue(-932639014);
		y.enqueue(-923676873);
		y.enqueue(-181989776);
		y.toString();
    }
    @Test
    public void test13661() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.isFull();
    }
    @Test
    public void test13662() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.isFull();
		x.enqueue(23953402);
		assertFalse(x.isEmpty());
		x.isEmpty();
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(-41470348);
		x.enqueue(368187897);
    }
    @Test
    public void test13663() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.enqueue(-824864559);
		assertFalse(x.isFull());
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test13664() {
		Queue variable = new Queue();
		variable.enqueue(-1324823083);
		variable.toString();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.toString();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(1397821386);
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test13665() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.enqueue(1522980161);
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test13666() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.enqueue(2079039389);
		variable.toString();
    }
    @Test
    public void test13667() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(-1111320873);
		y.toString();
		y.isFull();
		assertTrue(y.isEmpty());
		y.enqueue(-2051913243);
		y.enqueue(1566770316);
		y.enqueue(1887953078);
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test13668() {
		Queue Var = new Queue();
		Var.enqueue(-667689654);
		Var.dequeue();
		Var.enqueue(1174950918);
		Var.dequeue();
    }
    @Test
    public void test13669() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.toString();
		y.isFull();
    }
    @Test
    public void test13670() {
		Queue z = new Queue();
		z.enqueue(1441794041);
    }
    @Test
    public void test13671() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(1254596324);
		z.toString();
		z.toString();
		z.isFull();
		z.enqueue(164984882);
		z.isEmpty();
		z.enqueue(1083114552);
    }
    @Test
    public void test13672() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.enqueue(981603866);
		y.isFull();
		y.enqueue(1294580845);
		y.isFull();
		assertFalse(y.isEmpty());
		y.toString();
    }
    @Test
    public void test13673() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.enqueue(1160876194);
		y.dequeue();
		y.enqueue(695575383);
		assertEquals("[695575383]", y.toString());
		y.enqueue(-1918979086);
		assertFalse(y.isEmpty());
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
		assertFalse(y.isEmpty());
		y.enqueue(832799268);
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test13674() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(33359715);
		Var.enqueue(-555681389);
		Var.enqueue(-265150631);
		Var.dequeue();
		Var.enqueue(-56002186);
    }
    @Test
    public void test13675() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(1634806346);
    }
    @Test
    public void test13676() {
		Queue x = new Queue();
		x.enqueue(1680545557);
		x.isFull();
		x.enqueue(1884853313);
		x.dequeue();
		x.toString();
		x.enqueue(-645870963);
		x.enqueue(202594330);
		x.toString();
		x.toString();
    }
    @Test
    public void test13677() {
		Queue z = new Queue();
		z.enqueue(922775189);
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(554520372);
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		z.toString();
		z.isEmpty();
		assertFalse(z.isEmpty());
		z.enqueue(-1539292749);
    }
    @Test
    public void test13678() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isEmpty();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(-617490013);
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.toString();
		y.toString();
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
    }
    @Test
    public void test13679() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test13680() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test13681() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		z.isFull();
		z.enqueue(1587366066);
		z.isFull();
    }
    @Test
    public void test13682() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1515021493);
		variable.isFull();
		variable.enqueue(-294869112);
		variable.enqueue(-1123186714);
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test13683() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test13684() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test13685() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(-391597109);
		z.dequeue();
		z.isFull();
		assertEquals("[]", z.toString());
		z.enqueue(-1283868878);
		assertTrue(z.isEmpty());
		z.isFull();
		z.toString();
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test13686() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(1059199293);
		y.enqueue(-255799465);
		y.toString();
		y.dequeue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(1090929676);
		y.isFull();
    }
    @Test
    public void test13687() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test13688() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1342797302);
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.enqueue(557396876);
		z.isEmpty();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test13689() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1296065517);
		assertEquals("[1296065517]", x.toString());
		x.toString();
    }
    @Test
    public void test13690() {
		Queue variable = new Queue();
		variable.enqueue(-1918796647);
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test13691() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test13692() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isFull();
		x.enqueue(1032414218);
		x.enqueue(1364038980);
    }
    @Test
    public void test13693() {
		Queue variable = new Queue();
		variable.enqueue(-1563584948);
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isFull();
		variable.toString();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test13694() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(741239436);
		assertFalse(x.isEmpty());
		x.enqueue(109811420);
		x.isEmpty();
		x.enqueue(-1394093101);
		x.toString();
		assertFalse(x.isFull());
		x.enqueue(-1612892025);
		x.isEmpty();
    }
    @Test
    public void test13695() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1127880563);
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.enqueue(1215878187);
    }
    @Test
    public void test13696() {
		Queue x = new Queue();
		x.enqueue(635628787);
		x.isFull();
		x.toString();
		assertEquals("[635628787]", x.toString());
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test13697() {
		Queue Var = new Queue();
		Var.enqueue(1959217247);
		Var.toString();
		Var.enqueue(116559868);
		Var.dequeue();
		Var.enqueue(-199625213);
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test13698() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
    }
    @Test
    public void test13699() {
		Queue z = new Queue();
		z.enqueue(1610948882);
		assertEquals(1610948882, z.dequeue());
		z.enqueue(2036938572);
		z.enqueue(-1629567604);
		assertEquals("[2036938572]", z.toString());
		z.dequeue();
		z.enqueue(1549049712);
		assertEquals(1549049712, z.dequeue());
		assertFalse(z.isFull());
		z.dequeue();
		z.toString();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test13700() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.enqueue(653852588);
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test13701() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.toString();
		y.toString();
		y.toString();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test13702() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-491885727);
		Var.isFull();
		Var.enqueue(312614832);
		Var.isFull();
		Var.isFull();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test13703() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
    }
    @Test
    public void test13704() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.toString();
		y.isFull();
		y.enqueue(-793341690);
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(844559307);
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.isFull();
    }
    @Test
    public void test13705() {
		Queue x = new Queue();
		x.enqueue(420422087);
		x.toString();
    }
    @Test
    public void test13706() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.isFull();
		assertEquals("[]", x.toString());
		x.enqueue(1151023769);
    }
    @Test
    public void test13707() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test13708() {
		Queue Var = new Queue();
		Var.enqueue(1415447925);
    }
    @Test
    public void test13709() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(2143955482);
		variable.toString();
		assertEquals(2143955482, variable.dequeue());
		variable.toString();
		variable.isEmpty();
		variable.enqueue(547872462);
		variable.isEmpty();
		assertEquals("[547872462]", variable.toString());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test13710() {
		Queue variable = new Queue();
		variable.enqueue(-1185424004);
    }
    @Test
    public void test13711() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(-1080040421);
		variable.isFull();
		variable.enqueue(-589815365);
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(-2090464872);
		assertFalse(variable.isFull());
		variable.enqueue(1097416007);
		variable.enqueue(1314174619);
		variable.isFull();
    }
    @Test
    public void test13712() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
		z.isFull();
		z.toString();
		z.dequeue();
		z.toString();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test13713() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.enqueue(1293313993);
		z.isFull();
    }
    @Test
    public void test13714() {
		Queue x = new Queue();
		x.enqueue(-985873387);
		x.toString();
    }
    @Test
    public void test13715() {
		Queue x = new Queue();
		x.enqueue(330366456);
		x.toString();
    }
    @Test
    public void test13716() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isFull();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test13717() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(1308852609);
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test13718() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test13719() {
		Queue Var = new Queue();
		Var.enqueue(-2124946138);
		Var.dequeue();
		Var.enqueue(-860699531);
		Var.enqueue(-159080765);
		Var.dequeue();
    }
    @Test
    public void test13720() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test13721() {
		Queue Var = new Queue();
		Var.enqueue(-245222201);
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isFull();
		Var.enqueue(1243104230);
		Var.isEmpty();
		Var.enqueue(-588877087);
		Var.enqueue(-1433592158);
		Var.dequeue();
    }
    @Test
    public void test13722() {
		Queue y = new Queue();
		y.enqueue(321926418);
		y.isFull();
		y.dequeue();
		y.enqueue(-1579633785);
		y.dequeue();
		y.dequeue();
		y.enqueue(-1323960682);
		assertFalse(y.isFull());
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test13723() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(1186125167);
		Var.toString();
    }
    @Test
    public void test13724() {
		Queue Var = new Queue();
		Var.enqueue(-2025759336);
		Var.enqueue(-958427912);
		assertEquals("[]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-249502482);
		Var.enqueue(2061286197);
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(-305891759);
		Var.isEmpty();
    }
    @Test
    public void test13725() {
		Queue variable = new Queue();
		variable.enqueue(202472954);
		variable.enqueue(-1371887494);
		variable.toString();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(553640322);
		variable.enqueue(-1387221019);
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test13726() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		variable.toString();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test13727() {
		Queue x = new Queue();
		x.enqueue(1086394349);
		x.isFull();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.enqueue(-2122666758);
		x.isFull();
    }
    @Test
    public void test13728() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1707377622);
		x.dequeue();
		x.enqueue(1788812255);
		x.dequeue();
		x.isFull();
		x.isFull();
		x.enqueue(99836307);
    }
    @Test
    public void test13729() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-882053850);
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test13730() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.enqueue(-1851408642);
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(1506245941);
		Var.isFull();
		Var.dequeue();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test13731() {
		Queue z = new Queue();
		z.enqueue(-1653680051);
		z.isEmpty();
		z.isFull();
		z.enqueue(-917803446);
    }
    @Test
    public void test13732() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.toString();
    }
    @Test
    public void test13733() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
		assertFalse(z.isFull());
		z.isFull();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test13734() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		assertTrue(z.isEmpty());
		z.dequeue();
		assertTrue(z.isEmpty());
		z.enqueue(799434245);
		assertFalse(z.isFull());
		z.toString();
		z.toString();
		z.dequeue();
		z.enqueue(1529907144);
		z.isEmpty();
    }
    @Test
    public void test13735() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test13736() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test13737() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.enqueue(1739051147);
		assertFalse(x.isFull());
		assertFalse(x.isEmpty());
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test13738() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-362467625);
		variable.enqueue(293877901);
		variable.enqueue(-2033807232);
		assertFalse(variable.isFull());
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(1726459638);
		assertFalse(variable.isEmpty());
		assertEquals(1726459638, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.enqueue(1640205804);
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test13739() {
		Queue x = new Queue();
		x.isFull();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.enqueue(1126104637);
		x.isFull();
		assertEquals("[1126104637]", x.toString());
		x.isEmpty();
		x.toString();
		assertEquals(1126104637, x.dequeue());
		x.isEmpty();
		x.enqueue(-1444885744);
    }
    @Test
    public void test13740() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.enqueue(-2016615493);
    }
    @Test
    public void test13741() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test13742() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test13743() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.enqueue(328913206);
		z.isFull();
		z.enqueue(1364293005);
    }
    @Test
    public void test13744() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
		assertFalse(variable.isFull());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-63529704);
    }
    @Test
    public void test13745() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test13746() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.enqueue(-1402772540);
		variable.isEmpty();
    }
    @Test
    public void test13747() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test13748() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test13749() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test13750() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(1535754215);
		assertFalse(variable.isFull());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.dequeue();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test13751() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(-414317625);
		variable.dequeue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test13752() {
		Queue y = new Queue();
		y.enqueue(-1993141291);
		y.isEmpty();
		y.toString();
		y.toString();
		y.enqueue(1090806083);
		y.enqueue(-1627356184);
		y.enqueue(-2014185260);
		y.enqueue(993284999);
		y.dequeue();
    }
    @Test
    public void test13753() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.isEmpty();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.toString();
		x.isFull();
		x.toString();
		assertEquals("[]", x.toString());
		x.isFull();
		assertEquals("[]", x.toString());
		x.toString();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test13754() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.enqueue(1323611651);
		x.enqueue(2077034145);
		x.isEmpty();
    }
    @Test
    public void test13755() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.enqueue(-2034929363);
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-1355362884);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test13756() {
		Queue y = new Queue();
		y.enqueue(792955374);
		y.enqueue(1024674137);
    }
    @Test
    public void test13757() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isFull();
    }
    @Test
    public void test13758() {
		Queue variable = new Queue();
		variable.enqueue(-114193643);
		variable.enqueue(713235048);
		variable.enqueue(-1537428589);
		variable.enqueue(-1554996361);
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-517575260);
		variable.enqueue(1580411848);
		variable.dequeue();
    }
    @Test
    public void test13759() {
		Queue x = new Queue();
		x.enqueue(458698961);
		x.enqueue(1209589432);
		assertFalse(x.isEmpty());
		x.enqueue(1971680509);
		x.isEmpty();
		x.enqueue(-1531377791);
		x.isFull();
    }
    @Test
    public void test13760() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isEmpty();
		Var.toString();
		Var.enqueue(-1875914740);
    }
    @Test
    public void test13761() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-252107301);
		Var.enqueue(-774533264);
    }
    @Test
    public void test13762() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		assertTrue(y.isEmpty());
		y.toString();
		y.isEmpty();
		y.dequeue();
		y.enqueue(-392181071);
		assertTrue(y.isEmpty());
		y.toString();
    }
    @Test
    public void test13763() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-819717699);
		variable.toString();
    }
    @Test
    public void test13764() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test13765() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(318893077);
		assertFalse(z.isEmpty());
		z.enqueue(2036597576);
		z.isFull();
    }
    @Test
    public void test13766() {
		Queue Var = new Queue();
		Var.enqueue(-1281895916);
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(1611835348);
		Var.enqueue(450207469);
		Var.enqueue(-211045063);
		Var.isFull();
		Var.isFull();
		Var.isFull();
		Var.enqueue(293968191);
    }
    @Test
    public void test13767() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.enqueue(-460168134);
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1803021051);
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(-764728422);
    }
    @Test
    public void test13768() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.enqueue(-590823464);
		y.isFull();
		y.enqueue(1813079223);
		assertEquals(1813079223, y.dequeue());
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.enqueue(226327466);
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test13769() {
		Queue y = new Queue();
		y.enqueue(666035607);
		y.isEmpty();
		y.toString();
		y.isFull();
    }
    @Test
    public void test13770() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test13771() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.toString();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(-1557836277);
    }
    @Test
    public void test13772() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.dequeue();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.toString();
		y.toString();
    }
    @Test
    public void test13773() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test13774() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.enqueue(851784222);
		variable.enqueue(397948081);
		variable.enqueue(-1057792137);
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test13775() {
		Queue z = new Queue();
		z.enqueue(-1552871915);
		z.toString();
		z.enqueue(862079083);
		z.dequeue();
    }
    @Test
    public void test13776() {
		Queue variable = new Queue();
		variable.enqueue(2038511036);
		assertEquals(2038511036, variable.dequeue());
		variable.enqueue(1666483764);
		assertEquals(1666483764, variable.dequeue());
		variable.isEmpty();
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(-1675689740);
		variable.dequeue();
    }
    @Test
    public void test13777() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.toString();
		z.toString();
		z.isEmpty();
		z.enqueue(-471774757);
    }
    @Test
    public void test13778() {
		Queue variable = new Queue();
		variable.enqueue(-2097072722);
		variable.enqueue(-1054498579);
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.enqueue(-1598456062);
    }
    @Test
    public void test13779() {
		Queue x = new Queue();
		x.enqueue(181594457);
		assertEquals(181594457, x.dequeue());
		assertFalse(x.isFull());
		x.isFull();
		x.toString();
    }
    @Test
    public void test13780() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-525709282);
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1810927635);
		variable.enqueue(-1337682447);
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test13781() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(-2096141839);
		variable.enqueue(-335516793);
    }
    @Test
    public void test13782() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-975432320);
		variable.isFull();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.enqueue(1098293246);
    }
    @Test
    public void test13783() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test13784() {
		Queue y = new Queue();
		y.enqueue(-699952249);
		y.enqueue(-2042940838);
		y.toString();
		y.toString();
		y.isFull();
		y.toString();
		y.enqueue(-121381498);
		y.enqueue(444784553);
    }
    @Test
    public void test13785() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test13786() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test13787() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		y.enqueue(-711544110);
		y.enqueue(861347933);
		assertFalse(y.isEmpty());
		assertFalse(y.isEmpty());
		y.dequeue();
    }
    @Test
    public void test13788() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.enqueue(-1604209320);
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test13789() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-772196825);
		z.toString();
		z.enqueue(813847347);
		z.toString();
		z.toString();
		z.enqueue(1894489818);
    }
    @Test
    public void test13790() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test13791() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test13792() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test13793() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(682941061);
    }
    @Test
    public void test13794() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
    }
    @Test
    public void test13795() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.enqueue(986868848);
		z.dequeue();
		assertFalse(z.isFull());
		z.toString();
		assertEquals("[]", z.toString());
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test13796() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.enqueue(1958476125);
    }
    @Test
    public void test13797() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.dequeue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.enqueue(1077970007);
		assertFalse(x.isFull());
		assertEquals(1077970007, x.dequeue());
		x.enqueue(1879554149);
    }
    @Test
    public void test13798() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.dequeue();
		z.toString();
		z.enqueue(-1613672133);
		z.enqueue(-2112974214);
		z.isEmpty();
		assertFalse(z.isFull());
		z.isFull();
		z.dequeue();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test13799() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-45156227);
		Var.toString();
		Var.enqueue(617800118);
		Var.toString();
    }
    @Test
    public void test13800() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test13801() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
		y.toString();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.enqueue(248470779);
    }
    @Test
    public void test13802() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-524469568);
    }
    @Test
    public void test13803() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.toString();
		x.isFull();
		x.isFull();
		x.enqueue(1058428052);
		x.isFull();
		x.toString();
    }
    @Test
    public void test13804() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(1210966109);
		z.isFull();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.enqueue(223982662);
    }
    @Test
    public void test13805() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-1146272481);
		Var.dequeue();
		Var.enqueue(-702730779);
		Var.toString();
		Var.enqueue(-1364321465);
		Var.dequeue();
    }
    @Test
    public void test13806() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isFull();
		z.isEmpty();
		z.toString();
		z.isFull();
		assertEquals("[]", z.toString());
		z.dequeue();
    }
    @Test
    public void test13807() {
		Queue Var = new Queue();
		Var.enqueue(99953577);
    }
    @Test
    public void test13808() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test13809() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(475200865);
		assertEquals("[475200865]", y.toString());
		y.enqueue(-390185272);
		y.toString();
		y.enqueue(1594808472);
    }
    @Test
    public void test13810() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		z.dequeue();
		z.isEmpty();
		z.enqueue(-1848377795);
		z.toString();
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test13811() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.isFull();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.dequeue();
		assertFalse(x.isFull());
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test13812() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(910362880);
		variable.isFull();
		assertFalse(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test13813() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.enqueue(-1700905730);
		y.isFull();
		y.enqueue(-1847777649);
		y.toString();
    }
    @Test
    public void test13814() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.enqueue(-793580888);
		Var.enqueue(-1690432094);
		Var.enqueue(-45852658);
    }
    @Test
    public void test13815() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test13816() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-948136176);
    }
    @Test
    public void test13817() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.enqueue(-1173867607);
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(247642610);
		variable.toString();
		assertFalse(variable.isFull());
		assertEquals("[247642610]", variable.toString());
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test13818() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertFalse(x.isFull());
		x.isEmpty();
		x.enqueue(-309248374);
		x.toString();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(-1373762333);
    }
    @Test
    public void test13819() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test13820() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(-266919758);
		z.isEmpty();
		z.isFull();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test13821() {
		Queue y = new Queue();
		y.enqueue(-337025786);
		y.dequeue();
		y.toString();
    }
    @Test
    public void test13822() {
		Queue Var = new Queue();
		Var.enqueue(457430480);
		Var.isEmpty();
		Var.enqueue(1291500265);
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-596334202);
		Var.isFull();
    }
    @Test
    public void test13823() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test13824() {
		Queue x = new Queue();
		x.enqueue(625988073);
		x.isEmpty();
		x.enqueue(-1991769683);
		x.isEmpty();
		x.toString();
		x.enqueue(-1236133164);
		assertEquals("[625988073]", x.toString());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test13825() {
		Queue x = new Queue();
		x.enqueue(-1869344747);
		x.isEmpty();
		x.enqueue(2092006287);
		assertEquals(2092006287, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test13826() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		z.enqueue(298788055);
		z.isEmpty();
		z.toString();
		z.enqueue(1194982551);
		z.enqueue(1247758971);
    }
    @Test
    public void test13827() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.toString();
		z.enqueue(-1985991230);
		z.dequeue();
    }
    @Test
    public void test13828() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.enqueue(328751203);
		assertEquals("[328751203]", z.toString());
		assertFalse(z.isEmpty());
		assertFalse(z.isEmpty());
		assertFalse(z.isFull());
		z.toString();
		assertEquals(328751203, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test13829() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test13830() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.enqueue(-1097061015);
		z.isFull();
		z.dequeue();
		z.enqueue(-283984551);
    }
    @Test
    public void test13831() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.toString();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
		assertEquals(-1, y.dequeue());
		y.enqueue(-913768627);
		y.enqueue(-1737056329);
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test13832() {
		Queue x = new Queue();
		x.enqueue(1443037542);
		x.isFull();
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.enqueue(-558613101);
		x.isFull();
    }
    @Test
    public void test13833() {
		Queue z = new Queue();
		z.enqueue(-596416635);
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.enqueue(256848237);
		z.isFull();
		assertEquals(256848237, z.dequeue());
		z.enqueue(27023893);
		assertFalse(z.isFull());
		z.enqueue(1871248957);
		z.isFull();
		z.enqueue(1456841154);
    }
    @Test
    public void test13834() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test13835() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-772957432);
		variable.toString();
		variable.enqueue(-66196022);
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test13836() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(3804174);
		assertFalse(variable.isFull());
		variable.toString();
		assertEquals(3804174, variable.dequeue());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test13837() {
		Queue y = new Queue();
		y.toString();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.toString();
		assertTrue(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test13838() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test13839() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1562033677);
		assertFalse(variable.isFull());
		variable.enqueue(1012349473);
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(1007517037);
		variable.toString();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test13840() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test13841() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.isFull();
		x.enqueue(-145754700);
		x.isEmpty();
    }
    @Test
    public void test13842() {
		Queue y = new Queue();
		y.enqueue(685547316);
		y.dequeue();
		y.isEmpty();
		y.toString();
		assertEquals("[]", y.toString());
		y.isFull();
    }
    @Test
    public void test13843() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.isEmpty();
		z.enqueue(-1172782940);
		z.dequeue();
    }
    @Test
    public void test13844() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test13845() {
		Queue z = new Queue();
		z.isFull();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		assertFalse(z.isFull());
		z.enqueue(243970802);
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		z.enqueue(2052069787);
		z.isFull();
		z.isFull();
		z.enqueue(-11590853);
		z.isFull();
    }
    @Test
    public void test13846() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1152925497);
		Var.enqueue(1281100024);
		Var.isEmpty();
		Var.enqueue(1149613666);
		assertEquals("[1281100024, 1149613666]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test13847() {
		Queue x = new Queue();
		x.enqueue(1259480787);
		x.isEmpty();
		x.isEmpty();
		x.enqueue(465338402);
		x.toString();
		assertEquals("[1259480787, 465338402]", x.toString());
		x.isEmpty();
    }
    @Test
    public void test13848() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(1936168480);
		assertEquals("[1936168480]", Var.toString());
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.enqueue(-1762426146);
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test13849() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.isFull();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.enqueue(505824226);
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test13850() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-1755385680);
		Var.dequeue();
    }
    @Test
    public void test13851() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(630170670);
    }
    @Test
    public void test13852() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(1543367767);
    }
    @Test
    public void test13853() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-1273423517);
		variable.enqueue(-612664227);
		variable.enqueue(1790143698);
		variable.enqueue(1139859266);
		variable.enqueue(1474695917);
    }
    @Test
    public void test13854() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.isFull();
		assertEquals("[]", y.toString());
		y.enqueue(-1595408028);
		y.toString();
		y.enqueue(-870558705);
    }
    @Test
    public void test13855() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test13856() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test13857() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.enqueue(661113005);
    }
    @Test
    public void test13858() {
		Queue Var = new Queue();
		Var.enqueue(413421398);
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.isFull();
		Var.enqueue(1738303901);
		Var.enqueue(-806092869);
		assertFalse(Var.isFull());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.enqueue(-1412578127);
		Var.enqueue(-333208244);
    }
    @Test
    public void test13859() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isEmpty();
		Var.enqueue(505594223);
		Var.toString();
		Var.isEmpty();
		Var.enqueue(-483017186);
		Var.isEmpty();
    }
    @Test
    public void test13860() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-1867839036);
		z.dequeue();
		z.enqueue(1398843103);
    }
    @Test
    public void test13861() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		z.toString();
		z.isEmpty();
		z.dequeue();
		z.enqueue(-105370045);
		z.enqueue(-1389225364);
		z.enqueue(-1714961843);
    }
    @Test
    public void test13862() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.dequeue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.enqueue(-250038011);
		y.dequeue();
    }
    @Test
    public void test13863() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.enqueue(-1044548478);
		variable.isFull();
    }
    @Test
    public void test13864() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test13865() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.enqueue(1626348620);
		y.toString();
		y.toString();
		y.isEmpty();
		assertEquals(1626348620, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.enqueue(-365999620);
    }
    @Test
    public void test13866() {
		Queue x = new Queue();
		x.enqueue(-1328571724);
		x.dequeue();
		x.toString();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(-1578525621);
		x.enqueue(1973335874);
		x.enqueue(2028596041);
		x.toString();
		assertEquals(1973335874, x.dequeue());
		x.isFull();
		assertFalse(x.isEmpty());
		assertEquals(2028596041, x.dequeue());
		x.isFull();
    }
    @Test
    public void test13867() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test13868() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(1633496584);
		Var.toString();
		assertEquals("[1633496584]", Var.toString());
		assertEquals(1633496584, Var.dequeue());
		Var.toString();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test13869() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-152003318);
		assertEquals("[]", x.toString());
		x.isEmpty();
    }
    @Test
    public void test13870() {
		Queue z = new Queue();
		z.enqueue(19523549);
		assertFalse(z.isFull());
		z.enqueue(-1361199524);
		z.isFull();
		z.enqueue(-1197929066);
    }
    @Test
    public void test13871() {
		Queue y = new Queue();
		y.enqueue(1473996004);
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.isFull();
		y.isFull();
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test13872() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isEmpty();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-1185994840);
    }
    @Test
    public void test13873() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test13874() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(445714140);
		assertFalse(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test13875() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test13876() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(102272965);
		assertFalse(Var.isEmpty());
		Var.enqueue(-136478671);
		Var.isFull();
		Var.toString();
		assertEquals("[102272965]", Var.toString());
		assertEquals("[102272965]", Var.toString());
		Var.enqueue(1021434080);
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test13877() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.toString();
		Var.enqueue(-822944414);
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1998056367);
		Var.isFull();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test13878() {
		Queue z = new Queue();
		z.enqueue(-1086563898);
		z.isEmpty();
		assertFalse(z.isFull());
		z.toString();
		z.enqueue(1080182333);
		z.isFull();
		z.toString();
		z.toString();
		assertEquals(1080182333, z.dequeue());
		z.dequeue();
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test13879() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(972998819);
		x.enqueue(1592698648);
		x.toString();
		x.dequeue();
		x.enqueue(650534846);
		assertEquals("[1592698648, 650534846]", x.toString());
		x.enqueue(-381914875);
    }
    @Test
    public void test13880() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.toString();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test13881() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.isFull();
		x.isFull();
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(-40411382);
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.enqueue(-529054530);
		x.isEmpty();
    }
    @Test
    public void test13882() {
		Queue variable = new Queue();
		variable.enqueue(1399180292);
		variable.toString();
		assertFalse(variable.isEmpty());
		variable.toString();
		assertFalse(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.enqueue(-51827839);
		variable.enqueue(-2073907747);
		variable.isEmpty();
    }
    @Test
    public void test13883() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.enqueue(724471708);
		y.enqueue(-146949177);
		y.isEmpty();
    }
    @Test
    public void test13884() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isFull();
		z.enqueue(-286773462);
    }
    @Test
    public void test13885() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.toString();
		y.toString();
		y.isEmpty();
		y.enqueue(-1468087285);
		y.isFull();
		y.isFull();
    }
    @Test
    public void test13886() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test13887() {
		Queue y = new Queue();
		y.enqueue(-776476718);
    }
    @Test
    public void test13888() {
		Queue x = new Queue();
		x.enqueue(833194524);
    }
    @Test
    public void test13889() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-413002778);
		variable.isEmpty();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-815351008);
    }
    @Test
    public void test13890() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.enqueue(-1318297816);
		x.isFull();
		assertTrue(x.isEmpty());
		x.toString();
		x.isFull();
		x.isEmpty();
		x.toString();
		x.enqueue(1635570794);
		x.isFull();
		x.enqueue(-1807027900);
		x.isEmpty();
    }
    @Test
    public void test13891() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		assertFalse(z.isFull());
		z.isFull();
		assertFalse(z.isFull());
		z.dequeue();
		z.dequeue();
		z.enqueue(-1863300261);
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test13892() {
		Queue z = new Queue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(-1275299488);
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test13893() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1277278612);
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.enqueue(1788852339);
		Var.isEmpty();
		Var.enqueue(1815354672);
    }
    @Test
    public void test13894() {
		Queue variable = new Queue();
		variable.enqueue(-361564648);
		variable.toString();
		variable.enqueue(-923403798);
		variable.enqueue(276849296);
		variable.isFull();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test13895() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.toString();
		y.enqueue(1372548610);
		y.isEmpty();
		y.enqueue(-1253105624);
		y.toString();
    }
    @Test
    public void test13896() {
		Queue variable = new Queue();
		variable.enqueue(1663652361);
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		assertEquals(1663652361, variable.dequeue());
		assertFalse(variable.isFull());
		variable.enqueue(-1066940927);
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test13897() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.toString();
		y.enqueue(-160119326);
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isFull();
		y.isFull();
		y.dequeue();
		y.enqueue(-1193629985);
		y.toString();
		y.toString();
    }
    @Test
    public void test13898() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.isFull();
		z.dequeue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.toString();
		z.toString();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.enqueue(-1321594505);
    }
    @Test
    public void test13899() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.toString();
    }
    @Test
    public void test13900() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(1775172872);
    }
    @Test
    public void test13901() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.enqueue(1055141252);
		variable.isFull();
		assertEquals(1055141252, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.enqueue(-1984137775);
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.enqueue(-1712384550);
    }
    @Test
    public void test13902() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(1298343799);
		Var.toString();
		Var.dequeue();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test13903() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-1081325393);
		variable.enqueue(-397399641);
    }
    @Test
    public void test13904() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.toString();
		y.toString();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.isFull();
		y.toString();
		y.enqueue(1830477416);
    }
    @Test
    public void test13905() {
		Queue Var = new Queue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.enqueue(1565965502);
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test13906() {
		Queue Var = new Queue();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1669097746);
		Var.dequeue();
		Var.enqueue(1776715172);
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test13907() {
		Queue y = new Queue();
		y.dequeue();
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.isFull();
		y.enqueue(-1836635191);
		y.isFull();
		y.enqueue(-1412251531);
    }
    @Test
    public void test13908() {
		Queue y = new Queue();
		y.enqueue(-1767010219);
    }
    @Test
    public void test13909() {
		Queue y = new Queue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.enqueue(-342007215);
		y.enqueue(1657373490);
		y.enqueue(-967555824);
		y.isFull();
		assertEquals("[1657373490]", y.toString());
		y.enqueue(-1738285680);
		y.enqueue(1641215778);
		y.isEmpty();
    }
    @Test
    public void test13910() {
		Queue x = new Queue();
		x.enqueue(1147866152);
		assertFalse(x.isEmpty());
		assertEquals("[1147866152]", x.toString());
		x.enqueue(-2073853851);
		x.isEmpty();
		x.toString();
		x.enqueue(-2115760811);
		x.isEmpty();
		assertFalse(x.isEmpty());
		assertFalse(x.isFull());
		x.enqueue(1142387665);
    }
    @Test
    public void test13911() {
		Queue variable = new Queue();
		variable.enqueue(-601381698);
		assertTrue(variable.isEmpty());
		variable.enqueue(-1717248334);
		variable.toString();
    }
    @Test
    public void test13912() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(840909483);
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test13913() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test13914() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test13915() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(511945580);
		Var.dequeue();
    }
    @Test
    public void test13916() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.enqueue(1942541864);
		z.dequeue();
    }
    @Test
    public void test13917() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.enqueue(-11201050);
		y.isEmpty();
		y.toString();
		y.enqueue(724877573);
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test13918() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(-566624017);
		z.isFull();
		assertTrue(z.isEmpty());
		z.enqueue(1930969949);
    }
    @Test
    public void test13919() {
		Queue y = new Queue();
		y.enqueue(-1026475742);
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test13920() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.toString();
		x.isFull();
    }
    @Test
    public void test13921() {
		Queue variable = new Queue();
		variable.enqueue(921085928);
    }
    @Test
    public void test13922() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.enqueue(1775484434);
		x.enqueue(-494864928);
    }
    @Test
    public void test13923() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.enqueue(-1264428192);
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test13924() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(275154648);
    }
    @Test
    public void test13925() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.isFull();
		y.enqueue(1573030117);
		y.toString();
		y.isFull();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test13926() {
		Queue y = new Queue();
		y.enqueue(1495778602);
		assertEquals("[1495778602]", y.toString());
		assertEquals(1495778602, y.dequeue());
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(772230258);
		y.enqueue(-909395986);
    }
    @Test
    public void test13927() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test13928() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.toString();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test13929() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.toString();
		y.isFull();
		y.enqueue(-1603947107);
		y.isFull();
		y.enqueue(-664648681);
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(25929401);
    }
    @Test
    public void test13930() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test13931() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(2115641375);
		variable.dequeue();
		variable.enqueue(1376440952);
		variable.isEmpty();
		variable.enqueue(1831299796);
		variable.toString();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test13932() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isFull();
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.dequeue();
		y.enqueue(296309143);
		assertEquals("[296309143]", y.toString());
		assertFalse(y.isEmpty());
		y.dequeue();
    }
    @Test
    public void test13933() {
		Queue y = new Queue();
		y.enqueue(633478599);
		y.toString();
		y.enqueue(1127102424);
		y.enqueue(2059557224);
		y.isFull();
		y.enqueue(664792416);
		y.toString();
		assertFalse(y.isEmpty());
		assertEquals(633478599, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test13934() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.enqueue(221100586);
		x.toString();
		x.enqueue(373310073);
		assertFalse(x.isFull());
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test13935() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.toString();
    }
    @Test
    public void test13936() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.enqueue(540147997);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(949801418);
		Var.isEmpty();
		assertEquals("[540147997, 949801418]", Var.toString());
		assertEquals("[540147997, 949801418]", Var.toString());
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test13937() {
		Queue variable = new Queue();
		variable.enqueue(113319975);
		variable.isFull();
		variable.toString();
		variable.enqueue(1366877889);
		variable.dequeue();
		variable.enqueue(18487932);
		variable.enqueue(1057430505);
    }
    @Test
    public void test13938() {
		Queue Var = new Queue();
		Var.enqueue(897439550);
		Var.enqueue(469556303);
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.enqueue(539064888);
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-998170597);
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test13939() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test13940() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
		Var.toString();
		Var.isFull();
		Var.isFull();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.enqueue(-1891846329);
    }
    @Test
    public void test13941() {
		Queue x = new Queue();
		x.enqueue(-929077144);
    }
    @Test
    public void test13942() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test13943() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertFalse(y.isFull());
		y.isFull();
		y.isFull();
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(-116732629);
    }
    @Test
    public void test13944() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.enqueue(-1199779410);
		assertFalse(variable.isFull());
		variable.enqueue(1512579646);
		variable.isEmpty();
    }
    @Test
    public void test13945() {
		Queue variable = new Queue();
		variable.enqueue(-1883867451);
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.enqueue(649272845);
		variable.isFull();
    }
    @Test
    public void test13946() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-1467949616);
		y.dequeue();
    }
    @Test
    public void test13947() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test13948() {
		Queue variable = new Queue();
		variable.enqueue(-379963729);
		variable.dequeue();
    }
    @Test
    public void test13949() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(369720723);
		x.isEmpty();
		assertFalse(x.isEmpty());
		assertEquals(369720723, x.dequeue());
		assertTrue(x.isEmpty());
		x.enqueue(-847516125);
		x.toString();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test13950() {
		Queue z = new Queue();
		z.enqueue(-1263533613);
		z.dequeue();
		z.dequeue();
		z.isFull();
		z.enqueue(-1484552428);
		z.isFull();
    }
    @Test
    public void test13951() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.toString();
		z.isEmpty();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test13952() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(1177334353);
		y.toString();
		y.isFull();
		y.enqueue(-2140363503);
		y.toString();
		assertEquals("[1177334353]", y.toString());
		y.toString();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test13953() {
		Queue Var = new Queue();
		Var.enqueue(1056138354);
		Var.enqueue(-247938390);
		Var.enqueue(35270900);
		Var.dequeue();
		Var.enqueue(540322847);
		Var.isEmpty();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test13954() {
		Queue Var = new Queue();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(-528899103);
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(320345835);
		assertEquals(320345835, Var.dequeue());
		Var.isFull();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test13955() {
		Queue y = new Queue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		y.toString();
		y.enqueue(-1283249035);
		y.enqueue(-1253903561);
		assertEquals("[]", y.toString());
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test13956() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test13957() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.dequeue();
		x.dequeue();
		x.enqueue(-1616264814);
		x.dequeue();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.isFull();
		x.dequeue();
		x.enqueue(1552419329);
    }
    @Test
    public void test13958() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.enqueue(1736237998);
		y.enqueue(344207275);
		assertFalse(y.isFull());
		y.enqueue(72823830);
		y.isEmpty();
		y.isEmpty();
		y.isFull();
		assertFalse(y.isEmpty());
		assertEquals("[1736237998, 344207275, 72823830]", y.toString());
		y.isFull();
    }
    @Test
    public void test13959() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(-1189622821);
		variable.isFull();
		variable.enqueue(-540275243);
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(102466369);
    }
    @Test
    public void test13960() {
		Queue x = new Queue();
		x.isFull();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(-1259834955);
		x.isEmpty();
		x.toString();
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test13961() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isEmpty();
		Var.toString();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test13962() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(549713359);
		z.enqueue(901100394);
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test13963() {
		Queue y = new Queue();
		y.enqueue(-781511368);
		y.dequeue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.enqueue(1965226045);
		y.isFull();
    }
    @Test
    public void test13964() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-1420210951);
		variable.dequeue();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.enqueue(304631584);
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test13965() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertFalse(Var.isFull());
		Var.toString();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test13966() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(112764937);
		y.enqueue(-395980113);
		y.toString();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test13967() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test13968() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-940660737);
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		variable.enqueue(1619121023);
		variable.isEmpty();
		variable.enqueue(1693507653);
		variable.dequeue();
    }
    @Test
    public void test13969() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(-1372431029);
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.dequeue();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test13970() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.toString();
		variable.toString();
		variable.toString();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test13971() {
		Queue y = new Queue();
		y.enqueue(-888627778);
		y.isFull();
		y.enqueue(388848388);
		y.toString();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test13972() {
		Queue variable = new Queue();
		variable.enqueue(-1381485773);
    }
    @Test
    public void test13973() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.enqueue(1339057558);
		x.toString();
		assertEquals(1339057558, x.dequeue());
		x.toString();
		assertEquals("[]", x.toString());
		x.dequeue();
    }
    @Test
    public void test13974() {
		Queue variable = new Queue();
		variable.enqueue(833490930);
		assertEquals(833490930, variable.dequeue());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(1308185162);
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-199382615);
    }
    @Test
    public void test13975() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isFull();
		assertFalse(x.isFull());
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
		assertFalse(x.isFull());
		x.toString();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
    }
    @Test
    public void test13976() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.enqueue(-614353428);
		variable.toString();
    }
    @Test
    public void test13977() {
		Queue variable = new Queue();
		variable.enqueue(1636791661);
		assertEquals("[1636791661]", variable.toString());
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(560568263);
		variable.dequeue();
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(-226166161);
		assertFalse(variable.isFull());
		variable.enqueue(-1243429835);
    }
    @Test
    public void test13978() {
		Queue z = new Queue();
		z.toString();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.enqueue(1369825091);
		assertFalse(z.isEmpty());
		assertFalse(z.isFull());
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		z.toString();
		z.toString();
		assertFalse(z.isFull());
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test13979() {
		Queue z = new Queue();
		z.enqueue(-547446394);
		z.enqueue(-1993764412);
		z.isEmpty();
		z.enqueue(1124719752);
		z.enqueue(653970937);
		assertEquals("[1124719752, 653970937]", z.toString());
		z.toString();
		z.toString();
		z.enqueue(-835934718);
		z.isFull();
    }
    @Test
    public void test13980() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.enqueue(-717157924);
    }
    @Test
    public void test13981() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.enqueue(-722663391);
    }
    @Test
    public void test13982() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test13983() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(79384927);
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-1072041096);
		variable.isFull();
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test13984() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.enqueue(876544916);
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.toString();
		z.toString();
		z.enqueue(-776525374);
		z.enqueue(-1590252156);
    }
    @Test
    public void test13985() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.toString();
		z.isFull();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test13986() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.isFull();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.dequeue();
		x.enqueue(1655658044);
    }
    @Test
    public void test13987() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test13988() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test13989() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test13990() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test13991() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(-128906401);
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(-715991620);
		variable.dequeue();
		variable.enqueue(992637793);
		variable.enqueue(-1474768365);
    }
    @Test
    public void test13992() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		assertEquals("[]", x.toString());
		x.toString();
		x.enqueue(-1753834971);
		x.dequeue();
		assertTrue(x.isEmpty());
		x.enqueue(-1980830054);
		x.enqueue(-310307348);
		x.dequeue();
		x.enqueue(-970095628);
    }
    @Test
    public void test13993() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(-35104838);
		x.toString();
    }
    @Test
    public void test13994() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(1387936960);
		z.enqueue(1715059410);
		z.toString();
    }
    @Test
    public void test13995() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isEmpty();
		x.enqueue(-1343924881);
		x.enqueue(-1761429300);
		assertEquals("[]", x.toString());
		x.toString();
		x.isEmpty();
		x.isFull();
		x.toString();
    }
    @Test
    public void test13996() {
		Queue z = new Queue();
		z.enqueue(678622947);
		z.isFull();
		assertEquals("[678622947]", z.toString());
		z.enqueue(269703819);
		assertEquals("[678622947, 269703819]", z.toString());
		z.isFull();
		z.toString();
		z.isEmpty();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test13997() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test13998() {
		Queue z = new Queue();
		z.enqueue(856495759);
		z.isEmpty();
		z.isFull();
		assertFalse(z.isFull());
		assertEquals("[856495759]", z.toString());
		assertEquals("[856495759]", z.toString());
		z.isEmpty();
		assertEquals("[856495759]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test13999() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.enqueue(-360316510);
		variable.enqueue(1719344010);
		assertFalse(variable.isEmpty());
		assertEquals("[1719344010]", variable.toString());
		assertEquals(1719344010, variable.dequeue());
		variable.enqueue(29519863);
		variable.isFull();
    }
    @Test
    public void test14000() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.enqueue(1670315803);
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test14001() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-1486964468);
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test14002() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-301142216);
		z.dequeue();
    }
    @Test
    public void test14003() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-55328348);
		x.dequeue();
    }
    @Test
    public void test14004() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.toString();
		y.dequeue();
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.enqueue(-382526654);
		y.dequeue();
		y.toString();
    }
    @Test
    public void test14005() {
		Queue y = new Queue();
		y.enqueue(1891459108);
		y.enqueue(-831137569);
		assertFalse(y.isFull());
		assertEquals(1891459108, y.dequeue());
		assertEquals("[]", y.toString());
		y.enqueue(-452430530);
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.enqueue(-1092908638);
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test14006() {
		Queue z = new Queue();
		z.enqueue(1342529852);
		z.isEmpty();
		z.enqueue(862299012);
		z.isFull();
    }
    @Test
    public void test14007() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.isFull();
		Var.toString();
		Var.isFull();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(75960952);
		Var.toString();
    }
    @Test
    public void test14008() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(1775630056);
		assertEquals(1775630056, Var.dequeue());
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1483298871);
		Var.dequeue();
		Var.enqueue(-1234887188);
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(-1824454457);
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test14009() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-378081363);
		x.isFull();
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(1539414896);
		assertEquals(1539414896, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.toString();
		x.dequeue();
    }
    @Test
    public void test14010() {
		Queue variable = new Queue();
		variable.enqueue(1679167381);
		variable.isFull();
		variable.isFull();
		variable.toString();
		variable.isFull();
		variable.enqueue(-369918689);
		variable.enqueue(-185717463);
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1178823566);
    }
    @Test
    public void test14011() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test14012() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.toString();
    }
    @Test
    public void test14013() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test14014() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
		x.toString();
		x.enqueue(-1964808790);
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.enqueue(-667995136);
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		x.enqueue(1345682698);
    }
    @Test
    public void test14015() {
		Queue x = new Queue();
		x.enqueue(476618409);
		x.isEmpty();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test14016() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test14017() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test14018() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.enqueue(-210493084);
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.enqueue(-486739945);
		variable.isEmpty();
    }
    @Test
    public void test14019() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.toString();
		y.isEmpty();
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test14020() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(-1336407183);
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.enqueue(-1585989559);
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-1384603222);
		z.enqueue(-2005275390);
    }
    @Test
    public void test14021() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(-891730987);
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(-835654600);
    }
    @Test
    public void test14022() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-717075816);
    }
    @Test
    public void test14023() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(478373510);
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test14024() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(-294703901);
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.enqueue(1802397396);
    }
    @Test
    public void test14025() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test14026() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test14027() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(832556640);
		assertFalse(z.isEmpty());
		z.isEmpty();
		z.isEmpty();
		z.toString();
		assertFalse(z.isFull());
		z.toString();
		assertEquals(832556640, z.dequeue());
		z.toString();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test14028() {
		Queue variable = new Queue();
		variable.enqueue(-1419016042);
		variable.toString();
		variable.enqueue(890479494);
    }
    @Test
    public void test14029() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test14030() {
		Queue variable = new Queue();
		variable.enqueue(530735049);
    }
    @Test
    public void test14031() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-251414284);
		Var.isFull();
    }
    @Test
    public void test14032() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test14033() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.enqueue(1818767329);
    }
    @Test
    public void test14034() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(175478844);
    }
    @Test
    public void test14035() {
		Queue z = new Queue();
		z.enqueue(597964690);
		z.toString();
		z.isEmpty();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test14036() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		y.toString();
		y.enqueue(-1139986516);
		assertEquals(-1, y.dequeue());
		y.enqueue(-1072009912);
		assertFalse(y.isFull());
		assertTrue(y.isEmpty());
		y.dequeue();
		y.toString();
		y.enqueue(1523202163);
    }
    @Test
    public void test14037() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isFull();
    }
    @Test
    public void test14038() {
		Queue y = new Queue();
		y.enqueue(-546654975);
		y.dequeue();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test14039() {
		Queue x = new Queue();
		x.enqueue(1228166215);
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(1615862873);
		x.toString();
		assertEquals(1615862873, x.dequeue());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.enqueue(2090817576);
		assertFalse(x.isFull());
		x.isFull();
    }
    @Test
    public void test14040() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		x.enqueue(657571916);
    }
    @Test
    public void test14041() {
		Queue z = new Queue();
		z.enqueue(907022703);
		assertFalse(z.isEmpty());
		z.isFull();
		assertEquals(907022703, z.dequeue());
		z.enqueue(529552099);
		assertEquals(529552099, z.dequeue());
		z.isFull();
		z.isFull();
    }
    @Test
    public void test14042() {
		Queue Var = new Queue();
		Var.enqueue(1478767620);
		assertEquals("[1478767620]", Var.toString());
		Var.dequeue();
		Var.isFull();
		Var.isFull();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test14043() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-1867781995);
		Var.isFull();
    }
    @Test
    public void test14044() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1599252661);
		variable.dequeue();
		variable.enqueue(470997436);
		variable.enqueue(-90140776);
		variable.toString();
		variable.isEmpty();
		variable.toString();
		assertFalse(variable.isEmpty());
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test14045() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.toString();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test14046() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test14047() {
		Queue x = new Queue();
		x.enqueue(-2137880135);
    }
    @Test
    public void test14048() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test14049() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.toString();
    }
    @Test
    public void test14050() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-1274936315);
		Var.enqueue(-1020629255);
		Var.dequeue();
    }
    @Test
    public void test14051() {
		Queue variable = new Queue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.toString();
		variable.dequeue();
		variable.isFull();
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.toString();
    }
    @Test
    public void test14052() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-903485069);
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test14053() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(-1396794830);
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test14054() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		z.enqueue(754757234);
		z.isEmpty();
		z.isEmpty();
		assertFalse(z.isEmpty());
		z.enqueue(-1344622123);
		z.enqueue(694369397);
    }
    @Test
    public void test14055() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-653644260);
		assertEquals("[]", y.toString());
		y.enqueue(157261776);
		assertEquals("[157261776]", y.toString());
		y.dequeue();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(974766985);
		y.enqueue(-259967525);
		y.dequeue();
		y.enqueue(-1917893114);
		y.dequeue();
		y.toString();
    }
    @Test
    public void test14056() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test14057() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isFull();
		x.dequeue();
		x.toString();
		x.isEmpty();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.enqueue(-433650237);
		x.isFull();
		x.isFull();
    }
    @Test
    public void test14058() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(1163381326);
		z.isEmpty();
		assertFalse(z.isEmpty());
		assertFalse(z.isFull());
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isFull();
		z.dequeue();
		assertFalse(z.isFull());
		z.dequeue();
		z.dequeue();
		z.enqueue(-1638705493);
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test14059() {
		Queue z = new Queue();
		z.enqueue(125983607);
		assertEquals(125983607, z.dequeue());
		z.toString();
		assertEquals("[]", z.toString());
		z.toString();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isFull();
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(-875652122);
    }
    @Test
    public void test14060() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test14061() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
    }
    @Test
    public void test14062() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test14063() {
		Queue variable = new Queue();
		variable.enqueue(-138077220);
		variable.toString();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		variable.toString();
		variable.isFull();
		variable.enqueue(350518847);
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test14064() {
		Queue z = new Queue();
		z.enqueue(162656704);
		assertEquals(162656704, z.dequeue());
		z.dequeue();
		z.isEmpty();
		z.isFull();
		z.enqueue(-1603794281);
		assertEquals("[]", z.toString());
		z.enqueue(1121443495);
		z.enqueue(1584216316);
		z.enqueue(-250731370);
    }
    @Test
    public void test14065() {
		Queue z = new Queue();
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.enqueue(-1156327311);
		assertTrue(z.isEmpty());
		z.toString();
		z.dequeue();
		z.enqueue(-1451840210);
		z.isFull();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test14066() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1161797763);
    }
    @Test
    public void test14067() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(-3840641);
		variable.toString();
		variable.isFull();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test14068() {
		Queue y = new Queue();
		y.enqueue(-1876165759);
		y.isFull();
		y.toString();
		y.dequeue();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test14069() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test14070() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1436539371);
		variable.enqueue(-1427103871);
		variable.toString();
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test14071() {
		Queue z = new Queue();
		z.isFull();
    }
    @Test
    public void test14072() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.enqueue(-1183343742);
    }
    @Test
    public void test14073() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.enqueue(-944126434);
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test14074() {
		Queue x = new Queue();
		x.enqueue(2055871162);
		x.toString();
		x.enqueue(974841771);
		x.toString();
		assertEquals("[2055871162, 974841771]", x.toString());
		x.enqueue(2071995623);
		x.dequeue();
		assertEquals("[974841771, 2071995623]", x.toString());
		x.isFull();
		x.dequeue();
		assertFalse(x.isEmpty());
		assertFalse(x.isEmpty());
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test14075() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test14076() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-1449055676);
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1311848928);
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test14077() {
		Queue x = new Queue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.enqueue(-940001431);
    }
    @Test
    public void test14078() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		y.isEmpty();
		y.toString();
		y.enqueue(1235174797);
		y.toString();
		assertFalse(y.isEmpty());
		y.enqueue(60406454);
		y.isFull();
		y.dequeue();
		y.enqueue(62578953);
		y.enqueue(-488385452);
    }
    @Test
    public void test14079() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.enqueue(1109804773);
		Var.isEmpty();
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.enqueue(1759325735);
		Var.dequeue();
    }
    @Test
    public void test14080() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isFull();
		assertEquals("[]", x.toString());
		x.isFull();
		x.toString();
		x.toString();
		assertTrue(x.isEmpty());
		x.enqueue(-964364885);
		x.enqueue(351082740);
    }
    @Test
    public void test14081() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test14082() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.toString();
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.enqueue(858777840);
		variable.enqueue(-656944628);
    }
    @Test
    public void test14083() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-154893978);
		variable.enqueue(1496762778);
		variable.enqueue(1167117344);
		assertFalse(variable.isEmpty());
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test14084() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.enqueue(2089695773);
		assertFalse(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test14085() {
		Queue Var = new Queue();
		Var.enqueue(-811486840);
		Var.isFull();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.enqueue(767561063);
		assertEquals(767561063, Var.dequeue());
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.enqueue(-1169409802);
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test14086() {
		Queue variable = new Queue();
		variable.enqueue(-188536262);
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test14087() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
		x.enqueue(-370219003);
		x.isEmpty();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(-1823000942);
    }
    @Test
    public void test14088() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-1069287363);
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test14089() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isFull();
    }
    @Test
    public void test14090() {
		Queue z = new Queue();
		z.enqueue(-991706554);
		assertEquals("[]", z.toString());
		z.dequeue();
    }
    @Test
    public void test14091() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(169376229);
		variable.dequeue();
    }
    @Test
    public void test14092() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-1996374697);
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.dequeue();
		Var.enqueue(652123730);
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test14093() {
		Queue variable = new Queue();
		variable.enqueue(-950094572);
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test14094() {
		Queue z = new Queue();
		z.enqueue(1081105287);
		z.toString();
    }
    @Test
    public void test14095() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(430440137);
		assertFalse(y.isFull());
		assertEquals(430440137, y.dequeue());
		y.dequeue();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test14096() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(171374517);
		Var.toString();
		Var.enqueue(1479129867);
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test14097() {
		Queue Var = new Queue();
		Var.enqueue(-1204845353);
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(609510865);
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(244364488);
		Var.toString();
    }
    @Test
    public void test14098() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.toString();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.toString();
		z.dequeue();
    }
    @Test
    public void test14099() {
		Queue variable = new Queue();
		variable.enqueue(972722970);
		variable.toString();
		assertEquals("[972722970]", variable.toString());
		variable.toString();
		variable.enqueue(1188943619);
		variable.isFull();
    }
    @Test
    public void test14100() {
		Queue variable = new Queue();
		variable.enqueue(1444581145);
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-670816016);
		variable.toString();
		variable.enqueue(1154969779);
    }
    @Test
    public void test14101() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-613940453);
		z.enqueue(-1641842348);
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(1430212937);
		z.isFull();
		z.isFull();
    }
    @Test
    public void test14102() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isFull();
		y.toString();
		y.isFull();
    }
    @Test
    public void test14103() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test14104() {
		Queue x = new Queue();
		x.enqueue(91669412);
		x.toString();
		x.toString();
    }
    @Test
    public void test14105() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.toString();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-965740730);
		assertEquals("[]", Var.toString());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1303653425);
		Var.enqueue(-1649144767);
    }
    @Test
    public void test14106() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.isFull();
		x.toString();
		x.enqueue(104392828);
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(-960123314);
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test14107() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.toString();
		z.isFull();
    }
    @Test
    public void test14108() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertEquals("[]", x.toString());
		x.isFull();
		x.isFull();
		x.enqueue(-1405605863);
		x.enqueue(-584892887);
		x.isEmpty();
		x.enqueue(137423356);
		x.isEmpty();
		x.isFull();
		x.toString();
    }
    @Test
    public void test14109() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.enqueue(2103819807);
		y.toString();
		assertEquals("[2103819807]", y.toString());
		y.toString();
		y.dequeue();
		y.isFull();
		y.enqueue(-1548498398);
		y.isFull();
    }
    @Test
    public void test14110() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.enqueue(-1709518356);
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test14111() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test14112() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isFull();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(1132518742);
		Var.enqueue(337824192);
		Var.isEmpty();
    }
    @Test
    public void test14113() {
		Queue x = new Queue();
		x.enqueue(865101815);
		x.enqueue(71397323);
		assertFalse(x.isEmpty());
		assertEquals(865101815, x.dequeue());
		x.dequeue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.toString();
    }
    @Test
    public void test14114() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(1271010588);
		z.isEmpty();
		assertEquals(1271010588, z.dequeue());
		z.dequeue();
		z.enqueue(-1540900697);
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.enqueue(-721198117);
		z.isFull();
    }
    @Test
    public void test14115() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test14116() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test14117() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test14118() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test14119() {
		Queue x = new Queue();
		x.enqueue(-119659032);
		assertFalse(x.isFull());
		x.dequeue();
		x.toString();
    }
    @Test
    public void test14120() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.toString();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(-1388523218);
		x.enqueue(310739500);
		x.isFull();
		x.enqueue(-510440578);
		x.dequeue();
    }
    @Test
    public void test14121() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(-1920332210);
		z.dequeue();
		z.enqueue(1205388426);
		z.isFull();
		z.isFull();
		assertFalse(z.isFull());
		z.toString();
		assertFalse(z.isFull());
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test14122() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-2022289450);
		Var.enqueue(2049951258);
		assertEquals("[2049951258]", Var.toString());
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(935861508);
		Var.enqueue(-781437402);
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test14123() {
		Queue x = new Queue();
		x.enqueue(-302405051);
		x.isFull();
    }
    @Test
    public void test14124() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(747575758);
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(1784940493);
		variable.enqueue(-656345398);
		variable.enqueue(-329253676);
		variable.enqueue(2134807106);
    }
    @Test
    public void test14125() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(-142702932);
		variable.isFull();
		variable.isFull();
		variable.enqueue(2120329997);
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test14126() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test14127() {
		Queue y = new Queue();
		y.toString();
		assertFalse(y.isFull());
		y.isEmpty();
		y.enqueue(-289245481);
		y.isFull();
		y.enqueue(778254133);
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test14128() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(828273136);
		assertFalse(Var.isEmpty());
		assertFalse(Var.isEmpty());
		Var.enqueue(299514661);
		Var.toString();
		assertEquals(828273136, Var.dequeue());
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test14129() {
		Queue y = new Queue();
		y.enqueue(40313793);
    }
    @Test
    public void test14130() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test14131() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test14132() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test14133() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.enqueue(22696983);
		assertEquals("[22696983]", z.toString());
		z.enqueue(1116107305);
		assertFalse(z.isEmpty());
		z.dequeue();
		assertFalse(z.isEmpty());
		z.isFull();
		z.toString();
		z.enqueue(-1604562033);
		z.isEmpty();
		assertEquals(1116107305, z.dequeue());
		z.enqueue(256852207);
		z.toString();
    }
    @Test
    public void test14134() {
		Queue x = new Queue();
		x.enqueue(1904416596);
		x.toString();
		x.dequeue();
		x.toString();
		x.dequeue();
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test14135() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.toString();
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-121064170);
		variable.enqueue(434485561);
		variable.toString();
    }
    @Test
    public void test14136() {
		Queue Var = new Queue();
		Var.enqueue(1267225860);
		Var.isFull();
    }
    @Test
    public void test14137() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.enqueue(2070290329);
		assertEquals(2070290329, x.dequeue());
		x.enqueue(-1255733616);
		x.dequeue();
		x.enqueue(725534762);
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test14138() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(494471997);
    }
    @Test
    public void test14139() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test14140() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(958498490);
		Var.toString();
		Var.enqueue(-868214128);
		Var.enqueue(665074893);
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test14141() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		y.isEmpty();
		y.toString();
		y.isEmpty();
		y.enqueue(-339725675);
		y.isEmpty();
		y.isFull();
		y.enqueue(-1755968607);
		assertEquals("[]", y.toString());
		y.toString();
		y.dequeue();
    }
    @Test
    public void test14142() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test14143() {
		Queue variable = new Queue();
		variable.enqueue(-936873919);
    }
    @Test
    public void test14144() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(1325182027);
    }
    @Test
    public void test14145() {
		Queue y = new Queue();
		y.enqueue(278833525);
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test14146() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test14147() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertFalse(z.isFull());
		z.dequeue();
		z.isEmpty();
		z.enqueue(-1601143504);
		z.isEmpty();
		z.enqueue(-1583441870);
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test14148() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(-2094206990);
		Var.enqueue(1616990047);
    }
    @Test
    public void test14149() {
		Queue x = new Queue();
		x.enqueue(-671199994);
		x.dequeue();
    }
    @Test
    public void test14150() {
		Queue x = new Queue();
		x.enqueue(1928380624);
		x.isFull();
    }
    @Test
    public void test14151() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test14152() {
		Queue variable = new Queue();
		variable.enqueue(-432648689);
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.enqueue(53242515);
    }
    @Test
    public void test14153() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		variable.enqueue(-377958613);
    }
    @Test
    public void test14154() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(1459753363);
		assertFalse(y.isFull());
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.dequeue();
    }
    @Test
    public void test14155() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-1987541333);
    }
    @Test
    public void test14156() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-570969700);
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test14157() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-1495145630);
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test14158() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isFull();
		assertTrue(z.isEmpty());
		z.isFull();
		z.isFull();
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		z.enqueue(1256030825);
		z.isFull();
    }
    @Test
    public void test14159() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.enqueue(2116937578);
		y.toString();
		y.enqueue(-2004668140);
		y.enqueue(1090625639);
		y.isFull();
		y.isEmpty();
		assertEquals(2116937578, y.dequeue());
		y.isFull();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test14160() {
		Queue variable = new Queue();
		variable.enqueue(63056036);
		assertEquals("[63056036]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test14161() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.dequeue();
		x.enqueue(-461860011);
		x.isFull();
		x.toString();
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test14162() {
		Queue y = new Queue();
		y.enqueue(2095138322);
		assertEquals(2095138322, y.dequeue());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.toString();
		y.isEmpty();
		y.dequeue();
		assertFalse(y.isFull());
		y.isFull();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test14163() {
		Queue z = new Queue();
		z.enqueue(222210658);
		z.isEmpty();
		z.isFull();
		z.dequeue();
		z.enqueue(691011419);
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test14164() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(539467143);
		z.isEmpty();
    }
    @Test
    public void test14165() {
		Queue y = new Queue();
		y.enqueue(790413387);
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		y.enqueue(634113811);
		y.isFull();
		assertEquals(634113811, y.dequeue());
		y.enqueue(962902298);
		y.enqueue(-2047198903);
    }
    @Test
    public void test14166() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(107062659);
		x.isEmpty();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test14167() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.isFull();
    }
    @Test
    public void test14168() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test14169() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isFull();
		Var.enqueue(384064287);
		Var.isEmpty();
		Var.toString();
		Var.enqueue(2010066400);
		Var.toString();
    }
    @Test
    public void test14170() {
		Queue y = new Queue();
		y.toString();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test14171() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.toString();
    }
    @Test
    public void test14172() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test14173() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.enqueue(288402339);
    }
    @Test
    public void test14174() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(1255591322);
		assertFalse(z.isFull());
		z.dequeue();
		z.isFull();
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(910319032);
		assertFalse(z.isFull());
		z.isFull();
		z.isFull();
		z.isEmpty();
		assertFalse(z.isFull());
		assertEquals(910319032, z.dequeue());
		z.enqueue(-1581609256);
    }
    @Test
    public void test14175() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(371813001);
		z.toString();
		z.toString();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test14176() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		assertEquals("[]", z.toString());
		z.enqueue(995971395);
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.enqueue(2034121000);
		z.toString();
    }
    @Test
    public void test14177() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test14178() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.toString();
		x.enqueue(561894056);
		x.toString();
		x.enqueue(-2087647952);
    }
    @Test
    public void test14179() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(806705587);
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test14180() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(-808811352);
    }
    @Test
    public void test14181() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		x.dequeue();
		x.toString();
		x.enqueue(1949709550);
		x.enqueue(-1298215393);
		x.toString();
    }
    @Test
    public void test14182() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.enqueue(757921565);
		Var.dequeue();
		Var.enqueue(-1500969226);
    }
    @Test
    public void test14183() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(899670413);
    }
    @Test
    public void test14184() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(1715667222);
		z.toString();
    }
    @Test
    public void test14185() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test14186() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.toString();
		z.enqueue(-2017430675);
		z.enqueue(1382128725);
		assertFalse(z.isFull());
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test14187() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		variable.enqueue(-1511134044);
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(478256536);
		assertEquals("[478256536]", variable.toString());
		variable.isFull();
		variable.isEmpty();
		assertEquals("[478256536]", variable.toString());
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test14188() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-1284774514);
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test14189() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(-835000210);
		y.dequeue();
		y.enqueue(-1373296536);
		y.isFull();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test14190() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.enqueue(557799437);
		x.toString();
		x.toString();
		x.enqueue(1748496339);
		x.enqueue(-2048611854);
		x.enqueue(-525754726);
    }
    @Test
    public void test14191() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.toString();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.isFull();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isFull();
		assertEquals("[]", y.toString());
		assertTrue(y.isEmpty());
		y.isFull();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.toString();
    }
    @Test
    public void test14192() {
		Queue variable = new Queue();
		variable.enqueue(-1740151878);
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-1674106689);
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1459435375);
		variable.toString();
    }
    @Test
    public void test14193() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(1070333396);
    }
    @Test
    public void test14194() {
		Queue x = new Queue();
		x.enqueue(-1108239115);
		x.enqueue(459942566);
		x.toString();
		x.isFull();
		x.isFull();
		x.enqueue(-276371937);
		x.dequeue();
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
		x.isEmpty();
    }
    @Test
    public void test14195() {
		Queue x = new Queue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.enqueue(-1628869183);
		x.enqueue(453307847);
    }
    @Test
    public void test14196() {
		Queue Var = new Queue();
		Var.enqueue(1311224204);
		assertEquals(1311224204, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.enqueue(-826685544);
		Var.toString();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.toString();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test14197() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.enqueue(-1927037679);
		Var.enqueue(713945241);
    }
    @Test
    public void test14198() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-782021447);
		Var.isFull();
    }
    @Test
    public void test14199() {
		Queue Var = new Queue();
		Var.isFull();
		assertTrue(Var.isEmpty());
		assertFalse(Var.isFull());
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test14200() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-316921497);
		Var.enqueue(-1350354131);
		assertEquals("[]", Var.toString());
		Var.isEmpty();
    }
    @Test
    public void test14201() {
		Queue y = new Queue();
		y.enqueue(142241056);
    }
    @Test
    public void test14202() {
		Queue z = new Queue();
		z.enqueue(-1258648337);
		z.isEmpty();
		z.enqueue(197372550);
		assertFalse(z.isFull());
		z.isEmpty();
		z.toString();
		assertEquals("[197372550]", z.toString());
		z.isFull();
		assertFalse(z.isEmpty());
		z.enqueue(268893290);
		z.isEmpty();
    }
    @Test
    public void test14203() {
		Queue Var = new Queue();
		Var.enqueue(699253215);
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test14204() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.enqueue(364248204);
		assertFalse(y.isEmpty());
		y.toString();
		y.enqueue(346315032);
		y.isEmpty();
		y.enqueue(976989163);
		y.isEmpty();
		assertFalse(y.isFull());
		y.isFull();
    }
    @Test
    public void test14205() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.toString();
		z.isEmpty();
		z.isEmpty();
		z.isFull();
		z.enqueue(1730655961);
    }
    @Test
    public void test14206() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		assertTrue(z.isEmpty());
		z.isFull();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test14207() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.toString();
    }
    @Test
    public void test14208() {
		Queue y = new Queue();
		y.toString();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.isFull();
		y.isFull();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test14209() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(662494859);
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-1655077656);
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test14210() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.enqueue(-1531966769);
		assertEquals("[]", z.toString());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.enqueue(-790379679);
		z.toString();
    }
    @Test
    public void test14211() {
		Queue x = new Queue();
		x.enqueue(653298601);
		x.dequeue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.enqueue(1144965746);
		assertFalse(x.isEmpty());
		x.enqueue(1025133530);
		x.toString();
		assertEquals(1144965746, x.dequeue());
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		x.enqueue(2091438302);
    }
    @Test
    public void test14212() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.enqueue(-1331845195);
		Var.dequeue();
		Var.isFull();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test14213() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.toString();
		y.enqueue(-787765466);
		assertTrue(y.isEmpty());
		y.toString();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.toString();
		assertTrue(y.isEmpty());
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test14214() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test14215() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
    }
    @Test
    public void test14216() {
		Queue y = new Queue();
		y.toString();
		assertTrue(y.isEmpty());
		y.toString();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(914344109);
		y.toString();
		y.dequeue();
    }
    @Test
    public void test14217() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test14218() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.enqueue(1586948958);
		Var.dequeue();
		Var.toString();
		Var.toString();
		Var.toString();
		Var.enqueue(2105108006);
		assertFalse(Var.isEmpty());
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test14219() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.enqueue(-353829533);
		x.dequeue();
		x.enqueue(552228830);
		x.isFull();
		x.isEmpty();
		x.toString();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test14220() {
		Queue z = new Queue();
		z.isFull();
		z.enqueue(-1159859210);
		z.dequeue();
    }
    @Test
    public void test14221() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.enqueue(152366735);
		y.isFull();
		y.toString();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		assertEquals("[152366735]", y.toString());
		y.isFull();
		assertFalse(y.isEmpty());
		assertFalse(y.isFull());
		assertEquals("[152366735]", y.toString());
		y.toString();
    }
    @Test
    public void test14222() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(-1254102393);
		Var.dequeue();
		Var.enqueue(2140119680);
		Var.enqueue(-492215473);
		Var.dequeue();
		Var.toString();
		Var.enqueue(1425099106);
    }
    @Test
    public void test14223() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.enqueue(2082286362);
		x.isEmpty();
		x.toString();
		x.toString();
		x.toString();
		x.isFull();
		assertFalse(x.isEmpty());
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test14224() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test14225() {
		Queue Var = new Queue();
		Var.enqueue(-1948773960);
		Var.isEmpty();
    }
    @Test
    public void test14226() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.toString();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test14227() {
		Queue Var = new Queue();
		Var.enqueue(2115074862);
		Var.isFull();
    }
    @Test
    public void test14228() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.enqueue(-1362781375);
		y.enqueue(-415142122);
		y.isFull();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.dequeue();
		y.enqueue(1735586629);
		y.isEmpty();
		y.toString();
		y.toString();
    }
    @Test
    public void test14229() {
		Queue x = new Queue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isFull();
		x.toString();
    }
    @Test
    public void test14230() {
		Queue y = new Queue();
		y.enqueue(-1682804470);
		y.dequeue();
		y.enqueue(1200763400);
		y.enqueue(784938352);
		y.isFull();
		y.enqueue(335556863);
    }
    @Test
    public void test14231() {
		Queue y = new Queue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isFull();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.enqueue(-1826171791);
		y.enqueue(-1108186003);
		y.enqueue(-524162070);
		y.enqueue(989291405);
		y.enqueue(-570384637);
		y.dequeue();
		y.enqueue(-1553827421);
    }
    @Test
    public void test14232() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.toString();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.enqueue(735057667);
    }
    @Test
    public void test14233() {
		Queue z = new Queue();
		z.enqueue(986256663);
		z.isEmpty();
		z.enqueue(-2139653740);
		z.isFull();
    }
    @Test
    public void test14234() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.dequeue();
		y.dequeue();
		y.toString();
		y.toString();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test14235() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test14236() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test14237() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(409862990);
		variable.toString();
		variable.toString();
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test14238() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.dequeue();
		Var.enqueue(1003868607);
		Var.enqueue(96694564);
		Var.isFull();
		Var.enqueue(1262312947);
		Var.toString();
    }
    @Test
    public void test14239() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test14240() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(1723048374);
		y.toString();
		assertFalse(y.isFull());
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test14241() {
		Queue z = new Queue();
		z.isFull();
		assertFalse(z.isFull());
		z.isFull();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.toString();
		z.isFull();
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.enqueue(1238197478);
		z.dequeue();
    }
    @Test
    public void test14242() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test14243() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(-367992292);
		assertEquals("[]", y.toString());
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.toString();
		assertTrue(y.isEmpty());
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.enqueue(-305436479);
    }
    @Test
    public void test14244() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.isFull();
		assertFalse(y.isFull());
		y.isEmpty();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.isFull();
		y.isEmpty();
		y.toString();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.toString();
    }
    @Test
    public void test14245() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test14246() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.toString();
		y.enqueue(694624181);
		y.enqueue(-878917264);
		y.toString();
		assertEquals("[694624181]", y.toString());
		assertEquals("[694624181]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test14247() {
		Queue Var = new Queue();
		Var.enqueue(317764699);
		Var.enqueue(310791955);
		Var.enqueue(-1347482818);
    }
    @Test
    public void test14248() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(1024717040);
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(-994721713);
		Var.enqueue(1808386520);
		assertFalse(Var.isEmpty());
		Var.enqueue(914445384);
		Var.enqueue(-608046094);
		assertFalse(Var.isEmpty());
		assertEquals(1808386520, Var.dequeue());
		assertEquals(914445384, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test14249() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.enqueue(963453768);
    }
    @Test
    public void test14250() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.dequeue();
		Var.toString();
		Var.enqueue(-774621480);
		Var.dequeue();
		Var.enqueue(918891926);
		Var.isFull();
    }
    @Test
    public void test14251() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test14252() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.enqueue(915616338);
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(-712176883);
		variable.toString();
		variable.enqueue(-118856360);
    }
    @Test
    public void test14253() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test14254() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(-492187442);
		x.toString();
		x.isFull();
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test14255() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(1959588771);
    }
    @Test
    public void test14256() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isFull();
    }
    @Test
    public void test14257() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.enqueue(1115761346);
		x.enqueue(1739192528);
		x.isFull();
		x.toString();
    }
    @Test
    public void test14258() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(-1418709281);
		variable.isFull();
		variable.isFull();
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test14259() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1022049351);
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.enqueue(-858416093);
    }
    @Test
    public void test14260() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test14261() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test14262() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.enqueue(114491081);
		assertEquals(114491081, x.dequeue());
		x.dequeue();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test14263() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test14264() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-492941183);
		y.toString();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.enqueue(907668230);
		y.isEmpty();
		y.isFull();
		assertEquals(907668230, y.dequeue());
		y.toString();
		y.enqueue(882673602);
		assertEquals(882673602, y.dequeue());
		y.enqueue(2029117147);
		assertEquals("[2029117147]", y.toString());
		y.enqueue(1234347872);
    }
    @Test
    public void test14265() {
		Queue x = new Queue();
		x.isFull();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.isFull();
		x.isFull();
    }
    @Test
    public void test14266() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		variable.toString();
		variable.enqueue(-1608235903);
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test14267() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test14268() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-330161256);
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.dequeue();
		x.enqueue(-765057218);
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test14269() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.isFull();
		assertEquals("[]", x.toString());
		x.toString();
		x.dequeue();
    }
    @Test
    public void test14270() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.enqueue(-1492299791);
		Var.toString();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test14271() {
		Queue y = new Queue();
		y.isEmpty();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(-1631911556);
		y.isFull();
    }
    @Test
    public void test14272() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(487526849);
		variable.toString();
    }
    @Test
    public void test14273() {
		Queue y = new Queue();
		y.toString();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.enqueue(1689419794);
		assertEquals(1689419794, y.dequeue());
		y.toString();
		y.dequeue();
		y.toString();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.enqueue(-617701784);
    }
    @Test
    public void test14274() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test14275() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-385565125);
    }
    @Test
    public void test14276() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test14277() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-97765881);
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test14278() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(-183112764);
		Var.enqueue(-2140805958);
		Var.dequeue();
    }
    @Test
    public void test14279() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(-73425550);
		z.toString();
		z.isEmpty();
		z.enqueue(519297075);
		z.enqueue(832964326);
		z.dequeue();
		z.toString();
		assertFalse(z.isFull());
		z.isEmpty();
    }
    @Test
    public void test14280() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test14281() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test14282() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test14283() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.dequeue();
		x.toString();
		x.enqueue(2022966271);
		x.enqueue(2068762924);
		assertEquals("[2022966271, 2068762924]", x.toString());
		x.toString();
		x.isFull();
		assertFalse(x.isFull());
		x.isEmpty();
		x.toString();
		x.dequeue();
		assertEquals(2068762924, x.dequeue());
		x.toString();
    }
    @Test
    public void test14284() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.enqueue(-1103067950);
    }
    @Test
    public void test14285() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test14286() {
		Queue Var = new Queue();
		Var.enqueue(-605010203);
    }
    @Test
    public void test14287() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.toString();
		assertTrue(y.isEmpty());
		y.enqueue(-495732036);
		y.dequeue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.dequeue();
    }
    @Test
    public void test14288() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.isFull();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test14289() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.enqueue(-1606183624);
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test14290() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test14291() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test14292() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test14293() {
		Queue variable = new Queue();
		variable.enqueue(1937128003);
		variable.toString();
		variable.enqueue(-1968250297);
		assertEquals(1937128003, variable.dequeue());
		variable.isFull();
		variable.enqueue(1288401730);
    }
    @Test
    public void test14294() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		z.enqueue(-1614832531);
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test14295() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
    }
    @Test
    public void test14296() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-100911825);
		Var.enqueue(-58704827);
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.enqueue(1228886684);
		Var.enqueue(-1820914348);
		Var.isEmpty();
    }
    @Test
    public void test14297() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.isFull();
		x.enqueue(239357999);
    }
    @Test
    public void test14298() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.toString();
		z.dequeue();
		z.isFull();
		z.toString();
    }
    @Test
    public void test14299() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.enqueue(871548818);
		z.toString();
		z.enqueue(284362924);
		z.enqueue(-538217357);
		assertEquals("[871548818, 284362924]", z.toString());
		z.toString();
		assertFalse(z.isFull());
		z.enqueue(-611365290);
		z.toString();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test14300() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(1116029140);
		x.isFull();
		x.isEmpty();
		assertFalse(x.isEmpty());
		assertEquals(1116029140, x.dequeue());
		x.enqueue(-900135368);
    }
    @Test
    public void test14301() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test14302() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.enqueue(-438558539);
		z.toString();
		z.enqueue(-483616409);
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test14303() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test14304() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.isFull();
		assertFalse(y.isFull());
		y.enqueue(-1224992286);
    }
    @Test
    public void test14305() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.toString();
		z.enqueue(40875438);
		z.toString();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-406365901);
    }
    @Test
    public void test14306() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test14307() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.enqueue(81526676);
		variable.isEmpty();
    }
    @Test
    public void test14308() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(-504890216);
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.enqueue(361014188);
		z.isEmpty();
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(-1378476242);
		z.isEmpty();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test14309() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(-522338930);
		z.isEmpty();
		z.enqueue(-2138979417);
    }
    @Test
    public void test14310() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
		variable.enqueue(409510456);
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test14311() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		assertTrue(x.isEmpty());
		x.toString();
		x.dequeue();
		x.enqueue(917750294);
		x.dequeue();
		x.dequeue();
		x.enqueue(250060367);
		x.toString();
		assertFalse(x.isEmpty());
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test14312() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.enqueue(1385499177);
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(-2084921385);
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test14313() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test14314() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.toString();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(2097022861);
		variable.dequeue();
		variable.enqueue(885021382);
		variable.enqueue(-310890646);
    }
    @Test
    public void test14315() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.enqueue(-1870640637);
		y.isFull();
		y.isFull();
		y.dequeue();
		y.isFull();
		y.enqueue(-1172371558);
		y.isEmpty();
    }
    @Test
    public void test14316() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(1184552302);
		y.dequeue();
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(-1597629629);
    }
    @Test
    public void test14317() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.isEmpty();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.dequeue();
		x.toString();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test14318() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-368602458);
    }
    @Test
    public void test14319() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test14320() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.toString();
		x.toString();
		assertFalse(x.isFull());
		x.dequeue();
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(1910500219);
		x.toString();
    }
    @Test
    public void test14321() {
		Queue Var = new Queue();
		Var.enqueue(-1855722435);
    }
    @Test
    public void test14322() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.dequeue();
		z.enqueue(-1117336324);
		z.dequeue();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test14323() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(1579201249);
		variable.isFull();
		variable.isFull();
		variable.isFull();
		variable.enqueue(-1729573135);
    }
    @Test
    public void test14324() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(220927735);
		x.isEmpty();
		assertFalse(x.isEmpty());
		assertFalse(x.isEmpty());
		assertFalse(x.isFull());
		assertEquals(220927735, x.dequeue());
		assertTrue(x.isEmpty());
		x.isEmpty();
		assertFalse(x.isFull());
		x.dequeue();
		x.enqueue(-1658815644);
		x.toString();
		x.dequeue();
    }
    @Test
    public void test14325() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(718658481);
		Var.isEmpty();
		assertEquals(718658481, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test14326() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.enqueue(-510888047);
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.dequeue();
    }
    @Test
    public void test14327() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.toString();
    }
    @Test
    public void test14328() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.toString();
		z.isFull();
		z.dequeue();
		z.toString();
		assertEquals("[]", z.toString());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(-404722469);
		assertEquals("[]", z.toString());
		z.enqueue(989947255);
    }
    @Test
    public void test14329() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		assertFalse(y.isFull());
		y.toString();
		assertFalse(y.isFull());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.enqueue(1399901581);
		y.isEmpty();
		y.enqueue(2055080570);
		y.isFull();
    }
    @Test
    public void test14330() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test14331() {
		Queue variable = new Queue();
		variable.enqueue(1916964738);
		variable.isFull();
		variable.dequeue();
		variable.enqueue(395311698);
		variable.isFull();
		assertEquals(395311698, variable.dequeue());
		variable.enqueue(-1375388283);
		assertEquals("[]", variable.toString());
		variable.enqueue(-593375529);
		variable.dequeue();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test14332() {
		Queue z = new Queue();
		z.enqueue(-1188252497);
		z.isFull();
		z.dequeue();
		z.dequeue();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test14333() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.dequeue();
    }
    @Test
    public void test14334() {
		Queue variable = new Queue();
		variable.enqueue(296215764);
		variable.dequeue();
		variable.toString();
		variable.isFull();
		variable.enqueue(1286572828);
    }
    @Test
    public void test14335() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(962902416);
		x.enqueue(-1877609976);
		x.enqueue(1189444706);
		x.toString();
    }
    @Test
    public void test14336() {
		Queue Var = new Queue();
		Var.enqueue(-1957265862);
		Var.dequeue();
		Var.dequeue();
		Var.enqueue(154150299);
		Var.enqueue(-71239249);
		Var.toString();
    }
    @Test
    public void test14337() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-615185669);
		assertFalse(Var.isFull());
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(-1541376874);
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test14338() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-1730396216);
		variable.dequeue();
    }
    @Test
    public void test14339() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(-1188575514);
		variable.dequeue();
    }
    @Test
    public void test14340() {
		Queue x = new Queue();
		x.enqueue(-1087379410);
		x.enqueue(107625853);
		x.isFull();
		x.enqueue(-691706765);
    }
    @Test
    public void test14341() {
		Queue variable = new Queue();
		variable.enqueue(1392409775);
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(-770881176);
		variable.isEmpty();
		variable.toString();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test14342() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test14343() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(1443660421);
		assertEquals("[1443660421]", y.toString());
		y.enqueue(-1691184224);
    }
    @Test
    public void test14344() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(1180009831);
		x.isEmpty();
		x.enqueue(822417948);
		x.dequeue();
		x.enqueue(-1103675642);
		x.toString();
		assertEquals(822417948, x.dequeue());
		assertEquals("[]", x.toString());
		x.enqueue(-1709028237);
    }
    @Test
    public void test14345() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test14346() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.enqueue(441170413);
		assertEquals("[441170413]", x.toString());
		assertEquals(441170413, x.dequeue());
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test14347() {
		Queue x = new Queue();
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test14348() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test14349() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test14350() {
		Queue x = new Queue();
		x.enqueue(1113773277);
		x.toString();
		x.toString();
    }
    @Test
    public void test14351() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.isEmpty();
		z.isFull();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(1914165502);
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.isFull();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test14352() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test14353() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.isFull();
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test14354() {
		Queue x = new Queue();
		x.dequeue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.isEmpty();
		assertFalse(x.isFull());
		x.toString();
		x.toString();
    }
    @Test
    public void test14355() {
		Queue variable = new Queue();
		variable.enqueue(1903035466);
		variable.isFull();
		variable.toString();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test14356() {
		Queue z = new Queue();
		z.enqueue(364674386);
		z.toString();
		z.isFull();
		assertEquals("[364674386]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test14357() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test14358() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-37743681);
		variable.toString();
    }
    @Test
    public void test14359() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.enqueue(-225785773);
		x.enqueue(21112997);
    }
    @Test
    public void test14360() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.toString();
    }
    @Test
    public void test14361() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.toString();
		x.enqueue(-1958619587);
		x.dequeue();
		x.dequeue();
		x.enqueue(982066052);
		x.toString();
    }
    @Test
    public void test14362() {
		Queue x = new Queue();
		x.enqueue(-2114786862);
    }
    @Test
    public void test14363() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-386305862);
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
    }
    @Test
    public void test14364() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test14365() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.dequeue();
		y.enqueue(-1724077659);
    }
    @Test
    public void test14366() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.toString();
		y.toString();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test14367() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.enqueue(-1449690463);
		Var.enqueue(29222786);
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertFalse(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test14368() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(744451266);
		z.enqueue(-2098815337);
		z.dequeue();
		z.enqueue(673013760);
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(1544945121);
		z.isFull();
		assertFalse(z.isEmpty());
		assertEquals(1544945121, z.dequeue());
		z.dequeue();
		z.enqueue(1209609082);
    }
    @Test
    public void test14369() {
		Queue z = new Queue();
		z.toString();
		z.toString();
    }
    @Test
    public void test14370() {
		Queue x = new Queue();
		x.dequeue();
		assertFalse(x.isFull());
		x.enqueue(-398380875);
    }
    @Test
    public void test14371() {
		Queue x = new Queue();
		x.enqueue(235844856);
		assertEquals(235844856, x.dequeue());
		x.dequeue();
		x.isFull();
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.isFull();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.enqueue(262595060);
		x.enqueue(1205410362);
    }
    @Test
    public void test14372() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.enqueue(1380227642);
		variable.enqueue(-722595515);
		assertEquals(1380227642, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test14373() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.enqueue(1221071863);
    }
    @Test
    public void test14374() {
		Queue z = new Queue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.dequeue();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test14375() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		Var.enqueue(916685496);
		assertEquals("[916685496]", Var.toString());
		Var.enqueue(-1182070500);
		Var.isEmpty();
		Var.enqueue(-446872644);
    }
    @Test
    public void test14376() {
		Queue variable = new Queue();
		variable.enqueue(787852531);
		assertFalse(variable.isEmpty());
		variable.toString();
		assertEquals("[787852531]", variable.toString());
		variable.enqueue(2111625668);
		variable.isEmpty();
		variable.enqueue(1992161499);
    }
    @Test
    public void test14377() {
		Queue x = new Queue();
		x.dequeue();
		x.toString();
		x.enqueue(-1377409762);
    }
    @Test
    public void test14378() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		assertFalse(x.isFull());
		x.isFull();
		x.enqueue(-953512678);
		x.dequeue();
    }
    @Test
    public void test14379() {
		Queue variable = new Queue();
		variable.isFull();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.toString();
		variable.enqueue(-764046122);
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.toString();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test14380() {
		Queue x = new Queue();
		x.isFull();
		assertFalse(x.isFull());
		x.isFull();
    }
    @Test
    public void test14381() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-1806835626);
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-1496936192);
		Var.enqueue(589267952);
    }
    @Test
    public void test14382() {
		Queue Var = new Queue();
		Var.enqueue(-1419162327);
    }
    @Test
    public void test14383() {
		Queue variable = new Queue();
		variable.enqueue(1759128735);
		variable.dequeue();
		variable.isFull();
		variable.toString();
		variable.isFull();
		variable.toString();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test14384() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		assertEquals("[]", z.toString());
		z.isEmpty();
    }
    @Test
    public void test14385() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test14386() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
		variable.enqueue(641526254);
		variable.isFull();
		assertEquals("[641526254]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test14387() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.toString();
    }
    @Test
    public void test14388() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test14389() {
		Queue y = new Queue();
		y.isFull();
		y.dequeue();
		y.isEmpty();
		y.enqueue(-41510779);
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test14390() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(-1711489525);
		variable.isFull();
		variable.enqueue(675906364);
		variable.enqueue(1544083005);
		variable.enqueue(-717536148);
		variable.isFull();
    }
    @Test
    public void test14391() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1605538527);
		y.isEmpty();
		y.dequeue();
		y.dequeue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.toString();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test14392() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.enqueue(450403909);
		y.isFull();
		y.isFull();
    }
    @Test
    public void test14393() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(-601888828);
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test14394() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.toString();
		x.enqueue(-1834961180);
		assertTrue(x.isEmpty());
		x.enqueue(-2070630248);
    }
    @Test
    public void test14395() {
		Queue x = new Queue();
		x.enqueue(-362934909);
		x.enqueue(341522185);
		assertFalse(x.isEmpty());
		x.isFull();
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test14396() {
		Queue y = new Queue();
		y.isFull();
		y.toString();
		y.enqueue(1734373204);
		y.toString();
		y.enqueue(-948185128);
		y.isEmpty();
		y.toString();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test14397() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.isFull();
		z.enqueue(175201594);
		z.enqueue(1661942031);
		assertEquals(175201594, z.dequeue());
		z.enqueue(1186392593);
		z.dequeue();
    }
    @Test
    public void test14398() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test14399() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		x.enqueue(865954890);
		x.dequeue();
		x.enqueue(238512331);
    }
    @Test
    public void test14400() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test14401() {
		Queue variable = new Queue();
		variable.enqueue(696507465);
		assertEquals("[696507465]", variable.toString());
		variable.toString();
		assertEquals(696507465, variable.dequeue());
		variable.dequeue();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test14402() {
		Queue variable = new Queue();
		variable.isEmpty();
    }
    @Test
    public void test14403() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.enqueue(1945877074);
		assertEquals("[1945877074]", Var.toString());
		assertFalse(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test14404() {
		Queue Var = new Queue();
		Var.enqueue(1193978901);
		assertFalse(Var.isEmpty());
		Var.isEmpty();
		Var.enqueue(-480456128);
		Var.toString();
		Var.enqueue(-1961165849);
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test14405() {
		Queue z = new Queue();
		z.enqueue(279978435);
		z.isFull();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test14406() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-2066846384);
		Var.isEmpty();
		Var.enqueue(-1712883009);
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test14407() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		variable.isFull();
		variable.enqueue(2106782921);
		assertEquals("[2106782921]", variable.toString());
		assertEquals(2106782921, variable.dequeue());
		variable.isEmpty();
    }
    @Test
    public void test14408() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.toString();
		assertFalse(Var.isFull());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-697142760);
    }
    @Test
    public void test14409() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.enqueue(1501269125);
		variable.isEmpty();
    }
    @Test
    public void test14410() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.enqueue(258528160);
		z.dequeue();
		z.isFull();
		z.enqueue(1658659719);
    }
    @Test
    public void test14411() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.enqueue(746396155);
    }
    @Test
    public void test14412() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.toString();
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-1861231372);
		variable.enqueue(-863712671);
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test14413() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.dequeue();
		x.enqueue(1201012472);
		x.enqueue(-31438173);
    }
    @Test
    public void test14414() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test14415() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test14416() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(1930664879);
		assertEquals("[1930664879]", variable.toString());
		variable.toString();
		assertEquals(1930664879, variable.dequeue());
		variable.enqueue(-1074443475);
		variable.enqueue(868378737);
		assertEquals("[868378737]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test14417() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.toString();
		Var.enqueue(489878742);
		Var.isEmpty();
		assertEquals(489878742, Var.dequeue());
		Var.isFull();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test14418() {
		Queue variable = new Queue();
		variable.enqueue(241273020);
		variable.enqueue(-1244628325);
		variable.isEmpty();
		variable.enqueue(-1094853803);
		variable.isFull();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test14419() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		Var.toString();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test14420() {
		Queue Var = new Queue();
		Var.enqueue(595684401);
		Var.dequeue();
		Var.isFull();
		Var.enqueue(1893619549);
		Var.enqueue(435030692);
    }
    @Test
    public void test14421() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(1654630280);
		variable.isFull();
		assertEquals(1654630280, variable.dequeue());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1134336392);
    }
    @Test
    public void test14422() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(147249514);
		variable.isFull();
		variable.isEmpty();
		variable.enqueue(-1375542830);
		variable.isFull();
		variable.toString();
		variable.enqueue(-154983995);
		variable.enqueue(-1765483754);
    }
    @Test
    public void test14423() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.isFull();
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1285952461);
		y.toString();
		y.toString();
    }
    @Test
    public void test14424() {
		Queue y = new Queue();
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test14425() {
		Queue variable = new Queue();
		variable.enqueue(-1069024564);
    }
    @Test
    public void test14426() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.enqueue(-373216050);
    }
    @Test
    public void test14427() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1852229976);
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test14428() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(1614691941);
		assertFalse(Var.isFull());
		Var.enqueue(1216113433);
		assertEquals(1614691941, Var.dequeue());
		Var.isEmpty();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-2011982411);
		Var.dequeue();
		Var.enqueue(-308172037);
		Var.dequeue();
		Var.enqueue(-2100183255);
    }
    @Test
    public void test14429() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.enqueue(1202042924);
		x.dequeue();
		x.toString();
		x.toString();
		x.dequeue();
		x.enqueue(-1612602242);
    }
    @Test
    public void test14430() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-1710351537);
		assertEquals(-1, y.dequeue());
		y.enqueue(-1047858610);
		y.dequeue();
		y.isFull();
		y.enqueue(-1216231765);
		assertEquals("[]", y.toString());
		y.dequeue();
		y.isFull();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.enqueue(36135265);
    }
    @Test
    public void test14431() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.enqueue(-490051355);
		x.isFull();
		assertFalse(x.isFull());
		x.isFull();
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test14432() {
		Queue x = new Queue();
		x.enqueue(-378741168);
		assertTrue(x.isEmpty());
		x.toString();
		x.toString();
		x.dequeue();
		assertFalse(x.isFull());
		x.isFull();
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.enqueue(1704482910);
		x.enqueue(1913558216);
		x.toString();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.isFull();
		x.isEmpty();
    }
    @Test
    public void test14433() {
		Queue variable = new Queue();
		variable.enqueue(236271371);
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test14434() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.enqueue(-1785677473);
    }
    @Test
    public void test14435() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(2087399799);
		y.enqueue(-15099476);
		y.isEmpty();
		y.enqueue(2046396847);
    }
    @Test
    public void test14436() {
		Queue z = new Queue();
		z.enqueue(-544796177);
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isFull();
		z.dequeue();
		z.isFull();
		z.dequeue();
		z.isFull();
		z.enqueue(-23022770);
    }
    @Test
    public void test14437() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
    }
    @Test
    public void test14438() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(331885293);
		z.isEmpty();
		assertEquals("[331885293]", z.toString());
		z.toString();
		z.toString();
    }
    @Test
    public void test14439() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test14440() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isFull();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.enqueue(541933548);
		x.dequeue();
		x.dequeue();
		assertFalse(x.isFull());
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test14441() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test14442() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(1651707694);
		assertEquals(1651707694, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test14443() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		x.toString();
		x.isFull();
		x.dequeue();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.isFull();
		x.isFull();
		x.toString();
		x.dequeue();
    }
    @Test
    public void test14444() {
		Queue z = new Queue();
		z.enqueue(-286883367);
		z.isFull();
    }
    @Test
    public void test14445() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-193703445);
		x.toString();
		x.dequeue();
		x.enqueue(1259434167);
		x.enqueue(-337756622);
		x.enqueue(1912837335);
		x.dequeue();
    }
    @Test
    public void test14446() {
		Queue z = new Queue();
		z.enqueue(1246598931);
    }
    @Test
    public void test14447() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.enqueue(745366589);
    }
    @Test
    public void test14448() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.enqueue(657148577);
    }
    @Test
    public void test14449() {
		Queue x = new Queue();
		x.enqueue(-749460229);
		x.enqueue(1887039146);
    }
    @Test
    public void test14450() {
		Queue Var = new Queue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.toString();
		Var.toString();
		Var.isEmpty();
    }
    @Test
    public void test14451() {
		Queue variable = new Queue();
		variable.isFull();
    }
    @Test
    public void test14452() {
		Queue x = new Queue();
		x.enqueue(1147185693);
    }
    @Test
    public void test14453() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(-760570861);
		Var.enqueue(-18276967);
		Var.enqueue(476519633);
		Var.toString();
    }
    @Test
    public void test14454() {
		Queue z = new Queue();
		z.enqueue(489910119);
		z.dequeue();
		assertTrue(z.isEmpty());
		z.enqueue(1338938136);
		z.isEmpty();
		z.enqueue(-1881929963);
		z.isFull();
		assertFalse(z.isEmpty());
		z.enqueue(138835698);
    }
    @Test
    public void test14455() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.enqueue(2083139671);
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(-1536471377);
		x.dequeue();
		x.enqueue(926255139);
		assertEquals("[926255139]", x.toString());
		assertEquals("[926255139]", x.toString());
		assertEquals(926255139, x.dequeue());
		x.isEmpty();
    }
    @Test
    public void test14456() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.dequeue();
		x.enqueue(-1237351022);
		x.isFull();
		x.toString();
		x.isFull();
		x.enqueue(-759938337);
    }
    @Test
    public void test14457() {
		Queue y = new Queue();
		y.enqueue(281853924);
		assertEquals(281853924, y.dequeue());
		y.toString();
		y.dequeue();
		y.enqueue(821330824);
		assertEquals("[821330824]", y.toString());
		y.isEmpty();
		y.toString();
		y.toString();
    }
    @Test
    public void test14458() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-162177227);
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.enqueue(22966071);
		assertFalse(y.isEmpty());
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(-1416205727);
		y.dequeue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(-748309007);
		assertEquals(-1, y.dequeue());
		y.enqueue(2071957585);
    }
    @Test
    public void test14459() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.toString();
		assertEquals(-1, z.dequeue());
		z.enqueue(1636071352);
		assertEquals(1636071352, z.dequeue());
		z.dequeue();
		z.enqueue(1832935475);
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test14460() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(881441329);
		z.enqueue(88416678);
		z.toString();
		assertEquals(881441329, z.dequeue());
		z.dequeue();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		z.enqueue(-45415189);
		assertEquals("[]", z.toString());
		z.enqueue(-243319283);
		z.isFull();
		z.enqueue(-1269947171);
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test14461() {
		Queue x = new Queue();
		x.enqueue(1015952985);
		x.isEmpty();
		assertEquals(1015952985, x.dequeue());
		x.enqueue(-85385149);
		x.dequeue();
		x.enqueue(1322798853);
		x.toString();
		assertFalse(x.isFull());
		x.isFull();
		x.toString();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test14462() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test14463() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.enqueue(1588529413);
		x.toString();
		x.dequeue();
    }
    @Test
    public void test14464() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.toString();
    }
    @Test
    public void test14465() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.enqueue(1636659319);
		assertFalse(z.isEmpty());
		assertEquals("[1636659319]", z.toString());
		z.isFull();
		z.enqueue(536579233);
		z.isEmpty();
		assertEquals(1636659319, z.dequeue());
		z.dequeue();
		z.toString();
		assertTrue(z.isEmpty());
		z.toString();
		z.isFull();
    }
    @Test
    public void test14466() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(-251168042);
		variable.dequeue();
		variable.isFull();
		variable.enqueue(-1862517565);
		variable.enqueue(-168004133);
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(-636899824);
		variable.isFull();
    }
    @Test
    public void test14467() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1056194929);
		Var.dequeue();
    }
    @Test
    public void test14468() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.dequeue();
		z.toString();
		z.toString();
		z.enqueue(-27793256);
		z.toString();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test14469() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test14470() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.dequeue();
		y.isFull();
		y.enqueue(1845678725);
		y.toString();
    }
    @Test
    public void test14471() {
		Queue variable = new Queue();
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.enqueue(-1664905195);
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test14472() {
		Queue y = new Queue();
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.toString();
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.isFull();
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(-1711879212);
    }
    @Test
    public void test14473() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(2063920176);
		variable.enqueue(-823184908);
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test14474() {
		Queue y = new Queue();
		y.toString();
    }
    @Test
    public void test14475() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.isFull();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertTrue(y.isEmpty());
		y.toString();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		y.enqueue(-77816616);
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test14476() {
		Queue variable = new Queue();
		variable.toString();
		variable.enqueue(1002693528);
    }
    @Test
    public void test14477() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test14478() {
		Queue Var = new Queue();
		Var.enqueue(-1009558171);
		Var.isEmpty();
		Var.toString();
		Var.enqueue(-84710257);
		Var.dequeue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test14479() {
		Queue y = new Queue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.enqueue(2017999555);
		y.toString();
		y.dequeue();
		y.enqueue(1606401459);
		assertFalse(y.isEmpty());
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.toString();
    }
    @Test
    public void test14480() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
		y.enqueue(1215329591);
		y.enqueue(1913921886);
		assertEquals(1215329591, y.dequeue());
		y.isFull();
		assertEquals("[1913921886]", y.toString());
		assertEquals(1913921886, y.dequeue());
		y.isEmpty();
		y.dequeue();
    }
    @Test
    public void test14481() {
		Queue variable = new Queue();
		variable.enqueue(1608798774);
		variable.enqueue(1281173239);
		variable.enqueue(-1944601536);
		assertFalse(variable.isEmpty());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.isFull();
		assertEquals(1608798774, variable.dequeue());
		variable.enqueue(1303986599);
    }
    @Test
    public void test14482() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(1175246111);
		assertEquals("[1175246111]", Var.toString());
		assertEquals(1175246111, Var.dequeue());
		assertFalse(Var.isFull());
		Var.enqueue(-676647750);
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1649301588);
		Var.enqueue(1178654058);
    }
    @Test
    public void test14483() {
		Queue Var = new Queue();
		Var.enqueue(-1120528490);
		Var.dequeue();
		Var.enqueue(776476596);
		Var.isFull();
		Var.toString();
		Var.enqueue(2135666086);
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test14484() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isEmpty();
    }
    @Test
    public void test14485() {
		Queue Var = new Queue();
		Var.enqueue(-568564204);
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test14486() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.toString();
		x.toString();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.toString();
		x.dequeue();
    }
    @Test
    public void test14487() {
		Queue y = new Queue();
		y.enqueue(-1544063450);
		y.isFull();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.isFull();
		y.isFull();
    }
    @Test
    public void test14488() {
		Queue x = new Queue();
		x.toString();
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test14489() {
		Queue variable = new Queue();
		variable.enqueue(-963090810);
		variable.enqueue(1466865094);
		assertFalse(variable.isFull());
		variable.enqueue(345124068);
		assertFalse(variable.isEmpty());
		assertEquals("[1466865094, 345124068]", variable.toString());
		assertEquals("[1466865094, 345124068]", variable.toString());
		variable.dequeue();
		variable.isFull();
		variable.toString();
		variable.enqueue(-110915195);
		variable.isFull();
    }
    @Test
    public void test14490() {
		Queue Var = new Queue();
		Var.enqueue(1838847039);
		Var.enqueue(1424830377);
		Var.toString();
		Var.toString();
		Var.enqueue(951229093);
		Var.enqueue(199765833);
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		assertEquals("[1838847039, 1424830377, 951229093, 199765833]", Var.toString());
		assertFalse(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test14491() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(645896856);
    }
    @Test
    public void test14492() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test14493() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-891280020);
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.enqueue(832415234);
    }
    @Test
    public void test14494() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(1734402248);
		x.toString();
    }
    @Test
    public void test14495() {
		Queue variable = new Queue();
		variable.enqueue(2011299071);
		assertEquals("[2011299071]", variable.toString());
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isEmpty();
		variable.enqueue(501511795);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test14496() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1990749680);
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test14497() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		z.toString();
		z.toString();
		z.toString();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test14498() {
		Queue z = new Queue();
		z.enqueue(464504503);
    }
    @Test
    public void test14499() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.enqueue(-1994178378);
    }
    @Test
    public void test14500() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isFull();
		variable.enqueue(589955600);
    }
    @Test
    public void test14501() {
		Queue Var = new Queue();
		Var.enqueue(602333193);
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(1685478545);
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.isFull();
		assertFalse(Var.isEmpty());
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test14502() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.isEmpty();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(-620973593);
    }
    @Test
    public void test14503() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		z.toString();
		assertFalse(z.isFull());
		z.isFull();
		z.toString();
		z.isFull();
    }
    @Test
    public void test14504() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(1767425972);
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.isFull();
		y.dequeue();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test14505() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(701979159);
		Var.toString();
		assertFalse(Var.isFull());
		Var.isFull();
		assertEquals("[701979159]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test14506() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(1172769838);
		Var.dequeue();
    }
    @Test
    public void test14507() {
		Queue Var = new Queue();
		Var.enqueue(-938128918);
		Var.enqueue(1760876711);
		Var.toString();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.toString();
		Var.isEmpty();
		Var.enqueue(1948054880);
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test14508() {
		Queue x = new Queue();
		x.isFull();
    }
    @Test
    public void test14509() {
		Queue z = new Queue();
		z.isFull();
		z.dequeue();
		z.toString();
		z.enqueue(-84019102);
		z.toString();
		assertFalse(z.isFull());
		z.toString();
		z.dequeue();
    }
    @Test
    public void test14510() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(1295262803);
    }
    @Test
    public void test14511() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.isEmpty();
		z.enqueue(1345917034);
		assertFalse(z.isFull());
		z.isFull();
		assertEquals("[1345917034]", z.toString());
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test14512() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.enqueue(-1012422355);
		Var.enqueue(-1468516176);
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.enqueue(432238634);
    }
    @Test
    public void test14513() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-1395882450);
		Var.toString();
		Var.enqueue(-1473305855);
		assertTrue(Var.isEmpty());
		Var.enqueue(-360924380);
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-615138594);
    }
    @Test
    public void test14514() {
		Queue variable = new Queue();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.enqueue(-1422010465);
		variable.toString();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.enqueue(-836809221);
    }
    @Test
    public void test14515() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		y.dequeue();
		y.isFull();
		y.enqueue(146773925);
		y.toString();
		y.isEmpty();
		y.isFull();
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test14516() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
    }
    @Test
    public void test14517() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-1716207948);
		Var.dequeue();
    }
    @Test
    public void test14518() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.toString();
		assertEquals("[]", y.toString());
		y.isFull();
		y.enqueue(-2090937269);
		y.isEmpty();
		y.toString();
		y.isFull();
    }
    @Test
    public void test14519() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test14520() {
		Queue y = new Queue();
		y.enqueue(-2109148237);
		assertEquals("[]", y.toString());
		y.enqueue(-1142109738);
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(700259784);
		assertFalse(y.isEmpty());
		y.enqueue(1384039840);
		assertEquals(700259784, y.dequeue());
		y.dequeue();
    }
    @Test
    public void test14521() {
		Queue Var = new Queue();
		Var.isEmpty();
    }
    @Test
    public void test14522() {
		Queue variable = new Queue();
		variable.dequeue();
    }
    @Test
    public void test14523() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(1490348421);
		x.enqueue(110531888);
    }
    @Test
    public void test14524() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
		Var.enqueue(-1037017661);
		Var.isEmpty();
		Var.toString();
		Var.enqueue(-2136890540);
		Var.enqueue(392817341);
		Var.enqueue(1326443007);
		Var.isFull();
    }
    @Test
    public void test14525() {
		Queue Var = new Queue();
		Var.enqueue(1449182198);
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test14526() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.dequeue();
		assertTrue(x.isEmpty());
		assertEquals("[]", x.toString());
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(699607894);
		x.isFull();
    }
    @Test
    public void test14527() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(-1706034479);
		z.isEmpty();
    }
    @Test
    public void test14528() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.toString();
		x.isFull();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test14529() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.toString();
		x.isFull();
		x.toString();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test14530() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(-41375611);
		assertEquals("[]", Var.toString());
		Var.enqueue(-892697464);
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test14531() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		Var.dequeue();
		Var.enqueue(1316725380);
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.isEmpty();
    }
    @Test
    public void test14532() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test14533() {
		Queue y = new Queue();
		y.enqueue(-436105258);
		y.toString();
		y.toString();
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertEquals("[]", y.toString());
		y.enqueue(1240377692);
		assertEquals(1240377692, y.dequeue());
		assertFalse(y.isFull());
		y.enqueue(-1832621238);
		y.toString();
		y.enqueue(565590580);
    }
    @Test
    public void test14534() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(661123212);
		y.enqueue(369880289);
    }
    @Test
    public void test14535() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(-2015801407);
		Var.toString();
		Var.enqueue(826040571);
    }
    @Test
    public void test14536() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(1461222633);
		assertFalse(variable.isFull());
		variable.enqueue(-1229466594);
		variable.isFull();
    }
    @Test
    public void test14537() {
		Queue Var = new Queue();
		Var.enqueue(1814776519);
		Var.toString();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test14538() {
		Queue x = new Queue();
		x.isFull();
		x.isEmpty();
		x.enqueue(-675868968);
		x.enqueue(-1888436243);
		x.isEmpty();
    }
    @Test
    public void test14539() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.dequeue();
		z.isFull();
		z.dequeue();
		z.dequeue();
		z.isFull();
		z.isFull();
		assertTrue(z.isEmpty());
		z.enqueue(1800543939);
    }
    @Test
    public void test14540() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
    }
    @Test
    public void test14541() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(2066581631);
		z.isFull();
		assertEquals("[2066581631]", z.toString());
		z.dequeue();
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test14542() {
		Queue y = new Queue();
		y.enqueue(-980334448);
		y.isFull();
    }
    @Test
    public void test14543() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		assertEquals("[]", y.toString());
		y.enqueue(-1190765750);
		y.enqueue(1830329436);
		assertFalse(y.isFull());
		y.isFull();
		y.dequeue();
    }
    @Test
    public void test14544() {
		Queue Var = new Queue();
		Var.enqueue(-166657740);
		Var.isEmpty();
    }
    @Test
    public void test14545() {
		Queue variable = new Queue();
		variable.enqueue(-1987908101);
		variable.isEmpty();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(558518295);
		variable.isEmpty();
		variable.toString();
		variable.toString();
		variable.dequeue();
		variable.enqueue(-1703499734);
    }
    @Test
    public void test14546() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test14547() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test14548() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.dequeue();
		z.dequeue();
		z.enqueue(1982623053);
		z.dequeue();
		z.enqueue(1308578505);
		z.isEmpty();
    }
    @Test
    public void test14549() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals("[]", Var.toString());
		assertEquals(-1, Var.dequeue());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.toString();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.toString();
		Var.toString();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test14550() {
		Queue Var = new Queue();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test14551() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1915791689);
		variable.isEmpty();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1658250844);
		variable.isEmpty();
		variable.enqueue(939287172);
		variable.isFull();
    }
    @Test
    public void test14552() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(-202941288);
		y.dequeue();
    }
    @Test
    public void test14553() {
		Queue Var = new Queue();
		Var.enqueue(1672777135);
		Var.isFull();
    }
    @Test
    public void test14554() {
		Queue z = new Queue();
		z.dequeue();
		z.toString();
		z.isEmpty();
		z.toString();
		z.enqueue(1592662483);
		z.toString();
		z.toString();
		assertEquals(1592662483, z.dequeue());
		z.isFull();
		z.isFull();
		assertFalse(z.isFull());
		z.dequeue();
    }
    @Test
    public void test14555() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		z.isEmpty();
		z.toString();
		assertTrue(z.isEmpty());
		z.isFull();
		z.dequeue();
		z.isEmpty();
		z.enqueue(1150719984);
    }
    @Test
    public void test14556() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(-1509696531);
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test14557() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		variable.enqueue(-845757204);
		variable.isEmpty();
		variable.enqueue(1520986624);
		variable.isEmpty();
    }
    @Test
    public void test14558() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.isFull();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.toString();
		assertEquals("[]", z.toString());
		z.enqueue(2107631826);
    }
    @Test
    public void test14559() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(-227722406);
		y.isEmpty();
    }
    @Test
    public void test14560() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(906538787);
		z.enqueue(-1098937894);
		z.dequeue();
    }
    @Test
    public void test14561() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.enqueue(399265177);
		variable.toString();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
		variable.enqueue(472867747);
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test14562() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test14563() {
		Queue x = new Queue();
		x.enqueue(-1321634435);
		x.enqueue(226923019);
		assertFalse(x.isFull());
		assertEquals(226923019, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.enqueue(-1493690763);
    }
    @Test
    public void test14564() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-804930815);
		z.dequeue();
    }
    @Test
    public void test14565() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.toString();
		Var.dequeue();
		Var.isFull();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.isFull();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		Var.enqueue(-29657708);
		Var.isEmpty();
    }
    @Test
    public void test14566() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1812348990);
		assertEquals("[1812348990]", x.toString());
		x.isFull();
		x.toString();
		x.isFull();
		assertEquals("[1812348990]", x.toString());
		assertEquals("[1812348990]", x.toString());
		x.enqueue(192602006);
		x.isFull();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test14567() {
		Queue x = new Queue();
		x.enqueue(-590664611);
		x.toString();
		x.isEmpty();
		x.enqueue(2073857183);
		x.toString();
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.toString();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.dequeue();
    }
    @Test
    public void test14568() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test14569() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.enqueue(-1237571600);
		variable.isEmpty();
    }
    @Test
    public void test14570() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.dequeue();
		variable.isFull();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.enqueue(979707391);
		variable.enqueue(853846671);
    }
    @Test
    public void test14571() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
		z.toString();
		z.enqueue(1184621908);
		assertFalse(z.isEmpty());
		z.isFull();
		z.enqueue(804398377);
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-1444343733);
		z.isEmpty();
    }
    @Test
    public void test14572() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test14573() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
		z.toString();
		z.toString();
		assertTrue(z.isEmpty());
		z.isFull();
    }
    @Test
    public void test14574() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.enqueue(-1868421807);
		y.toString();
		y.dequeue();
    }
    @Test
    public void test14575() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.toString();
		Var.toString();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertEquals("[]", Var.toString());
		Var.enqueue(-1237059883);
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isFull();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test14576() {
		Queue z = new Queue();
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isFull();
		z.toString();
    }
    @Test
    public void test14577() {
		Queue z = new Queue();
		z.enqueue(-1939880500);
		assertEquals("[]", z.toString());
		z.enqueue(-117532670);
		assertFalse(z.isFull());
		z.isFull();
		z.toString();
		z.enqueue(-1721000106);
		z.isFull();
    }
    @Test
    public void test14578() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.dequeue();
    }
    @Test
    public void test14579() {
		Queue z = new Queue();
		z.dequeue();
		z.isFull();
		z.enqueue(1885264073);
    }
    @Test
    public void test14580() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isFull();
    }
    @Test
    public void test14581() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.enqueue(-904626615);
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.enqueue(1450016952);
		assertEquals("[1450016952]", x.toString());
		assertFalse(x.isFull());
		x.isFull();
		assertEquals(1450016952, x.dequeue());
		x.isEmpty();
		x.isFull();
		x.isEmpty();
		assertFalse(x.isFull());
		x.isFull();
    }
    @Test
    public void test14582() {
		Queue z = new Queue();
		z.enqueue(-165394775);
    }
    @Test
    public void test14583() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		z.enqueue(855792831);
		z.dequeue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.toString();
		z.isFull();
    }
    @Test
    public void test14584() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test14585() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1942685208);
		Var.dequeue();
		Var.isEmpty();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		assertTrue(Var.isEmpty());
		Var.enqueue(-941707746);
		Var.isFull();
		Var.isEmpty();
    }
    @Test
    public void test14586() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.dequeue();
		x.enqueue(-882469921);
		x.dequeue();
		x.isFull();
		assertTrue(x.isEmpty());
		x.enqueue(-334382626);
		assertTrue(x.isEmpty());
		x.enqueue(-1140351624);
    }
    @Test
    public void test14587() {
		Queue Var = new Queue();
		Var.enqueue(2117504214);
		Var.enqueue(1401703361);
		Var.isFull();
		assertEquals(2117504214, Var.dequeue());
		Var.enqueue(-1658684713);
    }
    @Test
    public void test14588() {
		Queue variable = new Queue();
		variable.enqueue(849890838);
		variable.dequeue();
		variable.toString();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-1453245690);
		variable.dequeue();
    }
    @Test
    public void test14589() {
		Queue x = new Queue();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(-1993966657);
		assertEquals("[]", x.toString());
		x.enqueue(2069310080);
		assertEquals("[2069310080]", x.toString());
		assertFalse(x.isEmpty());
		x.toString();
		x.toString();
		x.toString();
		x.enqueue(-684495536);
    }
    @Test
    public void test14590() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-292709690);
    }
    @Test
    public void test14591() {
		Queue z = new Queue();
		z.enqueue(-240638332);
		assertFalse(z.isFull());
		z.dequeue();
		assertFalse(z.isFull());
		z.enqueue(1783567387);
		z.enqueue(1199832168);
		z.isFull();
		z.toString();
		z.isFull();
    }
    @Test
    public void test14592() {
		Queue y = new Queue();
		y.enqueue(2047376578);
		y.enqueue(553600321);
		y.toString();
		y.dequeue();
		y.isFull();
		y.enqueue(-1546746815);
		y.dequeue();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test14593() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(1557153961);
		assertEquals("[1557153961]", Var.toString());
		Var.toString();
		Var.enqueue(-1181434312);
		Var.toString();
		Var.toString();
		Var.dequeue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(758372636);
    }
    @Test
    public void test14594() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(-820252749);
		y.isFull();
		assertTrue(y.isEmpty());
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
		y.enqueue(-1807866063);
		y.enqueue(-902941815);
		y.isFull();
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test14595() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test14596() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.toString();
		variable.dequeue();
		variable.isFull();
		variable.dequeue();
		variable.enqueue(1959889);
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test14597() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-2013129596);
		x.enqueue(33001781);
		x.toString();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.toString();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		x.isFull();
		assertTrue(x.isEmpty());
		x.enqueue(91897917);
    }
    @Test
    public void test14598() {
		Queue x = new Queue();
		x.toString();
    }
    @Test
    public void test14599() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1817003986);
		x.isFull();
		x.enqueue(1303629879);
		assertFalse(x.isEmpty());
		x.dequeue();
		x.toString();
		assertEquals("[1303629879]", x.toString());
		x.enqueue(-1270913242);
		x.isEmpty();
    }
    @Test
    public void test14600() {
		Queue z = new Queue();
		z.enqueue(-929945651);
		assertTrue(z.isEmpty());
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.isEmpty();
		assertFalse(z.isFull());
		z.isFull();
    }
    @Test
    public void test14601() {
		Queue x = new Queue();
		x.isFull();
		x.toString();
    }
    @Test
    public void test14602() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(427992731);
    }
    @Test
    public void test14603() {
		Queue z = new Queue();
		z.enqueue(315713387);
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test14604() {
		Queue y = new Queue();
		y.enqueue(1777601793);
    }
    @Test
    public void test14605() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.enqueue(801899780);
		x.isEmpty();
		x.isEmpty();
		assertFalse(x.isEmpty());
		assertEquals("[801899780]", x.toString());
		x.isEmpty();
		assertFalse(x.isFull());
		x.dequeue();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test14606() {
		Queue z = new Queue();
		z.enqueue(-1825030087);
		z.enqueue(-1334984188);
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.enqueue(1469052961);
		z.toString();
		assertFalse(z.isEmpty());
		z.enqueue(-797473570);
    }
    @Test
    public void test14607() {
		Queue y = new Queue();
		y.enqueue(-449692780);
		y.isEmpty();
		y.isFull();
		y.isEmpty();
		y.enqueue(731730402);
		y.enqueue(-1393835649);
		y.toString();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test14608() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.toString();
		x.enqueue(1787251464);
		x.dequeue();
		x.isFull();
		x.isFull();
		x.dequeue();
		assertTrue(x.isEmpty());
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test14609() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.toString();
		variable.enqueue(291533436);
    }
    @Test
    public void test14610() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		z.isEmpty();
    }
    @Test
    public void test14611() {
		Queue x = new Queue();
		x.isFull();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.enqueue(574654346);
		x.enqueue(1256755578);
		x.enqueue(849727035);
		x.dequeue();
    }
    @Test
    public void test14612() {
		Queue Var = new Queue();
		Var.enqueue(-670474702);
		Var.enqueue(315628646);
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		Var.toString();
    }
    @Test
    public void test14613() {
		Queue variable = new Queue();
		variable.enqueue(-677269032);
		variable.isFull();
    }
    @Test
    public void test14614() {
		Queue x = new Queue();
		x.isEmpty();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		x.isEmpty();
    }
    @Test
    public void test14615() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test14616() {
		Queue z = new Queue();
		z.enqueue(1614807054);
		z.enqueue(194027605);
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(-97880496);
		z.isEmpty();
		z.isFull();
		assertEquals(1614807054, z.dequeue());
		z.enqueue(661441200);
		z.enqueue(-1328459683);
    }
    @Test
    public void test14617() {
		Queue z = new Queue();
		assertEquals("[]", z.toString());
		z.toString();
		z.enqueue(-2027675479);
		z.isFull();
		z.isEmpty();
		z.toString();
		z.toString();
		z.enqueue(464276702);
		z.enqueue(-1331407979);
		z.dequeue();
    }
    @Test
    public void test14618() {
		Queue Var = new Queue();
		Var.enqueue(327126003);
		Var.isFull();
		Var.enqueue(783853532);
    }
    @Test
    public void test14619() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.enqueue(1173403728);
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(-314390209);
		z.enqueue(551396747);
		z.isFull();
		z.enqueue(1792794458);
    }
    @Test
    public void test14620() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.toString();
		x.enqueue(969925226);
		x.isFull();
    }
    @Test
    public void test14621() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test14622() {
		Queue Var = new Queue();
		Var.enqueue(957200629);
		assertFalse(Var.isFull());
		assertEquals("[957200629]", Var.toString());
		Var.toString();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(1082676541);
		Var.enqueue(618917817);
		Var.dequeue();
		Var.enqueue(-1053179635);
		assertFalse(Var.isEmpty());
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test14623() {
		Queue y = new Queue();
		assertFalse(y.isFull());
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.toString();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.enqueue(-1145041939);
		y.isEmpty();
    }
    @Test
    public void test14624() {
		Queue Var = new Queue();
		Var.enqueue(1918122129);
		Var.dequeue();
		Var.enqueue(-633871700);
    }
    @Test
    public void test14625() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(1309858483);
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.enqueue(337404102);
		Var.enqueue(1914898651);
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test14626() {
		Queue Var = new Queue();
		Var.enqueue(621182112);
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(1433941163);
    }
    @Test
    public void test14627() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(1253677166);
		variable.toString();
    }
    @Test
    public void test14628() {
		Queue x = new Queue();
		x.enqueue(-716583082);
    }
    @Test
    public void test14629() {
		Queue y = new Queue();
		y.isEmpty();
		y.toString();
		assertFalse(y.isFull());
		y.enqueue(266626170);
    }
    @Test
    public void test14630() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test14631() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test14632() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-158920498);
		Var.dequeue();
		Var.enqueue(403653261);
    }
    @Test
    public void test14633() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.enqueue(-1757495070);
		x.toString();
		x.isFull();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.enqueue(1761608956);
    }
    @Test
    public void test14634() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-899080364);
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(1090817053);
		assertEquals("[1090817053]", Var.toString());
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test14635() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.enqueue(-1156842668);
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isEmpty();
		z.toString();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		z.enqueue(-1745510664);
		z.toString();
    }
    @Test
    public void test14636() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1481033007);
		y.isFull();
		y.dequeue();
		y.enqueue(399560094);
    }
    @Test
    public void test14637() {
		Queue Var = new Queue();
		Var.enqueue(-1125850450);
		assertTrue(Var.isEmpty());
		Var.isFull();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(1596663726);
		Var.enqueue(239046985);
		Var.isEmpty();
		Var.isEmpty();
		assertEquals("[1596663726, 239046985]", Var.toString());
		Var.enqueue(-243021785);
		Var.enqueue(-1373546466);
		assertFalse(Var.isEmpty());
		assertEquals("[1596663726, 239046985]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test14638() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test14639() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.toString();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.enqueue(-1308746122);
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test14640() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(1565847358);
    }
    @Test
    public void test14641() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-745985821);
		Var.dequeue();
    }
    @Test
    public void test14642() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1409862908);
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.toString();
		assertFalse(Var.isFull());
		Var.toString();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test14643() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(-800874491);
		Var.isFull();
		Var.isFull();
		Var.toString();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test14644() {
		Queue z = new Queue();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.isFull();
		z.enqueue(-706827928);
    }
    @Test
    public void test14645() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test14646() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.enqueue(2083523375);
		assertFalse(x.isEmpty());
		assertFalse(x.isEmpty());
		x.enqueue(-1774251304);
		assertFalse(x.isFull());
		x.toString();
		assertFalse(x.isEmpty());
		assertFalse(x.isEmpty());
		x.toString();
		x.toString();
    }
    @Test
    public void test14647() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.enqueue(355677760);
		Var.enqueue(-1080290680);
		Var.dequeue();
		Var.enqueue(1457981724);
    }
    @Test
    public void test14648() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(319133488);
		y.dequeue();
		y.isFull();
		y.toString();
		y.isFull();
		y.isEmpty();
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
    }
    @Test
    public void test14649() {
		Queue x = new Queue();
		x.enqueue(890097193);
		x.enqueue(-1101948953);
		x.isEmpty();
    }
    @Test
    public void test14650() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isFull();
    }
    @Test
    public void test14651() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test14652() {
		Queue Var = new Queue();
		Var.isFull();
    }
    @Test
    public void test14653() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.toString();
		y.enqueue(-75299089);
		y.enqueue(-1980786757);
		y.dequeue();
		y.toString();
    }
    @Test
    public void test14654() {
		Queue x = new Queue();
		x.enqueue(-717411615);
		x.enqueue(-847334760);
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test14655() {
		Queue x = new Queue();
		x.enqueue(-912456755);
		assertTrue(x.isEmpty());
		x.enqueue(-907444735);
		x.enqueue(-1321774627);
		assertEquals("[]", x.toString());
		x.enqueue(39928131);
		x.dequeue();
    }
    @Test
    public void test14656() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(-1399577616);
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test14657() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.enqueue(701195091);
		y.dequeue();
		assertTrue(y.isEmpty());
		assertTrue(y.isEmpty());
		y.enqueue(439053288);
		y.isFull();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.isFull();
		assertFalse(y.isEmpty());
		y.dequeue();
		y.dequeue();
		y.toString();
    }
    @Test
    public void test14658() {
		Queue x = new Queue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isEmpty();
		x.isFull();
		x.toString();
		x.enqueue(-402481438);
		x.toString();
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test14659() {
		Queue Var = new Queue();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.enqueue(1832906481);
		assertFalse(Var.isFull());
		assertFalse(Var.isEmpty());
		assertFalse(Var.isEmpty());
		Var.enqueue(2041147646);
		assertEquals("[1832906481, 2041147646]", Var.toString());
		assertEquals("[1832906481, 2041147646]", Var.toString());
		Var.isEmpty();
		Var.enqueue(2016616027);
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test14660() {
		Queue z = new Queue();
		z.enqueue(1202882838);
		z.isFull();
    }
    @Test
    public void test14661() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-998404173);
		y.dequeue();
		assertEquals("[]", y.toString());
		y.dequeue();
		y.enqueue(-1161260258);
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.toString();
		y.enqueue(-665145630);
		y.toString();
    }
    @Test
    public void test14662() {
		Queue variable = new Queue();
		variable.enqueue(-553154248);
		variable.toString();
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.enqueue(-2109356367);
		assertEquals("[]", variable.toString());
		variable.enqueue(2105411452);
    }
    @Test
    public void test14663() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test14664() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.isEmpty();
		x.isFull();
		assertTrue(x.isEmpty());
		x.enqueue(-841903715);
		assertFalse(x.isFull());
		x.isFull();
    }
    @Test
    public void test14665() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.enqueue(478633164);
		assertFalse(z.isFull());
		z.enqueue(-460880691);
		z.dequeue();
		assertTrue(z.isEmpty());
		z.isFull();
		assertEquals("[]", z.toString());
		z.isFull();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.enqueue(1527889316);
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test14666() {
		Queue y = new Queue();
		y.dequeue();
		y.dequeue();
    }
    @Test
    public void test14667() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.enqueue(-445420250);
		variable.enqueue(-1355983949);
		variable.enqueue(-952245167);
    }
    @Test
    public void test14668() {
		Queue z = new Queue();
		z.dequeue();
		assertFalse(z.isFull());
		z.toString();
		z.enqueue(650626783);
		z.isFull();
		z.isFull();
		assertEquals(650626783, z.dequeue());
		z.toString();
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test14669() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test14670() {
		Queue Var = new Queue();
		Var.enqueue(-2054398053);
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.enqueue(777882249);
		Var.enqueue(1429898039);
		Var.enqueue(1183255690);
		Var.enqueue(-607226691);
		Var.dequeue();
    }
    @Test
    public void test14671() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.enqueue(609885848);
		Var.enqueue(360947829);
		Var.toString();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(8886965);
		Var.toString();
    }
    @Test
    public void test14672() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1379437918);
		z.toString();
    }
    @Test
    public void test14673() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.dequeue();
		z.enqueue(-791283188);
		z.toString();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.toString();
		z.dequeue();
    }
    @Test
    public void test14674() {
		Queue variable = new Queue();
		variable.enqueue(1450366764);
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isFull();
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test14675() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.isFull();
		variable.toString();
    }
    @Test
    public void test14676() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-156505180);
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.toString();
		x.isFull();
		assertFalse(x.isFull());
		x.isFull();
    }
    @Test
    public void test14677() {
		Queue x = new Queue();
		x.toString();
		x.isFull();
    }
    @Test
    public void test14678() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.dequeue();
		x.dequeue();
    }
    @Test
    public void test14679() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test14680() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test14681() {
		Queue x = new Queue();
		x.enqueue(-171363915);
		x.enqueue(-325873722);
    }
    @Test
    public void test14682() {
		Queue y = new Queue();
		y.enqueue(1591292955);
		y.isEmpty();
		y.enqueue(-2051214220);
		y.isEmpty();
		assertEquals("[1591292955]", y.toString());
		y.toString();
		y.isEmpty();
		y.toString();
    }
    @Test
    public void test14683() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.dequeue();
    }
    @Test
    public void test14684() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		z.toString();
		z.isEmpty();
		z.isFull();
		assertEquals("[]", z.toString());
		z.isFull();
		z.enqueue(-914626036);
		z.isEmpty();
    }
    @Test
    public void test14685() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test14686() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		assertFalse(x.isFull());
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.toString();
		assertEquals("[]", x.toString());
		x.enqueue(1971217203);
		assertEquals(1971217203, x.dequeue());
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test14687() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.enqueue(-2065348643);
		z.toString();
		z.isEmpty();
		z.enqueue(-1063504480);
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.toString();
		assertTrue(z.isEmpty());
		z.enqueue(895338439);
    }
    @Test
    public void test14688() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.enqueue(1175151801);
		variable.enqueue(-1712549826);
		variable.toString();
    }
    @Test
    public void test14689() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(196319803);
		y.isFull();
		assertFalse(y.isFull());
		y.enqueue(-614180798);
    }
    @Test
    public void test14690() {
		Queue x = new Queue();
		x.toString();
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.enqueue(-1468973293);
		assertTrue(x.isEmpty());
		x.toString();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.isEmpty();
		x.toString();
		x.enqueue(-161686375);
    }
    @Test
    public void test14691() {
		Queue Var = new Queue();
		Var.enqueue(-1886343691);
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test14692() {
		Queue variable = new Queue();
		variable.enqueue(-1491968812);
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test14693() {
		Queue y = new Queue();
		y.enqueue(1309984631);
		y.toString();
		assertFalse(y.isFull());
		assertFalse(y.isEmpty());
		y.isEmpty();
		y.isEmpty();
		assertFalse(y.isEmpty());
		assertEquals("[1309984631]", y.toString());
		y.isFull();
		y.enqueue(-316149195);
    }
    @Test
    public void test14694() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test14695() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test14696() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test14697() {
		Queue z = new Queue();
		z.isFull();
		z.toString();
    }
    @Test
    public void test14698() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isFull();
		variable.enqueue(-1920518829);
		variable.isFull();
    }
    @Test
    public void test14699() {
		Queue y = new Queue();
		y.toString();
		y.toString();
    }
    @Test
    public void test14700() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.dequeue();
		x.enqueue(993277568);
		x.isFull();
		x.enqueue(1024812049);
		x.dequeue();
		assertEquals(1024812049, x.dequeue());
		x.enqueue(841451044);
    }
    @Test
    public void test14701() {
		Queue Var = new Queue();
		Var.enqueue(1020927781);
		Var.isFull();
		Var.toString();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.toString();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(119314276);
    }
    @Test
    public void test14702() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.enqueue(135026262);
		z.enqueue(-472004980);
		z.enqueue(1188273689);
		z.isFull();
		z.isFull();
    }
    @Test
    public void test14703() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
    }
    @Test
    public void test14704() {
		Queue variable = new Queue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-1886999127);
		variable.enqueue(757758734);
		assertEquals("[757758734]", variable.toString());
		variable.enqueue(704938562);
		variable.isEmpty();
    }
    @Test
    public void test14705() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(505084351);
		assertEquals(505084351, x.dequeue());
		x.toString();
		x.dequeue();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test14706() {
		Queue Var = new Queue();
		Var.enqueue(-555988045);
		Var.enqueue(-612433236);
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(1079073769);
		Var.isEmpty();
		Var.isFull();
		Var.enqueue(1462917226);
		assertFalse(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test14707() {
		Queue y = new Queue();
		y.dequeue();
		y.isFull();
		assertFalse(y.isFull());
		y.toString();
		y.isFull();
		y.enqueue(-474973460);
		assertEquals("[]", y.toString());
		y.isFull();
    }
    @Test
    public void test14708() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		y.dequeue();
    }
    @Test
    public void test14709() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test14710() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.enqueue(381807092);
		assertEquals(381807092, Var.dequeue());
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test14711() {
		Queue z = new Queue();
		z.enqueue(-666584996);
		z.toString();
		z.isEmpty();
		z.enqueue(-114615007);
		z.isEmpty();
    }
    @Test
    public void test14712() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.enqueue(-59996986);
		z.enqueue(1211328310);
		z.isEmpty();
		z.isFull();
		z.enqueue(187059932);
		assertFalse(z.isEmpty());
		z.isFull();
		assertEquals("[1211328310, 187059932]", z.toString());
		z.enqueue(2082121947);
    }
    @Test
    public void test14713() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		assertFalse(x.isFull());
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(812316416);
		x.enqueue(-2115074548);
		x.dequeue();
    }
    @Test
    public void test14714() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.enqueue(2008815350);
		variable.dequeue();
		variable.toString();
		assertTrue(variable.isEmpty());
		assertEquals("[]", variable.toString());
		variable.isFull();
    }
    @Test
    public void test14715() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(10133943);
		x.toString();
		assertEquals("[10133943]", x.toString());
		x.toString();
		x.enqueue(-286619079);
		x.isFull();
		x.toString();
		x.isEmpty();
    }
    @Test
    public void test14716() {
		Queue x = new Queue();
		x.isEmpty();
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.enqueue(1372931310);
		x.toString();
		x.isEmpty();
		x.enqueue(1828234085);
		x.toString();
    }
    @Test
    public void test14717() {
		Queue Var = new Queue();
		Var.enqueue(1060409906);
    }
    @Test
    public void test14718() {
		Queue z = new Queue();
		z.toString();
		assertEquals("[]", z.toString());
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.dequeue();
		z.toString();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test14719() {
		Queue Var = new Queue();
		Var.enqueue(-1773793084);
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.enqueue(-2014133946);
		Var.enqueue(827680241);
		Var.isEmpty();
		Var.enqueue(-1273093691);
		assertEquals(827680241, Var.dequeue());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.enqueue(1313589520);
		Var.enqueue(-1256465861);
    }
    @Test
    public void test14720() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(930539446);
		variable.toString();
		assertEquals("[930539446]", variable.toString());
		assertEquals(930539446, variable.dequeue());
		variable.isFull();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test14721() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.enqueue(-1082116607);
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(602585665);
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.dequeue();
		assertTrue(x.isEmpty());
		x.dequeue();
		x.isFull();
    }
    @Test
    public void test14722() {
		Queue variable = new Queue();
		variable.enqueue(1722599612);
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test14723() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.enqueue(-1823441028);
		z.isEmpty();
		z.enqueue(391405279);
		z.enqueue(-1147785814);
    }
    @Test
    public void test14724() {
		Queue y = new Queue();
		y.isFull();
		y.enqueue(1458302440);
    }
    @Test
    public void test14725() {
		Queue variable = new Queue();
		variable.enqueue(-882941242);
		variable.dequeue();
		variable.isFull();
    }
    @Test
    public void test14726() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test14727() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-804090010);
		variable.toString();
		variable.dequeue();
		variable.enqueue(-1957162639);
		variable.enqueue(1730420477);
		variable.enqueue(979953766);
		variable.toString();
    }
    @Test
    public void test14728() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(1803088950);
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		variable.enqueue(1971266593);
		variable.toString();
		assertFalse(variable.isFull());
		variable.enqueue(36507081);
		variable.isEmpty();
    }
    @Test
    public void test14729() {
		Queue x = new Queue();
		x.isFull();
		assertFalse(x.isFull());
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.enqueue(-1852170117);
		assertTrue(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test14730() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(-1707465712);
    }
    @Test
    public void test14731() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(1716042030);
		Var.isFull();
		Var.toString();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.toString();
		Var.enqueue(1413728868);
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test14732() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.enqueue(120873973);
		Var.dequeue();
		Var.enqueue(-776003097);
		Var.isFull();
		Var.isEmpty();
		assertFalse(Var.isFull());
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test14733() {
		Queue z = new Queue();
		z.enqueue(-1112117207);
		z.enqueue(-707401772);
		z.dequeue();
		z.dequeue();
		z.dequeue();
    }
    @Test
    public void test14734() {
		Queue x = new Queue();
		x.enqueue(204476417);
		x.dequeue();
		x.isEmpty();
		x.toString();
    }
    @Test
    public void test14735() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(-1425922434);
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.isFull();
    }
    @Test
    public void test14736() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.dequeue();
    }
    @Test
    public void test14737() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test14738() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(-65372237);
		x.enqueue(1404695164);
    }
    @Test
    public void test14739() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test14740() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test14741() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1658711122);
		Var.isFull();
		Var.enqueue(1069568737);
		Var.enqueue(316590949);
		Var.isEmpty();
		Var.toString();
		Var.enqueue(1944010555);
    }
    @Test
    public void test14742() {
		Queue Var = new Queue();
		Var.enqueue(-1998869298);
		Var.enqueue(1808045235);
		Var.dequeue();
		Var.enqueue(-1274942335);
		Var.enqueue(2128787565);
		Var.isFull();
		Var.enqueue(1707815465);
		Var.toString();
    }
    @Test
    public void test14743() {
		Queue z = new Queue();
		z.isEmpty();
		z.toString();
		assertFalse(z.isFull());
		z.isFull();
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test14744() {
		Queue Var = new Queue();
		Var.enqueue(670456330);
		assertFalse(Var.isFull());
		Var.enqueue(1423681449);
    }
    @Test
    public void test14745() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.enqueue(-262563746);
		Var.enqueue(-336020169);
		Var.isFull();
    }
    @Test
    public void test14746() {
		Queue y = new Queue();
		y.enqueue(1124181068);
		y.isFull();
		y.dequeue();
		y.toString();
		y.toString();
		y.isFull();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test14747() {
		Queue y = new Queue();
		y.enqueue(1523680547);
		y.isEmpty();
    }
    @Test
    public void test14748() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		x.isFull();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isFull();
		x.toString();
		x.enqueue(-1343689717);
		x.enqueue(1084741732);
		x.toString();
		x.dequeue();
    }
    @Test
    public void test14749() {
		Queue Var = new Queue();
		Var.enqueue(1931406255);
		Var.isFull();
		assertEquals("[1931406255]", Var.toString());
		Var.dequeue();
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test14750() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.toString();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.dequeue();
		variable.enqueue(2063037855);
    }
    @Test
    public void test14751() {
		Queue variable = new Queue();
		variable.toString();
    }
    @Test
    public void test14752() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(819694172);
    }
    @Test
    public void test14753() {
		Queue y = new Queue();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-1046700731);
		y.enqueue(16897029);
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test14754() {
		Queue z = new Queue();
		z.toString();
    }
    @Test
    public void test14755() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.enqueue(1886536381);
		variable.isFull();
		variable.isFull();
		assertFalse(variable.isEmpty());
		variable.toString();
    }
    @Test
    public void test14756() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test14757() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isEmpty();
    }
    @Test
    public void test14758() {
		Queue variable = new Queue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test14759() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-795310149);
		x.dequeue();
		x.isFull();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.enqueue(-14985250);
		assertEquals("[]", x.toString());
		assertFalse(x.isFull());
		x.enqueue(-1062907308);
		x.enqueue(-688526870);
    }
    @Test
    public void test14760() {
		Queue x = new Queue();
		x.enqueue(-215582602);
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.enqueue(873625882);
    }
    @Test
    public void test14761() {
		Queue variable = new Queue();
		variable.isFull();
		variable.dequeue();
		variable.toString();
		variable.isFull();
		variable.toString();
		variable.isEmpty();
    }
    @Test
    public void test14762() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test14763() {
		Queue Var = new Queue();
		Var.isFull();
		Var.enqueue(-1197405850);
    }
    @Test
    public void test14764() {
		Queue z = new Queue();
		z.enqueue(1303218018);
    }
    @Test
    public void test14765() {
		Queue Var = new Queue();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.enqueue(-207027186);
		Var.enqueue(-96445945);
		Var.toString();
		Var.enqueue(451686394);
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test14766() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(-2035160892);
		x.toString();
		assertEquals("[]", x.toString());
		x.toString();
		x.enqueue(-251753555);
		x.toString();
		x.toString();
    }
    @Test
    public void test14767() {
		Queue z = new Queue();
		z.dequeue();
		z.isEmpty();
		z.enqueue(505454883);
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test14768() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(-455874787);
    }
    @Test
    public void test14769() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(-1624210380);
		y.dequeue();
		y.enqueue(1010226328);
		assertFalse(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test14770() {
		Queue y = new Queue();
		y.isFull();
		assertFalse(y.isFull());
		y.enqueue(-1039138791);
		y.enqueue(-212707157);
		y.isEmpty();
		y.isEmpty();
		y.isEmpty();
		y.toString();
		assertTrue(y.isEmpty());
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
    }
    @Test
    public void test14771() {
		Queue variable = new Queue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
    }
    @Test
    public void test14772() {
		Queue z = new Queue();
		z.isFull();
		z.isEmpty();
		assertFalse(z.isFull());
		z.toString();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		z.enqueue(-1051304682);
		z.enqueue(732211649);
    }
    @Test
    public void test14773() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test14774() {
		Queue variable = new Queue();
		variable.enqueue(253472931);
		assertEquals(253472931, variable.dequeue());
		assertTrue(variable.isEmpty());
		variable.enqueue(-7205436);
    }
    @Test
    public void test14775() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.isFull();
    }
    @Test
    public void test14776() {
		Queue z = new Queue();
		z.enqueue(-1978344928);
    }
    @Test
    public void test14777() {
		Queue variable = new Queue();
		variable.enqueue(-2081788956);
		assertTrue(variable.isEmpty());
		variable.toString();
		variable.isEmpty();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1305767560);
		variable.isEmpty();
		variable.enqueue(698217049);
		assertFalse(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test14778() {
		Queue y = new Queue();
		y.isEmpty();
		assertFalse(y.isFull());
		y.toString();
		y.isEmpty();
		y.enqueue(-1359056841);
    }
    @Test
    public void test14779() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.enqueue(-1392066034);
		Var.enqueue(36163746);
		Var.enqueue(1403725637);
		assertFalse(Var.isEmpty());
		Var.isFull();
		Var.enqueue(1726571197);
		Var.isFull();
		Var.enqueue(-927971497);
    }
    @Test
    public void test14780() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.isEmpty();
		variable.isEmpty();
    }
    @Test
    public void test14781() {
		Queue z = new Queue();
		z.toString();
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isEmpty();
		z.enqueue(410168053);
		assertEquals(410168053, z.dequeue());
		assertTrue(z.isEmpty());
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.toString();
		z.enqueue(-780527455);
		z.isEmpty();
		assertTrue(z.isEmpty());
		z.toString();
    }
    @Test
    public void test14782() {
		Queue y = new Queue();
		y.isEmpty();
		assertEquals("[]", y.toString());
		assertEquals(-1, y.dequeue());
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isFull();
		y.isFull();
		y.toString();
		y.enqueue(1912653480);
		y.enqueue(1823972917);
		assertEquals(1912653480, y.dequeue());
		assertEquals("[1823972917]", y.toString());
		y.enqueue(-936261411);
    }
    @Test
    public void test14783() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.toString();
		Var.isEmpty();
		Var.isFull();
		Var.toString();
		Var.dequeue();
		assertFalse(Var.isFull());
		Var.dequeue();
    }
    @Test
    public void test14784() {
		Queue y = new Queue();
		y.toString();
		y.toString();
		y.enqueue(-2066053099);
		y.isEmpty();
		y.isEmpty();
		assertFalse(y.isFull());
		y.enqueue(-1465633533);
		y.enqueue(-230528333);
    }
    @Test
    public void test14785() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.isEmpty();
		variable.isEmpty();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1244436275);
		variable.isFull();
    }
    @Test
    public void test14786() {
		Queue y = new Queue();
		y.enqueue(-776513914);
		assertEquals("[]", y.toString());
		y.isFull();
    }
    @Test
    public void test14787() {
		Queue z = new Queue();
		z.enqueue(-2044150552);
		z.isFull();
		z.enqueue(-540450359);
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test14788() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		assertEquals(-1, x.dequeue());
		x.toString();
		x.toString();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.enqueue(-775528498);
		x.enqueue(2125153783);
		x.toString();
		x.isFull();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test14789() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.isEmpty();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(-103066337);
		z.toString();
		z.enqueue(-82467911);
    }
    @Test
    public void test14790() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.enqueue(-1059388331);
		Var.isEmpty();
		Var.isEmpty();
		Var.dequeue();
		Var.dequeue();
    }
    @Test
    public void test14791() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.dequeue();
		assertTrue(z.isEmpty());
		z.enqueue(-2022032282);
		assertFalse(z.isFull());
		assertTrue(z.isEmpty());
		z.isFull();
		z.enqueue(-1158072788);
		z.toString();
		z.isEmpty();
		assertTrue(z.isEmpty());
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isFull();
    }
    @Test
    public void test14792() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
    }
    @Test
    public void test14793() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test14794() {
		Queue variable = new Queue();
		variable.enqueue(-1445018372);
		variable.isEmpty();
		variable.isEmpty();
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.toString();
		variable.toString();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.toString();
    }
    @Test
    public void test14795() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.dequeue();
		z.enqueue(81325259);
		z.dequeue();
		z.enqueue(-629836225);
		z.isFull();
    }
    @Test
    public void test14796() {
		Queue x = new Queue();
		x.isEmpty();
		x.toString();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test14797() {
		Queue Var = new Queue();
		Var.toString();
    }
    @Test
    public void test14798() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test14799() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test14800() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(1561094021);
		x.enqueue(1216594757);
    }
    @Test
    public void test14801() {
		Queue variable = new Queue();
		variable.isFull();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.isFull();
		variable.enqueue(1450221115);
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-1512080995);
    }
    @Test
    public void test14802() {
		Queue y = new Queue();
		y.toString();
		y.isEmpty();
		y.enqueue(-1006633935);
		y.dequeue();
		y.toString();
		assertTrue(y.isEmpty());
		y.isFull();
    }
    @Test
    public void test14803() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		assertFalse(Var.isFull());
		Var.isFull();
    }
    @Test
    public void test14804() {
		Queue variable = new Queue();
		variable.enqueue(629404706);
    }
    @Test
    public void test14805() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1653974199);
		assertEquals(1653974199, Var.dequeue());
		Var.dequeue();
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.isFull();
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.dequeue();
    }
    @Test
    public void test14806() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(565455498);
		y.isEmpty();
		y.enqueue(1784801100);
		y.isFull();
		assertFalse(y.isEmpty());
		y.dequeue();
		y.isFull();
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test14807() {
		Queue x = new Queue();
		x.enqueue(-2101450300);
		assertEquals("[]", x.toString());
		x.toString();
    }
    @Test
    public void test14808() {
		Queue variable = new Queue();
		variable.toString();
		variable.toString();
		variable.isEmpty();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1794440452);
		variable.dequeue();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test14809() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.toString();
		z.dequeue();
		z.enqueue(1138068049);
		z.dequeue();
		z.isFull();
		z.toString();
    }
    @Test
    public void test14810() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-2085560531);
		assertEquals(-1, z.dequeue());
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test14811() {
		Queue variable = new Queue();
		variable.toString();
		assertEquals("[]", variable.toString());
		variable.toString();
		variable.toString();
		variable.toString();
    }
    @Test
    public void test14812() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		x.enqueue(1168027909);
		x.enqueue(1688319353);
		assertFalse(x.isFull());
		x.dequeue();
    }
    @Test
    public void test14813() {
		Queue z = new Queue();
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(128453412);
		z.toString();
		z.isEmpty();
		z.dequeue();
		z.toString();
		z.dequeue();
		assertEquals("[]", z.toString());
		z.isFull();
    }
    @Test
    public void test14814() {
		Queue variable = new Queue();
		variable.toString();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
		variable.enqueue(-32166109);
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		assertFalse(variable.isFull());
		variable.isEmpty();
    }
    @Test
    public void test14815() {
		Queue Var = new Queue();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test14816() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		y.isFull();
		y.enqueue(506365044);
		y.enqueue(-1589308595);
		assertFalse(y.isEmpty());
		assertFalse(y.isEmpty());
		y.isEmpty();
		y.enqueue(-1636737781);
		assertEquals("[506365044]", y.toString());
		y.isFull();
    }
    @Test
    public void test14817() {
		Queue z = new Queue();
		z.enqueue(-1494681291);
		z.isEmpty();
		z.dequeue();
		z.dequeue();
		z.dequeue();
		z.isFull();
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test14818() {
		Queue z = new Queue();
		z.toString();
		z.dequeue();
		z.dequeue();
		z.dequeue();
		assertEquals("[]", z.toString());
		assertEquals(-1, z.dequeue());
		z.dequeue();
    }
    @Test
    public void test14819() {
		Queue variable = new Queue();
		variable.enqueue(1268351736);
		variable.enqueue(789368636);
		variable.enqueue(-819446772);
		variable.enqueue(391835243);
		variable.isFull();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.enqueue(-342571182);
		variable.dequeue();
    }
    @Test
    public void test14820() {
		Queue x = new Queue();
		x.enqueue(1139881807);
		x.dequeue();
		x.isEmpty();
		assertTrue(x.isEmpty());
		x.isFull();
		x.enqueue(-1399357532);
    }
    @Test
    public void test14821() {
		Queue z = new Queue();
		z.isFull();
		assertEquals("[]", z.toString());
		assertEquals("[]", z.toString());
		z.isFull();
		z.toString();
		z.isEmpty();
		z.toString();
		z.dequeue();
		z.toString();
    }
    @Test
    public void test14822() {
		Queue x = new Queue();
		x.enqueue(1783621042);
		x.isFull();
		assertEquals("[1783621042]", x.toString());
		x.toString();
		assertEquals(1783621042, x.dequeue());
		x.isFull();
    }
    @Test
    public void test14823() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.enqueue(1377748284);
		variable.isFull();
    }
    @Test
    public void test14824() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.isFull();
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test14825() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test14826() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.enqueue(1517366494);
		y.dequeue();
		y.isEmpty();
		y.dequeue();
		y.isFull();
    }
    @Test
    public void test14827() {
		Queue z = new Queue();
		z.enqueue(-1005460476);
		z.enqueue(1365216305);
		z.isFull();
    }
    @Test
    public void test14828() {
		Queue z = new Queue();
		z.dequeue();
    }
    @Test
    public void test14829() {
		Queue y = new Queue();
		y.toString();
		y.isFull();
		y.enqueue(-1993434205);
		assertFalse(y.isFull());
		y.isEmpty();
		y.enqueue(-49188343);
		y.enqueue(-1606009693);
		y.toString();
    }
    @Test
    public void test14830() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(1269608937);
		x.toString();
		x.enqueue(1261722368);
		assertEquals(1269608937, x.dequeue());
		x.enqueue(1472780343);
		x.isFull();
		x.dequeue();
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test14831() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1655195943);
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.toString();
    }
    @Test
    public void test14832() {
		Queue y = new Queue();
		y.toString();
		y.enqueue(931354589);
		assertFalse(y.isEmpty());
		y.isFull();
		assertFalse(y.isFull());
		y.enqueue(1766094210);
    }
    @Test
    public void test14833() {
		Queue Var = new Queue();
		Var.toString();
		assertFalse(Var.isFull());
		Var.enqueue(-1164665465);
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.toString();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.toString();
		assertFalse(Var.isFull());
		assertTrue(Var.isEmpty());
		assertTrue(Var.isEmpty());
		Var.isFull();
    }
    @Test
    public void test14834() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.enqueue(-752610677);
		y.enqueue(610342304);
		y.isFull();
		y.isFull();
    }
    @Test
    public void test14835() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isFull();
		y.dequeue();
		y.enqueue(952616167);
		y.isFull();
    }
    @Test
    public void test14836() {
		Queue z = new Queue();
		z.isEmpty();
    }
    @Test
    public void test14837() {
		Queue y = new Queue();
		y.dequeue();
		y.toString();
		y.isFull();
		y.isFull();
    }
    @Test
    public void test14838() {
		Queue variable = new Queue();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test14839() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
		y.enqueue(-1543407006);
		y.toString();
		y.toString();
		y.isEmpty();
		y.dequeue();
		y.enqueue(-237282918);
    }
    @Test
    public void test14840() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.enqueue(-1271612198);
		assertEquals("[]", x.toString());
		assertTrue(x.isEmpty());
		x.toString();
		x.toString();
		x.isFull();
		x.isFull();
		x.dequeue();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isEmpty();
		assertFalse(x.isFull());
		assertEquals("[]", x.toString());
		x.dequeue();
    }
    @Test
    public void test14841() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		assertFalse(y.isFull());
		y.dequeue();
		y.isEmpty();
		y.toString();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isFull();
    }
    @Test
    public void test14842() {
		Queue z = new Queue();
		z.toString();
		z.enqueue(1066906030);
    }
    @Test
    public void test14843() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.dequeue();
		variable.toString();
		assertTrue(variable.isEmpty());
		variable.enqueue(775800631);
		variable.dequeue();
		assertEquals("[]", variable.toString());
		variable.enqueue(-1357636151);
		variable.toString();
		variable.toString();
    }
    @Test
    public void test14844() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-585686596);
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
		Var.isFull();
		Var.dequeue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test14845() {
		Queue Var = new Queue();
		Var.dequeue();
    }
    @Test
    public void test14846() {
		Queue variable = new Queue();
		variable.enqueue(-1632998108);
		variable.isFull();
    }
    @Test
    public void test14847() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.dequeue();
		variable.toString();
		variable.enqueue(248843776);
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.isEmpty();
		variable.isEmpty();
		variable.isFull();
		variable.isFull();
		variable.enqueue(438466759);
		assertEquals("[248843776, 438466759]", variable.toString());
		variable.dequeue();
    }
    @Test
    public void test14848() {
		Queue z = new Queue();
		z.isEmpty();
		z.isEmpty();
		assertFalse(z.isFull());
		assertEquals(-1, z.dequeue());
		z.isEmpty();
    }
    @Test
    public void test14849() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.isFull();
		variable.isFull();
    }
    @Test
    public void test14850() {
		Queue z = new Queue();
		z.dequeue();
		z.dequeue();
		z.toString();
		z.isEmpty();
		assertEquals("[]", z.toString());
		z.isEmpty();
		z.enqueue(-1940577864);
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test14851() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(1676585531);
		x.isEmpty();
		assertEquals(1676585531, x.dequeue());
		x.enqueue(-1264266220);
    }
    @Test
    public void test14852() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
		variable.toString();
    }
    @Test
    public void test14853() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
		Var.dequeue();
		Var.enqueue(-1992072846);
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isFull();
		Var.isFull();
		Var.enqueue(405599636);
		Var.isEmpty();
		assertEquals("[405599636]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test14854() {
		Queue z = new Queue();
		z.enqueue(-74625954);
		z.isFull();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.toString();
    }
    @Test
    public void test14855() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test14856() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-1980599991);
		Var.toString();
    }
    @Test
    public void test14857() {
		Queue z = new Queue();
		z.isEmpty();
		z.isFull();
		z.toString();
		z.enqueue(-503983877);
		z.dequeue();
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.isFull();
		z.enqueue(-1953081242);
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.enqueue(-2099754318);
    }
    @Test
    public void test14858() {
		Queue x = new Queue();
		x.enqueue(-155012995);
		x.enqueue(1811269491);
		x.isFull();
		x.isFull();
    }
    @Test
    public void test14859() {
		Queue z = new Queue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.dequeue();
		z.isEmpty();
		z.isEmpty();
		z.toString();
		assertEquals("[]", z.toString());
		z.toString();
		z.dequeue();
    }
    @Test
    public void test14860() {
		Queue variable = new Queue();
		variable.toString();
		variable.isFull();
    }
    @Test
    public void test14861() {
		Queue y = new Queue();
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.toString();
		y.dequeue();
		assertTrue(y.isEmpty());
		y.enqueue(964451078);
		assertEquals(964451078, y.dequeue());
		assertTrue(y.isEmpty());
		y.isEmpty();
    }
    @Test
    public void test14862() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.toString();
		z.toString();
		z.enqueue(-1784808685);
		z.dequeue();
		assertEquals("[]", z.toString());
		z.enqueue(697022438);
		z.enqueue(-1550488872);
    }
    @Test
    public void test14863() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.toString();
		x.isFull();
    }
    @Test
    public void test14864() {
		Queue x = new Queue();
		assertEquals("[]", x.toString());
		x.enqueue(395016606);
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
		x.toString();
		x.isFull();
		assertEquals(395016606, x.dequeue());
		x.isFull();
		assertEquals("[]", x.toString());
		x.toString();
		x.dequeue();
    }
    @Test
    public void test14865() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.enqueue(-783712310);
		Var.toString();
    }
    @Test
    public void test14866() {
		Queue y = new Queue();
		y.isFull();
		y.isEmpty();
		y.isEmpty();
		y.enqueue(-1037665758);
    }
    @Test
    public void test14867() {
		Queue Var = new Queue();
		Var.enqueue(-159134923);
		Var.isEmpty();
		Var.isFull();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.toString();
		Var.dequeue();
		Var.isFull();
		Var.enqueue(-1928833518);
    }
    @Test
    public void test14868() {
		Queue x = new Queue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.toString();
		x.enqueue(611902320);
		x.isEmpty();
		x.toString();
		x.isFull();
		x.isFull();
    }
    @Test
    public void test14869() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.isEmpty();
		assertEquals(-1, y.dequeue());
		y.toString();
		assertEquals(-1, y.dequeue());
		assertEquals("[]", y.toString());
		assertFalse(y.isFull());
		y.toString();
		y.dequeue();
		y.isFull();
		y.enqueue(439923304);
		y.toString();
		y.isFull();
    }
    @Test
    public void test14870() {
		Queue z = new Queue();
		z.toString();
		z.isEmpty();
		z.dequeue();
		assertTrue(z.isEmpty());
		z.toString();
		z.isEmpty();
		z.toString();
    }
    @Test
    public void test14871() {
		Queue variable = new Queue();
		variable.isFull();
		variable.enqueue(-153510995);
		variable.dequeue();
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.isFull();
		variable.isEmpty();
		variable.isFull();
		assertFalse(variable.isFull());
		variable.toString();
    }
    @Test
    public void test14872() {
		Queue variable = new Queue();
		variable.enqueue(-1128014495);
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.enqueue(-1368574075);
		variable.enqueue(-408814457);
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		assertEquals(-1, variable.dequeue());
		assertEquals("[]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test14873() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test14874() {
		Queue variable = new Queue();
		assertEquals("[]", variable.toString());
		variable.isFull();
		variable.dequeue();
		variable.isFull();
		variable.toString();
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.toString();
		variable.enqueue(1687954215);
    }
    @Test
    public void test14875() {
		Queue Var = new Queue();
		Var.toString();
		Var.isFull();
		Var.dequeue();
    }
    @Test
    public void test14876() {
		Queue x = new Queue();
		x.isFull();
		assertEquals("[]", x.toString());
		x.enqueue(-1079250447);
		x.toString();
		x.enqueue(797369905);
		x.dequeue();
    }
    @Test
    public void test14877() {
		Queue y = new Queue();
		y.toString();
		y.dequeue();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.enqueue(2085084959);
		y.isEmpty();
		assertFalse(y.isFull());
		y.toString();
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.isEmpty();
    }
    @Test
    public void test14878() {
		Queue x = new Queue();
		x.enqueue(-2854846);
		x.isFull();
		x.toString();
		x.dequeue();
		assertEquals("[]", x.toString());
		x.dequeue();
		x.isFull();
		x.dequeue();
    }
    @Test
    public void test14879() {
		Queue variable = new Queue();
		variable.enqueue(-1828148919);
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
		variable.dequeue();
		variable.toString();
    }
    @Test
    public void test14880() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		assertTrue(variable.isEmpty());
		variable.dequeue();
    }
    @Test
    public void test14881() {
		Queue y = new Queue();
		y.enqueue(-1357926505);
		y.toString();
		y.enqueue(895667668);
		y.enqueue(174578868);
		assertEquals(895667668, y.dequeue());
		y.dequeue();
		y.isEmpty();
    }
    @Test
    public void test14882() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test14883() {
		Queue z = new Queue();
		z.enqueue(-2063123004);
		z.dequeue();
		z.isEmpty();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.toString();
		z.isEmpty();
    }
    @Test
    public void test14884() {
		Queue y = new Queue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.enqueue(1909975755);
		assertFalse(y.isEmpty());
		y.toString();
		y.isEmpty();
		assertEquals("[1909975755]", y.toString());
		y.isEmpty();
		assertEquals("[1909975755]", y.toString());
		assertEquals("[1909975755]", y.toString());
		y.toString();
		assertFalse(y.isEmpty());
		y.toString();
		y.isEmpty();
    }
    @Test
    public void test14885() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.enqueue(1265503462);
		Var.toString();
		Var.dequeue();
    }
    @Test
    public void test14886() {
		Queue y = new Queue();
		y.enqueue(1318934010);
		y.isEmpty();
		y.toString();
		assertEquals("[1318934010]", y.toString());
		y.dequeue();
		y.enqueue(-1343758910);
		assertEquals("[]", y.toString());
		y.enqueue(-893514050);
		assertEquals("[]", y.toString());
		y.isEmpty();
		y.isEmpty();
    }
    @Test
    public void test14887() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(1697259272);
    }
    @Test
    public void test14888() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.toString();
		assertEquals(-1, z.dequeue());
		assertTrue(z.isEmpty());
		assertFalse(z.isFull());
		assertFalse(z.isFull());
		z.toString();
		z.isFull();
    }
    @Test
    public void test14889() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.dequeue();
		variable.toString();
		assertEquals(-1, variable.dequeue());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1604698020);
		variable.enqueue(1138240494);
		variable.isFull();
		variable.dequeue();
		variable.enqueue(1060844162);
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test14890() {
		Queue x = new Queue();
		x.enqueue(-468200352);
		x.toString();
		x.toString();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.enqueue(-1617736491);
		x.isEmpty();
		assertEquals("[]", x.toString());
		x.toString();
    }
    @Test
    public void test14891() {
		Queue x = new Queue();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isFull();
    }
    @Test
    public void test14892() {
		Queue variable = new Queue();
		variable.enqueue(-2008563338);
		variable.isFull();
		variable.isFull();
		variable.enqueue(-556875843);
		variable.isEmpty();
		variable.enqueue(-515249401);
		variable.isEmpty();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.isEmpty();
    }
    @Test
    public void test14893() {
		Queue z = new Queue();
		z.enqueue(1003985258);
		z.isFull();
		z.toString();
    }
    @Test
    public void test14894() {
		Queue Var = new Queue();
		Var.toString();
		assertTrue(Var.isEmpty());
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test14895() {
		Queue variable = new Queue();
		variable.isEmpty();
		variable.toString();
		variable.enqueue(-1162484128);
		variable.dequeue();
		variable.enqueue(-395621523);
    }
    @Test
    public void test14896() {
		Queue variable = new Queue();
		variable.enqueue(1646982951);
		variable.enqueue(-1924045267);
		variable.isFull();
		assertFalse(variable.isFull());
		variable.isFull();
		assertEquals("[1646982951]", variable.toString());
		assertFalse(variable.isFull());
		variable.dequeue();
		variable.enqueue(-1452460243);
		variable.isEmpty();
		variable.enqueue(1394368291);
    }
    @Test
    public void test14897() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(-1974169844);
		z.isFull();
		z.isFull();
		z.toString();
		z.toString();
    }
    @Test
    public void test14898() {
		Queue x = new Queue();
		x.isEmpty();
		x.isEmpty();
		assertFalse(x.isFull());
		x.isEmpty();
		x.dequeue();
		x.isEmpty();
		x.enqueue(-132604463);
		x.enqueue(1073157788);
		x.dequeue();
		x.toString();
		x.isFull();
    }
    @Test
    public void test14899() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(1272753565);
		Var.toString();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.enqueue(-409259043);
		assertEquals("[1272753565]", Var.toString());
		Var.isFull();
		assertEquals(1272753565, Var.dequeue());
		Var.dequeue();
    }
    @Test
    public void test14900() {
		Queue Var = new Queue();
		Var.isFull();
		assertFalse(Var.isFull());
		Var.isFull();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isEmpty();
		Var.enqueue(-1445467549);
		Var.toString();
    }
    @Test
    public void test14901() {
		Queue z = new Queue();
		z.toString();
		z.toString();
    }
    @Test
    public void test14902() {
		Queue Var = new Queue();
		Var.isFull();
		Var.dequeue();
		Var.dequeue();
		Var.isFull();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.dequeue();
		Var.enqueue(-738546168);
    }
    @Test
    public void test14903() {
		Queue x = new Queue();
		x.dequeue();
		x.dequeue();
		x.enqueue(220523898);
		x.isEmpty();
		x.isFull();
		x.isFull();
		x.isFull();
		x.enqueue(1645543005);
		x.enqueue(1872261522);
    }
    @Test
    public void test14904() {
		Queue z = new Queue();
		z.isEmpty();
		z.dequeue();
		z.toString();
		assertFalse(z.isFull());
		z.isFull();
		z.dequeue();
    }
    @Test
    public void test14905() {
		Queue x = new Queue();
		x.isEmpty();
		x.enqueue(-644477474);
		x.enqueue(-387082990);
		x.isEmpty();
		x.dequeue();
		x.enqueue(-1041046380);
		x.isFull();
		x.enqueue(941742189);
    }
    @Test
    public void test14906() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.toString();
		y.isFull();
		y.isEmpty();
		y.dequeue();
		assertEquals(-1, y.dequeue());
		y.toString();
		y.isFull();
		y.isFull();
		y.isFull();
		y.enqueue(-1910763753);
    }
    @Test
    public void test14907() {
		Queue y = new Queue();
		y.enqueue(-2140047581);
		y.dequeue();
    }
    @Test
    public void test14908() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(388894980);
    }
    @Test
    public void test14909() {
		Queue y = new Queue();
		y.isEmpty();
		y.enqueue(14220632);
		y.enqueue(-1742074395);
		y.dequeue();
    }
    @Test
    public void test14910() {
		Queue Var = new Queue();
		Var.enqueue(315460756);
		Var.toString();
		Var.isEmpty();
		Var.toString();
    }
    @Test
    public void test14911() {
		Queue Var = new Queue();
		Var.enqueue(1457976659);
		Var.toString();
		assertFalse(Var.isFull());
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(1581112098);
    }
    @Test
    public void test14912() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		assertEquals("[]", Var.toString());
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertTrue(Var.isEmpty());
		Var.enqueue(554524262);
		Var.isEmpty();
		Var.toString();
		assertEquals("[554524262]", Var.toString());
		Var.enqueue(1312508789);
		Var.enqueue(1708907073);
    }
    @Test
    public void test14913() {
		Queue Var = new Queue();
		Var.enqueue(576555258);
		assertFalse(Var.isFull());
		assertFalse(Var.isEmpty());
		Var.enqueue(-92828779);
		assertEquals("[576555258]", Var.toString());
		Var.toString();
		assertFalse(Var.isFull());
		Var.isFull();
		assertFalse(Var.isEmpty());
		assertEquals(576555258, Var.dequeue());
		Var.isFull();
    }
    @Test
    public void test14914() {
		Queue variable = new Queue();
		variable.toString();
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		assertFalse(variable.isFull());
		variable.enqueue(1305904285);
		variable.isEmpty();
		variable.dequeue();
		variable.dequeue();
		variable.dequeue();
		variable.enqueue(-167415846);
    }
    @Test
    public void test14915() {
		Queue x = new Queue();
		x.isEmpty();
    }
    @Test
    public void test14916() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.dequeue();
		Var.enqueue(1688428332);
    }
    @Test
    public void test14917() {
		Queue y = new Queue();
		y.dequeue();
    }
    @Test
    public void test14918() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.isFull();
		assertEquals("[]", x.toString());
		x.enqueue(369030144);
		x.dequeue();
    }
    @Test
    public void test14919() {
		Queue x = new Queue();
		assertFalse(x.isFull());
		x.dequeue();
		x.toString();
		x.dequeue();
		x.isFull();
		x.enqueue(-1166196320);
    }
    @Test
    public void test14920() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isEmpty();
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.isEmpty();
		Var.toString();
		Var.toString();
		Var.isFull();
    }
    @Test
    public void test14921() {
		Queue x = new Queue();
		x.isFull();
		x.enqueue(1084491825);
		x.isEmpty();
		assertFalse(x.isEmpty());
		x.dequeue();
		assertTrue(x.isEmpty());
		assertTrue(x.isEmpty());
		x.isFull();
    }
    @Test
    public void test14922() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.isEmpty();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test14923() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.isEmpty();
    }
    @Test
    public void test14924() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		Var.enqueue(598138829);
    }
    @Test
    public void test14925() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.toString();
		Var.dequeue();
		Var.toString();
    }
    @Test
    public void test14926() {
		Queue y = new Queue();
		y.isEmpty();
		y.isFull();
		y.enqueue(840404527);
		assertFalse(y.isEmpty());
		y.dequeue();
		assertFalse(y.isFull());
		y.enqueue(571645617);
		assertEquals(571645617, y.dequeue());
		y.enqueue(1750977182);
		y.toString();
    }
    @Test
    public void test14927() {
		Queue variable = new Queue();
		variable.enqueue(311946397);
		assertEquals(311946397, variable.dequeue());
		assertTrue(variable.isEmpty());
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.isFull();
		variable.dequeue();
		variable.enqueue(-1854060096);
		assertFalse(variable.isFull());
		variable.dequeue();
		assertFalse(variable.isFull());
		variable.dequeue();
    }
    @Test
    public void test14928() {
		Queue z = new Queue();
		z.enqueue(-608281008);
    }
    @Test
    public void test14929() {
		Queue Var = new Queue();
		Var.enqueue(-1675936240);
		assertTrue(Var.isEmpty());
		assertEquals(-1, Var.dequeue());
		Var.isFull();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.dequeue();
		Var.enqueue(842192611);
		Var.toString();
		Var.enqueue(-1363276623);
		assertEquals(842192611, Var.dequeue());
		Var.dequeue();
		assertEquals("[]", Var.toString());
		Var.enqueue(1471377711);
    }
    @Test
    public void test14930() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-488740536);
		Var.isEmpty();
		Var.isFull();
    }
    @Test
    public void test14931() {
		Queue y = new Queue();
		y.isFull();
		assertTrue(y.isEmpty());
		assertFalse(y.isFull());
		assertEquals(-1, y.dequeue());
		y.isFull();
		assertTrue(y.isEmpty());
		y.enqueue(-1811577415);
    }
    @Test
    public void test14932() {
		Queue variable = new Queue();
		variable.enqueue(-332178499);
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.enqueue(1775357404);
		variable.toString();
		variable.isEmpty();
		variable.enqueue(1784900768);
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test14933() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertEquals("[]", x.toString());
		x.enqueue(440584217);
		x.enqueue(-566459908);
		assertFalse(x.isEmpty());
		x.isFull();
		x.isFull();
		x.dequeue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.enqueue(805299967);
    }
    @Test
    public void test14934() {
		Queue y = new Queue();
		y.enqueue(1499381386);
		y.dequeue();
		y.isFull();
		y.enqueue(-1989290239);
		y.enqueue(-1517527534);
		y.enqueue(800399068);
		assertFalse(y.isFull());
		y.enqueue(2081249593);
		assertEquals(800399068, y.dequeue());
		y.enqueue(558456336);
		y.dequeue();
    }
    @Test
    public void test14935() {
		Queue x = new Queue();
		x.isEmpty();
		x.dequeue();
		x.dequeue();
		x.enqueue(501232622);
		assertEquals(501232622, x.dequeue());
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.enqueue(-1834920917);
		x.isFull();
    }
    @Test
    public void test14936() {
		Queue y = new Queue();
		y.isFull();
    }
    @Test
    public void test14937() {
		Queue z = new Queue();
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.enqueue(-1440467505);
		z.enqueue(-66137823);
    }
    @Test
    public void test14938() {
		Queue x = new Queue();
		x.toString();
		x.toString();
		assertEquals("[]", x.toString());
		x.isFull();
		x.enqueue(-1386814744);
		x.isEmpty();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isFull();
		assertEquals(-1, x.dequeue());
		x.enqueue(1325449411);
		x.isFull();
    }
    @Test
    public void test14939() {
		Queue variable = new Queue();
		variable.enqueue(1186222993);
		variable.dequeue();
		variable.enqueue(803735621);
		variable.dequeue();
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
		assertFalse(variable.isFull());
		assertEquals("[]", variable.toString());
		variable.enqueue(1668528481);
		variable.enqueue(1758458796);
		variable.isEmpty();
    }
    @Test
    public void test14940() {
		Queue x = new Queue();
		x.toString();
		assertFalse(x.isFull());
		assertFalse(x.isFull());
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		x.enqueue(1827767108);
		x.enqueue(-559350978);
		x.toString();
    }
    @Test
    public void test14941() {
		Queue z = new Queue();
		z.isFull();
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.enqueue(-354203171);
    }
    @Test
    public void test14942() {
		Queue Var = new Queue();
		assertEquals(-1, Var.dequeue());
		assertFalse(Var.isFull());
		Var.isEmpty();
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test14943() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.toString();
		variable.toString();
		assertTrue(variable.isEmpty());
		assertEquals(-1, variable.dequeue());
		variable.isEmpty();
		variable.dequeue();
		variable.enqueue(-65347747);
		variable.isFull();
		assertFalse(variable.isFull());
		variable.enqueue(493930887);
    }
    @Test
    public void test14944() {
		Queue z = new Queue();
		z.enqueue(-1365048569);
		z.isEmpty();
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.enqueue(1710688809);
		z.enqueue(1167634694);
    }
    @Test
    public void test14945() {
		Queue x = new Queue();
		x.dequeue();
		x.isFull();
		x.isEmpty();
		x.toString();
		assertTrue(x.isEmpty());
		x.isFull();
		x.isFull();
		x.isEmpty();
		x.enqueue(2050811433);
		assertFalse(x.isFull());
		x.enqueue(1301885592);
    }
    @Test
    public void test14946() {
		Queue y = new Queue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.isFull();
		y.isEmpty();
		assertFalse(y.isFull());
		y.isFull();
		y.isEmpty();
    }
    @Test
    public void test14947() {
		Queue x = new Queue();
		x.toString();
		assertEquals(-1, x.dequeue());
		x.isEmpty();
		x.isFull();
		x.enqueue(900483452);
		x.isFull();
		x.dequeue();
		x.toString();
    }
    @Test
    public void test14948() {
		Queue z = new Queue();
		z.toString();
		z.isFull();
		z.dequeue();
		z.toString();
		z.enqueue(146049969);
		z.toString();
		assertFalse(z.isFull());
		z.isEmpty();
		assertFalse(z.isFull());
		z.enqueue(178374444);
		assertFalse(z.isEmpty());
		z.dequeue();
    }
    @Test
    public void test14949() {
		Queue z = new Queue();
		assertEquals(-1, z.dequeue());
		z.enqueue(-341132659);
		z.isEmpty();
    }
    @Test
    public void test14950() {
		Queue y = new Queue();
		y.enqueue(-1019864473);
		assertEquals(-1, y.dequeue());
		y.dequeue();
		y.dequeue();
		assertEquals("[]", y.toString());
		y.toString();
		y.toString();
		y.enqueue(-266307641);
		assertEquals(-1, y.dequeue());
		y.isFull();
    }
    @Test
    public void test14951() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.enqueue(1399749127);
		x.dequeue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.toString();
    }
    @Test
    public void test14952() {
		Queue Var = new Queue();
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.dequeue();
		Var.toString();
		Var.isFull();
		Var.isFull();
		Var.toString();
		Var.toString();
		Var.enqueue(-1773511664);
		Var.dequeue();
    }
    @Test
    public void test14953() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(670778020);
		variable.dequeue();
    }
    @Test
    public void test14954() {
		Queue x = new Queue();
		x.dequeue();
		assertTrue(x.isEmpty());
		assertEquals(-1, x.dequeue());
		assertTrue(x.isEmpty());
		x.isEmpty();
		x.isFull();
		x.toString();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isFull();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		assertEquals("[]", x.toString());
		x.isFull();
    }
    @Test
    public void test14955() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
		z.enqueue(1825062743);
		z.isEmpty();
		z.isEmpty();
		z.isEmpty();
		assertFalse(z.isEmpty());
		z.enqueue(-535259749);
    }
    @Test
    public void test14956() {
		Queue x = new Queue();
		x.isEmpty();
		assertEquals(-1, x.dequeue());
		x.toString();
		x.toString();
		x.dequeue();
		assertEquals(-1, x.dequeue());
		x.enqueue(2063454774);
		x.isEmpty();
		x.enqueue(-1355179270);
		x.isEmpty();
		x.isFull();
    }
    @Test
    public void test14957() {
		Queue Var = new Queue();
		Var.toString();
		Var.toString();
		Var.enqueue(1847898028);
    }
    @Test
    public void test14958() {
		Queue x = new Queue();
		assertEquals(-1, x.dequeue());
		x.dequeue();
		x.dequeue();
		x.toString();
		assertEquals("[]", x.toString());
		x.isEmpty();
		x.isEmpty();
		x.dequeue();
		x.enqueue(359346081);
		assertFalse(x.isFull());
		x.enqueue(-1994682597);
		assertFalse(x.isEmpty());
		x.isEmpty();
    }
    @Test
    public void test14959() {
		Queue z = new Queue();
		z.isEmpty();
		z.enqueue(1824809194);
		z.isFull();
		assertFalse(z.isEmpty());
		assertEquals("[1824809194]", z.toString());
		z.toString();
    }
    @Test
    public void test14960() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(1121279944);
		variable.toString();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		variable.isFull();
		variable.dequeue();
    }
    @Test
    public void test14961() {
		Queue Var = new Queue();
		Var.toString();
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		assertFalse(Var.isFull());
		assertEquals("[]", Var.toString());
		Var.toString();
		Var.enqueue(628713228);
		Var.isEmpty();
		Var.toString();
		assertEquals("[628713228]", Var.toString());
		Var.isEmpty();
		Var.enqueue(-1836860602);
    }
    @Test
    public void test14962() {
		Queue variable = new Queue();
		variable.isEmpty();
		assertFalse(variable.isFull());
		variable.enqueue(304330492);
		variable.isEmpty();
		variable.enqueue(-700196957);
		variable.isEmpty();
		variable.toString();
		variable.dequeue();
    }
    @Test
    public void test14963() {
		Queue Var = new Queue();
		assertFalse(Var.isFull());
		Var.enqueue(1551440640);
		Var.isFull();
		Var.toString();
		assertFalse(Var.isEmpty());
		Var.enqueue(1547921534);
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test14964() {
		Queue x = new Queue();
		x.enqueue(622218268);
		x.isFull();
		x.toString();
		assertFalse(x.isEmpty());
		assertEquals(622218268, x.dequeue());
		assertFalse(x.isFull());
		assertEquals(-1, x.dequeue());
		assertEquals(-1, x.dequeue());
		x.enqueue(-778466909);
		x.toString();
		x.isEmpty();
		x.isEmpty();
		x.isEmpty();
    }
    @Test
    public void test14965() {
		Queue x = new Queue();
		x.dequeue();
    }
    @Test
    public void test14966() {
		Queue x = new Queue();
		x.toString();
		x.dequeue();
		x.isEmpty();
		assertFalse(x.isFull());
		x.enqueue(341766689);
		x.dequeue();
		x.enqueue(250349350);
		x.enqueue(-1312328293);
    }
    @Test
    public void test14967() {
		Queue x = new Queue();
		x.toString();
		x.enqueue(919459326);
    }
    @Test
    public void test14968() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.isEmpty();
		Var.isEmpty();
    }
    @Test
    public void test14969() {
		Queue z = new Queue();
		assertTrue(z.isEmpty());
		z.isEmpty();
    }
    @Test
    public void test14970() {
		Queue Var = new Queue();
		Var.enqueue(-777332080);
		assertEquals("[]", Var.toString());
		Var.dequeue();
		assertEquals(-1, Var.dequeue());
		Var.isEmpty();
		Var.dequeue();
		Var.enqueue(-1391521268);
		Var.enqueue(-496177863);
		Var.toString();
		assertFalse(Var.isFull());
		Var.toString();
    }
    @Test
    public void test14971() {
		Queue y = new Queue();
		y.isFull();
		y.isFull();
		y.toString();
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		y.isFull();
    }
    @Test
    public void test14972() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.isEmpty();
		z.isEmpty();
		z.dequeue();
    }
    @Test
    public void test14973() {
		Queue Var = new Queue();
		Var.toString();
		Var.enqueue(811228452);
		assertFalse(Var.isFull());
		Var.toString();
		Var.isEmpty();
		assertEquals(811228452, Var.dequeue());
		assertFalse(Var.isFull());
		assertFalse(Var.isFull());
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test14974() {
		Queue z = new Queue();
		z.dequeue();
		z.enqueue(-2029502820);
    }
    @Test
    public void test14975() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.isFull();
		assertEquals("[]", variable.toString());
		variable.enqueue(-559247005);
		variable.dequeue();
    }
    @Test
    public void test14976() {
		Queue Var = new Queue();
		Var.enqueue(1272866980);
		Var.enqueue(1546974069);
		Var.dequeue();
		assertEquals(1546974069, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1321010053);
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.enqueue(-1456095265);
		Var.toString();
		assertEquals(-1, Var.dequeue());
		Var.toString();
    }
    @Test
    public void test14977() {
		Queue Var = new Queue();
		assertEquals("[]", Var.toString());
		assertTrue(Var.isEmpty());
		assertEquals("[]", Var.toString());
		Var.dequeue();
    }
    @Test
    public void test14978() {
		Queue z = new Queue();
		assertFalse(z.isFull());
		z.dequeue();
		z.dequeue();
		assertEquals(-1, z.dequeue());
		z.toString();
		assertTrue(z.isEmpty());
		z.toString();
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test14979() {
		Queue x = new Queue();
		x.toString();
		x.toString();
    }
    @Test
    public void test14980() {
		Queue y = new Queue();
		y.isFull();
		assertEquals("[]", y.toString());
		y.toString();
		y.dequeue();
		y.dequeue();
		y.enqueue(-394448286);
		assertTrue(y.isEmpty());
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.isEmpty();
		assertEquals("[]", y.toString());
		y.toString();
		y.isFull();
		y.enqueue(-1545753912);
    }
    @Test
    public void test14981() {
		Queue z = new Queue();
		z.enqueue(-967699739);
		z.isFull();
		assertEquals(-1, z.dequeue());
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertFalse(z.isFull());
		assertEquals("[]", z.toString());
		z.dequeue();
		z.toString();
    }
    @Test
    public void test14982() {
		Queue Var = new Queue();
		Var.isFull();
		Var.isFull();
		Var.enqueue(-1350116717);
		Var.enqueue(1595546498);
		Var.dequeue();
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.toString();
		Var.isFull();
		Var.isFull();
    }
    @Test
    public void test14983() {
		Queue y = new Queue();
		y.enqueue(692934281);
		y.enqueue(1587001190);
		y.isEmpty();
		y.isEmpty();
		assertEquals("[692934281, 1587001190]", y.toString());
		assertFalse(y.isEmpty());
		y.enqueue(1449543574);
    }
    @Test
    public void test14984() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-466970219);
		assertTrue(variable.isEmpty());
		variable.isEmpty();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(610240284);
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.enqueue(1019034488);
		variable.isEmpty();
    }
    @Test
    public void test14985() {
		Queue y = new Queue();
		assertTrue(y.isEmpty());
		y.dequeue();
		y.isFull();
		y.enqueue(-1516942271);
		assertFalse(y.isFull());
		assertFalse(y.isFull());
		y.isFull();
		y.toString();
		assertEquals(-1, y.dequeue());
		assertEquals(-1, y.dequeue());
		y.dequeue();
		assertFalse(y.isFull());
		y.toString();
		y.toString();
    }
    @Test
    public void test14986() {
		Queue Var = new Queue();
		Var.enqueue(899813267);
		Var.isEmpty();
		Var.isEmpty();
		Var.enqueue(898620255);
		Var.dequeue();
		assertFalse(Var.isEmpty());
		assertFalse(Var.isEmpty());
		Var.isFull();
		Var.toString();
    }
    @Test
    public void test14987() {
		Queue Var = new Queue();
		Var.dequeue();
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		assertEquals("[]", Var.toString());
		Var.enqueue(-1757712885);
		assertFalse(Var.isFull());
		Var.isFull();
		Var.enqueue(1651578962);
		assertFalse(Var.isFull());
		Var.isFull();
		Var.dequeue();
		Var.isFull();
    }
    @Test
    public void test14988() {
		Queue y = new Queue();
		y.isEmpty();
    }
    @Test
    public void test14989() {
		Queue Var = new Queue();
		Var.isFull();
		assertEquals("[]", Var.toString());
		Var.enqueue(1793646649);
    }
    @Test
    public void test14990() {
		Queue Var = new Queue();
		Var.toString();
		Var.dequeue();
		Var.dequeue();
		Var.isEmpty();
		Var.enqueue(171915169);
    }
    @Test
    public void test14991() {
		Queue variable = new Queue();
		assertTrue(variable.isEmpty());
		variable.enqueue(428396824);
		variable.toString();
		variable.dequeue();
		variable.dequeue();
		variable.isEmpty();
    }
    @Test
    public void test14992() {
		Queue z = new Queue();
		z.enqueue(435982386);
		z.isEmpty();
		z.dequeue();
		z.enqueue(-1662556171);
		assertEquals(-1, z.dequeue());
		z.enqueue(1352230262);
		z.isEmpty();
		z.isEmpty();
    }
    @Test
    public void test14993() {
		Queue x = new Queue();
		x.dequeue();
		x.enqueue(931922368);
		x.toString();
    }
    @Test
    public void test14994() {
		Queue z = new Queue();
		z.toString();
		z.toString();
		z.toString();
		z.isEmpty();
		z.isFull();
		assertEquals(-1, z.dequeue());
		assertEquals(-1, z.dequeue());
		z.isFull();
		z.isEmpty();
    }
    @Test
    public void test14995() {
		Queue Var = new Queue();
		Var.isFull();
		Var.toString();
		Var.enqueue(-2003078985);
		Var.isEmpty();
		assertEquals(-1, Var.dequeue());
		Var.dequeue();
		Var.enqueue(-1876499459);
    }
    @Test
    public void test14996() {
		Queue variable = new Queue();
		variable.dequeue();
		variable.enqueue(-424553668);
		assertFalse(variable.isFull());
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.toString();
		assertEquals(-1, variable.dequeue());
		variable.dequeue();
		assertEquals(-1, variable.dequeue());
		variable.enqueue(-1173276466);
		variable.enqueue(-42279953);
    }
    @Test
    public void test14997() {
		Queue y = new Queue();
		y.dequeue();
		y.enqueue(-2097358067);
		y.toString();
    }
    @Test
    public void test14998() {
		Queue y = new Queue();
		y.dequeue();
		assertFalse(y.isFull());
		y.dequeue();
		y.isFull();
		y.enqueue(-1302218694);
		y.isEmpty();
    }
    @Test
    public void test14999() {
		Queue variable = new Queue();
		variable.dequeue();
		assertTrue(variable.isEmpty());
		assertTrue(variable.isEmpty());
		variable.enqueue(-1621821915);
		variable.isFull();
		variable.enqueue(12821957);
		variable.enqueue(-1236834200);
		variable.enqueue(-1400839374);
		assertFalse(variable.isEmpty());
		variable.dequeue();
		variable.isFull();
    }
}

